
STM32G0B1RE_TOUCHGFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ddc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f98  08014e98  08014e98  00024e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  08016e30  08016e30  00026e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  08016fd8  08016fd8  00026fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000010  08016ff0  08016ff0  00026ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08017000  08017000  00083490  2**0
                  CONTENTS
  7 .ARM          00000008  08017000  08017000  00027000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08017008  08017008  00083490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   0000001c  08017008  08017008  00027008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000010  08017024  08017024  00027024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000088  20000000  08017034  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          000029b0  20000088  080170bc  00030088  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  20002a38  080170bc  00032a38  2**0
                  ALLOC
 14 .ARM.attributes 0000002c  00000000  00000000  00083490  2**0
                  CONTENTS, READONLY
 15 ExtFlashSection 00043490  90000000  90000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .comment      000000c2  00000000  00000000  000834bc  2**0
                  CONTENTS, READONLY
 17 .debug_info   00073295  00000000  00000000  0008357e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000e99d  00000000  00000000  000f6813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002cd0  00000000  00000000  001051b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 0000215f  00000000  00000000  00107e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00025e63  00000000  00000000  00109fdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0003684c  00000000  00000000  0012fe42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000dce91  00000000  00000000  0016668e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_frame  0000ab70  00000000  00000000  00243520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 00000050  00000000  00000000  0024e090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000088 	.word	0x20000088
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08014e80 	.word	0x08014e80

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000008c 	.word	0x2000008c
 8000100:	08014e80 	.word	0x08014e80

08000104 <__gnu_thumb1_case_sqi>:
 8000104:	b402      	push	{r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0049      	lsls	r1, r1, #1
 800010c:	5609      	ldrsb	r1, [r1, r0]
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	448e      	add	lr, r1
 8000112:	bc02      	pop	{r1}
 8000114:	4770      	bx	lr
 8000116:	46c0      	nop			; (mov r8, r8)

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cfrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0008      	movs	r0, r1
 8000430:	4661      	mov	r1, ip
 8000432:	e7ff      	b.n	8000434 <__aeabi_cfcmpeq>

08000434 <__aeabi_cfcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f000 fc45 	bl	8000cc4 <__lesf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cfcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_fcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 fbd1 	bl	8000bec <__eqsf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_fcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 fc37 	bl	8000cc4 <__lesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_fcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_fcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 fc2d 	bl	8000cc4 <__lesf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_fcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_fcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f000 fbdd 	bl	8000c38 <__gesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_fcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_fcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f000 fbd3 	bl	8000c38 <__gesf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_fcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_uldivmod>:
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d111      	bne.n	80004c8 <__aeabi_uldivmod+0x28>
 80004a4:	2a00      	cmp	r2, #0
 80004a6:	d10f      	bne.n	80004c8 <__aeabi_uldivmod+0x28>
 80004a8:	2900      	cmp	r1, #0
 80004aa:	d100      	bne.n	80004ae <__aeabi_uldivmod+0xe>
 80004ac:	2800      	cmp	r0, #0
 80004ae:	d002      	beq.n	80004b6 <__aeabi_uldivmod+0x16>
 80004b0:	2100      	movs	r1, #0
 80004b2:	43c9      	mvns	r1, r1
 80004b4:	0008      	movs	r0, r1
 80004b6:	b407      	push	{r0, r1, r2}
 80004b8:	4802      	ldr	r0, [pc, #8]	; (80004c4 <__aeabi_uldivmod+0x24>)
 80004ba:	a102      	add	r1, pc, #8	; (adr r1, 80004c4 <__aeabi_uldivmod+0x24>)
 80004bc:	1840      	adds	r0, r0, r1
 80004be:	9002      	str	r0, [sp, #8]
 80004c0:	bd03      	pop	{r0, r1, pc}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	ffffff65 	.word	0xffffff65
 80004c8:	b403      	push	{r0, r1}
 80004ca:	4668      	mov	r0, sp
 80004cc:	b501      	push	{r0, lr}
 80004ce:	9802      	ldr	r0, [sp, #8]
 80004d0:	f000 f806 	bl	80004e0 <__udivmoddi4>
 80004d4:	9b01      	ldr	r3, [sp, #4]
 80004d6:	469e      	mov	lr, r3
 80004d8:	b002      	add	sp, #8
 80004da:	bc0c      	pop	{r2, r3}
 80004dc:	4770      	bx	lr
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__udivmoddi4>:
 80004e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e2:	4657      	mov	r7, sl
 80004e4:	464e      	mov	r6, r9
 80004e6:	4645      	mov	r5, r8
 80004e8:	46de      	mov	lr, fp
 80004ea:	b5e0      	push	{r5, r6, r7, lr}
 80004ec:	0004      	movs	r4, r0
 80004ee:	000d      	movs	r5, r1
 80004f0:	4692      	mov	sl, r2
 80004f2:	4699      	mov	r9, r3
 80004f4:	b083      	sub	sp, #12
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d830      	bhi.n	800055c <__udivmoddi4+0x7c>
 80004fa:	d02d      	beq.n	8000558 <__udivmoddi4+0x78>
 80004fc:	4649      	mov	r1, r9
 80004fe:	4650      	mov	r0, sl
 8000500:	f000 ffa2 	bl	8001448 <__clzdi2>
 8000504:	0029      	movs	r1, r5
 8000506:	0006      	movs	r6, r0
 8000508:	0020      	movs	r0, r4
 800050a:	f000 ff9d 	bl	8001448 <__clzdi2>
 800050e:	1a33      	subs	r3, r6, r0
 8000510:	4698      	mov	r8, r3
 8000512:	3b20      	subs	r3, #32
 8000514:	d434      	bmi.n	8000580 <__udivmoddi4+0xa0>
 8000516:	469b      	mov	fp, r3
 8000518:	4653      	mov	r3, sl
 800051a:	465a      	mov	r2, fp
 800051c:	4093      	lsls	r3, r2
 800051e:	4642      	mov	r2, r8
 8000520:	001f      	movs	r7, r3
 8000522:	4653      	mov	r3, sl
 8000524:	4093      	lsls	r3, r2
 8000526:	001e      	movs	r6, r3
 8000528:	42af      	cmp	r7, r5
 800052a:	d83b      	bhi.n	80005a4 <__udivmoddi4+0xc4>
 800052c:	42af      	cmp	r7, r5
 800052e:	d100      	bne.n	8000532 <__udivmoddi4+0x52>
 8000530:	e079      	b.n	8000626 <__udivmoddi4+0x146>
 8000532:	465b      	mov	r3, fp
 8000534:	1ba4      	subs	r4, r4, r6
 8000536:	41bd      	sbcs	r5, r7
 8000538:	2b00      	cmp	r3, #0
 800053a:	da00      	bge.n	800053e <__udivmoddi4+0x5e>
 800053c:	e076      	b.n	800062c <__udivmoddi4+0x14c>
 800053e:	2200      	movs	r2, #0
 8000540:	2300      	movs	r3, #0
 8000542:	9200      	str	r2, [sp, #0]
 8000544:	9301      	str	r3, [sp, #4]
 8000546:	2301      	movs	r3, #1
 8000548:	465a      	mov	r2, fp
 800054a:	4093      	lsls	r3, r2
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2301      	movs	r3, #1
 8000550:	4642      	mov	r2, r8
 8000552:	4093      	lsls	r3, r2
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	e029      	b.n	80005ac <__udivmoddi4+0xcc>
 8000558:	4282      	cmp	r2, r0
 800055a:	d9cf      	bls.n	80004fc <__udivmoddi4+0x1c>
 800055c:	2200      	movs	r2, #0
 800055e:	2300      	movs	r3, #0
 8000560:	9200      	str	r2, [sp, #0]
 8000562:	9301      	str	r3, [sp, #4]
 8000564:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <__udivmoddi4+0x8e>
 800056a:	601c      	str	r4, [r3, #0]
 800056c:	605d      	str	r5, [r3, #4]
 800056e:	9800      	ldr	r0, [sp, #0]
 8000570:	9901      	ldr	r1, [sp, #4]
 8000572:	b003      	add	sp, #12
 8000574:	bcf0      	pop	{r4, r5, r6, r7}
 8000576:	46bb      	mov	fp, r7
 8000578:	46b2      	mov	sl, r6
 800057a:	46a9      	mov	r9, r5
 800057c:	46a0      	mov	r8, r4
 800057e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000580:	4642      	mov	r2, r8
 8000582:	469b      	mov	fp, r3
 8000584:	2320      	movs	r3, #32
 8000586:	1a9b      	subs	r3, r3, r2
 8000588:	4652      	mov	r2, sl
 800058a:	40da      	lsrs	r2, r3
 800058c:	4641      	mov	r1, r8
 800058e:	0013      	movs	r3, r2
 8000590:	464a      	mov	r2, r9
 8000592:	408a      	lsls	r2, r1
 8000594:	0017      	movs	r7, r2
 8000596:	4642      	mov	r2, r8
 8000598:	431f      	orrs	r7, r3
 800059a:	4653      	mov	r3, sl
 800059c:	4093      	lsls	r3, r2
 800059e:	001e      	movs	r6, r3
 80005a0:	42af      	cmp	r7, r5
 80005a2:	d9c3      	bls.n	800052c <__udivmoddi4+0x4c>
 80005a4:	2200      	movs	r2, #0
 80005a6:	2300      	movs	r3, #0
 80005a8:	9200      	str	r2, [sp, #0]
 80005aa:	9301      	str	r3, [sp, #4]
 80005ac:	4643      	mov	r3, r8
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0d8      	beq.n	8000564 <__udivmoddi4+0x84>
 80005b2:	07fb      	lsls	r3, r7, #31
 80005b4:	0872      	lsrs	r2, r6, #1
 80005b6:	431a      	orrs	r2, r3
 80005b8:	4646      	mov	r6, r8
 80005ba:	087b      	lsrs	r3, r7, #1
 80005bc:	e00e      	b.n	80005dc <__udivmoddi4+0xfc>
 80005be:	42ab      	cmp	r3, r5
 80005c0:	d101      	bne.n	80005c6 <__udivmoddi4+0xe6>
 80005c2:	42a2      	cmp	r2, r4
 80005c4:	d80c      	bhi.n	80005e0 <__udivmoddi4+0x100>
 80005c6:	1aa4      	subs	r4, r4, r2
 80005c8:	419d      	sbcs	r5, r3
 80005ca:	2001      	movs	r0, #1
 80005cc:	1924      	adds	r4, r4, r4
 80005ce:	416d      	adcs	r5, r5
 80005d0:	2100      	movs	r1, #0
 80005d2:	3e01      	subs	r6, #1
 80005d4:	1824      	adds	r4, r4, r0
 80005d6:	414d      	adcs	r5, r1
 80005d8:	2e00      	cmp	r6, #0
 80005da:	d006      	beq.n	80005ea <__udivmoddi4+0x10a>
 80005dc:	42ab      	cmp	r3, r5
 80005de:	d9ee      	bls.n	80005be <__udivmoddi4+0xde>
 80005e0:	3e01      	subs	r6, #1
 80005e2:	1924      	adds	r4, r4, r4
 80005e4:	416d      	adcs	r5, r5
 80005e6:	2e00      	cmp	r6, #0
 80005e8:	d1f8      	bne.n	80005dc <__udivmoddi4+0xfc>
 80005ea:	9800      	ldr	r0, [sp, #0]
 80005ec:	9901      	ldr	r1, [sp, #4]
 80005ee:	465b      	mov	r3, fp
 80005f0:	1900      	adds	r0, r0, r4
 80005f2:	4169      	adcs	r1, r5
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	db24      	blt.n	8000642 <__udivmoddi4+0x162>
 80005f8:	002b      	movs	r3, r5
 80005fa:	465a      	mov	r2, fp
 80005fc:	4644      	mov	r4, r8
 80005fe:	40d3      	lsrs	r3, r2
 8000600:	002a      	movs	r2, r5
 8000602:	40e2      	lsrs	r2, r4
 8000604:	001c      	movs	r4, r3
 8000606:	465b      	mov	r3, fp
 8000608:	0015      	movs	r5, r2
 800060a:	2b00      	cmp	r3, #0
 800060c:	db2a      	blt.n	8000664 <__udivmoddi4+0x184>
 800060e:	0026      	movs	r6, r4
 8000610:	409e      	lsls	r6, r3
 8000612:	0033      	movs	r3, r6
 8000614:	0026      	movs	r6, r4
 8000616:	4647      	mov	r7, r8
 8000618:	40be      	lsls	r6, r7
 800061a:	0032      	movs	r2, r6
 800061c:	1a80      	subs	r0, r0, r2
 800061e:	4199      	sbcs	r1, r3
 8000620:	9000      	str	r0, [sp, #0]
 8000622:	9101      	str	r1, [sp, #4]
 8000624:	e79e      	b.n	8000564 <__udivmoddi4+0x84>
 8000626:	42a3      	cmp	r3, r4
 8000628:	d8bc      	bhi.n	80005a4 <__udivmoddi4+0xc4>
 800062a:	e782      	b.n	8000532 <__udivmoddi4+0x52>
 800062c:	4642      	mov	r2, r8
 800062e:	2320      	movs	r3, #32
 8000630:	2100      	movs	r1, #0
 8000632:	1a9b      	subs	r3, r3, r2
 8000634:	2200      	movs	r2, #0
 8000636:	9100      	str	r1, [sp, #0]
 8000638:	9201      	str	r2, [sp, #4]
 800063a:	2201      	movs	r2, #1
 800063c:	40da      	lsrs	r2, r3
 800063e:	9201      	str	r2, [sp, #4]
 8000640:	e785      	b.n	800054e <__udivmoddi4+0x6e>
 8000642:	4642      	mov	r2, r8
 8000644:	2320      	movs	r3, #32
 8000646:	1a9b      	subs	r3, r3, r2
 8000648:	002a      	movs	r2, r5
 800064a:	4646      	mov	r6, r8
 800064c:	409a      	lsls	r2, r3
 800064e:	0023      	movs	r3, r4
 8000650:	40f3      	lsrs	r3, r6
 8000652:	4644      	mov	r4, r8
 8000654:	4313      	orrs	r3, r2
 8000656:	002a      	movs	r2, r5
 8000658:	40e2      	lsrs	r2, r4
 800065a:	001c      	movs	r4, r3
 800065c:	465b      	mov	r3, fp
 800065e:	0015      	movs	r5, r2
 8000660:	2b00      	cmp	r3, #0
 8000662:	dad4      	bge.n	800060e <__udivmoddi4+0x12e>
 8000664:	4642      	mov	r2, r8
 8000666:	002f      	movs	r7, r5
 8000668:	2320      	movs	r3, #32
 800066a:	0026      	movs	r6, r4
 800066c:	4097      	lsls	r7, r2
 800066e:	1a9b      	subs	r3, r3, r2
 8000670:	40de      	lsrs	r6, r3
 8000672:	003b      	movs	r3, r7
 8000674:	4333      	orrs	r3, r6
 8000676:	e7cd      	b.n	8000614 <__udivmoddi4+0x134>

08000678 <__aeabi_fadd>:
 8000678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800067a:	4647      	mov	r7, r8
 800067c:	46ce      	mov	lr, r9
 800067e:	024a      	lsls	r2, r1, #9
 8000680:	0243      	lsls	r3, r0, #9
 8000682:	0045      	lsls	r5, r0, #1
 8000684:	0fc4      	lsrs	r4, r0, #31
 8000686:	0a50      	lsrs	r0, r2, #9
 8000688:	4680      	mov	r8, r0
 800068a:	0048      	lsls	r0, r1, #1
 800068c:	0a5b      	lsrs	r3, r3, #9
 800068e:	0e00      	lsrs	r0, r0, #24
 8000690:	0992      	lsrs	r2, r2, #6
 8000692:	4694      	mov	ip, r2
 8000694:	b580      	push	{r7, lr}
 8000696:	001e      	movs	r6, r3
 8000698:	4681      	mov	r9, r0
 800069a:	0002      	movs	r2, r0
 800069c:	0e2d      	lsrs	r5, r5, #24
 800069e:	00df      	lsls	r7, r3, #3
 80006a0:	0fc9      	lsrs	r1, r1, #31
 80006a2:	428c      	cmp	r4, r1
 80006a4:	d024      	beq.n	80006f0 <__aeabi_fadd+0x78>
 80006a6:	1a28      	subs	r0, r5, r0
 80006a8:	2800      	cmp	r0, #0
 80006aa:	dd0e      	ble.n	80006ca <__aeabi_fadd+0x52>
 80006ac:	2a00      	cmp	r2, #0
 80006ae:	d13e      	bne.n	800072e <__aeabi_fadd+0xb6>
 80006b0:	4662      	mov	r2, ip
 80006b2:	2a00      	cmp	r2, #0
 80006b4:	d100      	bne.n	80006b8 <__aeabi_fadd+0x40>
 80006b6:	e0fd      	b.n	80008b4 <__aeabi_fadd+0x23c>
 80006b8:	1e42      	subs	r2, r0, #1
 80006ba:	2801      	cmp	r0, #1
 80006bc:	d100      	bne.n	80006c0 <__aeabi_fadd+0x48>
 80006be:	e137      	b.n	8000930 <__aeabi_fadd+0x2b8>
 80006c0:	28ff      	cmp	r0, #255	; 0xff
 80006c2:	d100      	bne.n	80006c6 <__aeabi_fadd+0x4e>
 80006c4:	e0a9      	b.n	800081a <__aeabi_fadd+0x1a2>
 80006c6:	0010      	movs	r0, r2
 80006c8:	e039      	b.n	800073e <__aeabi_fadd+0xc6>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	d063      	beq.n	8000796 <__aeabi_fadd+0x11e>
 80006ce:	464b      	mov	r3, r9
 80006d0:	1b52      	subs	r2, r2, r5
 80006d2:	2d00      	cmp	r5, #0
 80006d4:	d000      	beq.n	80006d8 <__aeabi_fadd+0x60>
 80006d6:	e0e0      	b.n	800089a <__aeabi_fadd+0x222>
 80006d8:	2f00      	cmp	r7, #0
 80006da:	d100      	bne.n	80006de <__aeabi_fadd+0x66>
 80006dc:	e0ce      	b.n	800087c <__aeabi_fadd+0x204>
 80006de:	1e53      	subs	r3, r2, #1
 80006e0:	2a01      	cmp	r2, #1
 80006e2:	d100      	bne.n	80006e6 <__aeabi_fadd+0x6e>
 80006e4:	e155      	b.n	8000992 <__aeabi_fadd+0x31a>
 80006e6:	2aff      	cmp	r2, #255	; 0xff
 80006e8:	d100      	bne.n	80006ec <__aeabi_fadd+0x74>
 80006ea:	e094      	b.n	8000816 <__aeabi_fadd+0x19e>
 80006ec:	001a      	movs	r2, r3
 80006ee:	e0d9      	b.n	80008a4 <__aeabi_fadd+0x22c>
 80006f0:	1a2a      	subs	r2, r5, r0
 80006f2:	2a00      	cmp	r2, #0
 80006f4:	dc00      	bgt.n	80006f8 <__aeabi_fadd+0x80>
 80006f6:	e099      	b.n	800082c <__aeabi_fadd+0x1b4>
 80006f8:	2800      	cmp	r0, #0
 80006fa:	d062      	beq.n	80007c2 <__aeabi_fadd+0x14a>
 80006fc:	2dff      	cmp	r5, #255	; 0xff
 80006fe:	d100      	bne.n	8000702 <__aeabi_fadd+0x8a>
 8000700:	e08b      	b.n	800081a <__aeabi_fadd+0x1a2>
 8000702:	2380      	movs	r3, #128	; 0x80
 8000704:	4661      	mov	r1, ip
 8000706:	04db      	lsls	r3, r3, #19
 8000708:	4319      	orrs	r1, r3
 800070a:	468c      	mov	ip, r1
 800070c:	2a1b      	cmp	r2, #27
 800070e:	dc00      	bgt.n	8000712 <__aeabi_fadd+0x9a>
 8000710:	e0d2      	b.n	80008b8 <__aeabi_fadd+0x240>
 8000712:	2301      	movs	r3, #1
 8000714:	19db      	adds	r3, r3, r7
 8000716:	015a      	lsls	r2, r3, #5
 8000718:	d56a      	bpl.n	80007f0 <__aeabi_fadd+0x178>
 800071a:	3501      	adds	r5, #1
 800071c:	2dff      	cmp	r5, #255	; 0xff
 800071e:	d05b      	beq.n	80007d8 <__aeabi_fadd+0x160>
 8000720:	2201      	movs	r2, #1
 8000722:	49a3      	ldr	r1, [pc, #652]	; (80009b0 <__aeabi_fadd+0x338>)
 8000724:	401a      	ands	r2, r3
 8000726:	085b      	lsrs	r3, r3, #1
 8000728:	400b      	ands	r3, r1
 800072a:	4313      	orrs	r3, r2
 800072c:	e01c      	b.n	8000768 <__aeabi_fadd+0xf0>
 800072e:	2dff      	cmp	r5, #255	; 0xff
 8000730:	d100      	bne.n	8000734 <__aeabi_fadd+0xbc>
 8000732:	e072      	b.n	800081a <__aeabi_fadd+0x1a2>
 8000734:	2380      	movs	r3, #128	; 0x80
 8000736:	4662      	mov	r2, ip
 8000738:	04db      	lsls	r3, r3, #19
 800073a:	431a      	orrs	r2, r3
 800073c:	4694      	mov	ip, r2
 800073e:	281b      	cmp	r0, #27
 8000740:	dc00      	bgt.n	8000744 <__aeabi_fadd+0xcc>
 8000742:	e090      	b.n	8000866 <__aeabi_fadd+0x1ee>
 8000744:	2301      	movs	r3, #1
 8000746:	1afb      	subs	r3, r7, r3
 8000748:	015a      	lsls	r2, r3, #5
 800074a:	d551      	bpl.n	80007f0 <__aeabi_fadd+0x178>
 800074c:	019b      	lsls	r3, r3, #6
 800074e:	099e      	lsrs	r6, r3, #6
 8000750:	0030      	movs	r0, r6
 8000752:	f000 fe5b 	bl	800140c <__clzsi2>
 8000756:	0033      	movs	r3, r6
 8000758:	3805      	subs	r0, #5
 800075a:	4083      	lsls	r3, r0
 800075c:	4285      	cmp	r5, r0
 800075e:	dc00      	bgt.n	8000762 <__aeabi_fadd+0xea>
 8000760:	e075      	b.n	800084e <__aeabi_fadd+0x1d6>
 8000762:	4a94      	ldr	r2, [pc, #592]	; (80009b4 <__aeabi_fadd+0x33c>)
 8000764:	1a2d      	subs	r5, r5, r0
 8000766:	4013      	ands	r3, r2
 8000768:	075a      	lsls	r2, r3, #29
 800076a:	d004      	beq.n	8000776 <__aeabi_fadd+0xfe>
 800076c:	220f      	movs	r2, #15
 800076e:	401a      	ands	r2, r3
 8000770:	2a04      	cmp	r2, #4
 8000772:	d000      	beq.n	8000776 <__aeabi_fadd+0xfe>
 8000774:	3304      	adds	r3, #4
 8000776:	015a      	lsls	r2, r3, #5
 8000778:	d53c      	bpl.n	80007f4 <__aeabi_fadd+0x17c>
 800077a:	1c68      	adds	r0, r5, #1
 800077c:	2dfe      	cmp	r5, #254	; 0xfe
 800077e:	d02b      	beq.n	80007d8 <__aeabi_fadd+0x160>
 8000780:	019b      	lsls	r3, r3, #6
 8000782:	0a5e      	lsrs	r6, r3, #9
 8000784:	b2c0      	uxtb	r0, r0
 8000786:	05c0      	lsls	r0, r0, #23
 8000788:	4330      	orrs	r0, r6
 800078a:	07e4      	lsls	r4, r4, #31
 800078c:	4320      	orrs	r0, r4
 800078e:	bcc0      	pop	{r6, r7}
 8000790:	46b9      	mov	r9, r7
 8000792:	46b0      	mov	r8, r6
 8000794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000796:	20fe      	movs	r0, #254	; 0xfe
 8000798:	1c6a      	adds	r2, r5, #1
 800079a:	4210      	tst	r0, r2
 800079c:	d172      	bne.n	8000884 <__aeabi_fadd+0x20c>
 800079e:	2d00      	cmp	r5, #0
 80007a0:	d000      	beq.n	80007a4 <__aeabi_fadd+0x12c>
 80007a2:	e0ae      	b.n	8000902 <__aeabi_fadd+0x28a>
 80007a4:	2f00      	cmp	r7, #0
 80007a6:	d100      	bne.n	80007aa <__aeabi_fadd+0x132>
 80007a8:	e0ec      	b.n	8000984 <__aeabi_fadd+0x30c>
 80007aa:	4663      	mov	r3, ip
 80007ac:	2000      	movs	r0, #0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d0e9      	beq.n	8000786 <__aeabi_fadd+0x10e>
 80007b2:	1afb      	subs	r3, r7, r3
 80007b4:	015a      	lsls	r2, r3, #5
 80007b6:	d400      	bmi.n	80007ba <__aeabi_fadd+0x142>
 80007b8:	e0f3      	b.n	80009a2 <__aeabi_fadd+0x32a>
 80007ba:	4663      	mov	r3, ip
 80007bc:	000c      	movs	r4, r1
 80007be:	1bdb      	subs	r3, r3, r7
 80007c0:	e7d2      	b.n	8000768 <__aeabi_fadd+0xf0>
 80007c2:	4661      	mov	r1, ip
 80007c4:	2900      	cmp	r1, #0
 80007c6:	d05b      	beq.n	8000880 <__aeabi_fadd+0x208>
 80007c8:	1e51      	subs	r1, r2, #1
 80007ca:	2a01      	cmp	r2, #1
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fadd+0x158>
 80007ce:	e0a7      	b.n	8000920 <__aeabi_fadd+0x2a8>
 80007d0:	2aff      	cmp	r2, #255	; 0xff
 80007d2:	d022      	beq.n	800081a <__aeabi_fadd+0x1a2>
 80007d4:	000a      	movs	r2, r1
 80007d6:	e799      	b.n	800070c <__aeabi_fadd+0x94>
 80007d8:	20ff      	movs	r0, #255	; 0xff
 80007da:	2600      	movs	r6, #0
 80007dc:	e7d3      	b.n	8000786 <__aeabi_fadd+0x10e>
 80007de:	21fe      	movs	r1, #254	; 0xfe
 80007e0:	1c6a      	adds	r2, r5, #1
 80007e2:	4211      	tst	r1, r2
 80007e4:	d073      	beq.n	80008ce <__aeabi_fadd+0x256>
 80007e6:	2aff      	cmp	r2, #255	; 0xff
 80007e8:	d0f6      	beq.n	80007d8 <__aeabi_fadd+0x160>
 80007ea:	0015      	movs	r5, r2
 80007ec:	4467      	add	r7, ip
 80007ee:	087b      	lsrs	r3, r7, #1
 80007f0:	075a      	lsls	r2, r3, #29
 80007f2:	d1bb      	bne.n	800076c <__aeabi_fadd+0xf4>
 80007f4:	08db      	lsrs	r3, r3, #3
 80007f6:	2dff      	cmp	r5, #255	; 0xff
 80007f8:	d00f      	beq.n	800081a <__aeabi_fadd+0x1a2>
 80007fa:	025b      	lsls	r3, r3, #9
 80007fc:	0a5e      	lsrs	r6, r3, #9
 80007fe:	b2e8      	uxtb	r0, r5
 8000800:	e7c1      	b.n	8000786 <__aeabi_fadd+0x10e>
 8000802:	4662      	mov	r2, ip
 8000804:	2a00      	cmp	r2, #0
 8000806:	d008      	beq.n	800081a <__aeabi_fadd+0x1a2>
 8000808:	2280      	movs	r2, #128	; 0x80
 800080a:	03d2      	lsls	r2, r2, #15
 800080c:	4213      	tst	r3, r2
 800080e:	d004      	beq.n	800081a <__aeabi_fadd+0x1a2>
 8000810:	4640      	mov	r0, r8
 8000812:	4210      	tst	r0, r2
 8000814:	d101      	bne.n	800081a <__aeabi_fadd+0x1a2>
 8000816:	000c      	movs	r4, r1
 8000818:	4643      	mov	r3, r8
 800081a:	2b00      	cmp	r3, #0
 800081c:	d0dc      	beq.n	80007d8 <__aeabi_fadd+0x160>
 800081e:	2680      	movs	r6, #128	; 0x80
 8000820:	03f6      	lsls	r6, r6, #15
 8000822:	431e      	orrs	r6, r3
 8000824:	0276      	lsls	r6, r6, #9
 8000826:	20ff      	movs	r0, #255	; 0xff
 8000828:	0a76      	lsrs	r6, r6, #9
 800082a:	e7ac      	b.n	8000786 <__aeabi_fadd+0x10e>
 800082c:	2a00      	cmp	r2, #0
 800082e:	d0d6      	beq.n	80007de <__aeabi_fadd+0x166>
 8000830:	1b42      	subs	r2, r0, r5
 8000832:	2d00      	cmp	r5, #0
 8000834:	d05c      	beq.n	80008f0 <__aeabi_fadd+0x278>
 8000836:	28ff      	cmp	r0, #255	; 0xff
 8000838:	d0ee      	beq.n	8000818 <__aeabi_fadd+0x1a0>
 800083a:	2380      	movs	r3, #128	; 0x80
 800083c:	04db      	lsls	r3, r3, #19
 800083e:	431f      	orrs	r7, r3
 8000840:	2a1b      	cmp	r2, #27
 8000842:	dc00      	bgt.n	8000846 <__aeabi_fadd+0x1ce>
 8000844:	e082      	b.n	800094c <__aeabi_fadd+0x2d4>
 8000846:	2301      	movs	r3, #1
 8000848:	464d      	mov	r5, r9
 800084a:	4463      	add	r3, ip
 800084c:	e763      	b.n	8000716 <__aeabi_fadd+0x9e>
 800084e:	2220      	movs	r2, #32
 8000850:	1b40      	subs	r0, r0, r5
 8000852:	3001      	adds	r0, #1
 8000854:	1a12      	subs	r2, r2, r0
 8000856:	0019      	movs	r1, r3
 8000858:	4093      	lsls	r3, r2
 800085a:	40c1      	lsrs	r1, r0
 800085c:	1e5a      	subs	r2, r3, #1
 800085e:	4193      	sbcs	r3, r2
 8000860:	2500      	movs	r5, #0
 8000862:	430b      	orrs	r3, r1
 8000864:	e780      	b.n	8000768 <__aeabi_fadd+0xf0>
 8000866:	2320      	movs	r3, #32
 8000868:	4661      	mov	r1, ip
 800086a:	1a1b      	subs	r3, r3, r0
 800086c:	4099      	lsls	r1, r3
 800086e:	4662      	mov	r2, ip
 8000870:	000b      	movs	r3, r1
 8000872:	40c2      	lsrs	r2, r0
 8000874:	1e59      	subs	r1, r3, #1
 8000876:	418b      	sbcs	r3, r1
 8000878:	4313      	orrs	r3, r2
 800087a:	e764      	b.n	8000746 <__aeabi_fadd+0xce>
 800087c:	000c      	movs	r4, r1
 800087e:	4643      	mov	r3, r8
 8000880:	0015      	movs	r5, r2
 8000882:	e7b8      	b.n	80007f6 <__aeabi_fadd+0x17e>
 8000884:	4663      	mov	r3, ip
 8000886:	1afe      	subs	r6, r7, r3
 8000888:	0173      	lsls	r3, r6, #5
 800088a:	d445      	bmi.n	8000918 <__aeabi_fadd+0x2a0>
 800088c:	2e00      	cmp	r6, #0
 800088e:	d000      	beq.n	8000892 <__aeabi_fadd+0x21a>
 8000890:	e75e      	b.n	8000750 <__aeabi_fadd+0xd8>
 8000892:	2400      	movs	r4, #0
 8000894:	2000      	movs	r0, #0
 8000896:	2600      	movs	r6, #0
 8000898:	e775      	b.n	8000786 <__aeabi_fadd+0x10e>
 800089a:	2bff      	cmp	r3, #255	; 0xff
 800089c:	d0bb      	beq.n	8000816 <__aeabi_fadd+0x19e>
 800089e:	2380      	movs	r3, #128	; 0x80
 80008a0:	04db      	lsls	r3, r3, #19
 80008a2:	431f      	orrs	r7, r3
 80008a4:	2a1b      	cmp	r2, #27
 80008a6:	dd47      	ble.n	8000938 <__aeabi_fadd+0x2c0>
 80008a8:	2301      	movs	r3, #1
 80008aa:	4662      	mov	r2, ip
 80008ac:	000c      	movs	r4, r1
 80008ae:	464d      	mov	r5, r9
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	e749      	b.n	8000748 <__aeabi_fadd+0xd0>
 80008b4:	0005      	movs	r5, r0
 80008b6:	e79e      	b.n	80007f6 <__aeabi_fadd+0x17e>
 80008b8:	4661      	mov	r1, ip
 80008ba:	2320      	movs	r3, #32
 80008bc:	40d1      	lsrs	r1, r2
 80008be:	1a9b      	subs	r3, r3, r2
 80008c0:	4662      	mov	r2, ip
 80008c2:	409a      	lsls	r2, r3
 80008c4:	0013      	movs	r3, r2
 80008c6:	1e5a      	subs	r2, r3, #1
 80008c8:	4193      	sbcs	r3, r2
 80008ca:	430b      	orrs	r3, r1
 80008cc:	e722      	b.n	8000714 <__aeabi_fadd+0x9c>
 80008ce:	2d00      	cmp	r5, #0
 80008d0:	d146      	bne.n	8000960 <__aeabi_fadd+0x2e8>
 80008d2:	2f00      	cmp	r7, #0
 80008d4:	d062      	beq.n	800099c <__aeabi_fadd+0x324>
 80008d6:	4663      	mov	r3, ip
 80008d8:	2000      	movs	r0, #0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fadd+0x268>
 80008de:	e752      	b.n	8000786 <__aeabi_fadd+0x10e>
 80008e0:	003b      	movs	r3, r7
 80008e2:	4463      	add	r3, ip
 80008e4:	015a      	lsls	r2, r3, #5
 80008e6:	d583      	bpl.n	80007f0 <__aeabi_fadd+0x178>
 80008e8:	4a32      	ldr	r2, [pc, #200]	; (80009b4 <__aeabi_fadd+0x33c>)
 80008ea:	3501      	adds	r5, #1
 80008ec:	4013      	ands	r3, r2
 80008ee:	e77f      	b.n	80007f0 <__aeabi_fadd+0x178>
 80008f0:	2f00      	cmp	r7, #0
 80008f2:	d0c4      	beq.n	800087e <__aeabi_fadd+0x206>
 80008f4:	1e53      	subs	r3, r2, #1
 80008f6:	2a01      	cmp	r2, #1
 80008f8:	d012      	beq.n	8000920 <__aeabi_fadd+0x2a8>
 80008fa:	2aff      	cmp	r2, #255	; 0xff
 80008fc:	d08c      	beq.n	8000818 <__aeabi_fadd+0x1a0>
 80008fe:	001a      	movs	r2, r3
 8000900:	e79e      	b.n	8000840 <__aeabi_fadd+0x1c8>
 8000902:	2f00      	cmp	r7, #0
 8000904:	d000      	beq.n	8000908 <__aeabi_fadd+0x290>
 8000906:	e77c      	b.n	8000802 <__aeabi_fadd+0x18a>
 8000908:	4663      	mov	r3, ip
 800090a:	2b00      	cmp	r3, #0
 800090c:	d183      	bne.n	8000816 <__aeabi_fadd+0x19e>
 800090e:	2680      	movs	r6, #128	; 0x80
 8000910:	2400      	movs	r4, #0
 8000912:	20ff      	movs	r0, #255	; 0xff
 8000914:	03f6      	lsls	r6, r6, #15
 8000916:	e736      	b.n	8000786 <__aeabi_fadd+0x10e>
 8000918:	4663      	mov	r3, ip
 800091a:	000c      	movs	r4, r1
 800091c:	1bde      	subs	r6, r3, r7
 800091e:	e717      	b.n	8000750 <__aeabi_fadd+0xd8>
 8000920:	003b      	movs	r3, r7
 8000922:	4463      	add	r3, ip
 8000924:	2501      	movs	r5, #1
 8000926:	015a      	lsls	r2, r3, #5
 8000928:	d400      	bmi.n	800092c <__aeabi_fadd+0x2b4>
 800092a:	e761      	b.n	80007f0 <__aeabi_fadd+0x178>
 800092c:	2502      	movs	r5, #2
 800092e:	e6f7      	b.n	8000720 <__aeabi_fadd+0xa8>
 8000930:	4663      	mov	r3, ip
 8000932:	2501      	movs	r5, #1
 8000934:	1afb      	subs	r3, r7, r3
 8000936:	e707      	b.n	8000748 <__aeabi_fadd+0xd0>
 8000938:	2320      	movs	r3, #32
 800093a:	1a9b      	subs	r3, r3, r2
 800093c:	0038      	movs	r0, r7
 800093e:	409f      	lsls	r7, r3
 8000940:	003b      	movs	r3, r7
 8000942:	40d0      	lsrs	r0, r2
 8000944:	1e5a      	subs	r2, r3, #1
 8000946:	4193      	sbcs	r3, r2
 8000948:	4303      	orrs	r3, r0
 800094a:	e7ae      	b.n	80008aa <__aeabi_fadd+0x232>
 800094c:	2320      	movs	r3, #32
 800094e:	1a9b      	subs	r3, r3, r2
 8000950:	0039      	movs	r1, r7
 8000952:	409f      	lsls	r7, r3
 8000954:	003b      	movs	r3, r7
 8000956:	40d1      	lsrs	r1, r2
 8000958:	1e5a      	subs	r2, r3, #1
 800095a:	4193      	sbcs	r3, r2
 800095c:	430b      	orrs	r3, r1
 800095e:	e773      	b.n	8000848 <__aeabi_fadd+0x1d0>
 8000960:	2f00      	cmp	r7, #0
 8000962:	d100      	bne.n	8000966 <__aeabi_fadd+0x2ee>
 8000964:	e758      	b.n	8000818 <__aeabi_fadd+0x1a0>
 8000966:	4662      	mov	r2, ip
 8000968:	2a00      	cmp	r2, #0
 800096a:	d100      	bne.n	800096e <__aeabi_fadd+0x2f6>
 800096c:	e755      	b.n	800081a <__aeabi_fadd+0x1a2>
 800096e:	2280      	movs	r2, #128	; 0x80
 8000970:	03d2      	lsls	r2, r2, #15
 8000972:	4213      	tst	r3, r2
 8000974:	d100      	bne.n	8000978 <__aeabi_fadd+0x300>
 8000976:	e750      	b.n	800081a <__aeabi_fadd+0x1a2>
 8000978:	4641      	mov	r1, r8
 800097a:	4211      	tst	r1, r2
 800097c:	d000      	beq.n	8000980 <__aeabi_fadd+0x308>
 800097e:	e74c      	b.n	800081a <__aeabi_fadd+0x1a2>
 8000980:	4643      	mov	r3, r8
 8000982:	e74a      	b.n	800081a <__aeabi_fadd+0x1a2>
 8000984:	4663      	mov	r3, ip
 8000986:	2b00      	cmp	r3, #0
 8000988:	d083      	beq.n	8000892 <__aeabi_fadd+0x21a>
 800098a:	000c      	movs	r4, r1
 800098c:	4646      	mov	r6, r8
 800098e:	2000      	movs	r0, #0
 8000990:	e6f9      	b.n	8000786 <__aeabi_fadd+0x10e>
 8000992:	4663      	mov	r3, ip
 8000994:	000c      	movs	r4, r1
 8000996:	1bdb      	subs	r3, r3, r7
 8000998:	3501      	adds	r5, #1
 800099a:	e6d5      	b.n	8000748 <__aeabi_fadd+0xd0>
 800099c:	4646      	mov	r6, r8
 800099e:	2000      	movs	r0, #0
 80009a0:	e6f1      	b.n	8000786 <__aeabi_fadd+0x10e>
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d000      	beq.n	80009a8 <__aeabi_fadd+0x330>
 80009a6:	e723      	b.n	80007f0 <__aeabi_fadd+0x178>
 80009a8:	2400      	movs	r4, #0
 80009aa:	2600      	movs	r6, #0
 80009ac:	e6eb      	b.n	8000786 <__aeabi_fadd+0x10e>
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	7dffffff 	.word	0x7dffffff
 80009b4:	fbffffff 	.word	0xfbffffff

080009b8 <__aeabi_fdiv>:
 80009b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ba:	464f      	mov	r7, r9
 80009bc:	4646      	mov	r6, r8
 80009be:	46d6      	mov	lr, sl
 80009c0:	0245      	lsls	r5, r0, #9
 80009c2:	b5c0      	push	{r6, r7, lr}
 80009c4:	0047      	lsls	r7, r0, #1
 80009c6:	1c0c      	adds	r4, r1, #0
 80009c8:	0a6d      	lsrs	r5, r5, #9
 80009ca:	0e3f      	lsrs	r7, r7, #24
 80009cc:	0fc6      	lsrs	r6, r0, #31
 80009ce:	2f00      	cmp	r7, #0
 80009d0:	d100      	bne.n	80009d4 <__aeabi_fdiv+0x1c>
 80009d2:	e06f      	b.n	8000ab4 <__aeabi_fdiv+0xfc>
 80009d4:	2fff      	cmp	r7, #255	; 0xff
 80009d6:	d100      	bne.n	80009da <__aeabi_fdiv+0x22>
 80009d8:	e074      	b.n	8000ac4 <__aeabi_fdiv+0x10c>
 80009da:	2300      	movs	r3, #0
 80009dc:	2280      	movs	r2, #128	; 0x80
 80009de:	4699      	mov	r9, r3
 80009e0:	469a      	mov	sl, r3
 80009e2:	00ed      	lsls	r5, r5, #3
 80009e4:	04d2      	lsls	r2, r2, #19
 80009e6:	4315      	orrs	r5, r2
 80009e8:	3f7f      	subs	r7, #127	; 0x7f
 80009ea:	0263      	lsls	r3, r4, #9
 80009ec:	0a5b      	lsrs	r3, r3, #9
 80009ee:	4698      	mov	r8, r3
 80009f0:	0063      	lsls	r3, r4, #1
 80009f2:	0e1b      	lsrs	r3, r3, #24
 80009f4:	0fe4      	lsrs	r4, r4, #31
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d04d      	beq.n	8000a96 <__aeabi_fdiv+0xde>
 80009fa:	2bff      	cmp	r3, #255	; 0xff
 80009fc:	d045      	beq.n	8000a8a <__aeabi_fdiv+0xd2>
 80009fe:	4642      	mov	r2, r8
 8000a00:	2180      	movs	r1, #128	; 0x80
 8000a02:	00d2      	lsls	r2, r2, #3
 8000a04:	04c9      	lsls	r1, r1, #19
 8000a06:	4311      	orrs	r1, r2
 8000a08:	4688      	mov	r8, r1
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	3b7f      	subs	r3, #127	; 0x7f
 8000a0e:	0031      	movs	r1, r6
 8000a10:	1aff      	subs	r7, r7, r3
 8000a12:	464b      	mov	r3, r9
 8000a14:	4061      	eors	r1, r4
 8000a16:	b2c9      	uxtb	r1, r1
 8000a18:	2b0f      	cmp	r3, #15
 8000a1a:	d900      	bls.n	8000a1e <__aeabi_fdiv+0x66>
 8000a1c:	e0b8      	b.n	8000b90 <__aeabi_fdiv+0x1d8>
 8000a1e:	4870      	ldr	r0, [pc, #448]	; (8000be0 <__aeabi_fdiv+0x228>)
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	58c3      	ldr	r3, [r0, r3]
 8000a24:	469f      	mov	pc, r3
 8000a26:	2300      	movs	r3, #0
 8000a28:	4698      	mov	r8, r3
 8000a2a:	0026      	movs	r6, r4
 8000a2c:	4645      	mov	r5, r8
 8000a2e:	4692      	mov	sl, r2
 8000a30:	4653      	mov	r3, sl
 8000a32:	2b02      	cmp	r3, #2
 8000a34:	d100      	bne.n	8000a38 <__aeabi_fdiv+0x80>
 8000a36:	e08d      	b.n	8000b54 <__aeabi_fdiv+0x19c>
 8000a38:	2b03      	cmp	r3, #3
 8000a3a:	d100      	bne.n	8000a3e <__aeabi_fdiv+0x86>
 8000a3c:	e0a1      	b.n	8000b82 <__aeabi_fdiv+0x1ca>
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d018      	beq.n	8000a74 <__aeabi_fdiv+0xbc>
 8000a42:	003b      	movs	r3, r7
 8000a44:	337f      	adds	r3, #127	; 0x7f
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	dd6d      	ble.n	8000b26 <__aeabi_fdiv+0x16e>
 8000a4a:	076a      	lsls	r2, r5, #29
 8000a4c:	d004      	beq.n	8000a58 <__aeabi_fdiv+0xa0>
 8000a4e:	220f      	movs	r2, #15
 8000a50:	402a      	ands	r2, r5
 8000a52:	2a04      	cmp	r2, #4
 8000a54:	d000      	beq.n	8000a58 <__aeabi_fdiv+0xa0>
 8000a56:	3504      	adds	r5, #4
 8000a58:	012a      	lsls	r2, r5, #4
 8000a5a:	d503      	bpl.n	8000a64 <__aeabi_fdiv+0xac>
 8000a5c:	4b61      	ldr	r3, [pc, #388]	; (8000be4 <__aeabi_fdiv+0x22c>)
 8000a5e:	401d      	ands	r5, r3
 8000a60:	003b      	movs	r3, r7
 8000a62:	3380      	adds	r3, #128	; 0x80
 8000a64:	2bfe      	cmp	r3, #254	; 0xfe
 8000a66:	dd00      	ble.n	8000a6a <__aeabi_fdiv+0xb2>
 8000a68:	e074      	b.n	8000b54 <__aeabi_fdiv+0x19c>
 8000a6a:	01aa      	lsls	r2, r5, #6
 8000a6c:	0a52      	lsrs	r2, r2, #9
 8000a6e:	b2d8      	uxtb	r0, r3
 8000a70:	e002      	b.n	8000a78 <__aeabi_fdiv+0xc0>
 8000a72:	000e      	movs	r6, r1
 8000a74:	2000      	movs	r0, #0
 8000a76:	2200      	movs	r2, #0
 8000a78:	05c0      	lsls	r0, r0, #23
 8000a7a:	07f6      	lsls	r6, r6, #31
 8000a7c:	4310      	orrs	r0, r2
 8000a7e:	4330      	orrs	r0, r6
 8000a80:	bce0      	pop	{r5, r6, r7}
 8000a82:	46ba      	mov	sl, r7
 8000a84:	46b1      	mov	r9, r6
 8000a86:	46a8      	mov	r8, r5
 8000a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a8a:	4643      	mov	r3, r8
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d13f      	bne.n	8000b10 <__aeabi_fdiv+0x158>
 8000a90:	2202      	movs	r2, #2
 8000a92:	3fff      	subs	r7, #255	; 0xff
 8000a94:	e003      	b.n	8000a9e <__aeabi_fdiv+0xe6>
 8000a96:	4643      	mov	r3, r8
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d12d      	bne.n	8000af8 <__aeabi_fdiv+0x140>
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	0031      	movs	r1, r6
 8000aa0:	464b      	mov	r3, r9
 8000aa2:	4061      	eors	r1, r4
 8000aa4:	b2c9      	uxtb	r1, r1
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	2b0f      	cmp	r3, #15
 8000aaa:	d838      	bhi.n	8000b1e <__aeabi_fdiv+0x166>
 8000aac:	484e      	ldr	r0, [pc, #312]	; (8000be8 <__aeabi_fdiv+0x230>)
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	58c3      	ldr	r3, [r0, r3]
 8000ab2:	469f      	mov	pc, r3
 8000ab4:	2d00      	cmp	r5, #0
 8000ab6:	d113      	bne.n	8000ae0 <__aeabi_fdiv+0x128>
 8000ab8:	2304      	movs	r3, #4
 8000aba:	4699      	mov	r9, r3
 8000abc:	3b03      	subs	r3, #3
 8000abe:	2700      	movs	r7, #0
 8000ac0:	469a      	mov	sl, r3
 8000ac2:	e792      	b.n	80009ea <__aeabi_fdiv+0x32>
 8000ac4:	2d00      	cmp	r5, #0
 8000ac6:	d105      	bne.n	8000ad4 <__aeabi_fdiv+0x11c>
 8000ac8:	2308      	movs	r3, #8
 8000aca:	4699      	mov	r9, r3
 8000acc:	3b06      	subs	r3, #6
 8000ace:	27ff      	movs	r7, #255	; 0xff
 8000ad0:	469a      	mov	sl, r3
 8000ad2:	e78a      	b.n	80009ea <__aeabi_fdiv+0x32>
 8000ad4:	230c      	movs	r3, #12
 8000ad6:	4699      	mov	r9, r3
 8000ad8:	3b09      	subs	r3, #9
 8000ada:	27ff      	movs	r7, #255	; 0xff
 8000adc:	469a      	mov	sl, r3
 8000ade:	e784      	b.n	80009ea <__aeabi_fdiv+0x32>
 8000ae0:	0028      	movs	r0, r5
 8000ae2:	f000 fc93 	bl	800140c <__clzsi2>
 8000ae6:	2776      	movs	r7, #118	; 0x76
 8000ae8:	1f43      	subs	r3, r0, #5
 8000aea:	409d      	lsls	r5, r3
 8000aec:	2300      	movs	r3, #0
 8000aee:	427f      	negs	r7, r7
 8000af0:	4699      	mov	r9, r3
 8000af2:	469a      	mov	sl, r3
 8000af4:	1a3f      	subs	r7, r7, r0
 8000af6:	e778      	b.n	80009ea <__aeabi_fdiv+0x32>
 8000af8:	4640      	mov	r0, r8
 8000afa:	f000 fc87 	bl	800140c <__clzsi2>
 8000afe:	4642      	mov	r2, r8
 8000b00:	1f43      	subs	r3, r0, #5
 8000b02:	409a      	lsls	r2, r3
 8000b04:	2376      	movs	r3, #118	; 0x76
 8000b06:	425b      	negs	r3, r3
 8000b08:	4690      	mov	r8, r2
 8000b0a:	1a1b      	subs	r3, r3, r0
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	e77e      	b.n	8000a0e <__aeabi_fdiv+0x56>
 8000b10:	2303      	movs	r3, #3
 8000b12:	464a      	mov	r2, r9
 8000b14:	431a      	orrs	r2, r3
 8000b16:	4691      	mov	r9, r2
 8000b18:	33fc      	adds	r3, #252	; 0xfc
 8000b1a:	2203      	movs	r2, #3
 8000b1c:	e777      	b.n	8000a0e <__aeabi_fdiv+0x56>
 8000b1e:	000e      	movs	r6, r1
 8000b20:	20ff      	movs	r0, #255	; 0xff
 8000b22:	2200      	movs	r2, #0
 8000b24:	e7a8      	b.n	8000a78 <__aeabi_fdiv+0xc0>
 8000b26:	2201      	movs	r2, #1
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	2b1b      	cmp	r3, #27
 8000b2c:	dca2      	bgt.n	8000a74 <__aeabi_fdiv+0xbc>
 8000b2e:	379e      	adds	r7, #158	; 0x9e
 8000b30:	002a      	movs	r2, r5
 8000b32:	40bd      	lsls	r5, r7
 8000b34:	40da      	lsrs	r2, r3
 8000b36:	1e6b      	subs	r3, r5, #1
 8000b38:	419d      	sbcs	r5, r3
 8000b3a:	4315      	orrs	r5, r2
 8000b3c:	076a      	lsls	r2, r5, #29
 8000b3e:	d004      	beq.n	8000b4a <__aeabi_fdiv+0x192>
 8000b40:	220f      	movs	r2, #15
 8000b42:	402a      	ands	r2, r5
 8000b44:	2a04      	cmp	r2, #4
 8000b46:	d000      	beq.n	8000b4a <__aeabi_fdiv+0x192>
 8000b48:	3504      	adds	r5, #4
 8000b4a:	016a      	lsls	r2, r5, #5
 8000b4c:	d544      	bpl.n	8000bd8 <__aeabi_fdiv+0x220>
 8000b4e:	2001      	movs	r0, #1
 8000b50:	2200      	movs	r2, #0
 8000b52:	e791      	b.n	8000a78 <__aeabi_fdiv+0xc0>
 8000b54:	20ff      	movs	r0, #255	; 0xff
 8000b56:	2200      	movs	r2, #0
 8000b58:	e78e      	b.n	8000a78 <__aeabi_fdiv+0xc0>
 8000b5a:	2280      	movs	r2, #128	; 0x80
 8000b5c:	2600      	movs	r6, #0
 8000b5e:	20ff      	movs	r0, #255	; 0xff
 8000b60:	03d2      	lsls	r2, r2, #15
 8000b62:	e789      	b.n	8000a78 <__aeabi_fdiv+0xc0>
 8000b64:	2300      	movs	r3, #0
 8000b66:	4698      	mov	r8, r3
 8000b68:	2280      	movs	r2, #128	; 0x80
 8000b6a:	03d2      	lsls	r2, r2, #15
 8000b6c:	4215      	tst	r5, r2
 8000b6e:	d008      	beq.n	8000b82 <__aeabi_fdiv+0x1ca>
 8000b70:	4643      	mov	r3, r8
 8000b72:	4213      	tst	r3, r2
 8000b74:	d105      	bne.n	8000b82 <__aeabi_fdiv+0x1ca>
 8000b76:	431a      	orrs	r2, r3
 8000b78:	0252      	lsls	r2, r2, #9
 8000b7a:	0026      	movs	r6, r4
 8000b7c:	20ff      	movs	r0, #255	; 0xff
 8000b7e:	0a52      	lsrs	r2, r2, #9
 8000b80:	e77a      	b.n	8000a78 <__aeabi_fdiv+0xc0>
 8000b82:	2280      	movs	r2, #128	; 0x80
 8000b84:	03d2      	lsls	r2, r2, #15
 8000b86:	432a      	orrs	r2, r5
 8000b88:	0252      	lsls	r2, r2, #9
 8000b8a:	20ff      	movs	r0, #255	; 0xff
 8000b8c:	0a52      	lsrs	r2, r2, #9
 8000b8e:	e773      	b.n	8000a78 <__aeabi_fdiv+0xc0>
 8000b90:	4642      	mov	r2, r8
 8000b92:	016b      	lsls	r3, r5, #5
 8000b94:	0155      	lsls	r5, r2, #5
 8000b96:	42ab      	cmp	r3, r5
 8000b98:	d21a      	bcs.n	8000bd0 <__aeabi_fdiv+0x218>
 8000b9a:	201b      	movs	r0, #27
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	3f01      	subs	r7, #1
 8000ba0:	2601      	movs	r6, #1
 8000ba2:	001c      	movs	r4, r3
 8000ba4:	0052      	lsls	r2, r2, #1
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	2c00      	cmp	r4, #0
 8000baa:	db01      	blt.n	8000bb0 <__aeabi_fdiv+0x1f8>
 8000bac:	429d      	cmp	r5, r3
 8000bae:	d801      	bhi.n	8000bb4 <__aeabi_fdiv+0x1fc>
 8000bb0:	1b5b      	subs	r3, r3, r5
 8000bb2:	4332      	orrs	r2, r6
 8000bb4:	3801      	subs	r0, #1
 8000bb6:	2800      	cmp	r0, #0
 8000bb8:	d1f3      	bne.n	8000ba2 <__aeabi_fdiv+0x1ea>
 8000bba:	1e58      	subs	r0, r3, #1
 8000bbc:	4183      	sbcs	r3, r0
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	001d      	movs	r5, r3
 8000bc2:	003b      	movs	r3, r7
 8000bc4:	337f      	adds	r3, #127	; 0x7f
 8000bc6:	000e      	movs	r6, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	dd00      	ble.n	8000bce <__aeabi_fdiv+0x216>
 8000bcc:	e73d      	b.n	8000a4a <__aeabi_fdiv+0x92>
 8000bce:	e7aa      	b.n	8000b26 <__aeabi_fdiv+0x16e>
 8000bd0:	201a      	movs	r0, #26
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	1b5b      	subs	r3, r3, r5
 8000bd6:	e7e3      	b.n	8000ba0 <__aeabi_fdiv+0x1e8>
 8000bd8:	01aa      	lsls	r2, r5, #6
 8000bda:	2000      	movs	r0, #0
 8000bdc:	0a52      	lsrs	r2, r2, #9
 8000bde:	e74b      	b.n	8000a78 <__aeabi_fdiv+0xc0>
 8000be0:	08015e30 	.word	0x08015e30
 8000be4:	f7ffffff 	.word	0xf7ffffff
 8000be8:	08015e70 	.word	0x08015e70

08000bec <__eqsf2>:
 8000bec:	b570      	push	{r4, r5, r6, lr}
 8000bee:	0042      	lsls	r2, r0, #1
 8000bf0:	0245      	lsls	r5, r0, #9
 8000bf2:	024e      	lsls	r6, r1, #9
 8000bf4:	004c      	lsls	r4, r1, #1
 8000bf6:	0fc3      	lsrs	r3, r0, #31
 8000bf8:	0a6d      	lsrs	r5, r5, #9
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	0e12      	lsrs	r2, r2, #24
 8000bfe:	0a76      	lsrs	r6, r6, #9
 8000c00:	0e24      	lsrs	r4, r4, #24
 8000c02:	0fc9      	lsrs	r1, r1, #31
 8000c04:	2aff      	cmp	r2, #255	; 0xff
 8000c06:	d006      	beq.n	8000c16 <__eqsf2+0x2a>
 8000c08:	2cff      	cmp	r4, #255	; 0xff
 8000c0a:	d003      	beq.n	8000c14 <__eqsf2+0x28>
 8000c0c:	42a2      	cmp	r2, r4
 8000c0e:	d101      	bne.n	8000c14 <__eqsf2+0x28>
 8000c10:	42b5      	cmp	r5, r6
 8000c12:	d006      	beq.n	8000c22 <__eqsf2+0x36>
 8000c14:	bd70      	pop	{r4, r5, r6, pc}
 8000c16:	2d00      	cmp	r5, #0
 8000c18:	d1fc      	bne.n	8000c14 <__eqsf2+0x28>
 8000c1a:	2cff      	cmp	r4, #255	; 0xff
 8000c1c:	d1fa      	bne.n	8000c14 <__eqsf2+0x28>
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d1f8      	bne.n	8000c14 <__eqsf2+0x28>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d006      	beq.n	8000c34 <__eqsf2+0x48>
 8000c26:	2001      	movs	r0, #1
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	d1f3      	bne.n	8000c14 <__eqsf2+0x28>
 8000c2c:	0028      	movs	r0, r5
 8000c2e:	1e43      	subs	r3, r0, #1
 8000c30:	4198      	sbcs	r0, r3
 8000c32:	e7ef      	b.n	8000c14 <__eqsf2+0x28>
 8000c34:	2000      	movs	r0, #0
 8000c36:	e7ed      	b.n	8000c14 <__eqsf2+0x28>

08000c38 <__gesf2>:
 8000c38:	b570      	push	{r4, r5, r6, lr}
 8000c3a:	0042      	lsls	r2, r0, #1
 8000c3c:	0245      	lsls	r5, r0, #9
 8000c3e:	024e      	lsls	r6, r1, #9
 8000c40:	004c      	lsls	r4, r1, #1
 8000c42:	0fc3      	lsrs	r3, r0, #31
 8000c44:	0a6d      	lsrs	r5, r5, #9
 8000c46:	0e12      	lsrs	r2, r2, #24
 8000c48:	0a76      	lsrs	r6, r6, #9
 8000c4a:	0e24      	lsrs	r4, r4, #24
 8000c4c:	0fc8      	lsrs	r0, r1, #31
 8000c4e:	2aff      	cmp	r2, #255	; 0xff
 8000c50:	d01b      	beq.n	8000c8a <__gesf2+0x52>
 8000c52:	2cff      	cmp	r4, #255	; 0xff
 8000c54:	d00e      	beq.n	8000c74 <__gesf2+0x3c>
 8000c56:	2a00      	cmp	r2, #0
 8000c58:	d11b      	bne.n	8000c92 <__gesf2+0x5a>
 8000c5a:	2c00      	cmp	r4, #0
 8000c5c:	d101      	bne.n	8000c62 <__gesf2+0x2a>
 8000c5e:	2e00      	cmp	r6, #0
 8000c60:	d01c      	beq.n	8000c9c <__gesf2+0x64>
 8000c62:	2d00      	cmp	r5, #0
 8000c64:	d00c      	beq.n	8000c80 <__gesf2+0x48>
 8000c66:	4283      	cmp	r3, r0
 8000c68:	d01c      	beq.n	8000ca4 <__gesf2+0x6c>
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	1e58      	subs	r0, r3, #1
 8000c6e:	4008      	ands	r0, r1
 8000c70:	3801      	subs	r0, #1
 8000c72:	bd70      	pop	{r4, r5, r6, pc}
 8000c74:	2e00      	cmp	r6, #0
 8000c76:	d122      	bne.n	8000cbe <__gesf2+0x86>
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	d1f4      	bne.n	8000c66 <__gesf2+0x2e>
 8000c7c:	2d00      	cmp	r5, #0
 8000c7e:	d1f2      	bne.n	8000c66 <__gesf2+0x2e>
 8000c80:	2800      	cmp	r0, #0
 8000c82:	d1f6      	bne.n	8000c72 <__gesf2+0x3a>
 8000c84:	2001      	movs	r0, #1
 8000c86:	4240      	negs	r0, r0
 8000c88:	e7f3      	b.n	8000c72 <__gesf2+0x3a>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	d117      	bne.n	8000cbe <__gesf2+0x86>
 8000c8e:	2cff      	cmp	r4, #255	; 0xff
 8000c90:	d0f0      	beq.n	8000c74 <__gesf2+0x3c>
 8000c92:	2c00      	cmp	r4, #0
 8000c94:	d1e7      	bne.n	8000c66 <__gesf2+0x2e>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d1e5      	bne.n	8000c66 <__gesf2+0x2e>
 8000c9a:	e7e6      	b.n	8000c6a <__gesf2+0x32>
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e7      	beq.n	8000c72 <__gesf2+0x3a>
 8000ca2:	e7e2      	b.n	8000c6a <__gesf2+0x32>
 8000ca4:	42a2      	cmp	r2, r4
 8000ca6:	dc05      	bgt.n	8000cb4 <__gesf2+0x7c>
 8000ca8:	dbea      	blt.n	8000c80 <__gesf2+0x48>
 8000caa:	42b5      	cmp	r5, r6
 8000cac:	d802      	bhi.n	8000cb4 <__gesf2+0x7c>
 8000cae:	d3e7      	bcc.n	8000c80 <__gesf2+0x48>
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	e7de      	b.n	8000c72 <__gesf2+0x3a>
 8000cb4:	4243      	negs	r3, r0
 8000cb6:	4158      	adcs	r0, r3
 8000cb8:	0040      	lsls	r0, r0, #1
 8000cba:	3801      	subs	r0, #1
 8000cbc:	e7d9      	b.n	8000c72 <__gesf2+0x3a>
 8000cbe:	2002      	movs	r0, #2
 8000cc0:	4240      	negs	r0, r0
 8000cc2:	e7d6      	b.n	8000c72 <__gesf2+0x3a>

08000cc4 <__lesf2>:
 8000cc4:	b570      	push	{r4, r5, r6, lr}
 8000cc6:	0042      	lsls	r2, r0, #1
 8000cc8:	0245      	lsls	r5, r0, #9
 8000cca:	024e      	lsls	r6, r1, #9
 8000ccc:	004c      	lsls	r4, r1, #1
 8000cce:	0fc3      	lsrs	r3, r0, #31
 8000cd0:	0a6d      	lsrs	r5, r5, #9
 8000cd2:	0e12      	lsrs	r2, r2, #24
 8000cd4:	0a76      	lsrs	r6, r6, #9
 8000cd6:	0e24      	lsrs	r4, r4, #24
 8000cd8:	0fc8      	lsrs	r0, r1, #31
 8000cda:	2aff      	cmp	r2, #255	; 0xff
 8000cdc:	d00b      	beq.n	8000cf6 <__lesf2+0x32>
 8000cde:	2cff      	cmp	r4, #255	; 0xff
 8000ce0:	d00d      	beq.n	8000cfe <__lesf2+0x3a>
 8000ce2:	2a00      	cmp	r2, #0
 8000ce4:	d11f      	bne.n	8000d26 <__lesf2+0x62>
 8000ce6:	2c00      	cmp	r4, #0
 8000ce8:	d116      	bne.n	8000d18 <__lesf2+0x54>
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d114      	bne.n	8000d18 <__lesf2+0x54>
 8000cee:	2000      	movs	r0, #0
 8000cf0:	2d00      	cmp	r5, #0
 8000cf2:	d010      	beq.n	8000d16 <__lesf2+0x52>
 8000cf4:	e009      	b.n	8000d0a <__lesf2+0x46>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d10c      	bne.n	8000d14 <__lesf2+0x50>
 8000cfa:	2cff      	cmp	r4, #255	; 0xff
 8000cfc:	d113      	bne.n	8000d26 <__lesf2+0x62>
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	d108      	bne.n	8000d14 <__lesf2+0x50>
 8000d02:	2a00      	cmp	r2, #0
 8000d04:	d008      	beq.n	8000d18 <__lesf2+0x54>
 8000d06:	4283      	cmp	r3, r0
 8000d08:	d012      	beq.n	8000d30 <__lesf2+0x6c>
 8000d0a:	2102      	movs	r1, #2
 8000d0c:	1e58      	subs	r0, r3, #1
 8000d0e:	4008      	ands	r0, r1
 8000d10:	3801      	subs	r0, #1
 8000d12:	e000      	b.n	8000d16 <__lesf2+0x52>
 8000d14:	2002      	movs	r0, #2
 8000d16:	bd70      	pop	{r4, r5, r6, pc}
 8000d18:	2d00      	cmp	r5, #0
 8000d1a:	d1f4      	bne.n	8000d06 <__lesf2+0x42>
 8000d1c:	2800      	cmp	r0, #0
 8000d1e:	d1fa      	bne.n	8000d16 <__lesf2+0x52>
 8000d20:	2001      	movs	r0, #1
 8000d22:	4240      	negs	r0, r0
 8000d24:	e7f7      	b.n	8000d16 <__lesf2+0x52>
 8000d26:	2c00      	cmp	r4, #0
 8000d28:	d1ed      	bne.n	8000d06 <__lesf2+0x42>
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d1eb      	bne.n	8000d06 <__lesf2+0x42>
 8000d2e:	e7ec      	b.n	8000d0a <__lesf2+0x46>
 8000d30:	42a2      	cmp	r2, r4
 8000d32:	dc05      	bgt.n	8000d40 <__lesf2+0x7c>
 8000d34:	dbf2      	blt.n	8000d1c <__lesf2+0x58>
 8000d36:	42b5      	cmp	r5, r6
 8000d38:	d802      	bhi.n	8000d40 <__lesf2+0x7c>
 8000d3a:	d3ef      	bcc.n	8000d1c <__lesf2+0x58>
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	e7ea      	b.n	8000d16 <__lesf2+0x52>
 8000d40:	4243      	negs	r3, r0
 8000d42:	4158      	adcs	r0, r3
 8000d44:	0040      	lsls	r0, r0, #1
 8000d46:	3801      	subs	r0, #1
 8000d48:	e7e5      	b.n	8000d16 <__lesf2+0x52>
 8000d4a:	46c0      	nop			; (mov r8, r8)

08000d4c <__aeabi_fmul>:
 8000d4c:	0243      	lsls	r3, r0, #9
 8000d4e:	0a5b      	lsrs	r3, r3, #9
 8000d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d52:	464f      	mov	r7, r9
 8000d54:	4646      	mov	r6, r8
 8000d56:	4699      	mov	r9, r3
 8000d58:	46d6      	mov	lr, sl
 8000d5a:	0fc3      	lsrs	r3, r0, #31
 8000d5c:	0045      	lsls	r5, r0, #1
 8000d5e:	4698      	mov	r8, r3
 8000d60:	b5c0      	push	{r6, r7, lr}
 8000d62:	464b      	mov	r3, r9
 8000d64:	1c0f      	adds	r7, r1, #0
 8000d66:	0e2d      	lsrs	r5, r5, #24
 8000d68:	d100      	bne.n	8000d6c <__aeabi_fmul+0x20>
 8000d6a:	e0cb      	b.n	8000f04 <__aeabi_fmul+0x1b8>
 8000d6c:	2dff      	cmp	r5, #255	; 0xff
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_fmul+0x26>
 8000d70:	e0cf      	b.n	8000f12 <__aeabi_fmul+0x1c6>
 8000d72:	2280      	movs	r2, #128	; 0x80
 8000d74:	00db      	lsls	r3, r3, #3
 8000d76:	04d2      	lsls	r2, r2, #19
 8000d78:	431a      	orrs	r2, r3
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	4691      	mov	r9, r2
 8000d7e:	2600      	movs	r6, #0
 8000d80:	469a      	mov	sl, r3
 8000d82:	3d7f      	subs	r5, #127	; 0x7f
 8000d84:	027c      	lsls	r4, r7, #9
 8000d86:	007b      	lsls	r3, r7, #1
 8000d88:	0a64      	lsrs	r4, r4, #9
 8000d8a:	0e1b      	lsrs	r3, r3, #24
 8000d8c:	0fff      	lsrs	r7, r7, #31
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d100      	bne.n	8000d94 <__aeabi_fmul+0x48>
 8000d92:	e0a9      	b.n	8000ee8 <__aeabi_fmul+0x19c>
 8000d94:	2bff      	cmp	r3, #255	; 0xff
 8000d96:	d011      	beq.n	8000dbc <__aeabi_fmul+0x70>
 8000d98:	2280      	movs	r2, #128	; 0x80
 8000d9a:	00e4      	lsls	r4, r4, #3
 8000d9c:	04d2      	lsls	r2, r2, #19
 8000d9e:	4314      	orrs	r4, r2
 8000da0:	4642      	mov	r2, r8
 8000da2:	3b7f      	subs	r3, #127	; 0x7f
 8000da4:	195b      	adds	r3, r3, r5
 8000da6:	407a      	eors	r2, r7
 8000da8:	2000      	movs	r0, #0
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	1c5d      	adds	r5, r3, #1
 8000dae:	2e0a      	cmp	r6, #10
 8000db0:	dd13      	ble.n	8000dda <__aeabi_fmul+0x8e>
 8000db2:	003a      	movs	r2, r7
 8000db4:	2e0b      	cmp	r6, #11
 8000db6:	d047      	beq.n	8000e48 <__aeabi_fmul+0xfc>
 8000db8:	4647      	mov	r7, r8
 8000dba:	e03f      	b.n	8000e3c <__aeabi_fmul+0xf0>
 8000dbc:	002b      	movs	r3, r5
 8000dbe:	33ff      	adds	r3, #255	; 0xff
 8000dc0:	2c00      	cmp	r4, #0
 8000dc2:	d11e      	bne.n	8000e02 <__aeabi_fmul+0xb6>
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	4316      	orrs	r6, r2
 8000dc8:	4642      	mov	r2, r8
 8000dca:	3501      	adds	r5, #1
 8000dcc:	407a      	eors	r2, r7
 8000dce:	b2d2      	uxtb	r2, r2
 8000dd0:	35ff      	adds	r5, #255	; 0xff
 8000dd2:	2e0a      	cmp	r6, #10
 8000dd4:	dd00      	ble.n	8000dd8 <__aeabi_fmul+0x8c>
 8000dd6:	e0e4      	b.n	8000fa2 <__aeabi_fmul+0x256>
 8000dd8:	2002      	movs	r0, #2
 8000dda:	2e02      	cmp	r6, #2
 8000ddc:	dc1c      	bgt.n	8000e18 <__aeabi_fmul+0xcc>
 8000dde:	3e01      	subs	r6, #1
 8000de0:	2e01      	cmp	r6, #1
 8000de2:	d842      	bhi.n	8000e6a <__aeabi_fmul+0x11e>
 8000de4:	2802      	cmp	r0, #2
 8000de6:	d03d      	beq.n	8000e64 <__aeabi_fmul+0x118>
 8000de8:	2801      	cmp	r0, #1
 8000dea:	d166      	bne.n	8000eba <__aeabi_fmul+0x16e>
 8000dec:	2000      	movs	r0, #0
 8000dee:	2100      	movs	r1, #0
 8000df0:	05c0      	lsls	r0, r0, #23
 8000df2:	4308      	orrs	r0, r1
 8000df4:	07d2      	lsls	r2, r2, #31
 8000df6:	4310      	orrs	r0, r2
 8000df8:	bce0      	pop	{r5, r6, r7}
 8000dfa:	46ba      	mov	sl, r7
 8000dfc:	46b1      	mov	r9, r6
 8000dfe:	46a8      	mov	r8, r5
 8000e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e02:	2203      	movs	r2, #3
 8000e04:	4316      	orrs	r6, r2
 8000e06:	4642      	mov	r2, r8
 8000e08:	3501      	adds	r5, #1
 8000e0a:	407a      	eors	r2, r7
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	35ff      	adds	r5, #255	; 0xff
 8000e10:	2e0a      	cmp	r6, #10
 8000e12:	dd00      	ble.n	8000e16 <__aeabi_fmul+0xca>
 8000e14:	e0e4      	b.n	8000fe0 <__aeabi_fmul+0x294>
 8000e16:	2003      	movs	r0, #3
 8000e18:	2101      	movs	r1, #1
 8000e1a:	40b1      	lsls	r1, r6
 8000e1c:	26a6      	movs	r6, #166	; 0xa6
 8000e1e:	00f6      	lsls	r6, r6, #3
 8000e20:	4231      	tst	r1, r6
 8000e22:	d10a      	bne.n	8000e3a <__aeabi_fmul+0xee>
 8000e24:	2690      	movs	r6, #144	; 0x90
 8000e26:	00b6      	lsls	r6, r6, #2
 8000e28:	4231      	tst	r1, r6
 8000e2a:	d116      	bne.n	8000e5a <__aeabi_fmul+0x10e>
 8000e2c:	3eb9      	subs	r6, #185	; 0xb9
 8000e2e:	3eff      	subs	r6, #255	; 0xff
 8000e30:	420e      	tst	r6, r1
 8000e32:	d01a      	beq.n	8000e6a <__aeabi_fmul+0x11e>
 8000e34:	46a1      	mov	r9, r4
 8000e36:	4682      	mov	sl, r0
 8000e38:	e000      	b.n	8000e3c <__aeabi_fmul+0xf0>
 8000e3a:	0017      	movs	r7, r2
 8000e3c:	4653      	mov	r3, sl
 8000e3e:	003a      	movs	r2, r7
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d00f      	beq.n	8000e64 <__aeabi_fmul+0x118>
 8000e44:	464c      	mov	r4, r9
 8000e46:	4650      	mov	r0, sl
 8000e48:	2803      	cmp	r0, #3
 8000e4a:	d1cd      	bne.n	8000de8 <__aeabi_fmul+0x9c>
 8000e4c:	2180      	movs	r1, #128	; 0x80
 8000e4e:	03c9      	lsls	r1, r1, #15
 8000e50:	4321      	orrs	r1, r4
 8000e52:	0249      	lsls	r1, r1, #9
 8000e54:	20ff      	movs	r0, #255	; 0xff
 8000e56:	0a49      	lsrs	r1, r1, #9
 8000e58:	e7ca      	b.n	8000df0 <__aeabi_fmul+0xa4>
 8000e5a:	2180      	movs	r1, #128	; 0x80
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	20ff      	movs	r0, #255	; 0xff
 8000e60:	03c9      	lsls	r1, r1, #15
 8000e62:	e7c5      	b.n	8000df0 <__aeabi_fmul+0xa4>
 8000e64:	20ff      	movs	r0, #255	; 0xff
 8000e66:	2100      	movs	r1, #0
 8000e68:	e7c2      	b.n	8000df0 <__aeabi_fmul+0xa4>
 8000e6a:	0c20      	lsrs	r0, r4, #16
 8000e6c:	4649      	mov	r1, r9
 8000e6e:	0424      	lsls	r4, r4, #16
 8000e70:	0c24      	lsrs	r4, r4, #16
 8000e72:	0027      	movs	r7, r4
 8000e74:	0c0e      	lsrs	r6, r1, #16
 8000e76:	0409      	lsls	r1, r1, #16
 8000e78:	0c09      	lsrs	r1, r1, #16
 8000e7a:	4374      	muls	r4, r6
 8000e7c:	434f      	muls	r7, r1
 8000e7e:	4346      	muls	r6, r0
 8000e80:	4348      	muls	r0, r1
 8000e82:	0c39      	lsrs	r1, r7, #16
 8000e84:	1900      	adds	r0, r0, r4
 8000e86:	1809      	adds	r1, r1, r0
 8000e88:	428c      	cmp	r4, r1
 8000e8a:	d903      	bls.n	8000e94 <__aeabi_fmul+0x148>
 8000e8c:	2080      	movs	r0, #128	; 0x80
 8000e8e:	0240      	lsls	r0, r0, #9
 8000e90:	4684      	mov	ip, r0
 8000e92:	4466      	add	r6, ip
 8000e94:	043f      	lsls	r7, r7, #16
 8000e96:	0408      	lsls	r0, r1, #16
 8000e98:	0c3f      	lsrs	r7, r7, #16
 8000e9a:	19c0      	adds	r0, r0, r7
 8000e9c:	0184      	lsls	r4, r0, #6
 8000e9e:	1e67      	subs	r7, r4, #1
 8000ea0:	41bc      	sbcs	r4, r7
 8000ea2:	0c09      	lsrs	r1, r1, #16
 8000ea4:	0e80      	lsrs	r0, r0, #26
 8000ea6:	1989      	adds	r1, r1, r6
 8000ea8:	4304      	orrs	r4, r0
 8000eaa:	0189      	lsls	r1, r1, #6
 8000eac:	430c      	orrs	r4, r1
 8000eae:	0109      	lsls	r1, r1, #4
 8000eb0:	d571      	bpl.n	8000f96 <__aeabi_fmul+0x24a>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	0861      	lsrs	r1, r4, #1
 8000eb6:	401c      	ands	r4, r3
 8000eb8:	430c      	orrs	r4, r1
 8000eba:	002b      	movs	r3, r5
 8000ebc:	337f      	adds	r3, #127	; 0x7f
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	dd51      	ble.n	8000f66 <__aeabi_fmul+0x21a>
 8000ec2:	0761      	lsls	r1, r4, #29
 8000ec4:	d004      	beq.n	8000ed0 <__aeabi_fmul+0x184>
 8000ec6:	210f      	movs	r1, #15
 8000ec8:	4021      	ands	r1, r4
 8000eca:	2904      	cmp	r1, #4
 8000ecc:	d000      	beq.n	8000ed0 <__aeabi_fmul+0x184>
 8000ece:	3404      	adds	r4, #4
 8000ed0:	0121      	lsls	r1, r4, #4
 8000ed2:	d503      	bpl.n	8000edc <__aeabi_fmul+0x190>
 8000ed4:	4b43      	ldr	r3, [pc, #268]	; (8000fe4 <__aeabi_fmul+0x298>)
 8000ed6:	401c      	ands	r4, r3
 8000ed8:	002b      	movs	r3, r5
 8000eda:	3380      	adds	r3, #128	; 0x80
 8000edc:	2bfe      	cmp	r3, #254	; 0xfe
 8000ede:	dcc1      	bgt.n	8000e64 <__aeabi_fmul+0x118>
 8000ee0:	01a1      	lsls	r1, r4, #6
 8000ee2:	0a49      	lsrs	r1, r1, #9
 8000ee4:	b2d8      	uxtb	r0, r3
 8000ee6:	e783      	b.n	8000df0 <__aeabi_fmul+0xa4>
 8000ee8:	2c00      	cmp	r4, #0
 8000eea:	d12c      	bne.n	8000f46 <__aeabi_fmul+0x1fa>
 8000eec:	2301      	movs	r3, #1
 8000eee:	4642      	mov	r2, r8
 8000ef0:	431e      	orrs	r6, r3
 8000ef2:	002b      	movs	r3, r5
 8000ef4:	407a      	eors	r2, r7
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	1c5d      	adds	r5, r3, #1
 8000efc:	2e0a      	cmp	r6, #10
 8000efe:	dd00      	ble.n	8000f02 <__aeabi_fmul+0x1b6>
 8000f00:	e757      	b.n	8000db2 <__aeabi_fmul+0x66>
 8000f02:	e76a      	b.n	8000dda <__aeabi_fmul+0x8e>
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d110      	bne.n	8000f2a <__aeabi_fmul+0x1de>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	2604      	movs	r6, #4
 8000f0c:	2500      	movs	r5, #0
 8000f0e:	469a      	mov	sl, r3
 8000f10:	e738      	b.n	8000d84 <__aeabi_fmul+0x38>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d104      	bne.n	8000f20 <__aeabi_fmul+0x1d4>
 8000f16:	2302      	movs	r3, #2
 8000f18:	2608      	movs	r6, #8
 8000f1a:	25ff      	movs	r5, #255	; 0xff
 8000f1c:	469a      	mov	sl, r3
 8000f1e:	e731      	b.n	8000d84 <__aeabi_fmul+0x38>
 8000f20:	2303      	movs	r3, #3
 8000f22:	260c      	movs	r6, #12
 8000f24:	25ff      	movs	r5, #255	; 0xff
 8000f26:	469a      	mov	sl, r3
 8000f28:	e72c      	b.n	8000d84 <__aeabi_fmul+0x38>
 8000f2a:	4648      	mov	r0, r9
 8000f2c:	f000 fa6e 	bl	800140c <__clzsi2>
 8000f30:	464a      	mov	r2, r9
 8000f32:	1f43      	subs	r3, r0, #5
 8000f34:	2576      	movs	r5, #118	; 0x76
 8000f36:	409a      	lsls	r2, r3
 8000f38:	2300      	movs	r3, #0
 8000f3a:	426d      	negs	r5, r5
 8000f3c:	4691      	mov	r9, r2
 8000f3e:	2600      	movs	r6, #0
 8000f40:	469a      	mov	sl, r3
 8000f42:	1a2d      	subs	r5, r5, r0
 8000f44:	e71e      	b.n	8000d84 <__aeabi_fmul+0x38>
 8000f46:	0020      	movs	r0, r4
 8000f48:	f000 fa60 	bl	800140c <__clzsi2>
 8000f4c:	4642      	mov	r2, r8
 8000f4e:	1f43      	subs	r3, r0, #5
 8000f50:	409c      	lsls	r4, r3
 8000f52:	1a2b      	subs	r3, r5, r0
 8000f54:	3b76      	subs	r3, #118	; 0x76
 8000f56:	407a      	eors	r2, r7
 8000f58:	2000      	movs	r0, #0
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	1c5d      	adds	r5, r3, #1
 8000f5e:	2e0a      	cmp	r6, #10
 8000f60:	dd00      	ble.n	8000f64 <__aeabi_fmul+0x218>
 8000f62:	e726      	b.n	8000db2 <__aeabi_fmul+0x66>
 8000f64:	e739      	b.n	8000dda <__aeabi_fmul+0x8e>
 8000f66:	2101      	movs	r1, #1
 8000f68:	1acb      	subs	r3, r1, r3
 8000f6a:	2b1b      	cmp	r3, #27
 8000f6c:	dd00      	ble.n	8000f70 <__aeabi_fmul+0x224>
 8000f6e:	e73d      	b.n	8000dec <__aeabi_fmul+0xa0>
 8000f70:	359e      	adds	r5, #158	; 0x9e
 8000f72:	0021      	movs	r1, r4
 8000f74:	40ac      	lsls	r4, r5
 8000f76:	40d9      	lsrs	r1, r3
 8000f78:	1e63      	subs	r3, r4, #1
 8000f7a:	419c      	sbcs	r4, r3
 8000f7c:	4321      	orrs	r1, r4
 8000f7e:	074b      	lsls	r3, r1, #29
 8000f80:	d004      	beq.n	8000f8c <__aeabi_fmul+0x240>
 8000f82:	230f      	movs	r3, #15
 8000f84:	400b      	ands	r3, r1
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	d000      	beq.n	8000f8c <__aeabi_fmul+0x240>
 8000f8a:	3104      	adds	r1, #4
 8000f8c:	014b      	lsls	r3, r1, #5
 8000f8e:	d504      	bpl.n	8000f9a <__aeabi_fmul+0x24e>
 8000f90:	2001      	movs	r0, #1
 8000f92:	2100      	movs	r1, #0
 8000f94:	e72c      	b.n	8000df0 <__aeabi_fmul+0xa4>
 8000f96:	001d      	movs	r5, r3
 8000f98:	e78f      	b.n	8000eba <__aeabi_fmul+0x16e>
 8000f9a:	0189      	lsls	r1, r1, #6
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	0a49      	lsrs	r1, r1, #9
 8000fa0:	e726      	b.n	8000df0 <__aeabi_fmul+0xa4>
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	2e0f      	cmp	r6, #15
 8000fa6:	d10c      	bne.n	8000fc2 <__aeabi_fmul+0x276>
 8000fa8:	2180      	movs	r1, #128	; 0x80
 8000faa:	464b      	mov	r3, r9
 8000fac:	03c9      	lsls	r1, r1, #15
 8000fae:	420b      	tst	r3, r1
 8000fb0:	d00d      	beq.n	8000fce <__aeabi_fmul+0x282>
 8000fb2:	420c      	tst	r4, r1
 8000fb4:	d10b      	bne.n	8000fce <__aeabi_fmul+0x282>
 8000fb6:	4321      	orrs	r1, r4
 8000fb8:	0249      	lsls	r1, r1, #9
 8000fba:	003a      	movs	r2, r7
 8000fbc:	20ff      	movs	r0, #255	; 0xff
 8000fbe:	0a49      	lsrs	r1, r1, #9
 8000fc0:	e716      	b.n	8000df0 <__aeabi_fmul+0xa4>
 8000fc2:	2e0b      	cmp	r6, #11
 8000fc4:	d000      	beq.n	8000fc8 <__aeabi_fmul+0x27c>
 8000fc6:	e6f7      	b.n	8000db8 <__aeabi_fmul+0x6c>
 8000fc8:	46a1      	mov	r9, r4
 8000fca:	469a      	mov	sl, r3
 8000fcc:	e736      	b.n	8000e3c <__aeabi_fmul+0xf0>
 8000fce:	2180      	movs	r1, #128	; 0x80
 8000fd0:	464b      	mov	r3, r9
 8000fd2:	03c9      	lsls	r1, r1, #15
 8000fd4:	4319      	orrs	r1, r3
 8000fd6:	0249      	lsls	r1, r1, #9
 8000fd8:	4642      	mov	r2, r8
 8000fda:	20ff      	movs	r0, #255	; 0xff
 8000fdc:	0a49      	lsrs	r1, r1, #9
 8000fde:	e707      	b.n	8000df0 <__aeabi_fmul+0xa4>
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e7df      	b.n	8000fa4 <__aeabi_fmul+0x258>
 8000fe4:	f7ffffff 	.word	0xf7ffffff

08000fe8 <__aeabi_fsub>:
 8000fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fea:	46c6      	mov	lr, r8
 8000fec:	0243      	lsls	r3, r0, #9
 8000fee:	0a5b      	lsrs	r3, r3, #9
 8000ff0:	0045      	lsls	r5, r0, #1
 8000ff2:	00da      	lsls	r2, r3, #3
 8000ff4:	0fc4      	lsrs	r4, r0, #31
 8000ff6:	0248      	lsls	r0, r1, #9
 8000ff8:	004f      	lsls	r7, r1, #1
 8000ffa:	4694      	mov	ip, r2
 8000ffc:	0a42      	lsrs	r2, r0, #9
 8000ffe:	001e      	movs	r6, r3
 8001000:	4690      	mov	r8, r2
 8001002:	b500      	push	{lr}
 8001004:	0e2d      	lsrs	r5, r5, #24
 8001006:	0e3f      	lsrs	r7, r7, #24
 8001008:	0fc9      	lsrs	r1, r1, #31
 800100a:	0980      	lsrs	r0, r0, #6
 800100c:	2fff      	cmp	r7, #255	; 0xff
 800100e:	d059      	beq.n	80010c4 <__aeabi_fsub+0xdc>
 8001010:	2201      	movs	r2, #1
 8001012:	4051      	eors	r1, r2
 8001014:	428c      	cmp	r4, r1
 8001016:	d039      	beq.n	800108c <__aeabi_fsub+0xa4>
 8001018:	1bea      	subs	r2, r5, r7
 800101a:	2a00      	cmp	r2, #0
 800101c:	dd58      	ble.n	80010d0 <__aeabi_fsub+0xe8>
 800101e:	2f00      	cmp	r7, #0
 8001020:	d068      	beq.n	80010f4 <__aeabi_fsub+0x10c>
 8001022:	2dff      	cmp	r5, #255	; 0xff
 8001024:	d100      	bne.n	8001028 <__aeabi_fsub+0x40>
 8001026:	e0d1      	b.n	80011cc <__aeabi_fsub+0x1e4>
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	04db      	lsls	r3, r3, #19
 800102c:	4318      	orrs	r0, r3
 800102e:	2a1b      	cmp	r2, #27
 8001030:	dc00      	bgt.n	8001034 <__aeabi_fsub+0x4c>
 8001032:	e0e3      	b.n	80011fc <__aeabi_fsub+0x214>
 8001034:	2301      	movs	r3, #1
 8001036:	4662      	mov	r2, ip
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	015a      	lsls	r2, r3, #5
 800103c:	d400      	bmi.n	8001040 <__aeabi_fsub+0x58>
 800103e:	e0ac      	b.n	800119a <__aeabi_fsub+0x1b2>
 8001040:	019b      	lsls	r3, r3, #6
 8001042:	099e      	lsrs	r6, r3, #6
 8001044:	0030      	movs	r0, r6
 8001046:	f000 f9e1 	bl	800140c <__clzsi2>
 800104a:	0033      	movs	r3, r6
 800104c:	3805      	subs	r0, #5
 800104e:	4083      	lsls	r3, r0
 8001050:	4285      	cmp	r5, r0
 8001052:	dc00      	bgt.n	8001056 <__aeabi_fsub+0x6e>
 8001054:	e0c6      	b.n	80011e4 <__aeabi_fsub+0x1fc>
 8001056:	4ab2      	ldr	r2, [pc, #712]	; (8001320 <__aeabi_fsub+0x338>)
 8001058:	1a2d      	subs	r5, r5, r0
 800105a:	4013      	ands	r3, r2
 800105c:	075a      	lsls	r2, r3, #29
 800105e:	d004      	beq.n	800106a <__aeabi_fsub+0x82>
 8001060:	220f      	movs	r2, #15
 8001062:	401a      	ands	r2, r3
 8001064:	2a04      	cmp	r2, #4
 8001066:	d000      	beq.n	800106a <__aeabi_fsub+0x82>
 8001068:	3304      	adds	r3, #4
 800106a:	015a      	lsls	r2, r3, #5
 800106c:	d400      	bmi.n	8001070 <__aeabi_fsub+0x88>
 800106e:	e097      	b.n	80011a0 <__aeabi_fsub+0x1b8>
 8001070:	1c6a      	adds	r2, r5, #1
 8001072:	2dfe      	cmp	r5, #254	; 0xfe
 8001074:	d100      	bne.n	8001078 <__aeabi_fsub+0x90>
 8001076:	e084      	b.n	8001182 <__aeabi_fsub+0x19a>
 8001078:	019b      	lsls	r3, r3, #6
 800107a:	0a5e      	lsrs	r6, r3, #9
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	05d0      	lsls	r0, r2, #23
 8001080:	4330      	orrs	r0, r6
 8001082:	07e4      	lsls	r4, r4, #31
 8001084:	4320      	orrs	r0, r4
 8001086:	bc80      	pop	{r7}
 8001088:	46b8      	mov	r8, r7
 800108a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800108c:	1bea      	subs	r2, r5, r7
 800108e:	2a00      	cmp	r2, #0
 8001090:	dd41      	ble.n	8001116 <__aeabi_fsub+0x12e>
 8001092:	2f00      	cmp	r7, #0
 8001094:	d06b      	beq.n	800116e <__aeabi_fsub+0x186>
 8001096:	2dff      	cmp	r5, #255	; 0xff
 8001098:	d100      	bne.n	800109c <__aeabi_fsub+0xb4>
 800109a:	e097      	b.n	80011cc <__aeabi_fsub+0x1e4>
 800109c:	2380      	movs	r3, #128	; 0x80
 800109e:	04db      	lsls	r3, r3, #19
 80010a0:	4318      	orrs	r0, r3
 80010a2:	2a1b      	cmp	r2, #27
 80010a4:	dc00      	bgt.n	80010a8 <__aeabi_fsub+0xc0>
 80010a6:	e0cc      	b.n	8001242 <__aeabi_fsub+0x25a>
 80010a8:	2301      	movs	r3, #1
 80010aa:	4463      	add	r3, ip
 80010ac:	015a      	lsls	r2, r3, #5
 80010ae:	d574      	bpl.n	800119a <__aeabi_fsub+0x1b2>
 80010b0:	3501      	adds	r5, #1
 80010b2:	2dff      	cmp	r5, #255	; 0xff
 80010b4:	d065      	beq.n	8001182 <__aeabi_fsub+0x19a>
 80010b6:	2201      	movs	r2, #1
 80010b8:	499a      	ldr	r1, [pc, #616]	; (8001324 <__aeabi_fsub+0x33c>)
 80010ba:	401a      	ands	r2, r3
 80010bc:	085b      	lsrs	r3, r3, #1
 80010be:	400b      	ands	r3, r1
 80010c0:	4313      	orrs	r3, r2
 80010c2:	e7cb      	b.n	800105c <__aeabi_fsub+0x74>
 80010c4:	2800      	cmp	r0, #0
 80010c6:	d01f      	beq.n	8001108 <__aeabi_fsub+0x120>
 80010c8:	428c      	cmp	r4, r1
 80010ca:	d022      	beq.n	8001112 <__aeabi_fsub+0x12a>
 80010cc:	002a      	movs	r2, r5
 80010ce:	3aff      	subs	r2, #255	; 0xff
 80010d0:	2a00      	cmp	r2, #0
 80010d2:	d035      	beq.n	8001140 <__aeabi_fsub+0x158>
 80010d4:	1b7a      	subs	r2, r7, r5
 80010d6:	2d00      	cmp	r5, #0
 80010d8:	d000      	beq.n	80010dc <__aeabi_fsub+0xf4>
 80010da:	e099      	b.n	8001210 <__aeabi_fsub+0x228>
 80010dc:	4663      	mov	r3, ip
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d100      	bne.n	80010e4 <__aeabi_fsub+0xfc>
 80010e2:	e0dd      	b.n	80012a0 <__aeabi_fsub+0x2b8>
 80010e4:	1e53      	subs	r3, r2, #1
 80010e6:	2a01      	cmp	r2, #1
 80010e8:	d100      	bne.n	80010ec <__aeabi_fsub+0x104>
 80010ea:	e105      	b.n	80012f8 <__aeabi_fsub+0x310>
 80010ec:	2aff      	cmp	r2, #255	; 0xff
 80010ee:	d06b      	beq.n	80011c8 <__aeabi_fsub+0x1e0>
 80010f0:	001a      	movs	r2, r3
 80010f2:	e094      	b.n	800121e <__aeabi_fsub+0x236>
 80010f4:	2800      	cmp	r0, #0
 80010f6:	d073      	beq.n	80011e0 <__aeabi_fsub+0x1f8>
 80010f8:	1e51      	subs	r1, r2, #1
 80010fa:	2a01      	cmp	r2, #1
 80010fc:	d100      	bne.n	8001100 <__aeabi_fsub+0x118>
 80010fe:	e0df      	b.n	80012c0 <__aeabi_fsub+0x2d8>
 8001100:	2aff      	cmp	r2, #255	; 0xff
 8001102:	d063      	beq.n	80011cc <__aeabi_fsub+0x1e4>
 8001104:	000a      	movs	r2, r1
 8001106:	e792      	b.n	800102e <__aeabi_fsub+0x46>
 8001108:	2201      	movs	r2, #1
 800110a:	4051      	eors	r1, r2
 800110c:	42a1      	cmp	r1, r4
 800110e:	d000      	beq.n	8001112 <__aeabi_fsub+0x12a>
 8001110:	e782      	b.n	8001018 <__aeabi_fsub+0x30>
 8001112:	002a      	movs	r2, r5
 8001114:	3aff      	subs	r2, #255	; 0xff
 8001116:	2a00      	cmp	r2, #0
 8001118:	d036      	beq.n	8001188 <__aeabi_fsub+0x1a0>
 800111a:	1b7a      	subs	r2, r7, r5
 800111c:	2d00      	cmp	r5, #0
 800111e:	d100      	bne.n	8001122 <__aeabi_fsub+0x13a>
 8001120:	e0aa      	b.n	8001278 <__aeabi_fsub+0x290>
 8001122:	2fff      	cmp	r7, #255	; 0xff
 8001124:	d100      	bne.n	8001128 <__aeabi_fsub+0x140>
 8001126:	e0da      	b.n	80012de <__aeabi_fsub+0x2f6>
 8001128:	2380      	movs	r3, #128	; 0x80
 800112a:	4661      	mov	r1, ip
 800112c:	04db      	lsls	r3, r3, #19
 800112e:	4319      	orrs	r1, r3
 8001130:	468c      	mov	ip, r1
 8001132:	2a1b      	cmp	r2, #27
 8001134:	dc00      	bgt.n	8001138 <__aeabi_fsub+0x150>
 8001136:	e0d4      	b.n	80012e2 <__aeabi_fsub+0x2fa>
 8001138:	2301      	movs	r3, #1
 800113a:	003d      	movs	r5, r7
 800113c:	181b      	adds	r3, r3, r0
 800113e:	e7b5      	b.n	80010ac <__aeabi_fsub+0xc4>
 8001140:	27fe      	movs	r7, #254	; 0xfe
 8001142:	1c6a      	adds	r2, r5, #1
 8001144:	4217      	tst	r7, r2
 8001146:	d171      	bne.n	800122c <__aeabi_fsub+0x244>
 8001148:	2d00      	cmp	r5, #0
 800114a:	d000      	beq.n	800114e <__aeabi_fsub+0x166>
 800114c:	e09e      	b.n	800128c <__aeabi_fsub+0x2a4>
 800114e:	4663      	mov	r3, ip
 8001150:	2b00      	cmp	r3, #0
 8001152:	d100      	bne.n	8001156 <__aeabi_fsub+0x16e>
 8001154:	e0d5      	b.n	8001302 <__aeabi_fsub+0x31a>
 8001156:	2200      	movs	r2, #0
 8001158:	2800      	cmp	r0, #0
 800115a:	d100      	bne.n	800115e <__aeabi_fsub+0x176>
 800115c:	e78f      	b.n	800107e <__aeabi_fsub+0x96>
 800115e:	1a1b      	subs	r3, r3, r0
 8001160:	015e      	lsls	r6, r3, #5
 8001162:	d400      	bmi.n	8001166 <__aeabi_fsub+0x17e>
 8001164:	e0d6      	b.n	8001314 <__aeabi_fsub+0x32c>
 8001166:	4663      	mov	r3, ip
 8001168:	000c      	movs	r4, r1
 800116a:	1ac3      	subs	r3, r0, r3
 800116c:	e776      	b.n	800105c <__aeabi_fsub+0x74>
 800116e:	2800      	cmp	r0, #0
 8001170:	d036      	beq.n	80011e0 <__aeabi_fsub+0x1f8>
 8001172:	1e51      	subs	r1, r2, #1
 8001174:	2a01      	cmp	r2, #1
 8001176:	d100      	bne.n	800117a <__aeabi_fsub+0x192>
 8001178:	e09a      	b.n	80012b0 <__aeabi_fsub+0x2c8>
 800117a:	2aff      	cmp	r2, #255	; 0xff
 800117c:	d026      	beq.n	80011cc <__aeabi_fsub+0x1e4>
 800117e:	000a      	movs	r2, r1
 8001180:	e78f      	b.n	80010a2 <__aeabi_fsub+0xba>
 8001182:	22ff      	movs	r2, #255	; 0xff
 8001184:	2600      	movs	r6, #0
 8001186:	e77a      	b.n	800107e <__aeabi_fsub+0x96>
 8001188:	27fe      	movs	r7, #254	; 0xfe
 800118a:	1c6a      	adds	r2, r5, #1
 800118c:	4217      	tst	r7, r2
 800118e:	d062      	beq.n	8001256 <__aeabi_fsub+0x26e>
 8001190:	2aff      	cmp	r2, #255	; 0xff
 8001192:	d0f6      	beq.n	8001182 <__aeabi_fsub+0x19a>
 8001194:	0015      	movs	r5, r2
 8001196:	4460      	add	r0, ip
 8001198:	0843      	lsrs	r3, r0, #1
 800119a:	075a      	lsls	r2, r3, #29
 800119c:	d000      	beq.n	80011a0 <__aeabi_fsub+0x1b8>
 800119e:	e75f      	b.n	8001060 <__aeabi_fsub+0x78>
 80011a0:	08db      	lsrs	r3, r3, #3
 80011a2:	2dff      	cmp	r5, #255	; 0xff
 80011a4:	d012      	beq.n	80011cc <__aeabi_fsub+0x1e4>
 80011a6:	025b      	lsls	r3, r3, #9
 80011a8:	0a5e      	lsrs	r6, r3, #9
 80011aa:	b2ea      	uxtb	r2, r5
 80011ac:	e767      	b.n	800107e <__aeabi_fsub+0x96>
 80011ae:	4662      	mov	r2, ip
 80011b0:	2a00      	cmp	r2, #0
 80011b2:	d100      	bne.n	80011b6 <__aeabi_fsub+0x1ce>
 80011b4:	e093      	b.n	80012de <__aeabi_fsub+0x2f6>
 80011b6:	2800      	cmp	r0, #0
 80011b8:	d008      	beq.n	80011cc <__aeabi_fsub+0x1e4>
 80011ba:	2280      	movs	r2, #128	; 0x80
 80011bc:	03d2      	lsls	r2, r2, #15
 80011be:	4213      	tst	r3, r2
 80011c0:	d004      	beq.n	80011cc <__aeabi_fsub+0x1e4>
 80011c2:	4640      	mov	r0, r8
 80011c4:	4210      	tst	r0, r2
 80011c6:	d101      	bne.n	80011cc <__aeabi_fsub+0x1e4>
 80011c8:	000c      	movs	r4, r1
 80011ca:	4643      	mov	r3, r8
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0d8      	beq.n	8001182 <__aeabi_fsub+0x19a>
 80011d0:	2680      	movs	r6, #128	; 0x80
 80011d2:	03f6      	lsls	r6, r6, #15
 80011d4:	431e      	orrs	r6, r3
 80011d6:	0276      	lsls	r6, r6, #9
 80011d8:	22ff      	movs	r2, #255	; 0xff
 80011da:	0a76      	lsrs	r6, r6, #9
 80011dc:	e74f      	b.n	800107e <__aeabi_fsub+0x96>
 80011de:	4643      	mov	r3, r8
 80011e0:	0015      	movs	r5, r2
 80011e2:	e7de      	b.n	80011a2 <__aeabi_fsub+0x1ba>
 80011e4:	2220      	movs	r2, #32
 80011e6:	1b40      	subs	r0, r0, r5
 80011e8:	3001      	adds	r0, #1
 80011ea:	1a12      	subs	r2, r2, r0
 80011ec:	0019      	movs	r1, r3
 80011ee:	4093      	lsls	r3, r2
 80011f0:	40c1      	lsrs	r1, r0
 80011f2:	1e5a      	subs	r2, r3, #1
 80011f4:	4193      	sbcs	r3, r2
 80011f6:	2500      	movs	r5, #0
 80011f8:	430b      	orrs	r3, r1
 80011fa:	e72f      	b.n	800105c <__aeabi_fsub+0x74>
 80011fc:	2320      	movs	r3, #32
 80011fe:	1a9b      	subs	r3, r3, r2
 8001200:	0001      	movs	r1, r0
 8001202:	4098      	lsls	r0, r3
 8001204:	0003      	movs	r3, r0
 8001206:	40d1      	lsrs	r1, r2
 8001208:	1e5a      	subs	r2, r3, #1
 800120a:	4193      	sbcs	r3, r2
 800120c:	430b      	orrs	r3, r1
 800120e:	e712      	b.n	8001036 <__aeabi_fsub+0x4e>
 8001210:	2fff      	cmp	r7, #255	; 0xff
 8001212:	d0d9      	beq.n	80011c8 <__aeabi_fsub+0x1e0>
 8001214:	2380      	movs	r3, #128	; 0x80
 8001216:	4664      	mov	r4, ip
 8001218:	04db      	lsls	r3, r3, #19
 800121a:	431c      	orrs	r4, r3
 800121c:	46a4      	mov	ip, r4
 800121e:	2a1b      	cmp	r2, #27
 8001220:	dd52      	ble.n	80012c8 <__aeabi_fsub+0x2e0>
 8001222:	2301      	movs	r3, #1
 8001224:	000c      	movs	r4, r1
 8001226:	003d      	movs	r5, r7
 8001228:	1ac3      	subs	r3, r0, r3
 800122a:	e706      	b.n	800103a <__aeabi_fsub+0x52>
 800122c:	4663      	mov	r3, ip
 800122e:	1a1e      	subs	r6, r3, r0
 8001230:	0173      	lsls	r3, r6, #5
 8001232:	d439      	bmi.n	80012a8 <__aeabi_fsub+0x2c0>
 8001234:	2e00      	cmp	r6, #0
 8001236:	d000      	beq.n	800123a <__aeabi_fsub+0x252>
 8001238:	e704      	b.n	8001044 <__aeabi_fsub+0x5c>
 800123a:	2400      	movs	r4, #0
 800123c:	2200      	movs	r2, #0
 800123e:	2600      	movs	r6, #0
 8001240:	e71d      	b.n	800107e <__aeabi_fsub+0x96>
 8001242:	2320      	movs	r3, #32
 8001244:	1a9b      	subs	r3, r3, r2
 8001246:	0001      	movs	r1, r0
 8001248:	4098      	lsls	r0, r3
 800124a:	0003      	movs	r3, r0
 800124c:	40d1      	lsrs	r1, r2
 800124e:	1e5a      	subs	r2, r3, #1
 8001250:	4193      	sbcs	r3, r2
 8001252:	430b      	orrs	r3, r1
 8001254:	e729      	b.n	80010aa <__aeabi_fsub+0xc2>
 8001256:	2d00      	cmp	r5, #0
 8001258:	d1a9      	bne.n	80011ae <__aeabi_fsub+0x1c6>
 800125a:	4663      	mov	r3, ip
 800125c:	2b00      	cmp	r3, #0
 800125e:	d056      	beq.n	800130e <__aeabi_fsub+0x326>
 8001260:	2200      	movs	r2, #0
 8001262:	2800      	cmp	r0, #0
 8001264:	d100      	bne.n	8001268 <__aeabi_fsub+0x280>
 8001266:	e70a      	b.n	800107e <__aeabi_fsub+0x96>
 8001268:	0003      	movs	r3, r0
 800126a:	4463      	add	r3, ip
 800126c:	015a      	lsls	r2, r3, #5
 800126e:	d594      	bpl.n	800119a <__aeabi_fsub+0x1b2>
 8001270:	4a2b      	ldr	r2, [pc, #172]	; (8001320 <__aeabi_fsub+0x338>)
 8001272:	3501      	adds	r5, #1
 8001274:	4013      	ands	r3, r2
 8001276:	e790      	b.n	800119a <__aeabi_fsub+0x1b2>
 8001278:	4663      	mov	r3, ip
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0af      	beq.n	80011de <__aeabi_fsub+0x1f6>
 800127e:	1e53      	subs	r3, r2, #1
 8001280:	2a01      	cmp	r2, #1
 8001282:	d015      	beq.n	80012b0 <__aeabi_fsub+0x2c8>
 8001284:	2aff      	cmp	r2, #255	; 0xff
 8001286:	d02a      	beq.n	80012de <__aeabi_fsub+0x2f6>
 8001288:	001a      	movs	r2, r3
 800128a:	e752      	b.n	8001132 <__aeabi_fsub+0x14a>
 800128c:	4662      	mov	r2, ip
 800128e:	2a00      	cmp	r2, #0
 8001290:	d191      	bne.n	80011b6 <__aeabi_fsub+0x1ce>
 8001292:	2800      	cmp	r0, #0
 8001294:	d198      	bne.n	80011c8 <__aeabi_fsub+0x1e0>
 8001296:	2680      	movs	r6, #128	; 0x80
 8001298:	2400      	movs	r4, #0
 800129a:	22ff      	movs	r2, #255	; 0xff
 800129c:	03f6      	lsls	r6, r6, #15
 800129e:	e6ee      	b.n	800107e <__aeabi_fsub+0x96>
 80012a0:	000c      	movs	r4, r1
 80012a2:	4643      	mov	r3, r8
 80012a4:	0015      	movs	r5, r2
 80012a6:	e77c      	b.n	80011a2 <__aeabi_fsub+0x1ba>
 80012a8:	4663      	mov	r3, ip
 80012aa:	000c      	movs	r4, r1
 80012ac:	1ac6      	subs	r6, r0, r3
 80012ae:	e6c9      	b.n	8001044 <__aeabi_fsub+0x5c>
 80012b0:	0003      	movs	r3, r0
 80012b2:	4463      	add	r3, ip
 80012b4:	2501      	movs	r5, #1
 80012b6:	015a      	lsls	r2, r3, #5
 80012b8:	d400      	bmi.n	80012bc <__aeabi_fsub+0x2d4>
 80012ba:	e76e      	b.n	800119a <__aeabi_fsub+0x1b2>
 80012bc:	2502      	movs	r5, #2
 80012be:	e6fa      	b.n	80010b6 <__aeabi_fsub+0xce>
 80012c0:	4663      	mov	r3, ip
 80012c2:	2501      	movs	r5, #1
 80012c4:	1a1b      	subs	r3, r3, r0
 80012c6:	e6b8      	b.n	800103a <__aeabi_fsub+0x52>
 80012c8:	4664      	mov	r4, ip
 80012ca:	2320      	movs	r3, #32
 80012cc:	40d4      	lsrs	r4, r2
 80012ce:	1a9b      	subs	r3, r3, r2
 80012d0:	4662      	mov	r2, ip
 80012d2:	409a      	lsls	r2, r3
 80012d4:	0013      	movs	r3, r2
 80012d6:	1e5a      	subs	r2, r3, #1
 80012d8:	4193      	sbcs	r3, r2
 80012da:	4323      	orrs	r3, r4
 80012dc:	e7a2      	b.n	8001224 <__aeabi_fsub+0x23c>
 80012de:	4643      	mov	r3, r8
 80012e0:	e774      	b.n	80011cc <__aeabi_fsub+0x1e4>
 80012e2:	4661      	mov	r1, ip
 80012e4:	2320      	movs	r3, #32
 80012e6:	40d1      	lsrs	r1, r2
 80012e8:	1a9b      	subs	r3, r3, r2
 80012ea:	4662      	mov	r2, ip
 80012ec:	409a      	lsls	r2, r3
 80012ee:	0013      	movs	r3, r2
 80012f0:	1e5a      	subs	r2, r3, #1
 80012f2:	4193      	sbcs	r3, r2
 80012f4:	430b      	orrs	r3, r1
 80012f6:	e720      	b.n	800113a <__aeabi_fsub+0x152>
 80012f8:	4663      	mov	r3, ip
 80012fa:	000c      	movs	r4, r1
 80012fc:	2501      	movs	r5, #1
 80012fe:	1ac3      	subs	r3, r0, r3
 8001300:	e69b      	b.n	800103a <__aeabi_fsub+0x52>
 8001302:	2800      	cmp	r0, #0
 8001304:	d099      	beq.n	800123a <__aeabi_fsub+0x252>
 8001306:	000c      	movs	r4, r1
 8001308:	4646      	mov	r6, r8
 800130a:	2200      	movs	r2, #0
 800130c:	e6b7      	b.n	800107e <__aeabi_fsub+0x96>
 800130e:	4646      	mov	r6, r8
 8001310:	2200      	movs	r2, #0
 8001312:	e6b4      	b.n	800107e <__aeabi_fsub+0x96>
 8001314:	2b00      	cmp	r3, #0
 8001316:	d000      	beq.n	800131a <__aeabi_fsub+0x332>
 8001318:	e73f      	b.n	800119a <__aeabi_fsub+0x1b2>
 800131a:	2400      	movs	r4, #0
 800131c:	2600      	movs	r6, #0
 800131e:	e6ae      	b.n	800107e <__aeabi_fsub+0x96>
 8001320:	fbffffff 	.word	0xfbffffff
 8001324:	7dffffff 	.word	0x7dffffff

08001328 <__aeabi_f2iz>:
 8001328:	0241      	lsls	r1, r0, #9
 800132a:	0042      	lsls	r2, r0, #1
 800132c:	0fc3      	lsrs	r3, r0, #31
 800132e:	0a49      	lsrs	r1, r1, #9
 8001330:	2000      	movs	r0, #0
 8001332:	0e12      	lsrs	r2, r2, #24
 8001334:	2a7e      	cmp	r2, #126	; 0x7e
 8001336:	dd03      	ble.n	8001340 <__aeabi_f2iz+0x18>
 8001338:	2a9d      	cmp	r2, #157	; 0x9d
 800133a:	dd02      	ble.n	8001342 <__aeabi_f2iz+0x1a>
 800133c:	4a09      	ldr	r2, [pc, #36]	; (8001364 <__aeabi_f2iz+0x3c>)
 800133e:	1898      	adds	r0, r3, r2
 8001340:	4770      	bx	lr
 8001342:	2080      	movs	r0, #128	; 0x80
 8001344:	0400      	lsls	r0, r0, #16
 8001346:	4301      	orrs	r1, r0
 8001348:	2a95      	cmp	r2, #149	; 0x95
 800134a:	dc07      	bgt.n	800135c <__aeabi_f2iz+0x34>
 800134c:	2096      	movs	r0, #150	; 0x96
 800134e:	1a82      	subs	r2, r0, r2
 8001350:	40d1      	lsrs	r1, r2
 8001352:	4248      	negs	r0, r1
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1f3      	bne.n	8001340 <__aeabi_f2iz+0x18>
 8001358:	0008      	movs	r0, r1
 800135a:	e7f1      	b.n	8001340 <__aeabi_f2iz+0x18>
 800135c:	3a96      	subs	r2, #150	; 0x96
 800135e:	4091      	lsls	r1, r2
 8001360:	e7f7      	b.n	8001352 <__aeabi_f2iz+0x2a>
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	7fffffff 	.word	0x7fffffff

08001368 <__aeabi_i2f>:
 8001368:	b570      	push	{r4, r5, r6, lr}
 800136a:	2800      	cmp	r0, #0
 800136c:	d013      	beq.n	8001396 <__aeabi_i2f+0x2e>
 800136e:	17c3      	asrs	r3, r0, #31
 8001370:	18c5      	adds	r5, r0, r3
 8001372:	405d      	eors	r5, r3
 8001374:	0fc4      	lsrs	r4, r0, #31
 8001376:	0028      	movs	r0, r5
 8001378:	f000 f848 	bl	800140c <__clzsi2>
 800137c:	239e      	movs	r3, #158	; 0x9e
 800137e:	0001      	movs	r1, r0
 8001380:	1a1b      	subs	r3, r3, r0
 8001382:	2b96      	cmp	r3, #150	; 0x96
 8001384:	dc0f      	bgt.n	80013a6 <__aeabi_i2f+0x3e>
 8001386:	2808      	cmp	r0, #8
 8001388:	d031      	beq.n	80013ee <__aeabi_i2f+0x86>
 800138a:	3908      	subs	r1, #8
 800138c:	408d      	lsls	r5, r1
 800138e:	026d      	lsls	r5, r5, #9
 8001390:	0a6d      	lsrs	r5, r5, #9
 8001392:	b2d8      	uxtb	r0, r3
 8001394:	e002      	b.n	800139c <__aeabi_i2f+0x34>
 8001396:	2400      	movs	r4, #0
 8001398:	2000      	movs	r0, #0
 800139a:	2500      	movs	r5, #0
 800139c:	05c0      	lsls	r0, r0, #23
 800139e:	4328      	orrs	r0, r5
 80013a0:	07e4      	lsls	r4, r4, #31
 80013a2:	4320      	orrs	r0, r4
 80013a4:	bd70      	pop	{r4, r5, r6, pc}
 80013a6:	2b99      	cmp	r3, #153	; 0x99
 80013a8:	dd0c      	ble.n	80013c4 <__aeabi_i2f+0x5c>
 80013aa:	2205      	movs	r2, #5
 80013ac:	1a12      	subs	r2, r2, r0
 80013ae:	0028      	movs	r0, r5
 80013b0:	40d0      	lsrs	r0, r2
 80013b2:	0002      	movs	r2, r0
 80013b4:	0008      	movs	r0, r1
 80013b6:	301b      	adds	r0, #27
 80013b8:	4085      	lsls	r5, r0
 80013ba:	0028      	movs	r0, r5
 80013bc:	1e45      	subs	r5, r0, #1
 80013be:	41a8      	sbcs	r0, r5
 80013c0:	4302      	orrs	r2, r0
 80013c2:	0015      	movs	r5, r2
 80013c4:	2905      	cmp	r1, #5
 80013c6:	dc16      	bgt.n	80013f6 <__aeabi_i2f+0x8e>
 80013c8:	002a      	movs	r2, r5
 80013ca:	480f      	ldr	r0, [pc, #60]	; (8001408 <__aeabi_i2f+0xa0>)
 80013cc:	4002      	ands	r2, r0
 80013ce:	076e      	lsls	r6, r5, #29
 80013d0:	d009      	beq.n	80013e6 <__aeabi_i2f+0x7e>
 80013d2:	260f      	movs	r6, #15
 80013d4:	4035      	ands	r5, r6
 80013d6:	2d04      	cmp	r5, #4
 80013d8:	d005      	beq.n	80013e6 <__aeabi_i2f+0x7e>
 80013da:	3204      	adds	r2, #4
 80013dc:	0155      	lsls	r5, r2, #5
 80013de:	d502      	bpl.n	80013e6 <__aeabi_i2f+0x7e>
 80013e0:	239f      	movs	r3, #159	; 0x9f
 80013e2:	4002      	ands	r2, r0
 80013e4:	1a5b      	subs	r3, r3, r1
 80013e6:	0192      	lsls	r2, r2, #6
 80013e8:	0a55      	lsrs	r5, r2, #9
 80013ea:	b2d8      	uxtb	r0, r3
 80013ec:	e7d6      	b.n	800139c <__aeabi_i2f+0x34>
 80013ee:	026d      	lsls	r5, r5, #9
 80013f0:	2096      	movs	r0, #150	; 0x96
 80013f2:	0a6d      	lsrs	r5, r5, #9
 80013f4:	e7d2      	b.n	800139c <__aeabi_i2f+0x34>
 80013f6:	1f4a      	subs	r2, r1, #5
 80013f8:	4095      	lsls	r5, r2
 80013fa:	002a      	movs	r2, r5
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <__aeabi_i2f+0xa0>)
 80013fe:	4002      	ands	r2, r0
 8001400:	076e      	lsls	r6, r5, #29
 8001402:	d0f0      	beq.n	80013e6 <__aeabi_i2f+0x7e>
 8001404:	e7e5      	b.n	80013d2 <__aeabi_i2f+0x6a>
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	fbffffff 	.word	0xfbffffff

0800140c <__clzsi2>:
 800140c:	211c      	movs	r1, #28
 800140e:	2301      	movs	r3, #1
 8001410:	041b      	lsls	r3, r3, #16
 8001412:	4298      	cmp	r0, r3
 8001414:	d301      	bcc.n	800141a <__clzsi2+0xe>
 8001416:	0c00      	lsrs	r0, r0, #16
 8001418:	3910      	subs	r1, #16
 800141a:	0a1b      	lsrs	r3, r3, #8
 800141c:	4298      	cmp	r0, r3
 800141e:	d301      	bcc.n	8001424 <__clzsi2+0x18>
 8001420:	0a00      	lsrs	r0, r0, #8
 8001422:	3908      	subs	r1, #8
 8001424:	091b      	lsrs	r3, r3, #4
 8001426:	4298      	cmp	r0, r3
 8001428:	d301      	bcc.n	800142e <__clzsi2+0x22>
 800142a:	0900      	lsrs	r0, r0, #4
 800142c:	3904      	subs	r1, #4
 800142e:	a202      	add	r2, pc, #8	; (adr r2, 8001438 <__clzsi2+0x2c>)
 8001430:	5c10      	ldrb	r0, [r2, r0]
 8001432:	1840      	adds	r0, r0, r1
 8001434:	4770      	bx	lr
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	02020304 	.word	0x02020304
 800143c:	01010101 	.word	0x01010101
	...

08001448 <__clzdi2>:
 8001448:	b510      	push	{r4, lr}
 800144a:	2900      	cmp	r1, #0
 800144c:	d103      	bne.n	8001456 <__clzdi2+0xe>
 800144e:	f7ff ffdd 	bl	800140c <__clzsi2>
 8001452:	3020      	adds	r0, #32
 8001454:	e002      	b.n	800145c <__clzdi2+0x14>
 8001456:	0008      	movs	r0, r1
 8001458:	f7ff ffd8 	bl	800140c <__clzsi2>
 800145c:	bd10      	pop	{r4, pc}
 800145e:	46c0      	nop			; (mov r8, r8)

08001460 <_ZN8touchgfx16ButtonControllerD1Ev>:
/** Interface for sampling external key events. */
class ButtonController
{
public:
    /** Finalizes an instance of the ButtonController class. */
    virtual ~ButtonController()
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
    {
 8001468:	4a03      	ldr	r2, [pc, #12]	; (8001478 <_ZN8touchgfx16ButtonControllerD1Ev+0x18>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	601a      	str	r2, [r3, #0]
    }
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	0018      	movs	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	b002      	add	sp, #8
 8001476:	bd80      	pop	{r7, pc}
 8001478:	08015ed4 	.word	0x08015ed4

0800147c <_ZN8touchgfx16ButtonControllerD0Ev>:
    virtual ~ButtonController()
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
    }
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	0018      	movs	r0, r3
 8001488:	f7ff ffea 	bl	8001460 <_ZN8touchgfx16ButtonControllerD1Ev>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2104      	movs	r1, #4
 8001490:	0018      	movs	r0, r3
 8001492:	f012 fc6f 	bl	8013d74 <_ZdlPvj>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	0018      	movs	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	b002      	add	sp, #8
 800149e:	bd80      	pop	{r7, pc}

080014a0 <_ZN8touchgfx16ButtonController5resetEv>:
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sample(uint8_t& key) = 0;

    /** Resets button controller. Does nothing in the default implementation. */
    virtual void reset()
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
    {
    }
 80014a8:	46c0      	nop			; (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b002      	add	sp, #8
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
    {
        return instance;
 80014b4:	4b02      	ldr	r3, [pc, #8]	; (80014c0 <_ZN8touchgfx3HAL11getInstanceEv+0x10>)
 80014b6:	681b      	ldr	r3, [r3, #0]
    }
 80014b8:	0018      	movs	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	200026c8 	.word	0x200026c8

080014c4 <_ZNK8touchgfx3HAL21getDisplayOrientationEv>:
     * Gets the current display orientation. Will be equal to the native orientation of the
     * display unless setDisplayOrientation has been explicitly called earlier.
     *
     * @return The current display orientation.
     */
    DisplayOrientation getDisplayOrientation() const
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
    {
        if (DISPLAY_ROTATION == rotate0)
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <_ZNK8touchgfx3HAL21getDisplayOrientationEv+0x34>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d103      	bne.n	80014dc <_ZNK8touchgfx3HAL21getDisplayOrientationEv+0x18>
        {
            return nativeDisplayOrientation;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2234      	movs	r2, #52	; 0x34
 80014d8:	5c9b      	ldrb	r3, [r3, r2]
 80014da:	e008      	b.n	80014ee <_ZNK8touchgfx3HAL21getDisplayOrientationEv+0x2a>
        }
        return (nativeDisplayOrientation == ORIENTATION_LANDSCAPE ? ORIENTATION_PORTRAIT : ORIENTATION_LANDSCAPE);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2234      	movs	r2, #52	; 0x34
 80014e0:	5c9b      	ldrb	r3, [r3, r2]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <_ZNK8touchgfx3HAL21getDisplayOrientationEv+0x26>
 80014e6:	2301      	movs	r3, #1
 80014e8:	e000      	b.n	80014ec <_ZNK8touchgfx3HAL21getDisplayOrientationEv+0x28>
 80014ea:	2300      	movs	r3, #0
 80014ec:	46c0      	nop			; (mov r8, r8)
    }
 80014ee:	0018      	movs	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b002      	add	sp, #8
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	200026c0 	.word	0x200026c0

080014fc <_ZN23MB1642AButtonController4initEv>:
#include <MB1642BButtonController.hpp>
#include <main.h>
#include <touchgfx/hal/HAL.hpp>

void MB1642AButtonController::init()
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
    previousState = 0;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	711a      	strb	r2, [r3, #4]
}
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	46bd      	mov	sp, r7
 800150e:	b002      	add	sp, #8
 8001510:	bd80      	pop	{r7, pc}

08001512 <_ZN23MB1642AButtonController6sampleERh>:

bool MB1642AButtonController::sample(uint8_t& key)
{
 8001512:	b5b0      	push	{r4, r5, r7, lr}
 8001514:	b084      	sub	sp, #16
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	6039      	str	r1, [r7, #0]
    uint8_t state = MB1642KeyState();
 800151c:	250f      	movs	r5, #15
 800151e:	197c      	adds	r4, r7, r5
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	0018      	movs	r0, r3
 8001524:	f000 f820 	bl	8001568 <_ZN23MB1642AButtonController14MB1642KeyStateEv>
 8001528:	0003      	movs	r3, r0
 800152a:	7023      	strb	r3, [r4, #0]
    if (state == previousState)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	791b      	ldrb	r3, [r3, #4]
 8001530:	197a      	adds	r2, r7, r5
 8001532:	7812      	ldrb	r2, [r2, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d101      	bne.n	800153c <_ZN23MB1642AButtonController6sampleERh+0x2a>
    {
        return false;
 8001538:	2300      	movs	r3, #0
 800153a:	e010      	b.n	800155e <_ZN23MB1642AButtonController6sampleERh+0x4c>
    }
    previousState = state;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	210f      	movs	r1, #15
 8001540:	187a      	adds	r2, r7, r1
 8001542:	7812      	ldrb	r2, [r2, #0]
 8001544:	711a      	strb	r2, [r3, #4]
    if (state != 0)
 8001546:	000a      	movs	r2, r1
 8001548:	18bb      	adds	r3, r7, r2
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d005      	beq.n	800155c <_ZN23MB1642AButtonController6sampleERh+0x4a>
    {
        key = state;
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	18ba      	adds	r2, r7, r2
 8001554:	7812      	ldrb	r2, [r2, #0]
 8001556:	701a      	strb	r2, [r3, #0]
        return true;
 8001558:	2301      	movs	r3, #1
 800155a:	e000      	b.n	800155e <_ZN23MB1642AButtonController6sampleERh+0x4c>
    }
    return false;
 800155c:	2300      	movs	r3, #0
}
 800155e:	0018      	movs	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	b004      	add	sp, #16
 8001564:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001568 <_ZN23MB1642AButtonController14MB1642KeyStateEv>:

uint8_t MB1642AButtonController::MB1642KeyState(void)
{
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
    uint8_t keyPressed = 0;
 8001570:	240f      	movs	r4, #15
 8001572:	193b      	adds	r3, r7, r4
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]

    if (touchgfx::HAL::getInstance()->getDisplayOrientation() == touchgfx::ORIENTATION_PORTRAIT)
 8001578:	f7ff ff9a 	bl	80014b0 <_ZN8touchgfx3HAL11getInstanceEv>
 800157c:	0003      	movs	r3, r0
 800157e:	0018      	movs	r0, r3
 8001580:	f7ff ffa0 	bl	80014c4 <_ZNK8touchgfx3HAL21getDisplayOrientationEv>
 8001584:	0003      	movs	r3, r0
 8001586:	3b01      	subs	r3, #1
 8001588:	425a      	negs	r2, r3
 800158a:	4153      	adcs	r3, r2
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d010      	beq.n	80015b4 <_ZN23MB1642AButtonController14MB1642KeyStateEv+0x4c>
    {

        //Blue user button on Nucleo boad
        if (HAL_GPIO_ReadPin(BUTTON_USER_GPIO_Port, BUTTON_USER_Pin) == GPIO_PIN_RESET)
 8001592:	2380      	movs	r3, #128	; 0x80
 8001594:	019b      	lsls	r3, r3, #6
 8001596:	4a13      	ldr	r2, [pc, #76]	; (80015e4 <_ZN23MB1642AButtonController14MB1642KeyStateEv+0x7c>)
 8001598:	0019      	movs	r1, r3
 800159a:	0010      	movs	r0, r2
 800159c:	f002 fcfa 	bl	8003f94 <HAL_GPIO_ReadPin>
 80015a0:	0003      	movs	r3, r0
 80015a2:	425a      	negs	r2, r3
 80015a4:	4153      	adcs	r3, r2
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d014      	beq.n	80015d6 <_ZN23MB1642AButtonController14MB1642KeyStateEv+0x6e>
        {
            keyPressed = '0';
 80015ac:	193b      	adds	r3, r7, r4
 80015ae:	2230      	movs	r2, #48	; 0x30
 80015b0:	701a      	strb	r2, [r3, #0]
 80015b2:	e010      	b.n	80015d6 <_ZN23MB1642AButtonController14MB1642KeyStateEv+0x6e>
        }
    }
    else
    {
        //Blue user button on Nucleo boad
        if (HAL_GPIO_ReadPin(BUTTON_USER_GPIO_Port, BUTTON_USER_Pin) == GPIO_PIN_RESET)
 80015b4:	2380      	movs	r3, #128	; 0x80
 80015b6:	019b      	lsls	r3, r3, #6
 80015b8:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <_ZN23MB1642AButtonController14MB1642KeyStateEv+0x7c>)
 80015ba:	0019      	movs	r1, r3
 80015bc:	0010      	movs	r0, r2
 80015be:	f002 fce9 	bl	8003f94 <HAL_GPIO_ReadPin>
 80015c2:	0003      	movs	r3, r0
 80015c4:	425a      	negs	r2, r3
 80015c6:	4153      	adcs	r3, r2
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <_ZN23MB1642AButtonController14MB1642KeyStateEv+0x6e>
        {
            keyPressed = '0';
 80015ce:	230f      	movs	r3, #15
 80015d0:	18fb      	adds	r3, r7, r3
 80015d2:	2230      	movs	r2, #48	; 0x30
 80015d4:	701a      	strb	r2, [r3, #0]
        }
    }

    return keyPressed;
 80015d6:	230f      	movs	r3, #15
 80015d8:	18fb      	adds	r3, r7, r3
 80015da:	781b      	ldrb	r3, [r3, #0]
}
 80015dc:	0018      	movs	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	b005      	add	sp, #20
 80015e2:	bd90      	pop	{r4, r7, pc}
 80015e4:	50000800 	.word	0x50000800

080015e8 <_ZN23MB1642AButtonControllerD1Ev>:
#ifndef MB1642ABUTTONCONTROLLER_HPP_
#define MB1642ABUTTONCONTROLLER_HPP_

#include <platform/driver/button/ButtonController.hpp>

class MB1642AButtonController : public touchgfx::ButtonController
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	4a05      	ldr	r2, [pc, #20]	; (8001608 <_ZN23MB1642AButtonControllerD1Ev+0x20>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	0018      	movs	r0, r3
 80015fa:	f7ff ff31 	bl	8001460 <_ZN8touchgfx16ButtonControllerD1Ev>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	0018      	movs	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	b002      	add	sp, #8
 8001606:	bd80      	pop	{r7, pc}
 8001608:	08015eb8 	.word	0x08015eb8

0800160c <_ZN23MB1642AButtonControllerD0Ev>:
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	0018      	movs	r0, r3
 8001618:	f7ff ffe6 	bl	80015e8 <_ZN23MB1642AButtonControllerD1Ev>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2108      	movs	r1, #8
 8001620:	0018      	movs	r0, r3
 8001622:	f012 fba7 	bl	8013d74 <_ZdlPvj>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	0018      	movs	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	b002      	add	sp, #8
 800162e:	bd80      	pop	{r7, pc}

08001630 <readData>:

//Status flag. Non-zero when receiving data
static volatile uint8_t isReceivingData = 0;

void readData(uint32_t address24, uint8_t* buffer, uint32_t length)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
    FLASH_CS_GPIO_Port->BRR = FLASH_CS_Pin;
 800163c:	4b93      	ldr	r3, [pc, #588]	; (800188c <readData+0x25c>)
 800163e:	2280      	movs	r2, #128	; 0x80
 8001640:	0092      	lsls	r2, r2, #2
 8001642:	629a      	str	r2, [r3, #40]	; 0x28
    *((__IO uint8_t*)&SPI2->DR) = CMD_READ;
 8001644:	4b92      	ldr	r3, [pc, #584]	; (8001890 <readData+0x260>)
 8001646:	2203      	movs	r2, #3
 8001648:	701a      	strb	r2, [r3, #0]

    //clock out address
    *((__IO uint8_t*)&hspi2.Instance->DR) = (address24 >> 16) & 0xFF;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	0c1a      	lsrs	r2, r3, #16
 800164e:	4b91      	ldr	r3, [pc, #580]	; (8001894 <readData+0x264>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	330c      	adds	r3, #12
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	701a      	strb	r2, [r3, #0]

    while(((hspi2.Instance->SR) & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 8001658:	46c0      	nop			; (mov r8, r8)
 800165a:	4b8e      	ldr	r3, [pc, #568]	; (8001894 <readData+0x264>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	2202      	movs	r2, #2
 8001662:	4013      	ands	r3, r2
 8001664:	2b02      	cmp	r3, #2
 8001666:	d1f8      	bne.n	800165a <readData+0x2a>
    *((__IO uint8_t*)&hspi2.Instance->DR) = (address24 >> 8) & 0xFF;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	0a1a      	lsrs	r2, r3, #8
 800166c:	4b89      	ldr	r3, [pc, #548]	; (8001894 <readData+0x264>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	330c      	adds	r3, #12
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	701a      	strb	r2, [r3, #0]

    while(((hspi2.Instance->SR) & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	4b86      	ldr	r3, [pc, #536]	; (8001894 <readData+0x264>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	2202      	movs	r2, #2
 8001680:	4013      	ands	r3, r2
 8001682:	2b02      	cmp	r3, #2
 8001684:	d1f8      	bne.n	8001678 <readData+0x48>
    *((__IO uint8_t*)&hspi2.Instance->DR) = address24 & 0xFF;
 8001686:	4b83      	ldr	r3, [pc, #524]	; (8001894 <readData+0x264>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	330c      	adds	r3, #12
 800168c:	68fa      	ldr	r2, [r7, #12]
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	701a      	strb	r2, [r3, #0]

    switch (length)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b03      	cmp	r3, #3
 8001696:	d01f      	beq.n	80016d8 <readData+0xa8>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b03      	cmp	r3, #3
 800169c:	d80b      	bhi.n	80016b6 <readData+0x86>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d02a      	beq.n	80016fa <readData+0xca>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d805      	bhi.n	80016b6 <readData+0x86>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d046      	beq.n	800173e <readData+0x10e>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d032      	beq.n	800171c <readData+0xec>
    {
        default:
            while(((hspi2.Instance->SR) & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	4b76      	ldr	r3, [pc, #472]	; (8001894 <readData+0x264>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2202      	movs	r2, #2
 80016c0:	4013      	ands	r3, r2
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d1f8      	bne.n	80016b8 <readData+0x88>
            *((__IO uint8_t*)&hspi2.Instance->DR);
 80016c6:	4b73      	ldr	r3, [pc, #460]	; (8001894 <readData+0x264>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	330c      	adds	r3, #12
 80016cc:	781b      	ldrb	r3, [r3, #0]
            *((__IO uint8_t*)&hspi2.Instance->DR) = 0 ;
 80016ce:	4b71      	ldr	r3, [pc, #452]	; (8001894 <readData+0x264>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	330c      	adds	r3, #12
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
        case 3:
            while(((hspi2.Instance->SR) & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 80016d8:	46c0      	nop			; (mov r8, r8)
 80016da:	4b6e      	ldr	r3, [pc, #440]	; (8001894 <readData+0x264>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	2202      	movs	r2, #2
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d1f8      	bne.n	80016da <readData+0xaa>
            *((__IO uint8_t*)&hspi2.Instance->DR);
 80016e8:	4b6a      	ldr	r3, [pc, #424]	; (8001894 <readData+0x264>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	330c      	adds	r3, #12
 80016ee:	781b      	ldrb	r3, [r3, #0]
            *((__IO uint8_t*)&hspi2.Instance->DR) = 0;
 80016f0:	4b68      	ldr	r3, [pc, #416]	; (8001894 <readData+0x264>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	330c      	adds	r3, #12
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
        case 2:
            while(((hspi2.Instance->SR) & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	4b65      	ldr	r3, [pc, #404]	; (8001894 <readData+0x264>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2202      	movs	r2, #2
 8001704:	4013      	ands	r3, r2
 8001706:	2b02      	cmp	r3, #2
 8001708:	d1f8      	bne.n	80016fc <readData+0xcc>
            *((__IO uint8_t*)&hspi2.Instance->DR);
 800170a:	4b62      	ldr	r3, [pc, #392]	; (8001894 <readData+0x264>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	330c      	adds	r3, #12
 8001710:	781b      	ldrb	r3, [r3, #0]
            *((__IO uint8_t*)&hspi2.Instance->DR) = 0;
 8001712:	4b60      	ldr	r3, [pc, #384]	; (8001894 <readData+0x264>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	330c      	adds	r3, #12
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
        case 1:
            while(((hspi2.Instance->SR) & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 800171c:	46c0      	nop			; (mov r8, r8)
 800171e:	4b5d      	ldr	r3, [pc, #372]	; (8001894 <readData+0x264>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2202      	movs	r2, #2
 8001726:	4013      	ands	r3, r2
 8001728:	2b02      	cmp	r3, #2
 800172a:	d1f8      	bne.n	800171e <readData+0xee>
            *((__IO uint8_t*)&hspi2.Instance->DR);
 800172c:	4b59      	ldr	r3, [pc, #356]	; (8001894 <readData+0x264>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	330c      	adds	r3, #12
 8001732:	781b      	ldrb	r3, [r3, #0]
            *((__IO uint8_t*)&hspi2.Instance->DR) = 0;
 8001734:	4b57      	ldr	r3, [pc, #348]	; (8001894 <readData+0x264>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	330c      	adds	r3, #12
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
        case 0:
            break;
 800173e:	46c0      	nop			; (mov r8, r8)
    }
    switch (length)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b03      	cmp	r3, #3
 8001744:	d011      	beq.n	800176a <readData+0x13a>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b03      	cmp	r3, #3
 800174a:	d812      	bhi.n	8001772 <readData+0x142>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d003      	beq.n	800175a <readData+0x12a>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b02      	cmp	r3, #2
 8001756:	d004      	beq.n	8001762 <readData+0x132>
        case 2:
        *((__IO uint8_t*)&hspi2.Instance->DR);
        case 3:
        *((__IO uint8_t*)&hspi2.Instance->DR);
        default:
            break;
 8001758:	e00b      	b.n	8001772 <readData+0x142>
        *((__IO uint8_t*)&hspi2.Instance->DR);
 800175a:	4b4e      	ldr	r3, [pc, #312]	; (8001894 <readData+0x264>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	330c      	adds	r3, #12
 8001760:	781b      	ldrb	r3, [r3, #0]
        *((__IO uint8_t*)&hspi2.Instance->DR);
 8001762:	4b4c      	ldr	r3, [pc, #304]	; (8001894 <readData+0x264>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	330c      	adds	r3, #12
 8001768:	781b      	ldrb	r3, [r3, #0]
        *((__IO uint8_t*)&hspi2.Instance->DR);
 800176a:	4b4a      	ldr	r3, [pc, #296]	; (8001894 <readData+0x264>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	330c      	adds	r3, #12
 8001770:	781b      	ldrb	r3, [r3, #0]
            break;
 8001772:	46c0      	nop			; (mov r8, r8)
    }

    uint8_t* const buf_end = buffer + length - 4;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b04      	subs	r3, #4
 8001778:	68ba      	ldr	r2, [r7, #8]
 800177a:	18d3      	adds	r3, r2, r3
 800177c:	61bb      	str	r3, [r7, #24]

    while ((buf_end - buffer) > 3)
 800177e:	e043      	b.n	8001808 <readData+0x1d8>
    {
        while(((SPI2->SR) & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 8001780:	46c0      	nop			; (mov r8, r8)
 8001782:	4b45      	ldr	r3, [pc, #276]	; (8001898 <readData+0x268>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	2202      	movs	r2, #2
 8001788:	4013      	ands	r3, r2
 800178a:	2b02      	cmp	r3, #2
 800178c:	d1f9      	bne.n	8001782 <readData+0x152>
        *buffer++ = *((__IO uint8_t*)&SPI2->DR);
 800178e:	4940      	ldr	r1, [pc, #256]	; (8001890 <readData+0x260>)
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	1c5a      	adds	r2, r3, #1
 8001794:	60ba      	str	r2, [r7, #8]
 8001796:	780a      	ldrb	r2, [r1, #0]
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	701a      	strb	r2, [r3, #0]
	*((__IO uint8_t*)&SPI2->DR) = 0;
 800179c:	4b3c      	ldr	r3, [pc, #240]	; (8001890 <readData+0x260>)
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
	while(((SPI2->SR) & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	4b3c      	ldr	r3, [pc, #240]	; (8001898 <readData+0x268>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2202      	movs	r2, #2
 80017aa:	4013      	ands	r3, r2
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d1f9      	bne.n	80017a4 <readData+0x174>
        *buffer++ = *((__IO uint8_t*)&SPI2->DR);
 80017b0:	4937      	ldr	r1, [pc, #220]	; (8001890 <readData+0x260>)
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	60ba      	str	r2, [r7, #8]
 80017b8:	780a      	ldrb	r2, [r1, #0]
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	701a      	strb	r2, [r3, #0]
	*((__IO uint8_t*)&SPI2->DR) = 0;
 80017be:	4b34      	ldr	r3, [pc, #208]	; (8001890 <readData+0x260>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	701a      	strb	r2, [r3, #0]
	while(((SPI2->SR) & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 80017c4:	46c0      	nop			; (mov r8, r8)
 80017c6:	4b34      	ldr	r3, [pc, #208]	; (8001898 <readData+0x268>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2202      	movs	r2, #2
 80017cc:	4013      	ands	r3, r2
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d1f9      	bne.n	80017c6 <readData+0x196>
        *buffer++ = *((__IO uint8_t*)&SPI2->DR);
 80017d2:	492f      	ldr	r1, [pc, #188]	; (8001890 <readData+0x260>)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	60ba      	str	r2, [r7, #8]
 80017da:	780a      	ldrb	r2, [r1, #0]
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	701a      	strb	r2, [r3, #0]
	*((__IO uint8_t*)&SPI2->DR) = 0;
 80017e0:	4b2b      	ldr	r3, [pc, #172]	; (8001890 <readData+0x260>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
	while(((SPI2->SR) & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	4b2b      	ldr	r3, [pc, #172]	; (8001898 <readData+0x268>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2202      	movs	r2, #2
 80017ee:	4013      	ands	r3, r2
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d1f9      	bne.n	80017e8 <readData+0x1b8>
        *buffer++ = *((__IO uint8_t*)&SPI2->DR);
 80017f4:	4926      	ldr	r1, [pc, #152]	; (8001890 <readData+0x260>)
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	1c5a      	adds	r2, r3, #1
 80017fa:	60ba      	str	r2, [r7, #8]
 80017fc:	780a      	ldrb	r2, [r1, #0]
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	701a      	strb	r2, [r3, #0]
	*((__IO uint8_t*)&SPI2->DR) = 0;
 8001802:	4b23      	ldr	r3, [pc, #140]	; (8001890 <readData+0x260>)
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
    while ((buf_end - buffer) > 3)
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b03      	cmp	r3, #3
 8001810:	dcb6      	bgt.n	8001780 <readData+0x150>
    }

    while (buffer < buf_end)
 8001812:	e010      	b.n	8001836 <readData+0x206>
    {
        while(((SPI2->SR) & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 8001814:	46c0      	nop			; (mov r8, r8)
 8001816:	4b20      	ldr	r3, [pc, #128]	; (8001898 <readData+0x268>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	2202      	movs	r2, #2
 800181c:	4013      	ands	r3, r2
 800181e:	2b02      	cmp	r3, #2
 8001820:	d1f9      	bne.n	8001816 <readData+0x1e6>
        *buffer++ = *((__IO uint8_t*)&SPI2->DR);
 8001822:	491b      	ldr	r1, [pc, #108]	; (8001890 <readData+0x260>)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	60ba      	str	r2, [r7, #8]
 800182a:	780a      	ldrb	r2, [r1, #0]
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	701a      	strb	r2, [r3, #0]
	*((__IO uint8_t*)&SPI2->DR) = 0;
 8001830:	4b17      	ldr	r3, [pc, #92]	; (8001890 <readData+0x260>)
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]
    while (buffer < buf_end)
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	429a      	cmp	r2, r3
 800183c:	d3ea      	bcc.n	8001814 <readData+0x1e4>
    }

    /* Wait until the bus is ready before releasing Chip select */
    while(((hspi2.Instance->SR) & SPI_FLAG_BSY) != RESET) { }
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	4b14      	ldr	r3, [pc, #80]	; (8001894 <readData+0x264>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2280      	movs	r2, #128	; 0x80
 8001848:	4013      	ands	r3, r2
 800184a:	d1f9      	bne.n	8001840 <readData+0x210>

    FLASH_CS_GPIO_Port->BSRR = FLASH_CS_Pin;
 800184c:	4b0f      	ldr	r3, [pc, #60]	; (800188c <readData+0x25c>)
 800184e:	2280      	movs	r2, #128	; 0x80
 8001850:	0092      	lsls	r2, r2, #2
 8001852:	619a      	str	r2, [r3, #24]
    const int rest = length < 4 ? length : 4;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b04      	cmp	r3, #4
 8001858:	d900      	bls.n	800185c <readData+0x22c>
 800185a:	2304      	movs	r3, #4
 800185c:	617b      	str	r3, [r7, #20]
    for (int i = 0; i<rest; i++)
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
 8001862:	e009      	b.n	8001878 <readData+0x248>
    {
        *buffer++ = *((__IO uint8_t*)&SPI2->DR);
 8001864:	490a      	ldr	r1, [pc, #40]	; (8001890 <readData+0x260>)
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	1c5a      	adds	r2, r3, #1
 800186a:	60ba      	str	r2, [r7, #8]
 800186c:	780a      	ldrb	r2, [r1, #0]
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<rest; i++)
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3301      	adds	r3, #1
 8001876:	61fb      	str	r3, [r7, #28]
 8001878:	69fa      	ldr	r2, [r7, #28]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	429a      	cmp	r2, r3
 800187e:	dbf1      	blt.n	8001864 <readData+0x234>
    }
}
 8001880:	46c0      	nop			; (mov r8, r8)
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	46bd      	mov	sp, r7
 8001886:	b008      	add	sp, #32
 8001888:	bd80      	pop	{r7, pc}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	50000400 	.word	0x50000400
 8001890:	4000380c 	.word	0x4000380c
 8001894:	20000194 	.word	0x20000194
 8001898:	40003800 	.word	0x40003800

0800189c <readDataDMA>:

void readDataDMA(uint32_t address24, uint8_t* buffer, uint32_t length)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
    // Pull Flash CS pin low
    isReceivingData = 1;
 80018a8:	4b7d      	ldr	r3, [pc, #500]	; (8001aa0 <readDataDMA+0x204>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	701a      	strb	r2, [r3, #0]
    FLASH_CS_GPIO_Port->BRR = FLASH_CS_Pin;
 80018ae:	4b7d      	ldr	r3, [pc, #500]	; (8001aa4 <readDataDMA+0x208>)
 80018b0:	2280      	movs	r2, #128	; 0x80
 80018b2:	0092      	lsls	r2, r2, #2
 80018b4:	629a      	str	r2, [r3, #40]	; 0x28

    *((__IO uint8_t*)&hspi2.Instance->DR) = CMD_READ;
 80018b6:	4b7c      	ldr	r3, [pc, #496]	; (8001aa8 <readDataDMA+0x20c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	330c      	adds	r3, #12
 80018bc:	2203      	movs	r2, #3
 80018be:	701a      	strb	r2, [r3, #0]

    //clock out address
    while(((hspi2.Instance->SR) & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 80018c0:	46c0      	nop			; (mov r8, r8)
 80018c2:	4b79      	ldr	r3, [pc, #484]	; (8001aa8 <readDataDMA+0x20c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2202      	movs	r2, #2
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d1f8      	bne.n	80018c2 <readDataDMA+0x26>
    *((__IO uint8_t*)&hspi2.Instance->DR) = (address24 >> 16) & 0xFF;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	0c1a      	lsrs	r2, r3, #16
 80018d4:	4b74      	ldr	r3, [pc, #464]	; (8001aa8 <readDataDMA+0x20c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	330c      	adds	r3, #12
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	701a      	strb	r2, [r3, #0]

    while(((hspi2.Instance->SR) & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	4b71      	ldr	r3, [pc, #452]	; (8001aa8 <readDataDMA+0x20c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2202      	movs	r2, #2
 80018e8:	4013      	ands	r3, r2
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d1f8      	bne.n	80018e0 <readDataDMA+0x44>
    *((__IO uint8_t*)&hspi2.Instance->DR) = (address24 >> 8) & 0xFF;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	0a1a      	lsrs	r2, r3, #8
 80018f2:	4b6d      	ldr	r3, [pc, #436]	; (8001aa8 <readDataDMA+0x20c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	330c      	adds	r3, #12
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	701a      	strb	r2, [r3, #0]

    while(((hspi2.Instance->SR) & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 80018fc:	46c0      	nop			; (mov r8, r8)
 80018fe:	4b6a      	ldr	r3, [pc, #424]	; (8001aa8 <readDataDMA+0x20c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2202      	movs	r2, #2
 8001906:	4013      	ands	r3, r2
 8001908:	2b02      	cmp	r3, #2
 800190a:	d1f8      	bne.n	80018fe <readDataDMA+0x62>
    *((__IO uint8_t*)&hspi2.Instance->DR) = address24 & 0xFF;
 800190c:	4b66      	ldr	r3, [pc, #408]	; (8001aa8 <readDataDMA+0x20c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	330c      	adds	r3, #12
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	701a      	strb	r2, [r3, #0]

    /* Wait until the bus is ready before reading 4 dummy bytes */
    while(((hspi2.Instance->SR) & SPI_FLAG_BSY) != RESET) { }
 8001918:	46c0      	nop			; (mov r8, r8)
 800191a:	4b63      	ldr	r3, [pc, #396]	; (8001aa8 <readDataDMA+0x20c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2280      	movs	r2, #128	; 0x80
 8001922:	4013      	ands	r3, r2
 8001924:	d1f9      	bne.n	800191a <readDataDMA+0x7e>
    *((__IO uint8_t*)&hspi2.Instance->DR);
 8001926:	4b60      	ldr	r3, [pc, #384]	; (8001aa8 <readDataDMA+0x20c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	330c      	adds	r3, #12
 800192c:	781b      	ldrb	r3, [r3, #0]
    *((__IO uint8_t*)&hspi2.Instance->DR);
 800192e:	4b5e      	ldr	r3, [pc, #376]	; (8001aa8 <readDataDMA+0x20c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	330c      	adds	r3, #12
 8001934:	781b      	ldrb	r3, [r3, #0]
    *((__IO uint8_t*)&hspi2.Instance->DR);
 8001936:	4b5c      	ldr	r3, [pc, #368]	; (8001aa8 <readDataDMA+0x20c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	330c      	adds	r3, #12
 800193c:	781b      	ldrb	r3, [r3, #0]
    *((__IO uint8_t*)&hspi2.Instance->DR);
 800193e:	4b5a      	ldr	r3, [pc, #360]	; (8001aa8 <readDataDMA+0x20c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	330c      	adds	r3, #12
 8001944:	781b      	ldrb	r3, [r3, #0]

    /* Reset the threshold bit */
    CLEAR_BIT(hspi2.Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8001946:	4b58      	ldr	r3, [pc, #352]	; (8001aa8 <readDataDMA+0x20c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	4b56      	ldr	r3, [pc, #344]	; (8001aa8 <readDataDMA+0x20c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4956      	ldr	r1, [pc, #344]	; (8001aac <readDataDMA+0x210>)
 8001952:	400a      	ands	r2, r1
 8001954:	605a      	str	r2, [r3, #4]

    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi2.Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001956:	4b54      	ldr	r3, [pc, #336]	; (8001aa8 <readDataDMA+0x20c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	4b52      	ldr	r3, [pc, #328]	; (8001aa8 <readDataDMA+0x20c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2180      	movs	r1, #128	; 0x80
 8001962:	0149      	lsls	r1, r1, #5
 8001964:	430a      	orrs	r2, r1
 8001966:	605a      	str	r2, [r3, #4]

    /******** RX ****************/
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(&hdma_spi2_rx);
 8001968:	4b51      	ldr	r3, [pc, #324]	; (8001ab0 <readDataDMA+0x214>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	4b50      	ldr	r3, [pc, #320]	; (8001ab0 <readDataDMA+0x214>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2101      	movs	r1, #1
 8001974:	438a      	bics	r2, r1
 8001976:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(&hdma_spi2_rx, (DMA_FLAG_GI1 << (hdma_spi2_rx.ChannelIndex & 0x1cU)));
 8001978:	4b4d      	ldr	r3, [pc, #308]	; (8001ab0 <readDataDMA+0x214>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	001a      	movs	r2, r3
 800197e:	4b4d      	ldr	r3, [pc, #308]	; (8001ab4 <readDataDMA+0x218>)
 8001980:	429a      	cmp	r2, r3
 8001982:	d909      	bls.n	8001998 <readDataDMA+0xfc>
 8001984:	4b4a      	ldr	r3, [pc, #296]	; (8001ab0 <readDataDMA+0x214>)
 8001986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001988:	221c      	movs	r2, #28
 800198a:	401a      	ands	r2, r3
 800198c:	4b4a      	ldr	r3, [pc, #296]	; (8001ab8 <readDataDMA+0x21c>)
 800198e:	2101      	movs	r1, #1
 8001990:	4091      	lsls	r1, r2
 8001992:	000a      	movs	r2, r1
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	e008      	b.n	80019aa <readDataDMA+0x10e>
 8001998:	4b45      	ldr	r3, [pc, #276]	; (8001ab0 <readDataDMA+0x214>)
 800199a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199c:	221c      	movs	r2, #28
 800199e:	401a      	ands	r2, r3
 80019a0:	4b46      	ldr	r3, [pc, #280]	; (8001abc <readDataDMA+0x220>)
 80019a2:	2101      	movs	r1, #1
 80019a4:	4091      	lsls	r1, r2
 80019a6:	000a      	movs	r2, r1
 80019a8:	605a      	str	r2, [r3, #4]

    /* Configure DMA Channel data length */
    hdma_spi2_rx.Instance->CNDTR = length;
 80019aa:	4b41      	ldr	r3, [pc, #260]	; (8001ab0 <readDataDMA+0x214>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	605a      	str	r2, [r3, #4]

    /* Configure DMA Channel destination address */
    hdma_spi2_rx.Instance->CPAR = (uint32_t)&hspi2.Instance->DR;
 80019b2:	4b3d      	ldr	r3, [pc, #244]	; (8001aa8 <readDataDMA+0x20c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	330c      	adds	r3, #12
 80019b8:	001a      	movs	r2, r3
 80019ba:	4b3d      	ldr	r3, [pc, #244]	; (8001ab0 <readDataDMA+0x214>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma_spi2_rx.Instance->CMAR = (uint32_t)buffer;
 80019c0:	4b3b      	ldr	r3, [pc, #236]	; (8001ab0 <readDataDMA+0x214>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	68ba      	ldr	r2, [r7, #8]
 80019c6:	60da      	str	r2, [r3, #12]

    __HAL_DMA_DISABLE_IT(&hdma_spi2_rx, DMA_IT_HT | DMA_IT_TE);
 80019c8:	4b39      	ldr	r3, [pc, #228]	; (8001ab0 <readDataDMA+0x214>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	4b38      	ldr	r3, [pc, #224]	; (8001ab0 <readDataDMA+0x214>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	210c      	movs	r1, #12
 80019d4:	438a      	bics	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE_IT(&hdma_spi2_rx, (DMA_IT_TC));
 80019d8:	4b35      	ldr	r3, [pc, #212]	; (8001ab0 <readDataDMA+0x214>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	4b34      	ldr	r3, [pc, #208]	; (8001ab0 <readDataDMA+0x214>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2102      	movs	r1, #2
 80019e4:	430a      	orrs	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(&hdma_spi2_rx);
 80019e8:	4b31      	ldr	r3, [pc, #196]	; (8001ab0 <readDataDMA+0x214>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	4b30      	ldr	r3, [pc, #192]	; (8001ab0 <readDataDMA+0x214>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2101      	movs	r1, #1
 80019f4:	430a      	orrs	r2, r1
 80019f6:	601a      	str	r2, [r3, #0]

    /* Enable Rx DMA Request */
    SET_BIT(hspi2.Instance->CR2, SPI_CR2_RXDMAEN);
 80019f8:	4b2b      	ldr	r3, [pc, #172]	; (8001aa8 <readDataDMA+0x20c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <readDataDMA+0x20c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2101      	movs	r1, #1
 8001a04:	430a      	orrs	r2, r1
 8001a06:	605a      	str	r2, [r3, #4]

    /******** TX ****************/
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(&hdma_spi2_tx);
 8001a08:	4b2d      	ldr	r3, [pc, #180]	; (8001ac0 <readDataDMA+0x224>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	4b2c      	ldr	r3, [pc, #176]	; (8001ac0 <readDataDMA+0x224>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2101      	movs	r1, #1
 8001a14:	438a      	bics	r2, r1
 8001a16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(&hdma_spi2_tx, (DMA_FLAG_GI1 << (hdma_spi2_tx.ChannelIndex & 0x1cU)));
 8001a18:	4b29      	ldr	r3, [pc, #164]	; (8001ac0 <readDataDMA+0x224>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	001a      	movs	r2, r3
 8001a1e:	4b25      	ldr	r3, [pc, #148]	; (8001ab4 <readDataDMA+0x218>)
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d909      	bls.n	8001a38 <readDataDMA+0x19c>
 8001a24:	4b26      	ldr	r3, [pc, #152]	; (8001ac0 <readDataDMA+0x224>)
 8001a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a28:	221c      	movs	r2, #28
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	4b22      	ldr	r3, [pc, #136]	; (8001ab8 <readDataDMA+0x21c>)
 8001a2e:	2101      	movs	r1, #1
 8001a30:	4091      	lsls	r1, r2
 8001a32:	000a      	movs	r2, r1
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	e008      	b.n	8001a4a <readDataDMA+0x1ae>
 8001a38:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <readDataDMA+0x224>)
 8001a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3c:	221c      	movs	r2, #28
 8001a3e:	401a      	ands	r2, r3
 8001a40:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <readDataDMA+0x220>)
 8001a42:	2101      	movs	r1, #1
 8001a44:	4091      	lsls	r1, r2
 8001a46:	000a      	movs	r2, r1
 8001a48:	605a      	str	r2, [r3, #4]

    /* Configure DMA Channel data length */
    hdma_spi2_tx.Instance->CNDTR = length;
 8001a4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <readDataDMA+0x224>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	605a      	str	r2, [r3, #4]

    /* Configure DMA Channel destination address */
    hdma_spi2_tx.Instance->CPAR = (uint32_t)&hspi2.Instance->DR;
 8001a52:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <readDataDMA+0x20c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	330c      	adds	r3, #12
 8001a58:	001a      	movs	r2, r3
 8001a5a:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <readDataDMA+0x224>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma_spi2_tx.Instance->CMAR = (uint32_t)buffer;
 8001a60:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <readDataDMA+0x224>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68ba      	ldr	r2, [r7, #8]
 8001a66:	60da      	str	r2, [r3, #12]

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(&hdma_spi2_tx);
 8001a68:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <readDataDMA+0x224>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <readDataDMA+0x224>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2101      	movs	r1, #1
 8001a74:	430a      	orrs	r2, r1
 8001a76:	601a      	str	r2, [r3, #0]

    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(&hspi2);
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <readDataDMA+0x20c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <readDataDMA+0x20c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2140      	movs	r1, #64	; 0x40
 8001a84:	430a      	orrs	r2, r1
 8001a86:	601a      	str	r2, [r3, #0]

    /* Enable Tx DMA Request */
    SET_BIT(hspi2.Instance->CR2, SPI_CR2_TXDMAEN);
 8001a88:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <readDataDMA+0x20c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <readDataDMA+0x20c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2102      	movs	r1, #2
 8001a94:	430a      	orrs	r2, r1
 8001a96:	605a      	str	r2, [r3, #4]
}
 8001a98:	46c0      	nop			; (mov r8, r8)
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	b004      	add	sp, #16
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	200000a4 	.word	0x200000a4
 8001aa4:	50000400 	.word	0x50000400
 8001aa8:	20000194 	.word	0x20000194
 8001aac:	ffff9fff 	.word	0xffff9fff
 8001ab0:	20000258 	.word	0x20000258
 8001ab4:	40020080 	.word	0x40020080
 8001ab8:	40020400 	.word	0x40020400
 8001abc:	40020000 	.word	0x40020000
 8001ac0:	200002b8 	.word	0x200002b8

08001ac4 <DataReader_DMACallback>:

void DataReader_DMACallback()
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
    /* Transfer Complete Interrupt management ***********************************/
    if ((0U != (DMA1->ISR & (DMA_FLAG_TC1 << (hdma_spi2_rx.ChannelIndex & 0x1cU)))) && (0U != (hdma_spi2_rx.Instance->CCR & DMA_IT_TC)))
 8001ac8:	4b21      	ldr	r3, [pc, #132]	; (8001b50 <DataReader_DMACallback+0x8c>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <DataReader_DMACallback+0x90>)
 8001ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad0:	211c      	movs	r1, #28
 8001ad2:	400b      	ands	r3, r1
 8001ad4:	2102      	movs	r1, #2
 8001ad6:	4099      	lsls	r1, r3
 8001ad8:	000b      	movs	r3, r1
 8001ada:	4013      	ands	r3, r2
 8001adc:	d034      	beq.n	8001b48 <DataReader_DMACallback+0x84>
 8001ade:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <DataReader_DMACallback+0x90>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d02e      	beq.n	8001b48 <DataReader_DMACallback+0x84>
    {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(&hdma_spi2_rx, DMA_IT_TE | DMA_IT_TC);
 8001aea:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <DataReader_DMACallback+0x90>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <DataReader_DMACallback+0x90>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	210a      	movs	r1, #10
 8001af6:	438a      	bics	r2, r1
 8001af8:	601a      	str	r2, [r3, #0]
        /* Clear the transfer complete flag */
        __HAL_DMA_CLEAR_FLAG(&hdma_spi2_rx, (DMA_FLAG_TC1 << (hdma_spi2_rx.ChannelIndex & 0x1cU)));
 8001afa:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <DataReader_DMACallback+0x90>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	001a      	movs	r2, r3
 8001b00:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <DataReader_DMACallback+0x94>)
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d909      	bls.n	8001b1a <DataReader_DMACallback+0x56>
 8001b06:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <DataReader_DMACallback+0x90>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	221c      	movs	r2, #28
 8001b0c:	401a      	ands	r2, r3
 8001b0e:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <DataReader_DMACallback+0x98>)
 8001b10:	2102      	movs	r1, #2
 8001b12:	4091      	lsls	r1, r2
 8001b14:	000a      	movs	r2, r1
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	e008      	b.n	8001b2c <DataReader_DMACallback+0x68>
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <DataReader_DMACallback+0x90>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	221c      	movs	r2, #28
 8001b20:	401a      	ands	r2, r3
 8001b22:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <DataReader_DMACallback+0x8c>)
 8001b24:	2102      	movs	r1, #2
 8001b26:	4091      	lsls	r1, r2
 8001b28:	000a      	movs	r2, r1
 8001b2a:	605a      	str	r2, [r3, #4]


        // Wait until the bus is not busy before changing configuration
        // SPI is busy in communication or Tx buffer is not empty
        while(((hspi2.Instance->SR) & SPI_FLAG_BSY) != RESET) { }
 8001b2c:	46c0      	nop			; (mov r8, r8)
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <DataReader_DMACallback+0x9c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2280      	movs	r2, #128	; 0x80
 8001b36:	4013      	ands	r3, r2
 8001b38:	d1f9      	bne.n	8001b2e <DataReader_DMACallback+0x6a>

        FLASH_CS_GPIO_Port->BSRR = FLASH_CS_Pin;
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <DataReader_DMACallback+0xa0>)
 8001b3c:	2280      	movs	r2, #128	; 0x80
 8001b3e:	0092      	lsls	r2, r2, #2
 8001b40:	619a      	str	r2, [r3, #24]

        isReceivingData = 0;
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <DataReader_DMACallback+0xa4>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	701a      	strb	r2, [r3, #0]
    }
}
 8001b48:	46c0      	nop			; (mov r8, r8)
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	40020000 	.word	0x40020000
 8001b54:	20000258 	.word	0x20000258
 8001b58:	40020080 	.word	0x40020080
 8001b5c:	40020400 	.word	0x40020400
 8001b60:	20000194 	.word	0x20000194
 8001b64:	50000400 	.word	0x50000400
 8001b68:	200000a4 	.word	0x200000a4

08001b6c <DataReader_ReadData>:

void DataReader_ReadData(uint32_t address24, uint8_t* buffer, uint32_t length)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
    readData(address24, buffer, length);
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	68b9      	ldr	r1, [r7, #8]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f7ff fd56 	bl	8001630 <readData>
}
 8001b84:	46c0      	nop			; (mov r8, r8)
 8001b86:	46bd      	mov	sp, r7
 8001b88:	b004      	add	sp, #16
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <DataReader_StartDMAReadData>:

void DataReader_StartDMAReadData(uint32_t address24, uint8_t* buffer, uint32_t length)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
    readDataDMA(address24, buffer, length);
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	68b9      	ldr	r1, [r7, #8]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	f7ff fe7c 	bl	800189c <readDataDMA>
}
 8001ba4:	46c0      	nop			; (mov r8, r8)
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	b004      	add	sp, #16
 8001baa:	bd80      	pop	{r7, pc}

08001bac <DataReader_WaitForReceiveDone>:
{
    return isReceivingData;
}

void DataReader_WaitForReceiveDone(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
    while (isReceivingData);
 8001bb0:	46c0      	nop			; (mov r8, r8)
 8001bb2:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <DataReader_WaitForReceiveDone+0x18>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1fa      	bne.n	8001bb2 <DataReader_WaitForReceiveDone+0x6>
}
 8001bbc:	46c0      	nop			; (mov r8, r8)
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	200000a4 	.word	0x200000a4

08001bc8 <DataReader_Init>:

void DataReader_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
    __HAL_SPI_ENABLE(&hspi2);
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <DataReader_Init+0x1c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <DataReader_Init+0x1c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2140      	movs	r1, #64	; 0x40
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]
}
 8001bdc:	46c0      	nop			; (mov r8, r8)
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	20000194 	.word	0x20000194

08001be8 <Display_DCS_Send>:
volatile uint16_t TE = 0;

//Signal TE interrupt to TouchGFX
void touchgfxSignalVSync(void);

static void Display_DCS_Send(uint8_t command) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	0002      	movs	r2, r0
 8001bf0:	1dfb      	adds	r3, r7, #7
 8001bf2:	701a      	strb	r2, [r3, #0]
	// Reset the nCS pin
	DISPLAY_CSX_GPIO_Port->BRR = DISPLAY_CSX_Pin;
 8001bf4:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <Display_DCS_Send+0x48>)
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	629a      	str	r2, [r3, #40]	; 0x28
	// Set the DCX pin
	DISPLAY_DCX_GPIO_Port->BRR = DISPLAY_DCX_Pin;
 8001bfa:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <Display_DCS_Send+0x48>)
 8001bfc:	2208      	movs	r2, #8
 8001bfe:	629a      	str	r2, [r3, #40]	; 0x28

	// Send the command
	*((__IO uint8_t*) &hspi1.Instance->DR) = command;
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <Display_DCS_Send+0x4c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	330c      	adds	r3, #12
 8001c06:	1dfa      	adds	r2, r7, #7
 8001c08:	7812      	ldrb	r2, [r2, #0]
 8001c0a:	701a      	strb	r2, [r3, #0]

	// Wait until the bus is not busy before changing configuration
	while (((hspi1.Instance->SR) & SPI_FLAG_BSY) != RESET)
 8001c0c:	46c0      	nop			; (mov r8, r8)
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <Display_DCS_Send+0x4c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2280      	movs	r2, #128	; 0x80
 8001c16:	4013      	ands	r3, r2
 8001c18:	d1f9      	bne.n	8001c0e <Display_DCS_Send+0x26>
		;

	// Reset the DCX pin
	DISPLAY_DCX_GPIO_Port->BSRR = DISPLAY_DCX_Pin;
 8001c1a:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <Display_DCS_Send+0x48>)
 8001c1c:	2208      	movs	r2, #8
 8001c1e:	619a      	str	r2, [r3, #24]

	// Set the nCS
	DISPLAY_CSX_GPIO_Port->BSRR = DISPLAY_CSX_Pin;
 8001c20:	4b03      	ldr	r3, [pc, #12]	; (8001c30 <Display_DCS_Send+0x48>)
 8001c22:	2220      	movs	r2, #32
 8001c24:	619a      	str	r2, [r3, #24]
}
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	b002      	add	sp, #8
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	46c0      	nop			; (mov r8, r8)
 8001c30:	50000400 	.word	0x50000400
 8001c34:	20000130 	.word	0x20000130

08001c38 <Display_DCS_Send_With_Data>:

static void Display_DCS_Send_With_Data(uint8_t command, uint8_t *data,
		uint8_t size) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6039      	str	r1, [r7, #0]
 8001c40:	0011      	movs	r1, r2
 8001c42:	1dfb      	adds	r3, r7, #7
 8001c44:	1c02      	adds	r2, r0, #0
 8001c46:	701a      	strb	r2, [r3, #0]
 8001c48:	1dbb      	adds	r3, r7, #6
 8001c4a:	1c0a      	adds	r2, r1, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
	// Reset the nCS pin
	DISPLAY_CSX_GPIO_Port->BRR = DISPLAY_CSX_Pin;
 8001c4e:	4b1f      	ldr	r3, [pc, #124]	; (8001ccc <Display_DCS_Send_With_Data+0x94>)
 8001c50:	2220      	movs	r2, #32
 8001c52:	629a      	str	r2, [r3, #40]	; 0x28
	// Set the DCX pin
	DISPLAY_DCX_GPIO_Port->BRR = DISPLAY_DCX_Pin;
 8001c54:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <Display_DCS_Send_With_Data+0x94>)
 8001c56:	2208      	movs	r2, #8
 8001c58:	629a      	str	r2, [r3, #40]	; 0x28

	*((__IO uint8_t*) &hspi1.Instance->DR) = command;
 8001c5a:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <Display_DCS_Send_With_Data+0x98>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	330c      	adds	r3, #12
 8001c60:	1dfa      	adds	r2, r7, #7
 8001c62:	7812      	ldrb	r2, [r2, #0]
 8001c64:	701a      	strb	r2, [r3, #0]

	// Wait until the bus is not busy before changing configuration
	while (((hspi1.Instance->SR) & SPI_FLAG_BSY) != RESET)
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <Display_DCS_Send_With_Data+0x98>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2280      	movs	r2, #128	; 0x80
 8001c70:	4013      	ands	r3, r2
 8001c72:	d1f9      	bne.n	8001c68 <Display_DCS_Send_With_Data+0x30>
		;
	DISPLAY_DCX_GPIO_Port->BSRR = DISPLAY_DCX_Pin;
 8001c74:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <Display_DCS_Send_With_Data+0x94>)
 8001c76:	2208      	movs	r2, #8
 8001c78:	619a      	str	r2, [r3, #24]

	while (size > 0U) {
 8001c7a:	e015      	b.n	8001ca8 <Display_DCS_Send_With_Data+0x70>
		*((__IO uint8_t*) &hspi1.Instance->DR) = *data;
 8001c7c:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <Display_DCS_Send_With_Data+0x98>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	330c      	adds	r3, #12
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	7812      	ldrb	r2, [r2, #0]
 8001c86:	701a      	strb	r2, [r3, #0]
		data++;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	603b      	str	r3, [r7, #0]
		size--;
 8001c8e:	1dbb      	adds	r3, r7, #6
 8001c90:	781a      	ldrb	r2, [r3, #0]
 8001c92:	1dbb      	adds	r3, r7, #6
 8001c94:	3a01      	subs	r2, #1
 8001c96:	701a      	strb	r2, [r3, #0]
		/* Wait until TXE flag is set to send data */
		while (((hspi1.Instance->SR) & SPI_FLAG_TXE) != SPI_FLAG_TXE)
 8001c98:	46c0      	nop			; (mov r8, r8)
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <Display_DCS_Send_With_Data+0x98>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d1f8      	bne.n	8001c9a <Display_DCS_Send_With_Data+0x62>
	while (size > 0U) {
 8001ca8:	1dbb      	adds	r3, r7, #6
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1e5      	bne.n	8001c7c <Display_DCS_Send_With_Data+0x44>
			;
	}

	// Wait until the bus is not busy before changing configuration
	while (((hspi1.Instance->SR) & SPI_FLAG_BSY) != RESET)
 8001cb0:	46c0      	nop			; (mov r8, r8)
 8001cb2:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <Display_DCS_Send_With_Data+0x98>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2280      	movs	r2, #128	; 0x80
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d1f9      	bne.n	8001cb2 <Display_DCS_Send_With_Data+0x7a>
		;

	// Set the nCS
	DISPLAY_CSX_GPIO_Port->BSRR = DISPLAY_CSX_Pin;
 8001cbe:	4b03      	ldr	r3, [pc, #12]	; (8001ccc <Display_DCS_Send_With_Data+0x94>)
 8001cc0:	2220      	movs	r2, #32
 8001cc2:	619a      	str	r2, [r3, #24]
}
 8001cc4:	46c0      	nop			; (mov r8, r8)
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	b002      	add	sp, #8
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	50000400 	.word	0x50000400
 8001cd0:	20000130 	.word	0x20000130

08001cd4 <MB1642BDisplayDriver_DisplayOn>:

void MB1642BDisplayDriver_DisplayOn(void) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
	// Display ON
	Display_DCS_Send(DCS_SET_DISPLAY_ON);
 8001cd8:	2029      	movs	r0, #41	; 0x29
 8001cda:	f7ff ff85 	bl	8001be8 <Display_DCS_Send>
	HAL_Delay(100);
 8001cde:	2064      	movs	r0, #100	; 0x64
 8001ce0:	f001 fc38 	bl	8003554 <HAL_Delay>
}
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <Display_Set_Area>:
}

static uint16_t old_x0 = 0xFFFF, old_x1 = 0xFFFF, old_y0 = 0xFFFF, old_y1 =
		0xFFFF;

void Display_Set_Area(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8001cec:	b5b0      	push	{r4, r5, r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	0005      	movs	r5, r0
 8001cf4:	000c      	movs	r4, r1
 8001cf6:	0010      	movs	r0, r2
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	1dbb      	adds	r3, r7, #6
 8001cfc:	1c2a      	adds	r2, r5, #0
 8001cfe:	801a      	strh	r2, [r3, #0]
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	1c22      	adds	r2, r4, #0
 8001d04:	801a      	strh	r2, [r3, #0]
 8001d06:	1cbb      	adds	r3, r7, #2
 8001d08:	1c02      	adds	r2, r0, #0
 8001d0a:	801a      	strh	r2, [r3, #0]
 8001d0c:	003b      	movs	r3, r7
 8001d0e:	1c0a      	adds	r2, r1, #0
 8001d10:	801a      	strh	r2, [r3, #0]
	uint8_t arguments[4];

	// Set columns, if changed
	if (x0 != old_x0 || x1 != old_x1) {
 8001d12:	4b35      	ldr	r3, [pc, #212]	; (8001de8 <Display_Set_Area+0xfc>)
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	1dba      	adds	r2, r7, #6
 8001d18:	8812      	ldrh	r2, [r2, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d105      	bne.n	8001d2a <Display_Set_Area+0x3e>
 8001d1e:	4b33      	ldr	r3, [pc, #204]	; (8001dec <Display_Set_Area+0x100>)
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	1cba      	adds	r2, r7, #2
 8001d24:	8812      	ldrh	r2, [r2, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d026      	beq.n	8001d78 <Display_Set_Area+0x8c>
		arguments[0] = x0 >> 8;
 8001d2a:	1dbb      	adds	r3, r7, #6
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	0a1b      	lsrs	r3, r3, #8
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	210c      	movs	r1, #12
 8001d36:	187b      	adds	r3, r7, r1
 8001d38:	701a      	strb	r2, [r3, #0]
		arguments[1] = x0 & 0xFF;
 8001d3a:	1dbb      	adds	r3, r7, #6
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	187b      	adds	r3, r7, r1
 8001d42:	705a      	strb	r2, [r3, #1]
		arguments[2] = x1 >> 8;
 8001d44:	1cbb      	adds	r3, r7, #2
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	0a1b      	lsrs	r3, r3, #8
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	187b      	adds	r3, r7, r1
 8001d50:	709a      	strb	r2, [r3, #2]
		arguments[3] = x1 & 0xFF;
 8001d52:	1cbb      	adds	r3, r7, #2
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	187b      	adds	r3, r7, r1
 8001d5a:	70da      	strb	r2, [r3, #3]
		Display_DCS_Send_With_Data(0x2A, arguments, 4);
 8001d5c:	187b      	adds	r3, r7, r1
 8001d5e:	2204      	movs	r2, #4
 8001d60:	0019      	movs	r1, r3
 8001d62:	202a      	movs	r0, #42	; 0x2a
 8001d64:	f7ff ff68 	bl	8001c38 <Display_DCS_Send_With_Data>

		old_x0 = x0;
 8001d68:	4b1f      	ldr	r3, [pc, #124]	; (8001de8 <Display_Set_Area+0xfc>)
 8001d6a:	1dba      	adds	r2, r7, #6
 8001d6c:	8812      	ldrh	r2, [r2, #0]
 8001d6e:	801a      	strh	r2, [r3, #0]
		old_x1 = x1;
 8001d70:	4b1e      	ldr	r3, [pc, #120]	; (8001dec <Display_Set_Area+0x100>)
 8001d72:	1cba      	adds	r2, r7, #2
 8001d74:	8812      	ldrh	r2, [r2, #0]
 8001d76:	801a      	strh	r2, [r3, #0]
	}

	// Set rows, if changed
	if (y0 != old_y0 || y1 != old_y1) {
 8001d78:	4b1d      	ldr	r3, [pc, #116]	; (8001df0 <Display_Set_Area+0x104>)
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	1d3a      	adds	r2, r7, #4
 8001d7e:	8812      	ldrh	r2, [r2, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d105      	bne.n	8001d90 <Display_Set_Area+0xa4>
 8001d84:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <Display_Set_Area+0x108>)
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	003a      	movs	r2, r7
 8001d8a:	8812      	ldrh	r2, [r2, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d026      	beq.n	8001dde <Display_Set_Area+0xf2>
		arguments[0] = y0 >> 8;
 8001d90:	1d3b      	adds	r3, r7, #4
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	0a1b      	lsrs	r3, r3, #8
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	210c      	movs	r1, #12
 8001d9c:	187b      	adds	r3, r7, r1
 8001d9e:	701a      	strb	r2, [r3, #0]
		arguments[1] = y0 & 0xFF;
 8001da0:	1d3b      	adds	r3, r7, #4
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	187b      	adds	r3, r7, r1
 8001da8:	705a      	strb	r2, [r3, #1]
		arguments[2] = y1 >> 8;
 8001daa:	003b      	movs	r3, r7
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	0a1b      	lsrs	r3, r3, #8
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	187b      	adds	r3, r7, r1
 8001db6:	709a      	strb	r2, [r3, #2]
		arguments[3] = y1 & 0xFF;
 8001db8:	003b      	movs	r3, r7
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	187b      	adds	r3, r7, r1
 8001dc0:	70da      	strb	r2, [r3, #3]
		Display_DCS_Send_With_Data(0x2B, arguments, 4);
 8001dc2:	187b      	adds	r3, r7, r1
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	0019      	movs	r1, r3
 8001dc8:	202b      	movs	r0, #43	; 0x2b
 8001dca:	f7ff ff35 	bl	8001c38 <Display_DCS_Send_With_Data>

		old_y0 = y0;
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <Display_Set_Area+0x104>)
 8001dd0:	1d3a      	adds	r2, r7, #4
 8001dd2:	8812      	ldrh	r2, [r2, #0]
 8001dd4:	801a      	strh	r2, [r3, #0]
		old_y1 = y1;
 8001dd6:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <Display_Set_Area+0x108>)
 8001dd8:	003a      	movs	r2, r7
 8001dda:	8812      	ldrh	r2, [r2, #0]
 8001ddc:	801a      	strh	r2, [r3, #0]
	}
}
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	46bd      	mov	sp, r7
 8001de2:	b004      	add	sp, #16
 8001de4:	bdb0      	pop	{r4, r5, r7, pc}
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	20000000 	.word	0x20000000
 8001dec:	20000002 	.word	0x20000002
 8001df0:	20000004 	.word	0x20000004
 8001df4:	20000006 	.word	0x20000006

08001df8 <Display_Bitmap>:

volatile uint8_t IsTransmittingBlock_;
void Display_Bitmap(const uint16_t *bitmap, uint16_t posx, uint16_t posy,
		uint16_t sizex, uint16_t sizey) {
 8001df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dfa:	b087      	sub	sp, #28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	000c      	movs	r4, r1
 8001e02:	0010      	movs	r0, r2
 8001e04:	0019      	movs	r1, r3
 8001e06:	250a      	movs	r5, #10
 8001e08:	197b      	adds	r3, r7, r5
 8001e0a:	1c22      	adds	r2, r4, #0
 8001e0c:	801a      	strh	r2, [r3, #0]
 8001e0e:	2608      	movs	r6, #8
 8001e10:	19bb      	adds	r3, r7, r6
 8001e12:	1c02      	adds	r2, r0, #0
 8001e14:	801a      	strh	r2, [r3, #0]
 8001e16:	1dbb      	adds	r3, r7, #6
 8001e18:	1c0a      	adds	r2, r1, #0
 8001e1a:	801a      	strh	r2, [r3, #0]
	IsTransmittingBlock_ = 1;
 8001e1c:	4b5c      	ldr	r3, [pc, #368]	; (8001f90 <Display_Bitmap+0x198>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	701a      	strb	r2, [r3, #0]
	__HAL_SPI_ENABLE(&hspi1); // Enables SPI peripheral
 8001e22:	4b5c      	ldr	r3, [pc, #368]	; (8001f94 <Display_Bitmap+0x19c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b5a      	ldr	r3, [pc, #360]	; (8001f94 <Display_Bitmap+0x19c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2140      	movs	r1, #64	; 0x40
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	601a      	str	r2, [r3, #0]
	uint8_t command = DCS_WRITE_MEMORY_START;
 8001e32:	2317      	movs	r3, #23
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	222c      	movs	r2, #44	; 0x2c
 8001e38:	701a      	strb	r2, [r3, #0]

	// Define the display area
	Display_Set_Area(posx, posy, posx + sizex - 1, posy + sizey - 1);
 8001e3a:	0028      	movs	r0, r5
 8001e3c:	183a      	adds	r2, r7, r0
 8001e3e:	1dbb      	adds	r3, r7, #6
 8001e40:	8812      	ldrh	r2, [r2, #0]
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	18d3      	adds	r3, r2, r3
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	b29c      	uxth	r4, r3
 8001e4c:	19ba      	adds	r2, r7, r6
 8001e4e:	2128      	movs	r1, #40	; 0x28
 8001e50:	2308      	movs	r3, #8
 8001e52:	18cb      	adds	r3, r1, r3
 8001e54:	19db      	adds	r3, r3, r7
 8001e56:	8812      	ldrh	r2, [r2, #0]
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	18d3      	adds	r3, r2, r3
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	19bb      	adds	r3, r7, r6
 8001e64:	8819      	ldrh	r1, [r3, #0]
 8001e66:	183b      	adds	r3, r7, r0
 8001e68:	8818      	ldrh	r0, [r3, #0]
 8001e6a:	0013      	movs	r3, r2
 8001e6c:	0022      	movs	r2, r4
 8001e6e:	f7ff ff3d 	bl	8001cec <Display_Set_Area>

	// Reset the nCS pin
	DISPLAY_CSX_GPIO_Port->BRR = DISPLAY_CSX_Pin;
 8001e72:	4b49      	ldr	r3, [pc, #292]	; (8001f98 <Display_Bitmap+0x1a0>)
 8001e74:	2220      	movs	r2, #32
 8001e76:	629a      	str	r2, [r3, #40]	; 0x28
	// Set the DCX pin
	DISPLAY_DCX_GPIO_Port->BRR = DISPLAY_DCX_Pin;
 8001e78:	4b47      	ldr	r3, [pc, #284]	; (8001f98 <Display_Bitmap+0x1a0>)
 8001e7a:	2208      	movs	r2, #8
 8001e7c:	629a      	str	r2, [r3, #40]	; 0x28

	*((__IO uint8_t*) &hspi1.Instance->DR) = command;
 8001e7e:	4b45      	ldr	r3, [pc, #276]	; (8001f94 <Display_Bitmap+0x19c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	330c      	adds	r3, #12
 8001e84:	2217      	movs	r2, #23
 8001e86:	18ba      	adds	r2, r7, r2
 8001e88:	7812      	ldrb	r2, [r2, #0]
 8001e8a:	701a      	strb	r2, [r3, #0]

	// Wait until the bus is not busy before changing configuration
	while (((hspi1.Instance->SR) & SPI_FLAG_BSY) != RESET)
 8001e8c:	46c0      	nop			; (mov r8, r8)
 8001e8e:	4b41      	ldr	r3, [pc, #260]	; (8001f94 <Display_Bitmap+0x19c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2280      	movs	r2, #128	; 0x80
 8001e96:	4013      	ands	r3, r2
 8001e98:	d1f9      	bne.n	8001e8e <Display_Bitmap+0x96>
		;
	DISPLAY_DCX_GPIO_Port->BSRR = DISPLAY_DCX_Pin;
 8001e9a:	4b3f      	ldr	r3, [pc, #252]	; (8001f98 <Display_Bitmap+0x1a0>)
 8001e9c:	2208      	movs	r2, #8
 8001e9e:	619a      	str	r2, [r3, #24]

	// Set the SPI in 16-bit mode to match endianess
	hspi1.Instance->CR2 = SPI_DATASIZE_16BIT;
 8001ea0:	4b3c      	ldr	r3, [pc, #240]	; (8001f94 <Display_Bitmap+0x19c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	22f0      	movs	r2, #240	; 0xf0
 8001ea6:	0112      	lsls	r2, r2, #4
 8001ea8:	605a      	str	r2, [r3, #4]

	// Disable spi peripherals
	__HAL_SPI_DISABLE(&hspi1);
 8001eaa:	4b3a      	ldr	r3, [pc, #232]	; (8001f94 <Display_Bitmap+0x19c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b38      	ldr	r3, [pc, #224]	; (8001f94 <Display_Bitmap+0x19c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2140      	movs	r1, #64	; 0x40
 8001eb6:	438a      	bics	r2, r1
 8001eb8:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE(&hdma_spi1_tx);
 8001eba:	4b38      	ldr	r3, [pc, #224]	; (8001f9c <Display_Bitmap+0x1a4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b36      	ldr	r3, [pc, #216]	; (8001f9c <Display_Bitmap+0x1a4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	438a      	bics	r2, r1
 8001ec8:	601a      	str	r2, [r3, #0]

	CLEAR_BIT(hspi1.Instance->CR2, SPI_CR2_LDMATX);
 8001eca:	4b32      	ldr	r3, [pc, #200]	; (8001f94 <Display_Bitmap+0x19c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	4b30      	ldr	r3, [pc, #192]	; (8001f94 <Display_Bitmap+0x19c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4932      	ldr	r1, [pc, #200]	; (8001fa0 <Display_Bitmap+0x1a8>)
 8001ed6:	400a      	ands	r2, r1
 8001ed8:	605a      	str	r2, [r3, #4]

	/* Clear all flags */
	__HAL_DMA_CLEAR_FLAG(&hdma_spi1_tx,
 8001eda:	4b30      	ldr	r3, [pc, #192]	; (8001f9c <Display_Bitmap+0x1a4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	001a      	movs	r2, r3
 8001ee0:	4b30      	ldr	r3, [pc, #192]	; (8001fa4 <Display_Bitmap+0x1ac>)
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d909      	bls.n	8001efa <Display_Bitmap+0x102>
 8001ee6:	4b2d      	ldr	r3, [pc, #180]	; (8001f9c <Display_Bitmap+0x1a4>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	221c      	movs	r2, #28
 8001eec:	401a      	ands	r2, r3
 8001eee:	4b2e      	ldr	r3, [pc, #184]	; (8001fa8 <Display_Bitmap+0x1b0>)
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	4091      	lsls	r1, r2
 8001ef4:	000a      	movs	r2, r1
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	e008      	b.n	8001f0c <Display_Bitmap+0x114>
 8001efa:	4b28      	ldr	r3, [pc, #160]	; (8001f9c <Display_Bitmap+0x1a4>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efe:	221c      	movs	r2, #28
 8001f00:	401a      	ands	r2, r3
 8001f02:	4b2a      	ldr	r3, [pc, #168]	; (8001fac <Display_Bitmap+0x1b4>)
 8001f04:	2101      	movs	r1, #1
 8001f06:	4091      	lsls	r1, r2
 8001f08:	000a      	movs	r2, r1
 8001f0a:	605a      	str	r2, [r3, #4]
			(DMA_FLAG_GI1 << (hdma_spi1_tx.ChannelIndex & 0x1cU)));

	/* Configure DMA Channel data length */
	hdma_spi1_tx.Instance->CNDTR = sizex * sizey;
 8001f0c:	1dbb      	adds	r3, r7, #6
 8001f0e:	881a      	ldrh	r2, [r3, #0]
 8001f10:	2328      	movs	r3, #40	; 0x28
 8001f12:	2108      	movs	r1, #8
 8001f14:	185b      	adds	r3, r3, r1
 8001f16:	19db      	adds	r3, r3, r7
 8001f18:	881b      	ldrh	r3, [r3, #0]
 8001f1a:	435a      	muls	r2, r3
 8001f1c:	4b1f      	ldr	r3, [pc, #124]	; (8001f9c <Display_Bitmap+0x1a4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
	/* Configure DMA Channel destination address */
	hdma_spi1_tx.Instance->CPAR = (uint32_t) &hspi1.Instance->DR;
 8001f22:	4b1c      	ldr	r3, [pc, #112]	; (8001f94 <Display_Bitmap+0x19c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	330c      	adds	r3, #12
 8001f28:	001a      	movs	r2, r3
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <Display_Bitmap+0x1a4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	609a      	str	r2, [r3, #8]

	/* Configure DMA Channel source address */
	hdma_spi1_tx.Instance->CMAR = (uint32_t) bitmap;
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <Display_Bitmap+0x1a4>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	60da      	str	r2, [r3, #12]

	/* Disable the transfer half complete interrupt */
	__HAL_DMA_DISABLE_IT(&hdma_spi1_tx, DMA_IT_HT);
 8001f38:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <Display_Bitmap+0x1a4>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <Display_Bitmap+0x1a4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2104      	movs	r1, #4
 8001f44:	438a      	bics	r2, r1
 8001f46:	601a      	str	r2, [r3, #0]
	/* Enable the transfer complete interrupt */
	__HAL_DMA_ENABLE_IT(&hdma_spi1_tx, (DMA_IT_TC | DMA_IT_TE));
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <Display_Bitmap+0x1a4>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <Display_Bitmap+0x1a4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	210a      	movs	r1, #10
 8001f54:	430a      	orrs	r2, r1
 8001f56:	601a      	str	r2, [r3, #0]

	/* Enable the Peripherals */
	__HAL_DMA_ENABLE(&hdma_spi1_tx);
 8001f58:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <Display_Bitmap+0x1a4>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <Display_Bitmap+0x1a4>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2101      	movs	r1, #1
 8001f64:	430a      	orrs	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]
	__HAL_SPI_ENABLE(&hspi1);
 8001f68:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <Display_Bitmap+0x19c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <Display_Bitmap+0x19c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2140      	movs	r1, #64	; 0x40
 8001f74:	430a      	orrs	r2, r1
 8001f76:	601a      	str	r2, [r3, #0]

	/* Enable Tx DMA Request */
	SET_BIT(hspi1.Instance->CR2, SPI_CR2_TXDMAEN);
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <Display_Bitmap+0x19c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <Display_Bitmap+0x19c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2102      	movs	r1, #2
 8001f84:	430a      	orrs	r2, r1
 8001f86:	605a      	str	r2, [r3, #4]
}
 8001f88:	46c0      	nop			; (mov r8, r8)
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b007      	add	sp, #28
 8001f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f90:	200000a8 	.word	0x200000a8
 8001f94:	20000130 	.word	0x20000130
 8001f98:	50000400 	.word	0x50000400
 8001f9c:	200001f8 	.word	0x200001f8
 8001fa0:	ffffbfff 	.word	0xffffbfff
 8001fa4:	40020080 	.word	0x40020080
 8001fa8:	40020400 	.word	0x40020400
 8001fac:	40020000 	.word	0x40020000

08001fb0 <HAL_GPIO_EXTI_Rising_Callback>:
extern sitronix_handle_t handle;
uint8_t updated;
uint16_t x0;
uint16_t y0;

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	0002      	movs	r2, r0
 8001fb8:	1dbb      	adds	r3, r7, #6
 8001fba:	801a      	strh	r2, [r3, #0]
	UNUSED(GPIO_Pin);

	if (GPIO_Pin == BUTTON_USER_Pin) {
 8001fbc:	1dbb      	adds	r3, r7, #6
 8001fbe:	881a      	ldrh	r2, [r3, #0]
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	019b      	lsls	r3, r3, #6
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d105      	bne.n	8001fd4 <HAL_GPIO_EXTI_Rising_Callback+0x24>
		button_pressed++;
 8001fc8:	4b18      	ldr	r3, [pc, #96]	; (800202c <HAL_GPIO_EXTI_Rising_Callback+0x7c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	4b17      	ldr	r3, [pc, #92]	; (800202c <HAL_GPIO_EXTI_Rising_Callback+0x7c>)
 8001fd0:	601a      	str	r2, [r3, #0]
		(&htim2)->Instance->CNT = 0;
		HAL_IncTick();
		touchgfxSignalVSync();
	}

}
 8001fd2:	e027      	b.n	8002024 <HAL_GPIO_EXTI_Rising_Callback+0x74>
	else if (GPIO_Pin == CPT_INT_Pin) {
 8001fd4:	1dbb      	adds	r3, r7, #6
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	2b80      	cmp	r3, #128	; 0x80
 8001fda:	d10c      	bne.n	8001ff6 <HAL_GPIO_EXTI_Rising_Callback+0x46>
		HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8001fdc:	2007      	movs	r0, #7
 8001fde:	f001 fbe6 	bl	80037ae <HAL_NVIC_DisableIRQ>
		sitronix_get_coordinates(&handle, &updated, &x0, &y0);
 8001fe2:	4b13      	ldr	r3, [pc, #76]	; (8002030 <HAL_GPIO_EXTI_Rising_Callback+0x80>)
 8001fe4:	4a13      	ldr	r2, [pc, #76]	; (8002034 <HAL_GPIO_EXTI_Rising_Callback+0x84>)
 8001fe6:	4914      	ldr	r1, [pc, #80]	; (8002038 <HAL_GPIO_EXTI_Rising_Callback+0x88>)
 8001fe8:	4814      	ldr	r0, [pc, #80]	; (800203c <HAL_GPIO_EXTI_Rising_Callback+0x8c>)
 8001fea:	f001 f979 	bl	80032e0 <sitronix_get_coordinates>
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001fee:	2007      	movs	r0, #7
 8001ff0:	f001 fbcd 	bl	800378e <HAL_NVIC_EnableIRQ>
}
 8001ff4:	e016      	b.n	8002024 <HAL_GPIO_EXTI_Rising_Callback+0x74>
		TE++;
 8001ff6:	4b12      	ldr	r3, [pc, #72]	; (8002040 <HAL_GPIO_EXTI_Rising_Callback+0x90>)
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <HAL_GPIO_EXTI_Rising_Callback+0x90>)
 8002002:	801a      	strh	r2, [r3, #0]
		(&htim2)->Instance->CR1 &= ~(TIM_CR1_CEN);
 8002004:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <HAL_GPIO_EXTI_Rising_Callback+0x94>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <HAL_GPIO_EXTI_Rising_Callback+0x94>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2101      	movs	r1, #1
 8002010:	438a      	bics	r2, r1
 8002012:	601a      	str	r2, [r3, #0]
		(&htim2)->Instance->CNT = 0;
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <HAL_GPIO_EXTI_Rising_Callback+0x94>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2200      	movs	r2, #0
 800201a:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_IncTick();
 800201c:	f001 fa7e 	bl	800351c <HAL_IncTick>
		touchgfxSignalVSync();
 8002020:	f009 fe66 	bl	800bcf0 <touchgfxSignalVSync>
}
 8002024:	46c0      	nop			; (mov r8, r8)
 8002026:	46bd      	mov	sp, r7
 8002028:	b002      	add	sp, #8
 800202a:	bd80      	pop	{r7, pc}
 800202c:	200000ac 	.word	0x200000ac
 8002030:	200000b4 	.word	0x200000b4
 8002034:	200000b2 	.word	0x200000b2
 8002038:	200000b0 	.word	0x200000b0
 800203c:	20000008 	.word	0x20000008
 8002040:	200000a6 	.word	0x200000a6
 8002044:	20000318 	.word	0x20000318

08002048 <HAL_GPIO_EXTI_Falling_Callback>:

extern uint8_t IntCount;

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	0002      	movs	r2, r0
 8002050:	1dbb      	adds	r3, r7, #6
 8002052:	801a      	strh	r2, [r3, #0]

	UNUSED(GPIO_Pin);
	(&htim2)->Instance->CR1 = (TIM_CR1_CEN);
 8002054:	4b05      	ldr	r3, [pc, #20]	; (800206c <HAL_GPIO_EXTI_Falling_Callback+0x24>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2201      	movs	r2, #1
 800205a:	601a      	str	r2, [r3, #0]
	HAL_IncTick();
 800205c:	f001 fa5e 	bl	800351c <HAL_IncTick>
	touchgfxSignalVSync();
 8002060:	f009 fe46 	bl	800bcf0 <touchgfxSignalVSync>
}
 8002064:	46c0      	nop			; (mov r8, r8)
 8002066:	46bd      	mov	sp, r7
 8002068:	b002      	add	sp, #8
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000318 	.word	0x20000318

08002070 <MB1642BDisplayDriver_DisplayInit>:

void MB1642BDisplayDriver_DisplayInit(void) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
	uint8_t arguments[4];
	__HAL_SPI_ENABLE(&hspi1);
 8002076:	4b64      	ldr	r3, [pc, #400]	; (8002208 <MB1642BDisplayDriver_DisplayInit+0x198>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4b62      	ldr	r3, [pc, #392]	; (8002208 <MB1642BDisplayDriver_DisplayInit+0x198>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2140      	movs	r1, #64	; 0x40
 8002082:	430a      	orrs	r2, r1
 8002084:	601a      	str	r2, [r3, #0]
//  // Display Normal mode
//  Display_DCS_Send(DCS_ENTER_NORMAL_MODE);
//  HAL_Delay(100);
//
//  // Display Normal mode   //E2O
	Display_DCS_Send(DCS_ENTER_INVERT_MODE);
 8002086:	2021      	movs	r0, #33	; 0x21
 8002088:	f7ff fdae 	bl	8001be8 <Display_DCS_Send>
	HAL_Delay(100);
 800208c:	2064      	movs	r0, #100	; 0x64
 800208e:	f001 fa61 	bl	8003554 <HAL_Delay>
////  arguments[0] = 0x05; // RGB565
//  arguments[0] = 0x55; // RGB565  65K //E2O
//  Display_DCS_Send_With_Data(DCS_SET_PIXEL_FORMAT, arguments, 1);
//  HAL_Delay(100);

	Display_DCS_Send(DCS_SOFT_RESET); // software reset comand
 8002092:	2001      	movs	r0, #1
 8002094:	f7ff fda8 	bl	8001be8 <Display_DCS_Send>
	HAL_Delay(100);
 8002098:	2064      	movs	r0, #100	; 0x64
 800209a:	f001 fa5b 	bl	8003554 <HAL_Delay>
	Display_DCS_Send(DCS_SET_DISPLAY_OFF); // display off
 800209e:	2028      	movs	r0, #40	; 0x28
 80020a0:	f7ff fda2 	bl	8001be8 <Display_DCS_Send>
	//------------power control------------------------------
//  ILI9341_SendCommand (ILI9341_POWER1); // power control
////   ILI9341_SendData   (0x26); // GVDD = 4.75v
//  ILI9341_SendData   (0x16); // GVDD = 4.75v  // 0x26 to 0x16 (E2O)

	arguments[0] = 0x16; // GVDD = 4.75v
 80020a4:	1d3b      	adds	r3, r7, #4
 80020a6:	2216      	movs	r2, #22
 80020a8:	701a      	strb	r2, [r3, #0]
	Display_DCS_Send_With_Data(DCS_POWER1, arguments, 1);
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	2201      	movs	r2, #1
 80020ae:	0019      	movs	r1, r3
 80020b0:	20c0      	movs	r0, #192	; 0xc0
 80020b2:	f7ff fdc1 	bl	8001c38 <Display_DCS_Send_With_Data>

//  ILI9341_SendCommand (ILI9341_POWER2); // power control
//  ILI9341_SendData   (0x11); // AVDD=VCIx2, VGH=VCIx7, VGL=-VCIx3

	arguments[0] = 0x11; // AVDD=VCIx2, VGH=VCIx7, VGL=-VCIx3
 80020b6:	1d3b      	adds	r3, r7, #4
 80020b8:	2211      	movs	r2, #17
 80020ba:	701a      	strb	r2, [r3, #0]
	Display_DCS_Send_With_Data(DCS_POWER2, arguments, 1);
 80020bc:	1d3b      	adds	r3, r7, #4
 80020be:	2201      	movs	r2, #1
 80020c0:	0019      	movs	r1, r3
 80020c2:	20c1      	movs	r0, #193	; 0xc1
 80020c4:	f7ff fdb8 	bl	8001c38 <Display_DCS_Send_With_Data>
//  ILI9341_SendData   (0x35); // Set the VCOMH voltage (0x35 = 4.025v)
//  ILI9341_SendData   (0x3e); // Set the VCOML voltage (0x3E = -0.950v)
//  ILI9341_SendCommand (ILI9341_VCOM2); // vcom control
//  ILI9341_SendData   (0xbe);

	arguments[0] = 0x35; // Set the VCOMH voltage (0x35 = 4.025v)
 80020c8:	1d3b      	adds	r3, r7, #4
 80020ca:	2235      	movs	r2, #53	; 0x35
 80020cc:	701a      	strb	r2, [r3, #0]
	arguments[1] = 0x3E; // Set the VCOML voltage (0x3E = -0.950v)
 80020ce:	1d3b      	adds	r3, r7, #4
 80020d0:	223e      	movs	r2, #62	; 0x3e
 80020d2:	705a      	strb	r2, [r3, #1]
	Display_DCS_Send_With_Data(DCS_VCOM1, arguments, 2);
 80020d4:	1d3b      	adds	r3, r7, #4
 80020d6:	2202      	movs	r2, #2
 80020d8:	0019      	movs	r1, r3
 80020da:	20c5      	movs	r0, #197	; 0xc5
 80020dc:	f7ff fdac 	bl	8001c38 <Display_DCS_Send_With_Data>

	arguments[0] = 0xBE;
 80020e0:	1d3b      	adds	r3, r7, #4
 80020e2:	22be      	movs	r2, #190	; 0xbe
 80020e4:	701a      	strb	r2, [r3, #0]
	Display_DCS_Send_With_Data(DCS_VCOM2, arguments, 1);
 80020e6:	1d3b      	adds	r3, r7, #4
 80020e8:	2201      	movs	r2, #1
 80020ea:	0019      	movs	r1, r3
 80020ec:	20c7      	movs	r0, #199	; 0xc7
 80020ee:	f7ff fda3 	bl	8001c38 <Display_DCS_Send_With_Data>
	//------------memory access control------------------------
//  ILI9341_SendCommand (ILI9341_MAC); // memory access control
//  ILI9341_SendData(0x48);

//	arguments[0] = 0x48;
	arguments[0] = 0xE8;	// Aşağıya Bakan
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	22e8      	movs	r2, #232	; 0xe8
 80020f6:	701a      	strb	r2, [r3, #0]
//	arguments[0] = 0x28;	// Yukarıya Bakan
	Display_DCS_Send_With_Data(DCS_SET_ADDRESS_MODE, arguments, 1);
 80020f8:	1d3b      	adds	r3, r7, #4
 80020fa:	2201      	movs	r2, #1
 80020fc:	0019      	movs	r1, r3
 80020fe:	2036      	movs	r0, #54	; 0x36
 8002100:	f7ff fd9a 	bl	8001c38 <Display_DCS_Send_With_Data>

//  ILI9341_SendCommand (ILI9341_PIXEL_FORMAT); // pixel format set
//  ILI9341_SendData   (0x55); // 16bit /pixel

	arguments[0] = 0x55;  // 16bit /pixel
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	2255      	movs	r2, #85	; 0x55
 8002108:	701a      	strb	r2, [r3, #0]
	Display_DCS_Send_With_Data(DCS_SET_PIXEL_FORMAT, arguments, 1);
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	2201      	movs	r2, #1
 800210e:	0019      	movs	r1, r3
 8002110:	203a      	movs	r0, #58	; 0x3a
 8002112:	f7ff fd91 	bl	8001c38 <Display_DCS_Send_With_Data>

//	 ILI9341_SendCommand(ILI9341_FRC);
//  ILI9341_SendData(0);
//  ILI9341_SendData(0x1F);

	arguments[0] = 0x00;
 8002116:	1d3b      	adds	r3, r7, #4
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
	arguments[1] = 0x1F;
 800211c:	1d3b      	adds	r3, r7, #4
 800211e:	221f      	movs	r2, #31
 8002120:	705a      	strb	r2, [r3, #1]
	Display_DCS_Send_With_Data(DCS_FRC, arguments, 2);
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	2202      	movs	r2, #2
 8002126:	0019      	movs	r1, r3
 8002128:	20b1      	movs	r0, #177	; 0xb1
 800212a:	f7ff fd85 	bl	8001c38 <Display_DCS_Send_With_Data>
//  ILI9341_SendData   (0x00); // x0_HIGH---0
//  ILI9341_SendData   (0x00); // x0_LOW----0
//  ILI9341_SendData   (0x00); // x1_HIGH---240
//  ILI9341_SendData   (0xEF); // x1_LOW----240

	arguments[0] = 0x00;  // x0_HIGH---0
 800212e:	1d3b      	adds	r3, r7, #4
 8002130:	2200      	movs	r2, #0
 8002132:	701a      	strb	r2, [r3, #0]
	arguments[1] = 0x00;  // x0_LOW----0
 8002134:	1d3b      	adds	r3, r7, #4
 8002136:	2200      	movs	r2, #0
 8002138:	705a      	strb	r2, [r3, #1]
	arguments[2] = 0x00;  // x1_HIGH---240
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	2200      	movs	r2, #0
 800213e:	709a      	strb	r2, [r3, #2]
	arguments[3] = 0xEF;  // x1_LOW----240
 8002140:	1d3b      	adds	r3, r7, #4
 8002142:	22ef      	movs	r2, #239	; 0xef
 8002144:	70da      	strb	r2, [r3, #3]
	Display_DCS_Send_With_Data(DCS_SET_COLUMN_ADDRESS, arguments, 4);
 8002146:	1d3b      	adds	r3, r7, #4
 8002148:	2204      	movs	r2, #4
 800214a:	0019      	movs	r1, r3
 800214c:	202a      	movs	r0, #42	; 0x2a
 800214e:	f7ff fd73 	bl	8001c38 <Display_DCS_Send_With_Data>
//  ILI9341_SendData   (0x00); // y0_HIGH---0
//  ILI9341_SendData   (0x00); // y0_LOW----0
//  ILI9341_SendData   (0x01); // y1_HIGH---320
//  ILI9341_SendData   (0x3F); // y1_LOW----320

	arguments[0] = 0x00;  // y0_HIGH---0
 8002152:	1d3b      	adds	r3, r7, #4
 8002154:	2200      	movs	r2, #0
 8002156:	701a      	strb	r2, [r3, #0]
	arguments[1] = 0x00;  // y0_LOW----0
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	2200      	movs	r2, #0
 800215c:	705a      	strb	r2, [r3, #1]
	arguments[2] = 0x01;  // y1_HIGH---320
 800215e:	1d3b      	adds	r3, r7, #4
 8002160:	2201      	movs	r2, #1
 8002162:	709a      	strb	r2, [r3, #2]
	arguments[3] = 0x3F;  // y1_LOW----320
 8002164:	1d3b      	adds	r3, r7, #4
 8002166:	223f      	movs	r2, #63	; 0x3f
 8002168:	70da      	strb	r2, [r3, #3]
	Display_DCS_Send_With_Data(DCS_SET_PAGE_ADDRESS, arguments, 4);
 800216a:	1d3b      	adds	r3, r7, #4
 800216c:	2204      	movs	r2, #4
 800216e:	0019      	movs	r1, r3
 8002170:	202b      	movs	r0, #43	; 0x2b
 8002172:	f7ff fd61 	bl	8001c38 <Display_DCS_Send_With_Data>
//  // Deep Standby Mode: OFF
//  // Set the output level of gate driver G1-G320: Normal display
//  // Low voltage detection: Disable
//  ILI9341_SendData   (0x07);

	arguments[0] = 0x07;
 8002176:	1d3b      	adds	r3, r7, #4
 8002178:	2207      	movs	r2, #7
 800217a:	701a      	strb	r2, [r3, #0]
	Display_DCS_Send_With_Data(DCS_Entry_Mode_Set, arguments, 1);
 800217c:	1d3b      	adds	r3, r7, #4
 800217e:	2201      	movs	r2, #1
 8002180:	0019      	movs	r1, r3
 8002182:	20b7      	movs	r0, #183	; 0xb7
 8002184:	f7ff fd58 	bl	8001c38 <Display_DCS_Send_With_Data>
//  ILI9341_SendCommand (ST7789V_GATECTL);
//  ILI9341_SendData   (0x27);
//  ILI9341_SendData   (0x00);
//  ILI9341_SendData   (0x11);

	arguments[0] = 0x27;
 8002188:	1d3b      	adds	r3, r7, #4
 800218a:	2227      	movs	r2, #39	; 0x27
 800218c:	701a      	strb	r2, [r3, #0]
	arguments[1] = 0x00;
 800218e:	1d3b      	adds	r3, r7, #4
 8002190:	2200      	movs	r2, #0
 8002192:	705a      	strb	r2, [r3, #1]
	arguments[2] = 0x11;
 8002194:	1d3b      	adds	r3, r7, #4
 8002196:	2211      	movs	r2, #17
 8002198:	709a      	strb	r2, [r3, #2]
	Display_DCS_Send_With_Data(DCS_GATECTL, arguments, 3);
 800219a:	1d3b      	adds	r3, r7, #4
 800219c:	2203      	movs	r2, #3
 800219e:	0019      	movs	r1, r3
 80021a0:	20e4      	movs	r0, #228	; 0xe4
 80021a2:	f7ff fd49 	bl	8001c38 <Display_DCS_Send_With_Data>

//  ILI9341_SendCommand (ILI9341_SLEEP_OUT); // sleep out
	Display_DCS_Send(DCS_EXIT_SLEEP_MODE); // sleep out
 80021a6:	2011      	movs	r0, #17
 80021a8:	f7ff fd1e 	bl	8001be8 <Display_DCS_Send>
	HAL_Delay(100);
 80021ac:	2064      	movs	r0, #100	; 0x64
 80021ae:	f001 f9d1 	bl	8003554 <HAL_Delay>
//  ILI9341_SendCommand (ILI9341_DISPLAY_ON); // display on
	Display_DCS_Send(DCS_SET_DISPLAY_ON); // display on
 80021b2:	2029      	movs	r0, #41	; 0x29
 80021b4:	f7ff fd18 	bl	8001be8 <Display_DCS_Send>
	HAL_Delay(100);
 80021b8:	2064      	movs	r0, #100	; 0x64
 80021ba:	f001 f9cb 	bl	8003554 <HAL_Delay>
//  ILI9341_SendCommand (ILI9341_GRAM); // memory write
	Display_DCS_Send(DCS_WRITE_MEMORY_START); // memory write
 80021be:	202c      	movs	r0, #44	; 0x2c
 80021c0:	f7ff fd12 	bl	8001be8 <Display_DCS_Send>
	HAL_Delay(5);
 80021c4:	2005      	movs	r0, #5
 80021c6:	f001 f9c5 	bl	8003554 <HAL_Delay>

	// Tearing effect line on
	arguments[0] = 0; //0x00;
 80021ca:	1d3b      	adds	r3, r7, #4
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]
	Display_DCS_Send_With_Data(DCS_SET_TEAR_ON, arguments, 1);
 80021d0:	1d3b      	adds	r3, r7, #4
 80021d2:	2201      	movs	r2, #1
 80021d4:	0019      	movs	r1, r3
 80021d6:	2035      	movs	r0, #53	; 0x35
 80021d8:	f7ff fd2e 	bl	8001c38 <Display_DCS_Send_With_Data>
	HAL_Delay(100);
 80021dc:	2064      	movs	r0, #100	; 0x64
 80021de:	f001 f9b9 	bl	8003554 <HAL_Delay>

	// Tearing effect scan line
	arguments[0] = 0;
 80021e2:	1d3b      	adds	r3, r7, #4
 80021e4:	2200      	movs	r2, #0
 80021e6:	701a      	strb	r2, [r3, #0]
	arguments[1] = 0;
 80021e8:	1d3b      	adds	r3, r7, #4
 80021ea:	2200      	movs	r2, #0
 80021ec:	705a      	strb	r2, [r3, #1]
	Display_DCS_Send_With_Data(DCS_SET_TEAR_SCANLINE, arguments, 2);
 80021ee:	1d3b      	adds	r3, r7, #4
 80021f0:	2202      	movs	r2, #2
 80021f2:	0019      	movs	r1, r3
 80021f4:	2044      	movs	r0, #68	; 0x44
 80021f6:	f7ff fd1f 	bl	8001c38 <Display_DCS_Send_With_Data>
	HAL_Delay(100);
 80021fa:	2064      	movs	r0, #100	; 0x64
 80021fc:	f001 f9aa 	bl	8003554 <HAL_Delay>

}
 8002200:	46c0      	nop			; (mov r8, r8)
 8002202:	46bd      	mov	sp, r7
 8002204:	b002      	add	sp, #8
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20000130 	.word	0x20000130

0800220c <MB1642BDisplayDriver_DisplayReset>:

void MB1642BDisplayDriver_DisplayReset(void) {
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DISPLAY_RESET_GPIO_Port, DISPLAY_RESET_Pin,
 8002210:	23a0      	movs	r3, #160	; 0xa0
 8002212:	05db      	lsls	r3, r3, #23
 8002214:	2200      	movs	r2, #0
 8002216:	2102      	movs	r1, #2
 8002218:	0018      	movs	r0, r3
 800221a:	f001 fed8 	bl	8003fce <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_Delay(100);
 800221e:	2064      	movs	r0, #100	; 0x64
 8002220:	f001 f998 	bl	8003554 <HAL_Delay>
	HAL_GPIO_WritePin(DISPLAY_RESET_GPIO_Port, DISPLAY_RESET_Pin, GPIO_PIN_SET);
 8002224:	23a0      	movs	r3, #160	; 0xa0
 8002226:	05db      	lsls	r3, r3, #23
 8002228:	2201      	movs	r2, #1
 800222a:	2102      	movs	r1, #2
 800222c:	0018      	movs	r0, r3
 800222e:	f001 fece 	bl	8003fce <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002232:	2064      	movs	r0, #100	; 0x64
 8002234:	f001 f98e 	bl	8003554 <HAL_Delay>
}
 8002238:	46c0      	nop			; (mov r8, r8)
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <MB1642BDisplayDriver_Init>:

void MB1642BDisplayDriver_Init(void) {
 800223e:	b580      	push	{r7, lr}
 8002240:	af00      	add	r7, sp, #0
	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002242:	2200      	movs	r2, #0
 8002244:	2100      	movs	r1, #0
 8002246:	2009      	movs	r0, #9
 8002248:	f001 fa8c 	bl	8003764 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800224c:	2009      	movs	r0, #9
 800224e:	f001 fa9e 	bl	800378e <HAL_NVIC_EnableIRQ>
}
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <touchgfxDisplayDriverTransmitActive>:

int touchgfxDisplayDriverTransmitActive(void) {
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
	return IsTransmittingBlock_;
 800225c:	4b02      	ldr	r3, [pc, #8]	; (8002268 <touchgfxDisplayDriverTransmitActive+0x10>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	b2db      	uxtb	r3, r3
}
 8002262:	0018      	movs	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	200000a8 	.word	0x200000a8

0800226c <touchgfxDisplayDriverTransmitBlock>:

void touchgfxDisplayDriverTransmitBlock(const uint8_t *pixels, uint16_t x,
		uint16_t y, uint16_t w, uint16_t h) {
 800226c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800226e:	b087      	sub	sp, #28
 8002270:	af02      	add	r7, sp, #8
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	000c      	movs	r4, r1
 8002276:	0010      	movs	r0, r2
 8002278:	0019      	movs	r1, r3
 800227a:	250a      	movs	r5, #10
 800227c:	197b      	adds	r3, r7, r5
 800227e:	1c22      	adds	r2, r4, #0
 8002280:	801a      	strh	r2, [r3, #0]
 8002282:	2608      	movs	r6, #8
 8002284:	19bb      	adds	r3, r7, r6
 8002286:	1c02      	adds	r2, r0, #0
 8002288:	801a      	strh	r2, [r3, #0]
 800228a:	1dbb      	adds	r3, r7, #6
 800228c:	1c0a      	adds	r2, r1, #0
 800228e:	801a      	strh	r2, [r3, #0]
	Display_Bitmap((uint16_t*) pixels, x, y, w, h);
 8002290:	1dbb      	adds	r3, r7, #6
 8002292:	881c      	ldrh	r4, [r3, #0]
 8002294:	19bb      	adds	r3, r7, r6
 8002296:	881a      	ldrh	r2, [r3, #0]
 8002298:	197b      	adds	r3, r7, r5
 800229a:	8819      	ldrh	r1, [r3, #0]
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	2320      	movs	r3, #32
 80022a0:	2508      	movs	r5, #8
 80022a2:	195b      	adds	r3, r3, r5
 80022a4:	19db      	adds	r3, r3, r7
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	0023      	movs	r3, r4
 80022ac:	f7ff fda4 	bl	8001df8 <Display_Bitmap>
}
 80022b0:	46c0      	nop			; (mov r8, r8)
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b005      	add	sp, #20
 80022b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022b8 <MB1642BDisplayDriver_DMACallback>:

void MB1642BDisplayDriver_DMACallback(void) {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
	/* Transfer Complete Interrupt management ***********************************/
	if ((0U != (DMA1->ISR & (DMA_FLAG_TC1)))
 80022bc:	4b2f      	ldr	r3, [pc, #188]	; (800237c <MB1642BDisplayDriver_DMACallback+0xc4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2202      	movs	r2, #2
 80022c2:	4013      	ands	r3, r2
 80022c4:	d02f      	beq.n	8002326 <MB1642BDisplayDriver_DMACallback+0x6e>
			&& (0U != (hdma_spi1_tx.Instance->CCR & DMA_IT_TC))) {
 80022c6:	4b2e      	ldr	r3, [pc, #184]	; (8002380 <MB1642BDisplayDriver_DMACallback+0xc8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2202      	movs	r2, #2
 80022ce:	4013      	ands	r3, r2
 80022d0:	d029      	beq.n	8002326 <MB1642BDisplayDriver_DMACallback+0x6e>
		/* Disable the transfer complete and error interrupt */
		__HAL_DMA_DISABLE_IT(&hdma_spi1_tx, DMA_IT_TE | DMA_IT_TC);
 80022d2:	4b2b      	ldr	r3, [pc, #172]	; (8002380 <MB1642BDisplayDriver_DMACallback+0xc8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4b29      	ldr	r3, [pc, #164]	; (8002380 <MB1642BDisplayDriver_DMACallback+0xc8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	210a      	movs	r1, #10
 80022de:	438a      	bics	r2, r1
 80022e0:	601a      	str	r2, [r3, #0]

		/* Clear the transfer complete flag */
		__HAL_DMA_CLEAR_FLAG(&hdma_spi1_tx, DMA_FLAG_TC1);
 80022e2:	4b27      	ldr	r3, [pc, #156]	; (8002380 <MB1642BDisplayDriver_DMACallback+0xc8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	001a      	movs	r2, r3
 80022e8:	4b26      	ldr	r3, [pc, #152]	; (8002384 <MB1642BDisplayDriver_DMACallback+0xcc>)
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d903      	bls.n	80022f6 <MB1642BDisplayDriver_DMACallback+0x3e>
 80022ee:	4b26      	ldr	r3, [pc, #152]	; (8002388 <MB1642BDisplayDriver_DMACallback+0xd0>)
 80022f0:	2202      	movs	r2, #2
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	e002      	b.n	80022fc <MB1642BDisplayDriver_DMACallback+0x44>
 80022f6:	4b21      	ldr	r3, [pc, #132]	; (800237c <MB1642BDisplayDriver_DMACallback+0xc4>)
 80022f8:	2202      	movs	r2, #2
 80022fa:	605a      	str	r2, [r3, #4]

		IsTransmittingBlock_ = 0;
 80022fc:	4b23      	ldr	r3, [pc, #140]	; (800238c <MB1642BDisplayDriver_DMACallback+0xd4>)
 80022fe:	2200      	movs	r2, #0
 8002300:	701a      	strb	r2, [r3, #0]

		// Wait until the bus is not busy before changing configuration
		// SPI is busy in communication or Tx buffer is not empty
		while (((hspi1.Instance->SR) & SPI_FLAG_BSY) != RESET) {
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	4b22      	ldr	r3, [pc, #136]	; (8002390 <MB1642BDisplayDriver_DMACallback+0xd8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2280      	movs	r2, #128	; 0x80
 800230c:	4013      	ands	r3, r2
 800230e:	d1f9      	bne.n	8002304 <MB1642BDisplayDriver_DMACallback+0x4c>
		}

		// Set the nCS
		DISPLAY_CSX_GPIO_Port->BSRR = DISPLAY_CSX_Pin;
 8002310:	4b20      	ldr	r3, [pc, #128]	; (8002394 <MB1642BDisplayDriver_DMACallback+0xdc>)
 8002312:	2220      	movs	r2, #32
 8002314:	619a      	str	r2, [r3, #24]

		// Go back to 8-bit mode
		hspi1.Instance->CR2 = SPI_DATASIZE_8BIT;
 8002316:	4b1e      	ldr	r3, [pc, #120]	; (8002390 <MB1642BDisplayDriver_DMACallback+0xd8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	22e0      	movs	r2, #224	; 0xe0
 800231c:	00d2      	lsls	r2, r2, #3
 800231e:	605a      	str	r2, [r3, #4]

		// Signal Transfer Complete to TouchGFX
		DisplayDriver_TransferCompleteCallback();
 8002320:	f009 fcdf 	bl	800bce2 <DisplayDriver_TransferCompleteCallback>
		/* Clear all flags */
		__HAL_DMA_CLEAR_FLAG(&hdma_spi1_tx, DMA_FLAG_GI1);

		assert(0);  // Halting program - Transfer Error Interrupt received.
	}
}
 8002324:	e026      	b.n	8002374 <MB1642BDisplayDriver_DMACallback+0xbc>
	else if ((0U != (DMA1->ISR & (DMA_FLAG_TC1)))
 8002326:	4b15      	ldr	r3, [pc, #84]	; (800237c <MB1642BDisplayDriver_DMACallback+0xc4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2202      	movs	r2, #2
 800232c:	4013      	ands	r3, r2
 800232e:	d021      	beq.n	8002374 <MB1642BDisplayDriver_DMACallback+0xbc>
			&& (0U != (hdma_spi1_tx.Instance->CCR & DMA_IT_TE))) {
 8002330:	4b13      	ldr	r3, [pc, #76]	; (8002380 <MB1642BDisplayDriver_DMACallback+0xc8>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2208      	movs	r2, #8
 8002338:	4013      	ands	r3, r2
 800233a:	d01b      	beq.n	8002374 <MB1642BDisplayDriver_DMACallback+0xbc>
		__HAL_DMA_DISABLE_IT(&hdma_spi1_tx,
 800233c:	4b10      	ldr	r3, [pc, #64]	; (8002380 <MB1642BDisplayDriver_DMACallback+0xc8>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <MB1642BDisplayDriver_DMACallback+0xc8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	210e      	movs	r1, #14
 8002348:	438a      	bics	r2, r1
 800234a:	601a      	str	r2, [r3, #0]
		__HAL_DMA_CLEAR_FLAG(&hdma_spi1_tx, DMA_FLAG_GI1);
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <MB1642BDisplayDriver_DMACallback+0xc8>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	001a      	movs	r2, r3
 8002352:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <MB1642BDisplayDriver_DMACallback+0xcc>)
 8002354:	429a      	cmp	r2, r3
 8002356:	d903      	bls.n	8002360 <MB1642BDisplayDriver_DMACallback+0xa8>
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <MB1642BDisplayDriver_DMACallback+0xd0>)
 800235a:	2201      	movs	r2, #1
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	e002      	b.n	8002366 <MB1642BDisplayDriver_DMACallback+0xae>
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <MB1642BDisplayDriver_DMACallback+0xc4>)
 8002362:	2201      	movs	r2, #1
 8002364:	605a      	str	r2, [r3, #4]
		assert(0);  // Halting program - Transfer Error Interrupt received.
 8002366:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <MB1642BDisplayDriver_DMACallback+0xe0>)
 8002368:	4a0c      	ldr	r2, [pc, #48]	; (800239c <MB1642BDisplayDriver_DMACallback+0xe4>)
 800236a:	21db      	movs	r1, #219	; 0xdb
 800236c:	0049      	lsls	r1, r1, #1
 800236e:	480c      	ldr	r0, [pc, #48]	; (80023a0 <MB1642BDisplayDriver_DMACallback+0xe8>)
 8002370:	f011 fd30 	bl	8013dd4 <__assert_func>
}
 8002374:	46c0      	nop			; (mov r8, r8)
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	40020000 	.word	0x40020000
 8002380:	200001f8 	.word	0x200001f8
 8002384:	40020080 	.word	0x40020080
 8002388:	40020400 	.word	0x40020400
 800238c:	200000a8 	.word	0x200000a8
 8002390:	20000130 	.word	0x20000130
 8002394:	50000400 	.word	0x50000400
 8002398:	08014e98 	.word	0x08014e98
 800239c:	08015ee8 	.word	0x08015ee8
 80023a0:	08014e9c 	.word	0x08014e9c

080023a4 <touchgfxDisplayDriverShouldTransferBlock>:
int touchgfxDisplayDriverShouldTransferBlock(uint16_t bottom) {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	0002      	movs	r2, r0
 80023ac:	1dbb      	adds	r3, r7, #6
 80023ae:	801a      	strh	r2, [r3, #0]
	//return (bottom < getCurrentLine());
	return (bottom < (TE > 0 ? 0xFFFF : ((__IO uint16_t) htim2.Instance->CNT)));
 80023b0:	1dbb      	adds	r3, r7, #6
 80023b2:	881a      	ldrh	r2, [r3, #0]
 80023b4:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <touchgfxDisplayDriverShouldTransferBlock+0x3c>)
 80023b6:	881b      	ldrh	r3, [r3, #0]
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d104      	bne.n	80023c8 <touchgfxDisplayDriverShouldTransferBlock+0x24>
 80023be:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <touchgfxDisplayDriverShouldTransferBlock+0x40>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	e000      	b.n	80023ca <touchgfxDisplayDriverShouldTransferBlock+0x26>
 80023c8:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <touchgfxDisplayDriverShouldTransferBlock+0x44>)
 80023ca:	2101      	movs	r1, #1
 80023cc:	4293      	cmp	r3, r2
 80023ce:	dc01      	bgt.n	80023d4 <touchgfxDisplayDriverShouldTransferBlock+0x30>
 80023d0:	2300      	movs	r3, #0
 80023d2:	1c19      	adds	r1, r3, #0
 80023d4:	b2cb      	uxtb	r3, r1
}
 80023d6:	0018      	movs	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	b002      	add	sp, #8
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	200000a6 	.word	0x200000a6
 80023e4:	20000318 	.word	0x20000318
 80023e8:	0000ffff 	.word	0x0000ffff

080023ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023f0:	f001 f82a 	bl	8003448 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023f4:	f000 f82a 	bl	800244c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023f8:	f000 fa30 	bl	800285c <MX_GPIO_Init>
  MX_DMA_Init();
 80023fc:	f000 fa08 	bl	8002810 <MX_DMA_Init>
  MX_SPI1_Init();
 8002400:	f000 f8e6 	bl	80025d0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002404:	f000 f9b6 	bl	8002774 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8002408:	f000 f920 	bl	800264c <MX_SPI2_Init>
  MX_CRC_Init();
 800240c:	f000 f87c 	bl	8002508 <MX_CRC_Init>
  MX_I2C2_Init();
 8002410:	f000 f89e 	bl	8002550 <MX_I2C2_Init>
  MX_TIM2_Init();
 8002414:	f000 f958 	bl	80026c8 <MX_TIM2_Init>
	sitronix_hardware_reset();
 8002418:	f000 feb9 	bl	800318e <sitronix_hardware_reset>
	HAL_Delay(300);
 800241c:	2396      	movs	r3, #150	; 0x96
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	0018      	movs	r0, r3
 8002422:	f001 f897 	bl	8003554 <HAL_Delay>
	sitronix_version_get(&handle);
 8002426:	4b08      	ldr	r3, [pc, #32]	; (8002448 <main+0x5c>)
 8002428:	0018      	movs	r0, r3
 800242a:	f000 feff 	bl	800322c <sitronix_version_get>
	sitronix_status_get(&handle);
 800242e:	4b06      	ldr	r3, [pc, #24]	; (8002448 <main+0x5c>)
 8002430:	0018      	movs	r0, r3
 8002432:	f000 fed9 	bl	80031e8 <sitronix_status_get>
	sitronix_close_multitouch(&handle);
 8002436:	4b04      	ldr	r3, [pc, #16]	; (8002448 <main+0x5c>)
 8002438:	0018      	movs	r0, r3
 800243a:	f000 ff2f 	bl	800329c <sitronix_close_multitouch>
  MX_TouchGFX_Init();
 800243e:	f005 fe17 	bl	8008070 <MX_TouchGFX_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_TouchGFX_Process();
 8002442:	f005 fe1e 	bl	8008082 <MX_TouchGFX_Process>
 8002446:	e7fc      	b.n	8002442 <main+0x56>
 8002448:	20000008 	.word	0x20000008

0800244c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800244c:	b590      	push	{r4, r7, lr}
 800244e:	b095      	sub	sp, #84	; 0x54
 8002450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002452:	2414      	movs	r4, #20
 8002454:	193b      	adds	r3, r7, r4
 8002456:	0018      	movs	r0, r3
 8002458:	233c      	movs	r3, #60	; 0x3c
 800245a:	001a      	movs	r2, r3
 800245c:	2100      	movs	r1, #0
 800245e:	f011 fec7 	bl	80141f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002462:	1d3b      	adds	r3, r7, #4
 8002464:	0018      	movs	r0, r3
 8002466:	2310      	movs	r3, #16
 8002468:	001a      	movs	r2, r3
 800246a:	2100      	movs	r1, #0
 800246c:	f011 fec0 	bl	80141f0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002470:	2380      	movs	r3, #128	; 0x80
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	0018      	movs	r0, r3
 8002476:	f003 fad7 	bl	8005a28 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800247a:	193b      	adds	r3, r7, r4
 800247c:	2202      	movs	r2, #2
 800247e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002480:	193b      	adds	r3, r7, r4
 8002482:	2280      	movs	r2, #128	; 0x80
 8002484:	0052      	lsls	r2, r2, #1
 8002486:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002488:	0021      	movs	r1, r4
 800248a:	187b      	adds	r3, r7, r1
 800248c:	2200      	movs	r2, #0
 800248e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002490:	187b      	adds	r3, r7, r1
 8002492:	2240      	movs	r2, #64	; 0x40
 8002494:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002496:	187b      	adds	r3, r7, r1
 8002498:	2202      	movs	r2, #2
 800249a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800249c:	187b      	adds	r3, r7, r1
 800249e:	2202      	movs	r2, #2
 80024a0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80024a2:	187b      	adds	r3, r7, r1
 80024a4:	2200      	movs	r2, #0
 80024a6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 80024a8:	187b      	adds	r3, r7, r1
 80024aa:	2208      	movs	r2, #8
 80024ac:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024ae:	187b      	adds	r3, r7, r1
 80024b0:	2280      	movs	r2, #128	; 0x80
 80024b2:	0292      	lsls	r2, r2, #10
 80024b4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80024b6:	187b      	adds	r3, r7, r1
 80024b8:	2280      	movs	r2, #128	; 0x80
 80024ba:	0492      	lsls	r2, r2, #18
 80024bc:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80024be:	187b      	adds	r3, r7, r1
 80024c0:	2280      	movs	r2, #128	; 0x80
 80024c2:	0592      	lsls	r2, r2, #22
 80024c4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024c6:	187b      	adds	r3, r7, r1
 80024c8:	0018      	movs	r0, r3
 80024ca:	f003 faf9 	bl	8005ac0 <HAL_RCC_OscConfig>
 80024ce:	1e03      	subs	r3, r0, #0
 80024d0:	d001      	beq.n	80024d6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80024d2:	f000 fab5 	bl	8002a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024d6:	1d3b      	adds	r3, r7, #4
 80024d8:	2207      	movs	r2, #7
 80024da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024dc:	1d3b      	adds	r3, r7, #4
 80024de:	2202      	movs	r2, #2
 80024e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024e2:	1d3b      	adds	r3, r7, #4
 80024e4:	2200      	movs	r2, #0
 80024e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024e8:	1d3b      	adds	r3, r7, #4
 80024ea:	2200      	movs	r2, #0
 80024ec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024ee:	1d3b      	adds	r3, r7, #4
 80024f0:	2102      	movs	r1, #2
 80024f2:	0018      	movs	r0, r3
 80024f4:	f003 fe44 	bl	8006180 <HAL_RCC_ClockConfig>
 80024f8:	1e03      	subs	r3, r0, #0
 80024fa:	d001      	beq.n	8002500 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80024fc:	f000 faa0 	bl	8002a40 <Error_Handler>
  }
}
 8002500:	46c0      	nop			; (mov r8, r8)
 8002502:	46bd      	mov	sp, r7
 8002504:	b015      	add	sp, #84	; 0x54
 8002506:	bd90      	pop	{r4, r7, pc}

08002508 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800250c:	4b0e      	ldr	r3, [pc, #56]	; (8002548 <MX_CRC_Init+0x40>)
 800250e:	4a0f      	ldr	r2, [pc, #60]	; (800254c <MX_CRC_Init+0x44>)
 8002510:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8002512:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <MX_CRC_Init+0x40>)
 8002514:	2200      	movs	r2, #0
 8002516:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <MX_CRC_Init+0x40>)
 800251a:	2200      	movs	r2, #0
 800251c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800251e:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <MX_CRC_Init+0x40>)
 8002520:	2200      	movs	r2, #0
 8002522:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002524:	4b08      	ldr	r3, [pc, #32]	; (8002548 <MX_CRC_Init+0x40>)
 8002526:	2200      	movs	r2, #0
 8002528:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800252a:	4b07      	ldr	r3, [pc, #28]	; (8002548 <MX_CRC_Init+0x40>)
 800252c:	2201      	movs	r2, #1
 800252e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002530:	4b05      	ldr	r3, [pc, #20]	; (8002548 <MX_CRC_Init+0x40>)
 8002532:	0018      	movs	r0, r3
 8002534:	f001 f958 	bl	80037e8 <HAL_CRC_Init>
 8002538:	1e03      	subs	r3, r0, #0
 800253a:	d001      	beq.n	8002540 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800253c:	f000 fa80 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002540:	46c0      	nop			; (mov r8, r8)
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	200000b8 	.word	0x200000b8
 800254c:	40023000 	.word	0x40023000

08002550 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002554:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <MX_I2C2_Init+0x74>)
 8002556:	4a1c      	ldr	r2, [pc, #112]	; (80025c8 <MX_I2C2_Init+0x78>)
 8002558:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00602173;
 800255a:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <MX_I2C2_Init+0x74>)
 800255c:	4a1b      	ldr	r2, [pc, #108]	; (80025cc <MX_I2C2_Init+0x7c>)
 800255e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002560:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <MX_I2C2_Init+0x74>)
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002566:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <MX_I2C2_Init+0x74>)
 8002568:	2201      	movs	r2, #1
 800256a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800256c:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <MX_I2C2_Init+0x74>)
 800256e:	2200      	movs	r2, #0
 8002570:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002572:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <MX_I2C2_Init+0x74>)
 8002574:	2200      	movs	r2, #0
 8002576:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002578:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <MX_I2C2_Init+0x74>)
 800257a:	2200      	movs	r2, #0
 800257c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800257e:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <MX_I2C2_Init+0x74>)
 8002580:	2200      	movs	r2, #0
 8002582:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002584:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <MX_I2C2_Init+0x74>)
 8002586:	2200      	movs	r2, #0
 8002588:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800258a:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <MX_I2C2_Init+0x74>)
 800258c:	0018      	movs	r0, r3
 800258e:	f001 fd65 	bl	800405c <HAL_I2C_Init>
 8002592:	1e03      	subs	r3, r0, #0
 8002594:	d001      	beq.n	800259a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002596:	f000 fa53 	bl	8002a40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800259a:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <MX_I2C2_Init+0x74>)
 800259c:	2100      	movs	r1, #0
 800259e:	0018      	movs	r0, r3
 80025a0:	f003 f9aa 	bl	80058f8 <HAL_I2CEx_ConfigAnalogFilter>
 80025a4:	1e03      	subs	r3, r0, #0
 80025a6:	d001      	beq.n	80025ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80025a8:	f000 fa4a 	bl	8002a40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <MX_I2C2_Init+0x74>)
 80025ae:	2100      	movs	r1, #0
 80025b0:	0018      	movs	r0, r3
 80025b2:	f003 f9ed 	bl	8005990 <HAL_I2CEx_ConfigDigitalFilter>
 80025b6:	1e03      	subs	r3, r0, #0
 80025b8:	d001      	beq.n	80025be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80025ba:	f000 fa41 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	200000dc 	.word	0x200000dc
 80025c8:	40005800 	.word	0x40005800
 80025cc:	00602173 	.word	0x00602173

080025d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80025d4:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <MX_SPI1_Init+0x74>)
 80025d6:	4a1c      	ldr	r2, [pc, #112]	; (8002648 <MX_SPI1_Init+0x78>)
 80025d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025da:	4b1a      	ldr	r3, [pc, #104]	; (8002644 <MX_SPI1_Init+0x74>)
 80025dc:	2282      	movs	r2, #130	; 0x82
 80025de:	0052      	lsls	r2, r2, #1
 80025e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025e2:	4b18      	ldr	r3, [pc, #96]	; (8002644 <MX_SPI1_Init+0x74>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025e8:	4b16      	ldr	r3, [pc, #88]	; (8002644 <MX_SPI1_Init+0x74>)
 80025ea:	22e0      	movs	r2, #224	; 0xe0
 80025ec:	00d2      	lsls	r2, r2, #3
 80025ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025f0:	4b14      	ldr	r3, [pc, #80]	; (8002644 <MX_SPI1_Init+0x74>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025f6:	4b13      	ldr	r3, [pc, #76]	; (8002644 <MX_SPI1_Init+0x74>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025fc:	4b11      	ldr	r3, [pc, #68]	; (8002644 <MX_SPI1_Init+0x74>)
 80025fe:	2280      	movs	r2, #128	; 0x80
 8002600:	0092      	lsls	r2, r2, #2
 8002602:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002604:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <MX_SPI1_Init+0x74>)
 8002606:	2200      	movs	r2, #0
 8002608:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800260a:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <MX_SPI1_Init+0x74>)
 800260c:	2200      	movs	r2, #0
 800260e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <MX_SPI1_Init+0x74>)
 8002612:	2200      	movs	r2, #0
 8002614:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002616:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <MX_SPI1_Init+0x74>)
 8002618:	2200      	movs	r2, #0
 800261a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800261c:	4b09      	ldr	r3, [pc, #36]	; (8002644 <MX_SPI1_Init+0x74>)
 800261e:	2207      	movs	r2, #7
 8002620:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002622:	4b08      	ldr	r3, [pc, #32]	; (8002644 <MX_SPI1_Init+0x74>)
 8002624:	2200      	movs	r2, #0
 8002626:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <MX_SPI1_Init+0x74>)
 800262a:	2208      	movs	r2, #8
 800262c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800262e:	4b05      	ldr	r3, [pc, #20]	; (8002644 <MX_SPI1_Init+0x74>)
 8002630:	0018      	movs	r0, r3
 8002632:	f004 f98b 	bl	800694c <HAL_SPI_Init>
 8002636:	1e03      	subs	r3, r0, #0
 8002638:	d001      	beq.n	800263e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800263a:	f000 fa01 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20000130 	.word	0x20000130
 8002648:	40013000 	.word	0x40013000

0800264c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002650:	4b1b      	ldr	r3, [pc, #108]	; (80026c0 <MX_SPI2_Init+0x74>)
 8002652:	4a1c      	ldr	r2, [pc, #112]	; (80026c4 <MX_SPI2_Init+0x78>)
 8002654:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002656:	4b1a      	ldr	r3, [pc, #104]	; (80026c0 <MX_SPI2_Init+0x74>)
 8002658:	2282      	movs	r2, #130	; 0x82
 800265a:	0052      	lsls	r2, r2, #1
 800265c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800265e:	4b18      	ldr	r3, [pc, #96]	; (80026c0 <MX_SPI2_Init+0x74>)
 8002660:	2200      	movs	r2, #0
 8002662:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002664:	4b16      	ldr	r3, [pc, #88]	; (80026c0 <MX_SPI2_Init+0x74>)
 8002666:	22e0      	movs	r2, #224	; 0xe0
 8002668:	00d2      	lsls	r2, r2, #3
 800266a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800266c:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <MX_SPI2_Init+0x74>)
 800266e:	2200      	movs	r2, #0
 8002670:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002672:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <MX_SPI2_Init+0x74>)
 8002674:	2200      	movs	r2, #0
 8002676:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002678:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <MX_SPI2_Init+0x74>)
 800267a:	2280      	movs	r2, #128	; 0x80
 800267c:	0092      	lsls	r2, r2, #2
 800267e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002680:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <MX_SPI2_Init+0x74>)
 8002682:	2200      	movs	r2, #0
 8002684:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002686:	4b0e      	ldr	r3, [pc, #56]	; (80026c0 <MX_SPI2_Init+0x74>)
 8002688:	2200      	movs	r2, #0
 800268a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800268c:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <MX_SPI2_Init+0x74>)
 800268e:	2200      	movs	r2, #0
 8002690:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002692:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <MX_SPI2_Init+0x74>)
 8002694:	2200      	movs	r2, #0
 8002696:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002698:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <MX_SPI2_Init+0x74>)
 800269a:	2207      	movs	r2, #7
 800269c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800269e:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <MX_SPI2_Init+0x74>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <MX_SPI2_Init+0x74>)
 80026a6:	2208      	movs	r2, #8
 80026a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80026aa:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <MX_SPI2_Init+0x74>)
 80026ac:	0018      	movs	r0, r3
 80026ae:	f004 f94d 	bl	800694c <HAL_SPI_Init>
 80026b2:	1e03      	subs	r3, r0, #0
 80026b4:	d001      	beq.n	80026ba <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80026b6:	f000 f9c3 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80026ba:	46c0      	nop			; (mov r8, r8)
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20000194 	.word	0x20000194
 80026c4:	40003800 	.word	0x40003800

080026c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ce:	2310      	movs	r3, #16
 80026d0:	18fb      	adds	r3, r7, r3
 80026d2:	0018      	movs	r0, r3
 80026d4:	2310      	movs	r3, #16
 80026d6:	001a      	movs	r2, r3
 80026d8:	2100      	movs	r1, #0
 80026da:	f011 fd89 	bl	80141f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026de:	1d3b      	adds	r3, r7, #4
 80026e0:	0018      	movs	r0, r3
 80026e2:	230c      	movs	r3, #12
 80026e4:	001a      	movs	r2, r3
 80026e6:	2100      	movs	r1, #0
 80026e8:	f011 fd82 	bl	80141f0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026ec:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <MX_TIM2_Init+0xa0>)
 80026ee:	2280      	movs	r2, #128	; 0x80
 80026f0:	05d2      	lsls	r2, r2, #23
 80026f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2520;
 80026f4:	4b1c      	ldr	r3, [pc, #112]	; (8002768 <MX_TIM2_Init+0xa0>)
 80026f6:	4a1d      	ldr	r2, [pc, #116]	; (800276c <MX_TIM2_Init+0xa4>)
 80026f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026fa:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <MX_TIM2_Init+0xa0>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002700:	4b19      	ldr	r3, [pc, #100]	; (8002768 <MX_TIM2_Init+0xa0>)
 8002702:	4a1b      	ldr	r2, [pc, #108]	; (8002770 <MX_TIM2_Init+0xa8>)
 8002704:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002706:	4b18      	ldr	r3, [pc, #96]	; (8002768 <MX_TIM2_Init+0xa0>)
 8002708:	2200      	movs	r2, #0
 800270a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800270c:	4b16      	ldr	r3, [pc, #88]	; (8002768 <MX_TIM2_Init+0xa0>)
 800270e:	2200      	movs	r2, #0
 8002710:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002712:	4b15      	ldr	r3, [pc, #84]	; (8002768 <MX_TIM2_Init+0xa0>)
 8002714:	0018      	movs	r0, r3
 8002716:	f004 fad9 	bl	8006ccc <HAL_TIM_Base_Init>
 800271a:	1e03      	subs	r3, r0, #0
 800271c:	d001      	beq.n	8002722 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800271e:	f000 f98f 	bl	8002a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002722:	2110      	movs	r1, #16
 8002724:	187b      	adds	r3, r7, r1
 8002726:	2280      	movs	r2, #128	; 0x80
 8002728:	0152      	lsls	r2, r2, #5
 800272a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800272c:	187a      	adds	r2, r7, r1
 800272e:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <MX_TIM2_Init+0xa0>)
 8002730:	0011      	movs	r1, r2
 8002732:	0018      	movs	r0, r3
 8002734:	f004 fb22 	bl	8006d7c <HAL_TIM_ConfigClockSource>
 8002738:	1e03      	subs	r3, r0, #0
 800273a:	d001      	beq.n	8002740 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800273c:	f000 f980 	bl	8002a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8002740:	1d3b      	adds	r3, r7, #4
 8002742:	2210      	movs	r2, #16
 8002744:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002746:	1d3b      	adds	r3, r7, #4
 8002748:	2200      	movs	r2, #0
 800274a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800274c:	1d3a      	adds	r2, r7, #4
 800274e:	4b06      	ldr	r3, [pc, #24]	; (8002768 <MX_TIM2_Init+0xa0>)
 8002750:	0011      	movs	r1, r2
 8002752:	0018      	movs	r0, r3
 8002754:	f004 fd1c 	bl	8007190 <HAL_TIMEx_MasterConfigSynchronization>
 8002758:	1e03      	subs	r3, r0, #0
 800275a:	d001      	beq.n	8002760 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800275c:	f000 f970 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002760:	46c0      	nop			; (mov r8, r8)
 8002762:	46bd      	mov	sp, r7
 8002764:	b008      	add	sp, #32
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20000318 	.word	0x20000318
 800276c:	000009d8 	.word	0x000009d8
 8002770:	0000ffff 	.word	0x0000ffff

08002774 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002778:	4b23      	ldr	r3, [pc, #140]	; (8002808 <MX_USART2_UART_Init+0x94>)
 800277a:	4a24      	ldr	r2, [pc, #144]	; (800280c <MX_USART2_UART_Init+0x98>)
 800277c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800277e:	4b22      	ldr	r3, [pc, #136]	; (8002808 <MX_USART2_UART_Init+0x94>)
 8002780:	22e1      	movs	r2, #225	; 0xe1
 8002782:	0252      	lsls	r2, r2, #9
 8002784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002786:	4b20      	ldr	r3, [pc, #128]	; (8002808 <MX_USART2_UART_Init+0x94>)
 8002788:	2200      	movs	r2, #0
 800278a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800278c:	4b1e      	ldr	r3, [pc, #120]	; (8002808 <MX_USART2_UART_Init+0x94>)
 800278e:	2200      	movs	r2, #0
 8002790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002792:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <MX_USART2_UART_Init+0x94>)
 8002794:	2200      	movs	r2, #0
 8002796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002798:	4b1b      	ldr	r3, [pc, #108]	; (8002808 <MX_USART2_UART_Init+0x94>)
 800279a:	220c      	movs	r2, #12
 800279c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800279e:	4b1a      	ldr	r3, [pc, #104]	; (8002808 <MX_USART2_UART_Init+0x94>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027a4:	4b18      	ldr	r3, [pc, #96]	; (8002808 <MX_USART2_UART_Init+0x94>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027aa:	4b17      	ldr	r3, [pc, #92]	; (8002808 <MX_USART2_UART_Init+0x94>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027b0:	4b15      	ldr	r3, [pc, #84]	; (8002808 <MX_USART2_UART_Init+0x94>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027b6:	4b14      	ldr	r3, [pc, #80]	; (8002808 <MX_USART2_UART_Init+0x94>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027bc:	4b12      	ldr	r3, [pc, #72]	; (8002808 <MX_USART2_UART_Init+0x94>)
 80027be:	0018      	movs	r0, r3
 80027c0:	f004 fd5c 	bl	800727c <HAL_UART_Init>
 80027c4:	1e03      	subs	r3, r0, #0
 80027c6:	d001      	beq.n	80027cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80027c8:	f000 f93a 	bl	8002a40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027cc:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <MX_USART2_UART_Init+0x94>)
 80027ce:	2100      	movs	r1, #0
 80027d0:	0018      	movs	r0, r3
 80027d2:	f005 fb6d 	bl	8007eb0 <HAL_UARTEx_SetTxFifoThreshold>
 80027d6:	1e03      	subs	r3, r0, #0
 80027d8:	d001      	beq.n	80027de <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80027da:	f000 f931 	bl	8002a40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027de:	4b0a      	ldr	r3, [pc, #40]	; (8002808 <MX_USART2_UART_Init+0x94>)
 80027e0:	2100      	movs	r1, #0
 80027e2:	0018      	movs	r0, r3
 80027e4:	f005 fba4 	bl	8007f30 <HAL_UARTEx_SetRxFifoThreshold>
 80027e8:	1e03      	subs	r3, r0, #0
 80027ea:	d001      	beq.n	80027f0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80027ec:	f000 f928 	bl	8002a40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80027f0:	4b05      	ldr	r3, [pc, #20]	; (8002808 <MX_USART2_UART_Init+0x94>)
 80027f2:	0018      	movs	r0, r3
 80027f4:	f005 fb22 	bl	8007e3c <HAL_UARTEx_DisableFifoMode>
 80027f8:	1e03      	subs	r3, r0, #0
 80027fa:	d001      	beq.n	8002800 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80027fc:	f000 f920 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002800:	46c0      	nop			; (mov r8, r8)
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	20000364 	.word	0x20000364
 800280c:	40004400 	.word	0x40004400

08002810 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002816:	4b10      	ldr	r3, [pc, #64]	; (8002858 <MX_DMA_Init+0x48>)
 8002818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800281a:	4b0f      	ldr	r3, [pc, #60]	; (8002858 <MX_DMA_Init+0x48>)
 800281c:	2101      	movs	r1, #1
 800281e:	430a      	orrs	r2, r1
 8002820:	639a      	str	r2, [r3, #56]	; 0x38
 8002822:	4b0d      	ldr	r3, [pc, #52]	; (8002858 <MX_DMA_Init+0x48>)
 8002824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002826:	2201      	movs	r2, #1
 8002828:	4013      	ands	r3, r2
 800282a:	607b      	str	r3, [r7, #4]
 800282c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800282e:	2200      	movs	r2, #0
 8002830:	2100      	movs	r1, #0
 8002832:	2009      	movs	r0, #9
 8002834:	f000 ff96 	bl	8003764 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002838:	2009      	movs	r0, #9
 800283a:	f000 ffa8 	bl	800378e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800283e:	2200      	movs	r2, #0
 8002840:	2100      	movs	r1, #0
 8002842:	200a      	movs	r0, #10
 8002844:	f000 ff8e 	bl	8003764 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002848:	200a      	movs	r0, #10
 800284a:	f000 ffa0 	bl	800378e <HAL_NVIC_EnableIRQ>

}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	46bd      	mov	sp, r7
 8002852:	b002      	add	sp, #8
 8002854:	bd80      	pop	{r7, pc}
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	40021000 	.word	0x40021000

0800285c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800285c:	b590      	push	{r4, r7, lr}
 800285e:	b08b      	sub	sp, #44	; 0x2c
 8002860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002862:	2414      	movs	r4, #20
 8002864:	193b      	adds	r3, r7, r4
 8002866:	0018      	movs	r0, r3
 8002868:	2314      	movs	r3, #20
 800286a:	001a      	movs	r2, r3
 800286c:	2100      	movs	r1, #0
 800286e:	f011 fcbf 	bl	80141f0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002872:	4b6e      	ldr	r3, [pc, #440]	; (8002a2c <MX_GPIO_Init+0x1d0>)
 8002874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002876:	4b6d      	ldr	r3, [pc, #436]	; (8002a2c <MX_GPIO_Init+0x1d0>)
 8002878:	2104      	movs	r1, #4
 800287a:	430a      	orrs	r2, r1
 800287c:	635a      	str	r2, [r3, #52]	; 0x34
 800287e:	4b6b      	ldr	r3, [pc, #428]	; (8002a2c <MX_GPIO_Init+0x1d0>)
 8002880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002882:	2204      	movs	r2, #4
 8002884:	4013      	ands	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800288a:	4b68      	ldr	r3, [pc, #416]	; (8002a2c <MX_GPIO_Init+0x1d0>)
 800288c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800288e:	4b67      	ldr	r3, [pc, #412]	; (8002a2c <MX_GPIO_Init+0x1d0>)
 8002890:	2120      	movs	r1, #32
 8002892:	430a      	orrs	r2, r1
 8002894:	635a      	str	r2, [r3, #52]	; 0x34
 8002896:	4b65      	ldr	r3, [pc, #404]	; (8002a2c <MX_GPIO_Init+0x1d0>)
 8002898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800289a:	2220      	movs	r2, #32
 800289c:	4013      	ands	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a2:	4b62      	ldr	r3, [pc, #392]	; (8002a2c <MX_GPIO_Init+0x1d0>)
 80028a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028a6:	4b61      	ldr	r3, [pc, #388]	; (8002a2c <MX_GPIO_Init+0x1d0>)
 80028a8:	2101      	movs	r1, #1
 80028aa:	430a      	orrs	r2, r1
 80028ac:	635a      	str	r2, [r3, #52]	; 0x34
 80028ae:	4b5f      	ldr	r3, [pc, #380]	; (8002a2c <MX_GPIO_Init+0x1d0>)
 80028b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b2:	2201      	movs	r2, #1
 80028b4:	4013      	ands	r3, r2
 80028b6:	60bb      	str	r3, [r7, #8]
 80028b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ba:	4b5c      	ldr	r3, [pc, #368]	; (8002a2c <MX_GPIO_Init+0x1d0>)
 80028bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028be:	4b5b      	ldr	r3, [pc, #364]	; (8002a2c <MX_GPIO_Init+0x1d0>)
 80028c0:	2102      	movs	r1, #2
 80028c2:	430a      	orrs	r2, r1
 80028c4:	635a      	str	r2, [r3, #52]	; 0x34
 80028c6:	4b59      	ldr	r3, [pc, #356]	; (8002a2c <MX_GPIO_Init+0x1d0>)
 80028c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ca:	2202      	movs	r2, #2
 80028cc:	4013      	ands	r3, r2
 80028ce:	607b      	str	r3, [r7, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPLAY_RESET_Pin|CTP_RESET_Pin, GPIO_PIN_RESET);
 80028d2:	4957      	ldr	r1, [pc, #348]	; (8002a30 <MX_GPIO_Init+0x1d4>)
 80028d4:	23a0      	movs	r3, #160	; 0xa0
 80028d6:	05db      	lsls	r3, r3, #23
 80028d8:	2200      	movs	r2, #0
 80028da:	0018      	movs	r0, r3
 80028dc:	f001 fb77 	bl	8003fce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISPLAY_DCX_Pin|DISPLAY_CSX_Pin|FLASH_CS_Pin, GPIO_PIN_SET);
 80028e0:	238a      	movs	r3, #138	; 0x8a
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4853      	ldr	r0, [pc, #332]	; (8002a34 <MX_GPIO_Init+0x1d8>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	0019      	movs	r1, r3
 80028ea:	f001 fb70 	bl	8003fce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_USER_Pin */
  GPIO_InitStruct.Pin = BUTTON_USER_Pin;
 80028ee:	193b      	adds	r3, r7, r4
 80028f0:	2280      	movs	r2, #128	; 0x80
 80028f2:	0192      	lsls	r2, r2, #6
 80028f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028f6:	193b      	adds	r3, r7, r4
 80028f8:	2288      	movs	r2, #136	; 0x88
 80028fa:	0352      	lsls	r2, r2, #13
 80028fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	193b      	adds	r3, r7, r4
 8002900:	2200      	movs	r2, #0
 8002902:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_USER_GPIO_Port, &GPIO_InitStruct);
 8002904:	193b      	adds	r3, r7, r4
 8002906:	4a4c      	ldr	r2, [pc, #304]	; (8002a38 <MX_GPIO_Init+0x1dc>)
 8002908:	0019      	movs	r1, r3
 800290a:	0010      	movs	r0, r2
 800290c:	f001 f9d6 	bl	8003cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPLAY_TE_Pin */
  GPIO_InitStruct.Pin = DISPLAY_TE_Pin;
 8002910:	193b      	adds	r3, r7, r4
 8002912:	2201      	movs	r2, #1
 8002914:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002916:	193b      	adds	r3, r7, r4
 8002918:	2284      	movs	r2, #132	; 0x84
 800291a:	0392      	lsls	r2, r2, #14
 800291c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291e:	193b      	adds	r3, r7, r4
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DISPLAY_TE_GPIO_Port, &GPIO_InitStruct);
 8002924:	193a      	adds	r2, r7, r4
 8002926:	23a0      	movs	r3, #160	; 0xa0
 8002928:	05db      	lsls	r3, r3, #23
 800292a:	0011      	movs	r1, r2
 800292c:	0018      	movs	r0, r3
 800292e:	f001 f9c5 	bl	8003cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPLAY_RESET_Pin */
  GPIO_InitStruct.Pin = DISPLAY_RESET_Pin;
 8002932:	193b      	adds	r3, r7, r4
 8002934:	2202      	movs	r2, #2
 8002936:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002938:	193b      	adds	r3, r7, r4
 800293a:	2201      	movs	r2, #1
 800293c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800293e:	193b      	adds	r3, r7, r4
 8002940:	2201      	movs	r2, #1
 8002942:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002944:	193b      	adds	r3, r7, r4
 8002946:	2202      	movs	r2, #2
 8002948:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DISPLAY_RESET_GPIO_Port, &GPIO_InitStruct);
 800294a:	193a      	adds	r2, r7, r4
 800294c:	23a0      	movs	r3, #160	; 0xa0
 800294e:	05db      	lsls	r3, r3, #23
 8002950:	0011      	movs	r1, r2
 8002952:	0018      	movs	r0, r3
 8002954:	f001 f9b2 	bl	8003cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_RESET_Pin */
  GPIO_InitStruct.Pin = CTP_RESET_Pin;
 8002958:	0021      	movs	r1, r4
 800295a:	187b      	adds	r3, r7, r1
 800295c:	2280      	movs	r2, #128	; 0x80
 800295e:	0212      	lsls	r2, r2, #8
 8002960:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002962:	000c      	movs	r4, r1
 8002964:	193b      	adds	r3, r7, r4
 8002966:	2201      	movs	r2, #1
 8002968:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	193b      	adds	r3, r7, r4
 800296c:	2200      	movs	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002970:	193b      	adds	r3, r7, r4
 8002972:	2200      	movs	r2, #0
 8002974:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CTP_RESET_GPIO_Port, &GPIO_InitStruct);
 8002976:	193a      	adds	r2, r7, r4
 8002978:	23a0      	movs	r3, #160	; 0xa0
 800297a:	05db      	lsls	r3, r3, #23
 800297c:	0011      	movs	r1, r2
 800297e:	0018      	movs	r0, r3
 8002980:	f001 f99c 	bl	8003cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_DCX_Pin DISPLAY_CSX_Pin */
  GPIO_InitStruct.Pin = DISPLAY_DCX_Pin|DISPLAY_CSX_Pin;
 8002984:	193b      	adds	r3, r7, r4
 8002986:	2228      	movs	r2, #40	; 0x28
 8002988:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800298a:	193b      	adds	r3, r7, r4
 800298c:	2201      	movs	r2, #1
 800298e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002990:	193b      	adds	r3, r7, r4
 8002992:	2201      	movs	r2, #1
 8002994:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002996:	193b      	adds	r3, r7, r4
 8002998:	2203      	movs	r2, #3
 800299a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800299c:	193b      	adds	r3, r7, r4
 800299e:	4a25      	ldr	r2, [pc, #148]	; (8002a34 <MX_GPIO_Init+0x1d8>)
 80029a0:	0019      	movs	r1, r3
 80029a2:	0010      	movs	r0, r2
 80029a4:	f001 f98a 	bl	8003cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : CPT_INT_Pin */
  GPIO_InitStruct.Pin = CPT_INT_Pin;
 80029a8:	0021      	movs	r1, r4
 80029aa:	187b      	adds	r3, r7, r1
 80029ac:	2280      	movs	r2, #128	; 0x80
 80029ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029b0:	187b      	adds	r3, r7, r1
 80029b2:	2288      	movs	r2, #136	; 0x88
 80029b4:	0352      	lsls	r2, r2, #13
 80029b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b8:	187b      	adds	r3, r7, r1
 80029ba:	2200      	movs	r2, #0
 80029bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CPT_INT_GPIO_Port, &GPIO_InitStruct);
 80029be:	000c      	movs	r4, r1
 80029c0:	187b      	adds	r3, r7, r1
 80029c2:	4a1c      	ldr	r2, [pc, #112]	; (8002a34 <MX_GPIO_Init+0x1d8>)
 80029c4:	0019      	movs	r1, r3
 80029c6:	0010      	movs	r0, r2
 80029c8:	f001 f978 	bl	8003cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 80029cc:	0021      	movs	r1, r4
 80029ce:	187b      	adds	r3, r7, r1
 80029d0:	2280      	movs	r2, #128	; 0x80
 80029d2:	0092      	lsls	r2, r2, #2
 80029d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d6:	187b      	adds	r3, r7, r1
 80029d8:	2201      	movs	r2, #1
 80029da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	187b      	adds	r3, r7, r1
 80029de:	2200      	movs	r2, #0
 80029e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e2:	187b      	adds	r3, r7, r1
 80029e4:	2203      	movs	r2, #3
 80029e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 80029e8:	187b      	adds	r3, r7, r1
 80029ea:	4a12      	ldr	r2, [pc, #72]	; (8002a34 <MX_GPIO_Init+0x1d8>)
 80029ec:	0019      	movs	r1, r3
 80029ee:	0010      	movs	r0, r2
 80029f0:	f001 f964 	bl	8003cbc <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 80029f4:	4b11      	ldr	r3, [pc, #68]	; (8002a3c <MX_GPIO_Init+0x1e0>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	4b10      	ldr	r3, [pc, #64]	; (8002a3c <MX_GPIO_Init+0x1e0>)
 80029fa:	2180      	movs	r1, #128	; 0x80
 80029fc:	0309      	lsls	r1, r1, #12
 80029fe:	430a      	orrs	r2, r1
 8002a00:	601a      	str	r2, [r3, #0]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002a02:	2200      	movs	r2, #0
 8002a04:	2100      	movs	r1, #0
 8002a06:	2005      	movs	r0, #5
 8002a08:	f000 feac 	bl	8003764 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002a0c:	2005      	movs	r0, #5
 8002a0e:	f000 febe 	bl	800378e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002a12:	2200      	movs	r2, #0
 8002a14:	2100      	movs	r1, #0
 8002a16:	2007      	movs	r0, #7
 8002a18:	f000 fea4 	bl	8003764 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002a1c:	2007      	movs	r0, #7
 8002a1e:	f000 feb6 	bl	800378e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	46bd      	mov	sp, r7
 8002a26:	b00b      	add	sp, #44	; 0x2c
 8002a28:	bd90      	pop	{r4, r7, pc}
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	00008002 	.word	0x00008002
 8002a34:	50000400 	.word	0x50000400
 8002a38:	50000800 	.word	0x50000800
 8002a3c:	40010000 	.word	0x40010000

08002a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a44:	b672      	cpsid	i
}
 8002a46:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a48:	e7fe      	b.n	8002a48 <Error_Handler+0x8>
	...

08002a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a52:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <HAL_MspInit+0x4c>)
 8002a54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a56:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <HAL_MspInit+0x4c>)
 8002a58:	2101      	movs	r1, #1
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	641a      	str	r2, [r3, #64]	; 0x40
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <HAL_MspInit+0x4c>)
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	2201      	movs	r2, #1
 8002a64:	4013      	ands	r3, r2
 8002a66:	607b      	str	r3, [r7, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a6a:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_MspInit+0x4c>)
 8002a6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a6e:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <HAL_MspInit+0x4c>)
 8002a70:	2180      	movs	r1, #128	; 0x80
 8002a72:	0549      	lsls	r1, r1, #21
 8002a74:	430a      	orrs	r2, r1
 8002a76:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a78:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <HAL_MspInit+0x4c>)
 8002a7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	055b      	lsls	r3, r3, #21
 8002a80:	4013      	ands	r3, r2
 8002a82:	603b      	str	r3, [r7, #0]
 8002a84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8002a86:	23c0      	movs	r3, #192	; 0xc0
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f000 fd86 	bl	800359c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a90:	46c0      	nop			; (mov r8, r8)
 8002a92:	46bd      	mov	sp, r7
 8002a94:	b002      	add	sp, #8
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40021000 	.word	0x40021000

08002a9c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a0a      	ldr	r2, [pc, #40]	; (8002ad4 <HAL_CRC_MspInit+0x38>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d10d      	bne.n	8002aca <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002aae:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <HAL_CRC_MspInit+0x3c>)
 8002ab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ab2:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <HAL_CRC_MspInit+0x3c>)
 8002ab4:	2180      	movs	r1, #128	; 0x80
 8002ab6:	0149      	lsls	r1, r1, #5
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	639a      	str	r2, [r3, #56]	; 0x38
 8002abc:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <HAL_CRC_MspInit+0x3c>)
 8002abe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	015b      	lsls	r3, r3, #5
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	46bd      	mov	sp, r7
 8002ace:	b004      	add	sp, #16
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	40023000 	.word	0x40023000
 8002ad8:	40021000 	.word	0x40021000

08002adc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002adc:	b590      	push	{r4, r7, lr}
 8002ade:	b09d      	sub	sp, #116	; 0x74
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae4:	235c      	movs	r3, #92	; 0x5c
 8002ae6:	18fb      	adds	r3, r7, r3
 8002ae8:	0018      	movs	r0, r3
 8002aea:	2314      	movs	r3, #20
 8002aec:	001a      	movs	r2, r3
 8002aee:	2100      	movs	r1, #0
 8002af0:	f011 fb7e 	bl	80141f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002af4:	2410      	movs	r4, #16
 8002af6:	193b      	adds	r3, r7, r4
 8002af8:	0018      	movs	r0, r3
 8002afa:	234c      	movs	r3, #76	; 0x4c
 8002afc:	001a      	movs	r2, r3
 8002afe:	2100      	movs	r1, #0
 8002b00:	f011 fb76 	bl	80141f0 <memset>
  if(hi2c->Instance==I2C2)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a26      	ldr	r2, [pc, #152]	; (8002ba4 <HAL_I2C_MspInit+0xc8>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d146      	bne.n	8002b9c <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002b0e:	193b      	adds	r3, r7, r4
 8002b10:	2240      	movs	r2, #64	; 0x40
 8002b12:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002b14:	193b      	adds	r3, r7, r4
 8002b16:	2200      	movs	r2, #0
 8002b18:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b1a:	193b      	adds	r3, r7, r4
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f003 fcd9 	bl	80064d4 <HAL_RCCEx_PeriphCLKConfig>
 8002b22:	1e03      	subs	r3, r0, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002b26:	f7ff ff8b 	bl	8002a40 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b2a:	4b1f      	ldr	r3, [pc, #124]	; (8002ba8 <HAL_I2C_MspInit+0xcc>)
 8002b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ba8 <HAL_I2C_MspInit+0xcc>)
 8002b30:	2102      	movs	r1, #2
 8002b32:	430a      	orrs	r2, r1
 8002b34:	635a      	str	r2, [r3, #52]	; 0x34
 8002b36:	4b1c      	ldr	r3, [pc, #112]	; (8002ba8 <HAL_I2C_MspInit+0xcc>)
 8002b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
 8002b42:	215c      	movs	r1, #92	; 0x5c
 8002b44:	187b      	adds	r3, r7, r1
 8002b46:	2288      	movs	r2, #136	; 0x88
 8002b48:	01d2      	lsls	r2, r2, #7
 8002b4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b4c:	187b      	adds	r3, r7, r1
 8002b4e:	2212      	movs	r2, #18
 8002b50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b52:	187b      	adds	r3, r7, r1
 8002b54:	2201      	movs	r2, #1
 8002b56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b58:	187b      	adds	r3, r7, r1
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8002b5e:	187b      	adds	r3, r7, r1
 8002b60:	2206      	movs	r2, #6
 8002b62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b64:	187b      	adds	r3, r7, r1
 8002b66:	4a11      	ldr	r2, [pc, #68]	; (8002bac <HAL_I2C_MspInit+0xd0>)
 8002b68:	0019      	movs	r1, r3
 8002b6a:	0010      	movs	r0, r2
 8002b6c:	f001 f8a6 	bl	8003cbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b70:	4b0d      	ldr	r3, [pc, #52]	; (8002ba8 <HAL_I2C_MspInit+0xcc>)
 8002b72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <HAL_I2C_MspInit+0xcc>)
 8002b76:	2180      	movs	r1, #128	; 0x80
 8002b78:	03c9      	lsls	r1, r1, #15
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <HAL_I2C_MspInit+0xcc>)
 8002b80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b82:	2380      	movs	r3, #128	; 0x80
 8002b84:	03db      	lsls	r3, r3, #15
 8002b86:	4013      	ands	r3, r2
 8002b88:	60bb      	str	r3, [r7, #8]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_3_IRQn, 0, 0);
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2100      	movs	r1, #0
 8002b90:	2018      	movs	r0, #24
 8002b92:	f000 fde7 	bl	8003764 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_3_IRQn);
 8002b96:	2018      	movs	r0, #24
 8002b98:	f000 fdf9 	bl	800378e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002b9c:	46c0      	nop			; (mov r8, r8)
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b01d      	add	sp, #116	; 0x74
 8002ba2:	bd90      	pop	{r4, r7, pc}
 8002ba4:	40005800 	.word	0x40005800
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	50000400 	.word	0x50000400

08002bb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bb0:	b590      	push	{r4, r7, lr}
 8002bb2:	b08d      	sub	sp, #52	; 0x34
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb8:	241c      	movs	r4, #28
 8002bba:	193b      	adds	r3, r7, r4
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	2314      	movs	r3, #20
 8002bc0:	001a      	movs	r2, r3
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	f011 fb14 	bl	80141f0 <memset>
  if(hspi->Instance==SPI1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a90      	ldr	r2, [pc, #576]	; (8002e10 <HAL_SPI_MspInit+0x260>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d165      	bne.n	8002c9e <HAL_SPI_MspInit+0xee>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bd2:	4b90      	ldr	r3, [pc, #576]	; (8002e14 <HAL_SPI_MspInit+0x264>)
 8002bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bd6:	4b8f      	ldr	r3, [pc, #572]	; (8002e14 <HAL_SPI_MspInit+0x264>)
 8002bd8:	2180      	movs	r1, #128	; 0x80
 8002bda:	0149      	lsls	r1, r1, #5
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	641a      	str	r2, [r3, #64]	; 0x40
 8002be0:	4b8c      	ldr	r3, [pc, #560]	; (8002e14 <HAL_SPI_MspInit+0x264>)
 8002be2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002be4:	2380      	movs	r3, #128	; 0x80
 8002be6:	015b      	lsls	r3, r3, #5
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
 8002bec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bee:	4b89      	ldr	r3, [pc, #548]	; (8002e14 <HAL_SPI_MspInit+0x264>)
 8002bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bf2:	4b88      	ldr	r3, [pc, #544]	; (8002e14 <HAL_SPI_MspInit+0x264>)
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	635a      	str	r2, [r3, #52]	; 0x34
 8002bfa:	4b86      	ldr	r3, [pc, #536]	; (8002e14 <HAL_SPI_MspInit+0x264>)
 8002bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bfe:	2201      	movs	r2, #1
 8002c00:	4013      	ands	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002c06:	0021      	movs	r1, r4
 8002c08:	187b      	adds	r3, r7, r1
 8002c0a:	22a0      	movs	r2, #160	; 0xa0
 8002c0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0e:	187b      	adds	r3, r7, r1
 8002c10:	2202      	movs	r2, #2
 8002c12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c14:	187b      	adds	r3, r7, r1
 8002c16:	2202      	movs	r2, #2
 8002c18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c1a:	187b      	adds	r3, r7, r1
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002c20:	187b      	adds	r3, r7, r1
 8002c22:	2200      	movs	r2, #0
 8002c24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c26:	187a      	adds	r2, r7, r1
 8002c28:	23a0      	movs	r3, #160	; 0xa0
 8002c2a:	05db      	lsls	r3, r3, #23
 8002c2c:	0011      	movs	r1, r2
 8002c2e:	0018      	movs	r0, r3
 8002c30:	f001 f844 	bl	8003cbc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8002c34:	4b78      	ldr	r3, [pc, #480]	; (8002e18 <HAL_SPI_MspInit+0x268>)
 8002c36:	4a79      	ldr	r2, [pc, #484]	; (8002e1c <HAL_SPI_MspInit+0x26c>)
 8002c38:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002c3a:	4b77      	ldr	r3, [pc, #476]	; (8002e18 <HAL_SPI_MspInit+0x268>)
 8002c3c:	2211      	movs	r2, #17
 8002c3e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c40:	4b75      	ldr	r3, [pc, #468]	; (8002e18 <HAL_SPI_MspInit+0x268>)
 8002c42:	2210      	movs	r2, #16
 8002c44:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c46:	4b74      	ldr	r3, [pc, #464]	; (8002e18 <HAL_SPI_MspInit+0x268>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c4c:	4b72      	ldr	r3, [pc, #456]	; (8002e18 <HAL_SPI_MspInit+0x268>)
 8002c4e:	2280      	movs	r2, #128	; 0x80
 8002c50:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c52:	4b71      	ldr	r3, [pc, #452]	; (8002e18 <HAL_SPI_MspInit+0x268>)
 8002c54:	2280      	movs	r2, #128	; 0x80
 8002c56:	0052      	lsls	r2, r2, #1
 8002c58:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c5a:	4b6f      	ldr	r3, [pc, #444]	; (8002e18 <HAL_SPI_MspInit+0x268>)
 8002c5c:	2280      	movs	r2, #128	; 0x80
 8002c5e:	00d2      	lsls	r2, r2, #3
 8002c60:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002c62:	4b6d      	ldr	r3, [pc, #436]	; (8002e18 <HAL_SPI_MspInit+0x268>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002c68:	4b6b      	ldr	r3, [pc, #428]	; (8002e18 <HAL_SPI_MspInit+0x268>)
 8002c6a:	2280      	movs	r2, #128	; 0x80
 8002c6c:	0192      	lsls	r2, r2, #6
 8002c6e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002c70:	4b69      	ldr	r3, [pc, #420]	; (8002e18 <HAL_SPI_MspInit+0x268>)
 8002c72:	0018      	movs	r0, r3
 8002c74:	f000 fe94 	bl	80039a0 <HAL_DMA_Init>
 8002c78:	1e03      	subs	r3, r0, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_SPI_MspInit+0xd0>
    {
      Error_Handler();
 8002c7c:	f7ff fee0 	bl	8002a40 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a65      	ldr	r2, [pc, #404]	; (8002e18 <HAL_SPI_MspInit+0x268>)
 8002c84:	655a      	str	r2, [r3, #84]	; 0x54
 8002c86:	4b64      	ldr	r3, [pc, #400]	; (8002e18 <HAL_SPI_MspInit+0x268>)
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2100      	movs	r1, #0
 8002c90:	2019      	movs	r0, #25
 8002c92:	f000 fd67 	bl	8003764 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002c96:	2019      	movs	r0, #25
 8002c98:	f000 fd79 	bl	800378e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002c9c:	e0b3      	b.n	8002e06 <HAL_SPI_MspInit+0x256>
  else if(hspi->Instance==SPI2)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a5f      	ldr	r2, [pc, #380]	; (8002e20 <HAL_SPI_MspInit+0x270>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d000      	beq.n	8002caa <HAL_SPI_MspInit+0xfa>
 8002ca8:	e0ad      	b.n	8002e06 <HAL_SPI_MspInit+0x256>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002caa:	4b5a      	ldr	r3, [pc, #360]	; (8002e14 <HAL_SPI_MspInit+0x264>)
 8002cac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cae:	4b59      	ldr	r3, [pc, #356]	; (8002e14 <HAL_SPI_MspInit+0x264>)
 8002cb0:	2180      	movs	r1, #128	; 0x80
 8002cb2:	01c9      	lsls	r1, r1, #7
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cb8:	4b56      	ldr	r3, [pc, #344]	; (8002e14 <HAL_SPI_MspInit+0x264>)
 8002cba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cbc:	2380      	movs	r3, #128	; 0x80
 8002cbe:	01db      	lsls	r3, r3, #7
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cc6:	4b53      	ldr	r3, [pc, #332]	; (8002e14 <HAL_SPI_MspInit+0x264>)
 8002cc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cca:	4b52      	ldr	r3, [pc, #328]	; (8002e14 <HAL_SPI_MspInit+0x264>)
 8002ccc:	2104      	movs	r1, #4
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	635a      	str	r2, [r3, #52]	; 0x34
 8002cd2:	4b50      	ldr	r3, [pc, #320]	; (8002e14 <HAL_SPI_MspInit+0x264>)
 8002cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd6:	2204      	movs	r2, #4
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cde:	4b4d      	ldr	r3, [pc, #308]	; (8002e14 <HAL_SPI_MspInit+0x264>)
 8002ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ce2:	4b4c      	ldr	r3, [pc, #304]	; (8002e14 <HAL_SPI_MspInit+0x264>)
 8002ce4:	2102      	movs	r1, #2
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	635a      	str	r2, [r3, #52]	; 0x34
 8002cea:	4b4a      	ldr	r3, [pc, #296]	; (8002e14 <HAL_SPI_MspInit+0x264>)
 8002cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cee:	2202      	movs	r2, #2
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	60bb      	str	r3, [r7, #8]
 8002cf4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002cf6:	241c      	movs	r4, #28
 8002cf8:	193b      	adds	r3, r7, r4
 8002cfa:	220c      	movs	r2, #12
 8002cfc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfe:	193b      	adds	r3, r7, r4
 8002d00:	2202      	movs	r2, #2
 8002d02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002d04:	193b      	adds	r3, r7, r4
 8002d06:	2202      	movs	r2, #2
 8002d08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d0a:	193b      	adds	r3, r7, r4
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8002d10:	193b      	adds	r3, r7, r4
 8002d12:	2201      	movs	r2, #1
 8002d14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d16:	193b      	adds	r3, r7, r4
 8002d18:	4a42      	ldr	r2, [pc, #264]	; (8002e24 <HAL_SPI_MspInit+0x274>)
 8002d1a:	0019      	movs	r1, r3
 8002d1c:	0010      	movs	r0, r2
 8002d1e:	f000 ffcd 	bl	8003cbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002d22:	0021      	movs	r1, r4
 8002d24:	187b      	adds	r3, r7, r1
 8002d26:	2280      	movs	r2, #128	; 0x80
 8002d28:	0192      	lsls	r2, r2, #6
 8002d2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2c:	187b      	adds	r3, r7, r1
 8002d2e:	2202      	movs	r2, #2
 8002d30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002d32:	187b      	adds	r3, r7, r1
 8002d34:	2202      	movs	r2, #2
 8002d36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d38:	187b      	adds	r3, r7, r1
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002d3e:	187b      	adds	r3, r7, r1
 8002d40:	2200      	movs	r2, #0
 8002d42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d44:	187b      	adds	r3, r7, r1
 8002d46:	4a38      	ldr	r2, [pc, #224]	; (8002e28 <HAL_SPI_MspInit+0x278>)
 8002d48:	0019      	movs	r1, r3
 8002d4a:	0010      	movs	r0, r2
 8002d4c:	f000 ffb6 	bl	8003cbc <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel2;
 8002d50:	4b36      	ldr	r3, [pc, #216]	; (8002e2c <HAL_SPI_MspInit+0x27c>)
 8002d52:	4a37      	ldr	r2, [pc, #220]	; (8002e30 <HAL_SPI_MspInit+0x280>)
 8002d54:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8002d56:	4b35      	ldr	r3, [pc, #212]	; (8002e2c <HAL_SPI_MspInit+0x27c>)
 8002d58:	2212      	movs	r2, #18
 8002d5a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d5c:	4b33      	ldr	r3, [pc, #204]	; (8002e2c <HAL_SPI_MspInit+0x27c>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d62:	4b32      	ldr	r3, [pc, #200]	; (8002e2c <HAL_SPI_MspInit+0x27c>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d68:	4b30      	ldr	r3, [pc, #192]	; (8002e2c <HAL_SPI_MspInit+0x27c>)
 8002d6a:	2280      	movs	r2, #128	; 0x80
 8002d6c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d6e:	4b2f      	ldr	r3, [pc, #188]	; (8002e2c <HAL_SPI_MspInit+0x27c>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d74:	4b2d      	ldr	r3, [pc, #180]	; (8002e2c <HAL_SPI_MspInit+0x27c>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002d7a:	4b2c      	ldr	r3, [pc, #176]	; (8002e2c <HAL_SPI_MspInit+0x27c>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002d80:	4b2a      	ldr	r3, [pc, #168]	; (8002e2c <HAL_SPI_MspInit+0x27c>)
 8002d82:	2280      	movs	r2, #128	; 0x80
 8002d84:	0152      	lsls	r2, r2, #5
 8002d86:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002d88:	4b28      	ldr	r3, [pc, #160]	; (8002e2c <HAL_SPI_MspInit+0x27c>)
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f000 fe08 	bl	80039a0 <HAL_DMA_Init>
 8002d90:	1e03      	subs	r3, r0, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_SPI_MspInit+0x1e8>
      Error_Handler();
 8002d94:	f7ff fe54 	bl	8002a40 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a24      	ldr	r2, [pc, #144]	; (8002e2c <HAL_SPI_MspInit+0x27c>)
 8002d9c:	659a      	str	r2, [r3, #88]	; 0x58
 8002d9e:	4b23      	ldr	r3, [pc, #140]	; (8002e2c <HAL_SPI_MspInit+0x27c>)
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Instance = DMA1_Channel3;
 8002da4:	4b23      	ldr	r3, [pc, #140]	; (8002e34 <HAL_SPI_MspInit+0x284>)
 8002da6:	4a24      	ldr	r2, [pc, #144]	; (8002e38 <HAL_SPI_MspInit+0x288>)
 8002da8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8002daa:	4b22      	ldr	r3, [pc, #136]	; (8002e34 <HAL_SPI_MspInit+0x284>)
 8002dac:	2213      	movs	r2, #19
 8002dae:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002db0:	4b20      	ldr	r3, [pc, #128]	; (8002e34 <HAL_SPI_MspInit+0x284>)
 8002db2:	2210      	movs	r2, #16
 8002db4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002db6:	4b1f      	ldr	r3, [pc, #124]	; (8002e34 <HAL_SPI_MspInit+0x284>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002dbc:	4b1d      	ldr	r3, [pc, #116]	; (8002e34 <HAL_SPI_MspInit+0x284>)
 8002dbe:	2280      	movs	r2, #128	; 0x80
 8002dc0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dc2:	4b1c      	ldr	r3, [pc, #112]	; (8002e34 <HAL_SPI_MspInit+0x284>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dc8:	4b1a      	ldr	r3, [pc, #104]	; (8002e34 <HAL_SPI_MspInit+0x284>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002dce:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <HAL_SPI_MspInit+0x284>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002dd4:	4b17      	ldr	r3, [pc, #92]	; (8002e34 <HAL_SPI_MspInit+0x284>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002dda:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <HAL_SPI_MspInit+0x284>)
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f000 fddf 	bl	80039a0 <HAL_DMA_Init>
 8002de2:	1e03      	subs	r3, r0, #0
 8002de4:	d001      	beq.n	8002dea <HAL_SPI_MspInit+0x23a>
      Error_Handler();
 8002de6:	f7ff fe2b 	bl	8002a40 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a11      	ldr	r2, [pc, #68]	; (8002e34 <HAL_SPI_MspInit+0x284>)
 8002dee:	655a      	str	r2, [r3, #84]	; 0x54
 8002df0:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <HAL_SPI_MspInit+0x284>)
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI2_3_IRQn, 0, 0);
 8002df6:	2200      	movs	r2, #0
 8002df8:	2100      	movs	r1, #0
 8002dfa:	201a      	movs	r0, #26
 8002dfc:	f000 fcb2 	bl	8003764 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_3_IRQn);
 8002e00:	201a      	movs	r0, #26
 8002e02:	f000 fcc4 	bl	800378e <HAL_NVIC_EnableIRQ>
}
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	b00d      	add	sp, #52	; 0x34
 8002e0c:	bd90      	pop	{r4, r7, pc}
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	40013000 	.word	0x40013000
 8002e14:	40021000 	.word	0x40021000
 8002e18:	200001f8 	.word	0x200001f8
 8002e1c:	40020008 	.word	0x40020008
 8002e20:	40003800 	.word	0x40003800
 8002e24:	50000800 	.word	0x50000800
 8002e28:	50000400 	.word	0x50000400
 8002e2c:	20000258 	.word	0x20000258
 8002e30:	4002001c 	.word	0x4002001c
 8002e34:	200002b8 	.word	0x200002b8
 8002e38:	40020030 	.word	0x40020030

08002e3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	2380      	movs	r3, #128	; 0x80
 8002e4a:	05db      	lsls	r3, r3, #23
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d10b      	bne.n	8002e68 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e50:	4b07      	ldr	r3, [pc, #28]	; (8002e70 <HAL_TIM_Base_MspInit+0x34>)
 8002e52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e54:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <HAL_TIM_Base_MspInit+0x34>)
 8002e56:	2101      	movs	r1, #1
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e5c:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <HAL_TIM_Base_MspInit+0x34>)
 8002e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e60:	2201      	movs	r2, #1
 8002e62:	4013      	ands	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002e68:	46c0      	nop			; (mov r8, r8)
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b004      	add	sp, #16
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40021000 	.word	0x40021000

08002e74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e74:	b590      	push	{r4, r7, lr}
 8002e76:	b09d      	sub	sp, #116	; 0x74
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e7c:	235c      	movs	r3, #92	; 0x5c
 8002e7e:	18fb      	adds	r3, r7, r3
 8002e80:	0018      	movs	r0, r3
 8002e82:	2314      	movs	r3, #20
 8002e84:	001a      	movs	r2, r3
 8002e86:	2100      	movs	r1, #0
 8002e88:	f011 f9b2 	bl	80141f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e8c:	2410      	movs	r4, #16
 8002e8e:	193b      	adds	r3, r7, r4
 8002e90:	0018      	movs	r0, r3
 8002e92:	234c      	movs	r3, #76	; 0x4c
 8002e94:	001a      	movs	r2, r3
 8002e96:	2100      	movs	r1, #0
 8002e98:	f011 f9aa 	bl	80141f0 <memset>
  if(huart->Instance==USART2)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a22      	ldr	r2, [pc, #136]	; (8002f2c <HAL_UART_MspInit+0xb8>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d13e      	bne.n	8002f24 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ea6:	193b      	adds	r3, r7, r4
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002eac:	193b      	adds	r3, r7, r4
 8002eae:	2200      	movs	r2, #0
 8002eb0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002eb2:	193b      	adds	r3, r7, r4
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f003 fb0d 	bl	80064d4 <HAL_RCCEx_PeriphCLKConfig>
 8002eba:	1e03      	subs	r3, r0, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002ebe:	f7ff fdbf 	bl	8002a40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ec2:	4b1b      	ldr	r3, [pc, #108]	; (8002f30 <HAL_UART_MspInit+0xbc>)
 8002ec4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ec6:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <HAL_UART_MspInit+0xbc>)
 8002ec8:	2180      	movs	r1, #128	; 0x80
 8002eca:	0289      	lsls	r1, r1, #10
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ed0:	4b17      	ldr	r3, [pc, #92]	; (8002f30 <HAL_UART_MspInit+0xbc>)
 8002ed2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ed4:	2380      	movs	r3, #128	; 0x80
 8002ed6:	029b      	lsls	r3, r3, #10
 8002ed8:	4013      	ands	r3, r2
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ede:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <HAL_UART_MspInit+0xbc>)
 8002ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ee2:	4b13      	ldr	r3, [pc, #76]	; (8002f30 <HAL_UART_MspInit+0xbc>)
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	635a      	str	r2, [r3, #52]	; 0x34
 8002eea:	4b11      	ldr	r3, [pc, #68]	; (8002f30 <HAL_UART_MspInit+0xbc>)
 8002eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eee:	2201      	movs	r2, #1
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	60bb      	str	r3, [r7, #8]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8002ef6:	215c      	movs	r1, #92	; 0x5c
 8002ef8:	187b      	adds	r3, r7, r1
 8002efa:	220c      	movs	r2, #12
 8002efc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efe:	187b      	adds	r3, r7, r1
 8002f00:	2202      	movs	r2, #2
 8002f02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f04:	187b      	adds	r3, r7, r1
 8002f06:	2200      	movs	r2, #0
 8002f08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0a:	187b      	adds	r3, r7, r1
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002f10:	187b      	adds	r3, r7, r1
 8002f12:	2201      	movs	r2, #1
 8002f14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f16:	187a      	adds	r2, r7, r1
 8002f18:	23a0      	movs	r3, #160	; 0xa0
 8002f1a:	05db      	lsls	r3, r3, #23
 8002f1c:	0011      	movs	r1, r2
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f000 fecc 	bl	8003cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f24:	46c0      	nop			; (mov r8, r8)
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b01d      	add	sp, #116	; 0x74
 8002f2a:	bd90      	pop	{r4, r7, pc}
 8002f2c:	40004400 	.word	0x40004400
 8002f30:	40021000 	.word	0x40021000

08002f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f38:	e7fe      	b.n	8002f38 <NMI_Handler+0x4>

08002f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f3e:	e7fe      	b.n	8002f3e <HardFault_Handler+0x4>

08002f40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002f44:	46c0      	nop			; (mov r8, r8)
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f58:	f000 fae0 	bl	800351c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f5c:	46c0      	nop			; (mov r8, r8)
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_TE_Pin);
 8002f66:	2001      	movs	r0, #1
 8002f68:	f001 f84e 	bl	8004008 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002f6c:	46c0      	nop			; (mov r8, r8)
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CPT_INT_Pin);
 8002f76:	2080      	movs	r0, #128	; 0x80
 8002f78:	f001 f846 	bl	8004008 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_Pin);
 8002f7c:	2380      	movs	r3, #128	; 0x80
 8002f7e:	019b      	lsls	r3, r3, #6
 8002f80:	0018      	movs	r0, r3
 8002f82:	f001 f841 	bl	8004008 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
//  HAL_DMA_IRQHandler(&hdma_spi1_tx);
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  MB1642BDisplayDriver_DMACallback();
 8002f90:	f7ff f992 	bl	80022b8 <MB1642BDisplayDriver_DMACallback>
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002f94:	46c0      	nop			; (mov r8, r8)
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	af00      	add	r7, sp, #0

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
//  HAL_DMA_IRQHandler(&hdma_spi2_rx);
//  HAL_DMA_IRQHandler(&hdma_spi2_tx);
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */
  DataReader_DMACallback();
 8002f9e:	f7fe fd91 	bl	8001ac4 <DataReader_DMACallback>
  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <I2C2_3_IRQHandler>:

/**
  * @brief This function handles I2C2, I2C3 Interrupt (combined with EXTI 24 and EXTI 22).
  */
void I2C2_3_IRQHandler(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_3_IRQn 0 */

  /* USER CODE END I2C2_3_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002fac:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <I2C2_3_IRQHandler+0x2c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699a      	ldr	r2, [r3, #24]
 8002fb2:	23e0      	movs	r3, #224	; 0xe0
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d004      	beq.n	8002fc4 <I2C2_3_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <I2C2_3_IRQHandler+0x2c>)
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f001 fb6f 	bl	80046a0 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_3_IRQn 1 */

  /* USER CODE END I2C2_3_IRQn 1 */
}
 8002fc2:	e003      	b.n	8002fcc <I2C2_3_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 8002fc4:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <I2C2_3_IRQHandler+0x2c>)
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f001 fb50 	bl	800466c <HAL_I2C_EV_IRQHandler>
}
 8002fcc:	46c0      	nop			; (mov r8, r8)
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	200000dc 	.word	0x200000dc

08002fd8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1/I2S1 Interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002fdc:	4b03      	ldr	r3, [pc, #12]	; (8002fec <SPI1_IRQHandler+0x14>)
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f003 fd6c 	bl	8006abc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002fe4:	46c0      	nop			; (mov r8, r8)
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	20000130 	.word	0x20000130

08002ff0 <SPI2_3_IRQHandler>:

/**
  * @brief This function handles SPI2/I2S2, SPI3/I2S3 Interrupt.
  */
void SPI2_3_IRQHandler(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_3_IRQn 0 */

  /* USER CODE END SPI2_3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002ff4:	4b03      	ldr	r3, [pc, #12]	; (8003004 <SPI2_3_IRQHandler+0x14>)
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f003 fd60 	bl	8006abc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_3_IRQn 1 */

  /* USER CODE END SPI2_3_IRQn 1 */
}
 8002ffc:	46c0      	nop			; (mov r8, r8)
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	20000194 	.word	0x20000194

08003008 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  return 1;
 800300c:	2301      	movs	r3, #1
}
 800300e:	0018      	movs	r0, r3
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <_kill>:

int _kill(int pid, int sig)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800301e:	f011 f999 	bl	8014354 <__errno>
 8003022:	0003      	movs	r3, r0
 8003024:	2216      	movs	r2, #22
 8003026:	601a      	str	r2, [r3, #0]
  return -1;
 8003028:	2301      	movs	r3, #1
 800302a:	425b      	negs	r3, r3
}
 800302c:	0018      	movs	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	b002      	add	sp, #8
 8003032:	bd80      	pop	{r7, pc}

08003034 <_exit>:

void _exit (int status)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800303c:	2301      	movs	r3, #1
 800303e:	425a      	negs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	0011      	movs	r1, r2
 8003044:	0018      	movs	r0, r3
 8003046:	f7ff ffe5 	bl	8003014 <_kill>
  while (1) {}    /* Make sure we hang here */
 800304a:	e7fe      	b.n	800304a <_exit+0x16>

0800304c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003058:	2300      	movs	r3, #0
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	e00a      	b.n	8003074 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800305e:	e000      	b.n	8003062 <_read+0x16>
 8003060:	bf00      	nop
 8003062:	0001      	movs	r1, r0
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	60ba      	str	r2, [r7, #8]
 800306a:	b2ca      	uxtb	r2, r1
 800306c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	3301      	adds	r3, #1
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	429a      	cmp	r2, r3
 800307a:	dbf0      	blt.n	800305e <_read+0x12>
  }

  return len;
 800307c:	687b      	ldr	r3, [r7, #4]
}
 800307e:	0018      	movs	r0, r3
 8003080:	46bd      	mov	sp, r7
 8003082:	b006      	add	sp, #24
 8003084:	bd80      	pop	{r7, pc}

08003086 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b086      	sub	sp, #24
 800308a:	af00      	add	r7, sp, #0
 800308c:	60f8      	str	r0, [r7, #12]
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	e009      	b.n	80030ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	60ba      	str	r2, [r7, #8]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	0018      	movs	r0, r3
 80030a2:	e000      	b.n	80030a6 <_write+0x20>
 80030a4:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	3301      	adds	r3, #1
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	dbf1      	blt.n	8003098 <_write+0x12>
  }
  return len;
 80030b4:	687b      	ldr	r3, [r7, #4]
}
 80030b6:	0018      	movs	r0, r3
 80030b8:	46bd      	mov	sp, r7
 80030ba:	b006      	add	sp, #24
 80030bc:	bd80      	pop	{r7, pc}

080030be <_close>:

int _close(int file)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030c6:	2301      	movs	r3, #1
 80030c8:	425b      	negs	r3, r3
}
 80030ca:	0018      	movs	r0, r3
 80030cc:	46bd      	mov	sp, r7
 80030ce:	b002      	add	sp, #8
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	2280      	movs	r2, #128	; 0x80
 80030e0:	0192      	lsls	r2, r2, #6
 80030e2:	605a      	str	r2, [r3, #4]
  return 0;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	0018      	movs	r0, r3
 80030e8:	46bd      	mov	sp, r7
 80030ea:	b002      	add	sp, #8
 80030ec:	bd80      	pop	{r7, pc}

080030ee <_isatty>:

int _isatty(int file)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030f6:	2301      	movs	r3, #1
}
 80030f8:	0018      	movs	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	b002      	add	sp, #8
 80030fe:	bd80      	pop	{r7, pc}

08003100 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800310c:	2300      	movs	r3, #0
}
 800310e:	0018      	movs	r0, r3
 8003110:	46bd      	mov	sp, r7
 8003112:	b004      	add	sp, #16
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003120:	4a14      	ldr	r2, [pc, #80]	; (8003174 <_sbrk+0x5c>)
 8003122:	4b15      	ldr	r3, [pc, #84]	; (8003178 <_sbrk+0x60>)
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800312c:	4b13      	ldr	r3, [pc, #76]	; (800317c <_sbrk+0x64>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d102      	bne.n	800313a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003134:	4b11      	ldr	r3, [pc, #68]	; (800317c <_sbrk+0x64>)
 8003136:	4a12      	ldr	r2, [pc, #72]	; (8003180 <_sbrk+0x68>)
 8003138:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800313a:	4b10      	ldr	r3, [pc, #64]	; (800317c <_sbrk+0x64>)
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	18d3      	adds	r3, r2, r3
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	429a      	cmp	r2, r3
 8003146:	d207      	bcs.n	8003158 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003148:	f011 f904 	bl	8014354 <__errno>
 800314c:	0003      	movs	r3, r0
 800314e:	220c      	movs	r2, #12
 8003150:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003152:	2301      	movs	r3, #1
 8003154:	425b      	negs	r3, r3
 8003156:	e009      	b.n	800316c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003158:	4b08      	ldr	r3, [pc, #32]	; (800317c <_sbrk+0x64>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800315e:	4b07      	ldr	r3, [pc, #28]	; (800317c <_sbrk+0x64>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	18d2      	adds	r2, r2, r3
 8003166:	4b05      	ldr	r3, [pc, #20]	; (800317c <_sbrk+0x64>)
 8003168:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800316a:	68fb      	ldr	r3, [r7, #12]
}
 800316c:	0018      	movs	r0, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	b006      	add	sp, #24
 8003172:	bd80      	pop	{r7, pc}
 8003174:	20024000 	.word	0x20024000
 8003178:	00000400 	.word	0x00000400
 800317c:	200003f8 	.word	0x200003f8
 8003180:	20002a38 	.word	0x20002a38

08003184 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003188:	46c0      	nop			; (mov r8, r8)
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <sitronix_hardware_reset>:
	}

	return true;
}

bool sitronix_hardware_reset() {
 800318e:	b580      	push	{r7, lr}
 8003190:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CTP_RESET_GPIO_Port, CTP_RESET_Pin, 1);
 8003192:	2380      	movs	r3, #128	; 0x80
 8003194:	0219      	lsls	r1, r3, #8
 8003196:	23a0      	movs	r3, #160	; 0xa0
 8003198:	05db      	lsls	r3, r3, #23
 800319a:	2201      	movs	r2, #1
 800319c:	0018      	movs	r0, r3
 800319e:	f000 ff16 	bl	8003fce <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80031a2:	23fa      	movs	r3, #250	; 0xfa
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	0018      	movs	r0, r3
 80031a8:	f000 f9d4 	bl	8003554 <HAL_Delay>
	HAL_GPIO_WritePin(CTP_RESET_GPIO_Port, CTP_RESET_Pin, 0);
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	0219      	lsls	r1, r3, #8
 80031b0:	23a0      	movs	r3, #160	; 0xa0
 80031b2:	05db      	lsls	r3, r3, #23
 80031b4:	2200      	movs	r2, #0
 80031b6:	0018      	movs	r0, r3
 80031b8:	f000 ff09 	bl	8003fce <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80031bc:	23fa      	movs	r3, #250	; 0xfa
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	0018      	movs	r0, r3
 80031c2:	f000 f9c7 	bl	8003554 <HAL_Delay>
	HAL_GPIO_WritePin(CTP_RESET_GPIO_Port, CTP_RESET_Pin, 1);
 80031c6:	2380      	movs	r3, #128	; 0x80
 80031c8:	0219      	lsls	r1, r3, #8
 80031ca:	23a0      	movs	r3, #160	; 0xa0
 80031cc:	05db      	lsls	r3, r3, #23
 80031ce:	2201      	movs	r2, #1
 80031d0:	0018      	movs	r0, r3
 80031d2:	f000 fefc 	bl	8003fce <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80031d6:	23fa      	movs	r3, #250	; 0xfa
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	0018      	movs	r0, r3
 80031dc:	f000 f9ba 	bl	8003554 <HAL_Delay>
	return true;
 80031e0:	2301      	movs	r3, #1
}
 80031e2:	0018      	movs	r0, r3
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <sitronix_status_get>:

bool sitronix_status_get(sitronix_handle_t *handle) {
 80031e8:	b590      	push	{r4, r7, lr}
 80031ea:	b089      	sub	sp, #36	; 0x24
 80031ec:	af04      	add	r7, sp, #16
 80031ee:	6078      	str	r0, [r7, #4]
	uint8_t buf[1];

	buf[0] = 0x0;
 80031f0:	240c      	movs	r4, #12
 80031f2:	193b      	adds	r3, r7, r4
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]

	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u,
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6818      	ldr	r0, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	889b      	ldrh	r3, [r3, #4]
 8003200:	18db      	adds	r3, r3, r3
 8003202:	b299      	uxth	r1, r3
 8003204:	23fa      	movs	r3, #250	; 0xfa
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	9302      	str	r3, [sp, #8]
 800320a:	2301      	movs	r3, #1
 800320c:	9301      	str	r3, [sp, #4]
 800320e:	193b      	adds	r3, r7, r4
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	2301      	movs	r3, #1
 8003214:	2201      	movs	r2, #1
 8003216:	f001 f8f5 	bl	8004404 <HAL_I2C_Mem_Read>
 800321a:	1e03      	subs	r3, r0, #0
 800321c:	d001      	beq.n	8003222 <sitronix_status_get+0x3a>
			TOUCH_GET_STATUS, 1, (uint8_t*) &buf, sizeof(buf), 1000)
			!= HAL_OK) {
		return false;
 800321e:	2300      	movs	r3, #0
 8003220:	e000      	b.n	8003224 <sitronix_status_get+0x3c>
	}

	return true;
 8003222:	2301      	movs	r3, #1
}
 8003224:	0018      	movs	r0, r3
 8003226:	46bd      	mov	sp, r7
 8003228:	b005      	add	sp, #20
 800322a:	bd90      	pop	{r4, r7, pc}

0800322c <sitronix_version_get>:

bool sitronix_version_get(sitronix_handle_t *handle) {
 800322c:	b590      	push	{r4, r7, lr}
 800322e:	b089      	sub	sp, #36	; 0x24
 8003230:	af04      	add	r7, sp, #16
 8003232:	6078      	str	r0, [r7, #4]
	uint8_t buf[1];

	buf[0] = 0x0;
 8003234:	240c      	movs	r4, #12
 8003236:	193b      	adds	r3, r7, r4
 8003238:	2200      	movs	r2, #0
 800323a:	701a      	strb	r2, [r3, #0]
	if (HAL_I2C_Mem_Write(handle->i2c_handle, handle->device_address << 1u,
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6818      	ldr	r0, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	889b      	ldrh	r3, [r3, #4]
 8003244:	18db      	adds	r3, r3, r3
 8003246:	b299      	uxth	r1, r3
 8003248:	23fa      	movs	r3, #250	; 0xfa
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	9302      	str	r3, [sp, #8]
 800324e:	2301      	movs	r3, #1
 8003250:	9301      	str	r3, [sp, #4]
 8003252:	193b      	adds	r3, r7, r4
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	2301      	movs	r3, #1
 8003258:	2200      	movs	r2, #0
 800325a:	f000 ffa5 	bl	80041a8 <HAL_I2C_Mem_Write>
 800325e:	1e03      	subs	r3, r0, #0
 8003260:	d001      	beq.n	8003266 <sitronix_version_get+0x3a>
			TOUCH_GET_VERSION, 1, (uint8_t*) &buf, sizeof(buf), 1000)
			!= HAL_OK) {
		return false;
 8003262:	2300      	movs	r3, #0
 8003264:	e016      	b.n	8003294 <sitronix_version_get+0x68>
	}

	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u,
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6818      	ldr	r0, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	889b      	ldrh	r3, [r3, #4]
 800326e:	18db      	adds	r3, r3, r3
 8003270:	b299      	uxth	r1, r3
 8003272:	23fa      	movs	r3, #250	; 0xfa
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	9302      	str	r3, [sp, #8]
 8003278:	2301      	movs	r3, #1
 800327a:	9301      	str	r3, [sp, #4]
 800327c:	230c      	movs	r3, #12
 800327e:	18fb      	adds	r3, r7, r3
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	2301      	movs	r3, #1
 8003284:	2202      	movs	r2, #2
 8003286:	f001 f8bd 	bl	8004404 <HAL_I2C_Mem_Read>
 800328a:	1e03      	subs	r3, r0, #0
 800328c:	d001      	beq.n	8003292 <sitronix_version_get+0x66>
			TOUCH_CONTROL_REG, 1, (uint8_t*) &buf, sizeof(buf), 1000)
			!= HAL_OK) {
		return false;
 800328e:	2300      	movs	r3, #0
 8003290:	e000      	b.n	8003294 <sitronix_version_get+0x68>
	}

	return true;
 8003292:	2301      	movs	r3, #1
}
 8003294:	0018      	movs	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	b005      	add	sp, #20
 800329a:	bd90      	pop	{r4, r7, pc}

0800329c <sitronix_close_multitouch>:

bool sitronix_close_multitouch(sitronix_handle_t *handle) {
 800329c:	b590      	push	{r4, r7, lr}
 800329e:	b089      	sub	sp, #36	; 0x24
 80032a0:	af04      	add	r7, sp, #16
 80032a2:	6078      	str	r0, [r7, #4]
	uint8_t buf[1];
	buf[0] = 64; // 0100 0000 bit 6 is Multi-Touch disable
 80032a4:	240c      	movs	r4, #12
 80032a6:	193b      	adds	r3, r7, r4
 80032a8:	2240      	movs	r2, #64	; 0x40
 80032aa:	701a      	strb	r2, [r3, #0]
	if (HAL_I2C_Mem_Write(handle->i2c_handle, handle->device_address << 1u,
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6818      	ldr	r0, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	889b      	ldrh	r3, [r3, #4]
 80032b4:	18db      	adds	r3, r3, r3
 80032b6:	b299      	uxth	r1, r3
 80032b8:	23fa      	movs	r3, #250	; 0xfa
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	9302      	str	r3, [sp, #8]
 80032be:	2301      	movs	r3, #1
 80032c0:	9301      	str	r3, [sp, #4]
 80032c2:	193b      	adds	r3, r7, r4
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	2301      	movs	r3, #1
 80032c8:	2210      	movs	r2, #16
 80032ca:	f000 ff6d 	bl	80041a8 <HAL_I2C_Mem_Write>
 80032ce:	1e03      	subs	r3, r0, #0
 80032d0:	d001      	beq.n	80032d6 <sitronix_close_multitouch+0x3a>
			TOUCH_GET_COOR, 1, (uint8_t*) &buf, sizeof(buf), 1000) != HAL_OK) {
		return false;
 80032d2:	2300      	movs	r3, #0
 80032d4:	e000      	b.n	80032d8 <sitronix_close_multitouch+0x3c>
	}

	return true;
 80032d6:	2301      	movs	r3, #1
}
 80032d8:	0018      	movs	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	b005      	add	sp, #20
 80032de:	bd90      	pop	{r4, r7, pc}

080032e0 <sitronix_get_coordinates>:

bool sitronix_get_coordinates(sitronix_handle_t *handle, uint8_t *updated,
		uint16_t *x0, uint16_t *y0) {
 80032e0:	b590      	push	{r4, r7, lr}
 80032e2:	b08d      	sub	sp, #52	; 0x34
 80032e4:	af04      	add	r7, sp, #16
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
 80032ec:	603b      	str	r3, [r7, #0]

	uint8_t buf1[1];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u,
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6818      	ldr	r0, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	889b      	ldrh	r3, [r3, #4]
 80032f6:	18db      	adds	r3, r3, r3
 80032f8:	b299      	uxth	r1, r3
 80032fa:	23fa      	movs	r3, #250	; 0xfa
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	9302      	str	r3, [sp, #8]
 8003300:	2301      	movs	r3, #1
 8003302:	9301      	str	r3, [sp, #4]
 8003304:	231c      	movs	r3, #28
 8003306:	18fb      	adds	r3, r7, r3
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	2301      	movs	r3, #1
 800330c:	2212      	movs	r2, #18
 800330e:	f001 f879 	bl	8004404 <HAL_I2C_Mem_Read>
 8003312:	1e03      	subs	r3, r0, #0
 8003314:	d001      	beq.n	800331a <sitronix_get_coordinates+0x3a>
			TOUCH_GET_X0Y0H, 1, (uint8_t*) &buf1, 1, 1000) != HAL_OK) {
		return false;
 8003316:	2300      	movs	r3, #0
 8003318:	e067      	b.n	80033ea <sitronix_get_coordinates+0x10a>
	}
	uint8_t valid = (buf1[0] & 0b10000000) >> 7;
 800331a:	231c      	movs	r3, #28
 800331c:	18fb      	adds	r3, r7, r3
 800331e:	781a      	ldrb	r2, [r3, #0]
 8003320:	211f      	movs	r1, #31
 8003322:	187b      	adds	r3, r7, r1
 8003324:	09d2      	lsrs	r2, r2, #7
 8003326:	701a      	strb	r2, [r3, #0]

	if (valid == 1) {
 8003328:	187b      	adds	r3, r7, r1
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d15b      	bne.n	80033e8 <sitronix_get_coordinates+0x108>
		uint8_t buf2[1];
		if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u,
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6818      	ldr	r0, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	889b      	ldrh	r3, [r3, #4]
 8003338:	18db      	adds	r3, r3, r3
 800333a:	b299      	uxth	r1, r3
 800333c:	23fa      	movs	r3, #250	; 0xfa
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	9302      	str	r3, [sp, #8]
 8003342:	2301      	movs	r3, #1
 8003344:	9301      	str	r3, [sp, #4]
 8003346:	2318      	movs	r3, #24
 8003348:	18fb      	adds	r3, r7, r3
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	2301      	movs	r3, #1
 800334e:	2213      	movs	r2, #19
 8003350:	f001 f858 	bl	8004404 <HAL_I2C_Mem_Read>
 8003354:	1e03      	subs	r3, r0, #0
 8003356:	d001      	beq.n	800335c <sitronix_get_coordinates+0x7c>
				TOUCH_GET_X0L, 1, (uint8_t*) &buf2, 1, 1000) != HAL_OK) {
			return false;
 8003358:	2300      	movs	r3, #0
 800335a:	e046      	b.n	80033ea <sitronix_get_coordinates+0x10a>
		}
		uint8_t buf3[1];
		if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u,
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6818      	ldr	r0, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	889b      	ldrh	r3, [r3, #4]
 8003364:	18db      	adds	r3, r3, r3
 8003366:	b299      	uxth	r1, r3
 8003368:	23fa      	movs	r3, #250	; 0xfa
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	9302      	str	r3, [sp, #8]
 800336e:	2301      	movs	r3, #1
 8003370:	9301      	str	r3, [sp, #4]
 8003372:	2314      	movs	r3, #20
 8003374:	18fb      	adds	r3, r7, r3
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	2301      	movs	r3, #1
 800337a:	2214      	movs	r2, #20
 800337c:	f001 f842 	bl	8004404 <HAL_I2C_Mem_Read>
 8003380:	1e03      	subs	r3, r0, #0
 8003382:	d001      	beq.n	8003388 <sitronix_get_coordinates+0xa8>
				TOUCH_GET_Y0L, 1, (uint8_t*) &buf3, 1, 1000) != HAL_OK) {
			return false;
 8003384:	2300      	movs	r3, #0
 8003386:	e030      	b.n	80033ea <sitronix_get_coordinates+0x10a>
		}
		uint8_t x0_H = (buf1[0] & 0b01110000) >> 4;
 8003388:	201c      	movs	r0, #28
 800338a:	183b      	adds	r3, r7, r0
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	111b      	asrs	r3, r3, #4
 8003390:	b2da      	uxtb	r2, r3
 8003392:	241e      	movs	r4, #30
 8003394:	193b      	adds	r3, r7, r4
 8003396:	2107      	movs	r1, #7
 8003398:	400a      	ands	r2, r1
 800339a:	701a      	strb	r2, [r3, #0]
		uint8_t y0_H = (buf1[0] & 0b00000111);
 800339c:	183b      	adds	r3, r7, r0
 800339e:	781a      	ldrb	r2, [r3, #0]
 80033a0:	201d      	movs	r0, #29
 80033a2:	183b      	adds	r3, r7, r0
 80033a4:	2107      	movs	r1, #7
 80033a6:	400a      	ands	r2, r1
 80033a8:	701a      	strb	r2, [r3, #0]

		*x0 = ((uint16_t) x0_H << 8u) | (uint16_t) buf2[0];
 80033aa:	193b      	adds	r3, r7, r4
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	021b      	lsls	r3, r3, #8
 80033b0:	b21a      	sxth	r2, r3
 80033b2:	2318      	movs	r3, #24
 80033b4:	18fb      	adds	r3, r7, r3
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	b21b      	sxth	r3, r3
 80033ba:	4313      	orrs	r3, r2
 80033bc:	b21b      	sxth	r3, r3
 80033be:	b29a      	uxth	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	801a      	strh	r2, [r3, #0]
		*y0 = ((uint16_t) y0_H << 8u) | (uint16_t) buf3[0];
 80033c4:	183b      	adds	r3, r7, r0
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	021b      	lsls	r3, r3, #8
 80033ca:	b21a      	sxth	r2, r3
 80033cc:	2314      	movs	r3, #20
 80033ce:	18fb      	adds	r3, r7, r3
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	b21b      	sxth	r3, r3
 80033d4:	4313      	orrs	r3, r2
 80033d6:	b21b      	sxth	r3, r3
 80033d8:	b29a      	uxth	r2, r3
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	801a      	strh	r2, [r3, #0]
		*updated = 1;
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2201      	movs	r2, #1
 80033e2:	701a      	strb	r2, [r3, #0]
		return true;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e000      	b.n	80033ea <sitronix_get_coordinates+0x10a>
	} else {
		return false;
 80033e8:	2300      	movs	r3, #0
	}

}
 80033ea:	0018      	movs	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	b009      	add	sp, #36	; 0x24
 80033f0:	bd90      	pop	{r4, r7, pc}
	...

080033f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80033f4:	480d      	ldr	r0, [pc, #52]	; (800342c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80033f6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80033f8:	f7ff fec4 	bl	8003184 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033fc:	480c      	ldr	r0, [pc, #48]	; (8003430 <LoopForever+0x6>)
  ldr r1, =_edata
 80033fe:	490d      	ldr	r1, [pc, #52]	; (8003434 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003400:	4a0d      	ldr	r2, [pc, #52]	; (8003438 <LoopForever+0xe>)
  movs r3, #0
 8003402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003404:	e002      	b.n	800340c <LoopCopyDataInit>

08003406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800340a:	3304      	adds	r3, #4

0800340c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800340c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800340e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003410:	d3f9      	bcc.n	8003406 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003412:	4a0a      	ldr	r2, [pc, #40]	; (800343c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003414:	4c0a      	ldr	r4, [pc, #40]	; (8003440 <LoopForever+0x16>)
  movs r3, #0
 8003416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003418:	e001      	b.n	800341e <LoopFillZerobss>

0800341a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800341a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800341c:	3204      	adds	r2, #4

0800341e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800341e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003420:	d3fb      	bcc.n	800341a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003422:	f010 ff9d 	bl	8014360 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003426:	f7fe ffe1 	bl	80023ec <main>

0800342a <LoopForever>:

LoopForever:
  b LoopForever
 800342a:	e7fe      	b.n	800342a <LoopForever>
  ldr   r0, =_estack
 800342c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8003430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003434:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003438:	08017034 	.word	0x08017034
  ldr r2, =_sbss
 800343c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003440:	20002a38 	.word	0x20002a38

08003444 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003444:	e7fe      	b.n	8003444 <ADC1_COMP_IRQHandler>
	...

08003448 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800344e:	1dfb      	adds	r3, r7, #7
 8003450:	2200      	movs	r2, #0
 8003452:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003454:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <HAL_Init+0x3c>)
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <HAL_Init+0x3c>)
 800345a:	2180      	movs	r1, #128	; 0x80
 800345c:	0049      	lsls	r1, r1, #1
 800345e:	430a      	orrs	r2, r1
 8003460:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003462:	2000      	movs	r0, #0
 8003464:	f000 f810 	bl	8003488 <HAL_InitTick>
 8003468:	1e03      	subs	r3, r0, #0
 800346a:	d003      	beq.n	8003474 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800346c:	1dfb      	adds	r3, r7, #7
 800346e:	2201      	movs	r2, #1
 8003470:	701a      	strb	r2, [r3, #0]
 8003472:	e001      	b.n	8003478 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003474:	f7ff faea 	bl	8002a4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003478:	1dfb      	adds	r3, r7, #7
 800347a:	781b      	ldrb	r3, [r3, #0]
}
 800347c:	0018      	movs	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	b002      	add	sp, #8
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40022000 	.word	0x40022000

08003488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003488:	b590      	push	{r4, r7, lr}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003490:	230f      	movs	r3, #15
 8003492:	18fb      	adds	r3, r7, r3
 8003494:	2200      	movs	r2, #0
 8003496:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003498:	4b1d      	ldr	r3, [pc, #116]	; (8003510 <HAL_InitTick+0x88>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d02b      	beq.n	80034f8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80034a0:	4b1c      	ldr	r3, [pc, #112]	; (8003514 <HAL_InitTick+0x8c>)
 80034a2:	681c      	ldr	r4, [r3, #0]
 80034a4:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <HAL_InitTick+0x88>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	0019      	movs	r1, r3
 80034aa:	23fa      	movs	r3, #250	; 0xfa
 80034ac:	0098      	lsls	r0, r3, #2
 80034ae:	f7fc fe47 	bl	8000140 <__udivsi3>
 80034b2:	0003      	movs	r3, r0
 80034b4:	0019      	movs	r1, r3
 80034b6:	0020      	movs	r0, r4
 80034b8:	f7fc fe42 	bl	8000140 <__udivsi3>
 80034bc:	0003      	movs	r3, r0
 80034be:	0018      	movs	r0, r3
 80034c0:	f000 f985 	bl	80037ce <HAL_SYSTICK_Config>
 80034c4:	1e03      	subs	r3, r0, #0
 80034c6:	d112      	bne.n	80034ee <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b03      	cmp	r3, #3
 80034cc:	d80a      	bhi.n	80034e4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	2301      	movs	r3, #1
 80034d2:	425b      	negs	r3, r3
 80034d4:	2200      	movs	r2, #0
 80034d6:	0018      	movs	r0, r3
 80034d8:	f000 f944 	bl	8003764 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034dc:	4b0e      	ldr	r3, [pc, #56]	; (8003518 <HAL_InitTick+0x90>)
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	e00d      	b.n	8003500 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80034e4:	230f      	movs	r3, #15
 80034e6:	18fb      	adds	r3, r7, r3
 80034e8:	2201      	movs	r2, #1
 80034ea:	701a      	strb	r2, [r3, #0]
 80034ec:	e008      	b.n	8003500 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80034ee:	230f      	movs	r3, #15
 80034f0:	18fb      	adds	r3, r7, r3
 80034f2:	2201      	movs	r2, #1
 80034f4:	701a      	strb	r2, [r3, #0]
 80034f6:	e003      	b.n	8003500 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80034f8:	230f      	movs	r3, #15
 80034fa:	18fb      	adds	r3, r7, r3
 80034fc:	2201      	movs	r2, #1
 80034fe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003500:	230f      	movs	r3, #15
 8003502:	18fb      	adds	r3, r7, r3
 8003504:	781b      	ldrb	r3, [r3, #0]
}
 8003506:	0018      	movs	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	b005      	add	sp, #20
 800350c:	bd90      	pop	{r4, r7, pc}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	20000018 	.word	0x20000018
 8003514:	20000010 	.word	0x20000010
 8003518:	20000014 	.word	0x20000014

0800351c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003520:	4b05      	ldr	r3, [pc, #20]	; (8003538 <HAL_IncTick+0x1c>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	001a      	movs	r2, r3
 8003526:	4b05      	ldr	r3, [pc, #20]	; (800353c <HAL_IncTick+0x20>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	18d2      	adds	r2, r2, r3
 800352c:	4b03      	ldr	r3, [pc, #12]	; (800353c <HAL_IncTick+0x20>)
 800352e:	601a      	str	r2, [r3, #0]
}
 8003530:	46c0      	nop			; (mov r8, r8)
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	20000018 	.word	0x20000018
 800353c:	200003fc 	.word	0x200003fc

08003540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  return uwTick;
 8003544:	4b02      	ldr	r3, [pc, #8]	; (8003550 <HAL_GetTick+0x10>)
 8003546:	681b      	ldr	r3, [r3, #0]
}
 8003548:	0018      	movs	r0, r3
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	200003fc 	.word	0x200003fc

08003554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800355c:	f7ff fff0 	bl	8003540 <HAL_GetTick>
 8003560:	0003      	movs	r3, r0
 8003562:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	3301      	adds	r3, #1
 800356c:	d005      	beq.n	800357a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800356e:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <HAL_Delay+0x44>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	001a      	movs	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	189b      	adds	r3, r3, r2
 8003578:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	f7ff ffe0 	bl	8003540 <HAL_GetTick>
 8003580:	0002      	movs	r2, r0
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	429a      	cmp	r2, r3
 800358a:	d8f7      	bhi.n	800357c <HAL_Delay+0x28>
  {
  }
}
 800358c:	46c0      	nop			; (mov r8, r8)
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	46bd      	mov	sp, r7
 8003592:	b004      	add	sp, #16
 8003594:	bd80      	pop	{r7, pc}
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	20000018 	.word	0x20000018

0800359c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80035a4:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a06      	ldr	r2, [pc, #24]	; (80035c4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	0019      	movs	r1, r3
 80035ae:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	601a      	str	r2, [r3, #0]
}
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	46bd      	mov	sp, r7
 80035ba:	b002      	add	sp, #8
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	40010000 	.word	0x40010000
 80035c4:	fffff9ff 	.word	0xfffff9ff

080035c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	0002      	movs	r2, r0
 80035d0:	1dfb      	adds	r3, r7, #7
 80035d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035d4:	1dfb      	adds	r3, r7, #7
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b7f      	cmp	r3, #127	; 0x7f
 80035da:	d809      	bhi.n	80035f0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035dc:	1dfb      	adds	r3, r7, #7
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	001a      	movs	r2, r3
 80035e2:	231f      	movs	r3, #31
 80035e4:	401a      	ands	r2, r3
 80035e6:	4b04      	ldr	r3, [pc, #16]	; (80035f8 <__NVIC_EnableIRQ+0x30>)
 80035e8:	2101      	movs	r1, #1
 80035ea:	4091      	lsls	r1, r2
 80035ec:	000a      	movs	r2, r1
 80035ee:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80035f0:	46c0      	nop			; (mov r8, r8)
 80035f2:	46bd      	mov	sp, r7
 80035f4:	b002      	add	sp, #8
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	e000e100 	.word	0xe000e100

080035fc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	0002      	movs	r2, r0
 8003604:	1dfb      	adds	r3, r7, #7
 8003606:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003608:	1dfb      	adds	r3, r7, #7
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b7f      	cmp	r3, #127	; 0x7f
 800360e:	d810      	bhi.n	8003632 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003610:	1dfb      	adds	r3, r7, #7
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	001a      	movs	r2, r3
 8003616:	231f      	movs	r3, #31
 8003618:	4013      	ands	r3, r2
 800361a:	4908      	ldr	r1, [pc, #32]	; (800363c <__NVIC_DisableIRQ+0x40>)
 800361c:	2201      	movs	r2, #1
 800361e:	409a      	lsls	r2, r3
 8003620:	0013      	movs	r3, r2
 8003622:	2280      	movs	r2, #128	; 0x80
 8003624:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003626:	f3bf 8f4f 	dsb	sy
}
 800362a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800362c:	f3bf 8f6f 	isb	sy
}
 8003630:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	46bd      	mov	sp, r7
 8003636:	b002      	add	sp, #8
 8003638:	bd80      	pop	{r7, pc}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	e000e100 	.word	0xe000e100

08003640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003640:	b590      	push	{r4, r7, lr}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	0002      	movs	r2, r0
 8003648:	6039      	str	r1, [r7, #0]
 800364a:	1dfb      	adds	r3, r7, #7
 800364c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800364e:	1dfb      	adds	r3, r7, #7
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	2b7f      	cmp	r3, #127	; 0x7f
 8003654:	d828      	bhi.n	80036a8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003656:	4a2f      	ldr	r2, [pc, #188]	; (8003714 <__NVIC_SetPriority+0xd4>)
 8003658:	1dfb      	adds	r3, r7, #7
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	b25b      	sxtb	r3, r3
 800365e:	089b      	lsrs	r3, r3, #2
 8003660:	33c0      	adds	r3, #192	; 0xc0
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	589b      	ldr	r3, [r3, r2]
 8003666:	1dfa      	adds	r2, r7, #7
 8003668:	7812      	ldrb	r2, [r2, #0]
 800366a:	0011      	movs	r1, r2
 800366c:	2203      	movs	r2, #3
 800366e:	400a      	ands	r2, r1
 8003670:	00d2      	lsls	r2, r2, #3
 8003672:	21ff      	movs	r1, #255	; 0xff
 8003674:	4091      	lsls	r1, r2
 8003676:	000a      	movs	r2, r1
 8003678:	43d2      	mvns	r2, r2
 800367a:	401a      	ands	r2, r3
 800367c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	019b      	lsls	r3, r3, #6
 8003682:	22ff      	movs	r2, #255	; 0xff
 8003684:	401a      	ands	r2, r3
 8003686:	1dfb      	adds	r3, r7, #7
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	0018      	movs	r0, r3
 800368c:	2303      	movs	r3, #3
 800368e:	4003      	ands	r3, r0
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003694:	481f      	ldr	r0, [pc, #124]	; (8003714 <__NVIC_SetPriority+0xd4>)
 8003696:	1dfb      	adds	r3, r7, #7
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	b25b      	sxtb	r3, r3
 800369c:	089b      	lsrs	r3, r3, #2
 800369e:	430a      	orrs	r2, r1
 80036a0:	33c0      	adds	r3, #192	; 0xc0
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80036a6:	e031      	b.n	800370c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036a8:	4a1b      	ldr	r2, [pc, #108]	; (8003718 <__NVIC_SetPriority+0xd8>)
 80036aa:	1dfb      	adds	r3, r7, #7
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	0019      	movs	r1, r3
 80036b0:	230f      	movs	r3, #15
 80036b2:	400b      	ands	r3, r1
 80036b4:	3b08      	subs	r3, #8
 80036b6:	089b      	lsrs	r3, r3, #2
 80036b8:	3306      	adds	r3, #6
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	18d3      	adds	r3, r2, r3
 80036be:	3304      	adds	r3, #4
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	1dfa      	adds	r2, r7, #7
 80036c4:	7812      	ldrb	r2, [r2, #0]
 80036c6:	0011      	movs	r1, r2
 80036c8:	2203      	movs	r2, #3
 80036ca:	400a      	ands	r2, r1
 80036cc:	00d2      	lsls	r2, r2, #3
 80036ce:	21ff      	movs	r1, #255	; 0xff
 80036d0:	4091      	lsls	r1, r2
 80036d2:	000a      	movs	r2, r1
 80036d4:	43d2      	mvns	r2, r2
 80036d6:	401a      	ands	r2, r3
 80036d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	019b      	lsls	r3, r3, #6
 80036de:	22ff      	movs	r2, #255	; 0xff
 80036e0:	401a      	ands	r2, r3
 80036e2:	1dfb      	adds	r3, r7, #7
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	0018      	movs	r0, r3
 80036e8:	2303      	movs	r3, #3
 80036ea:	4003      	ands	r3, r0
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036f0:	4809      	ldr	r0, [pc, #36]	; (8003718 <__NVIC_SetPriority+0xd8>)
 80036f2:	1dfb      	adds	r3, r7, #7
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	001c      	movs	r4, r3
 80036f8:	230f      	movs	r3, #15
 80036fa:	4023      	ands	r3, r4
 80036fc:	3b08      	subs	r3, #8
 80036fe:	089b      	lsrs	r3, r3, #2
 8003700:	430a      	orrs	r2, r1
 8003702:	3306      	adds	r3, #6
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	18c3      	adds	r3, r0, r3
 8003708:	3304      	adds	r3, #4
 800370a:	601a      	str	r2, [r3, #0]
}
 800370c:	46c0      	nop			; (mov r8, r8)
 800370e:	46bd      	mov	sp, r7
 8003710:	b003      	add	sp, #12
 8003712:	bd90      	pop	{r4, r7, pc}
 8003714:	e000e100 	.word	0xe000e100
 8003718:	e000ed00 	.word	0xe000ed00

0800371c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	1e5a      	subs	r2, r3, #1
 8003728:	2380      	movs	r3, #128	; 0x80
 800372a:	045b      	lsls	r3, r3, #17
 800372c:	429a      	cmp	r2, r3
 800372e:	d301      	bcc.n	8003734 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003730:	2301      	movs	r3, #1
 8003732:	e010      	b.n	8003756 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003734:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <SysTick_Config+0x44>)
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	3a01      	subs	r2, #1
 800373a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800373c:	2301      	movs	r3, #1
 800373e:	425b      	negs	r3, r3
 8003740:	2103      	movs	r1, #3
 8003742:	0018      	movs	r0, r3
 8003744:	f7ff ff7c 	bl	8003640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003748:	4b05      	ldr	r3, [pc, #20]	; (8003760 <SysTick_Config+0x44>)
 800374a:	2200      	movs	r2, #0
 800374c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800374e:	4b04      	ldr	r3, [pc, #16]	; (8003760 <SysTick_Config+0x44>)
 8003750:	2207      	movs	r2, #7
 8003752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003754:	2300      	movs	r3, #0
}
 8003756:	0018      	movs	r0, r3
 8003758:	46bd      	mov	sp, r7
 800375a:	b002      	add	sp, #8
 800375c:	bd80      	pop	{r7, pc}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	e000e010 	.word	0xe000e010

08003764 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	607a      	str	r2, [r7, #4]
 800376e:	210f      	movs	r1, #15
 8003770:	187b      	adds	r3, r7, r1
 8003772:	1c02      	adds	r2, r0, #0
 8003774:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	187b      	adds	r3, r7, r1
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	b25b      	sxtb	r3, r3
 800377e:	0011      	movs	r1, r2
 8003780:	0018      	movs	r0, r3
 8003782:	f7ff ff5d 	bl	8003640 <__NVIC_SetPriority>
}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	46bd      	mov	sp, r7
 800378a:	b004      	add	sp, #16
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b082      	sub	sp, #8
 8003792:	af00      	add	r7, sp, #0
 8003794:	0002      	movs	r2, r0
 8003796:	1dfb      	adds	r3, r7, #7
 8003798:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800379a:	1dfb      	adds	r3, r7, #7
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	b25b      	sxtb	r3, r3
 80037a0:	0018      	movs	r0, r3
 80037a2:	f7ff ff11 	bl	80035c8 <__NVIC_EnableIRQ>
}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	b002      	add	sp, #8
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b082      	sub	sp, #8
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	0002      	movs	r2, r0
 80037b6:	1dfb      	adds	r3, r7, #7
 80037b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80037ba:	1dfb      	adds	r3, r7, #7
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	b25b      	sxtb	r3, r3
 80037c0:	0018      	movs	r0, r3
 80037c2:	f7ff ff1b 	bl	80035fc <__NVIC_DisableIRQ>
}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b002      	add	sp, #8
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b082      	sub	sp, #8
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	0018      	movs	r0, r3
 80037da:	f7ff ff9f 	bl	800371c <SysTick_Config>
 80037de:	0003      	movs	r3, r0
}
 80037e0:	0018      	movs	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	b002      	add	sp, #8
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e056      	b.n	80038a8 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	7f5b      	ldrb	r3, [r3, #29]
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d106      	bne.n	8003812 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	0018      	movs	r0, r3
 800380e:	f7ff f945 	bl	8002a9c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2202      	movs	r2, #2
 8003816:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	791b      	ldrb	r3, [r3, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10c      	bne.n	800383a <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a22      	ldr	r2, [pc, #136]	; (80038b0 <HAL_CRC_Init+0xc8>)
 8003826:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2118      	movs	r1, #24
 8003834:	438a      	bics	r2, r1
 8003836:	609a      	str	r2, [r3, #8]
 8003838:	e00b      	b.n	8003852 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6899      	ldr	r1, [r3, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68da      	ldr	r2, [r3, #12]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	0018      	movs	r0, r3
 8003846:	f000 f835 	bl	80038b4 <HAL_CRCEx_Polynomial_Set>
 800384a:	1e03      	subs	r3, r0, #0
 800384c:	d001      	beq.n	8003852 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e02a      	b.n	80038a8 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	795b      	ldrb	r3, [r3, #5]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d105      	bne.n	8003866 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2201      	movs	r2, #1
 8003860:	4252      	negs	r2, r2
 8003862:	611a      	str	r2, [r3, #16]
 8003864:	e004      	b.n	8003870 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6912      	ldr	r2, [r2, #16]
 800386e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2260      	movs	r2, #96	; 0x60
 8003878:	4393      	bics	r3, r2
 800387a:	0019      	movs	r1, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	695a      	ldr	r2, [r3, #20]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	2280      	movs	r2, #128	; 0x80
 8003890:	4393      	bics	r3, r2
 8003892:	0019      	movs	r1, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699a      	ldr	r2, [r3, #24]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	0018      	movs	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b002      	add	sp, #8
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	04c11db7 	.word	0x04c11db7

080038b4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038c0:	2117      	movs	r1, #23
 80038c2:	187b      	adds	r3, r7, r1
 80038c4:	2200      	movs	r2, #0
 80038c6:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80038c8:	231f      	movs	r3, #31
 80038ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2201      	movs	r2, #1
 80038d0:	4013      	ands	r3, r2
 80038d2:	d103      	bne.n	80038dc <HAL_CRCEx_Polynomial_Set+0x28>
  {
    status =  HAL_ERROR;
 80038d4:	187b      	adds	r3, r7, r1
 80038d6:	2201      	movs	r2, #1
 80038d8:	701a      	strb	r2, [r3, #0]
 80038da:	e045      	b.n	8003968 <HAL_CRCEx_Polynomial_Set+0xb4>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80038dc:	46c0      	nop			; (mov r8, r8)
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1e5a      	subs	r2, r3, #1
 80038e2:	613a      	str	r2, [r7, #16]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d008      	beq.n	80038fa <HAL_CRCEx_Polynomial_Set+0x46>
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	221f      	movs	r2, #31
 80038ec:	4013      	ands	r3, r2
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	40da      	lsrs	r2, r3
 80038f2:	0013      	movs	r3, r2
 80038f4:	2201      	movs	r2, #1
 80038f6:	4013      	ands	r3, r2
 80038f8:	d0f1      	beq.n	80038de <HAL_CRCEx_Polynomial_Set+0x2a>
    {
    }

    switch (PolyLength)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b18      	cmp	r3, #24
 80038fe:	d00f      	beq.n	8003920 <HAL_CRCEx_Polynomial_Set+0x6c>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b18      	cmp	r3, #24
 8003904:	d824      	bhi.n	8003950 <HAL_CRCEx_Polynomial_Set+0x9c>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b10      	cmp	r3, #16
 800390a:	d011      	beq.n	8003930 <HAL_CRCEx_Polynomial_Set+0x7c>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b10      	cmp	r3, #16
 8003910:	d81e      	bhi.n	8003950 <HAL_CRCEx_Polynomial_Set+0x9c>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d020      	beq.n	800395a <HAL_CRCEx_Polynomial_Set+0xa6>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b08      	cmp	r3, #8
 800391c:	d010      	beq.n	8003940 <HAL_CRCEx_Polynomial_Set+0x8c>
 800391e:	e017      	b.n	8003950 <HAL_CRCEx_Polynomial_Set+0x9c>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	2b06      	cmp	r3, #6
 8003924:	d91b      	bls.n	800395e <HAL_CRCEx_Polynomial_Set+0xaa>
        {
          status =   HAL_ERROR;
 8003926:	2317      	movs	r3, #23
 8003928:	18fb      	adds	r3, r7, r3
 800392a:	2201      	movs	r2, #1
 800392c:	701a      	strb	r2, [r3, #0]
        }
        break;
 800392e:	e016      	b.n	800395e <HAL_CRCEx_Polynomial_Set+0xaa>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	2b07      	cmp	r3, #7
 8003934:	d915      	bls.n	8003962 <HAL_CRCEx_Polynomial_Set+0xae>
        {
          status =   HAL_ERROR;
 8003936:	2317      	movs	r3, #23
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	2201      	movs	r2, #1
 800393c:	701a      	strb	r2, [r3, #0]
        }
        break;
 800393e:	e010      	b.n	8003962 <HAL_CRCEx_Polynomial_Set+0xae>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	2b0f      	cmp	r3, #15
 8003944:	d90f      	bls.n	8003966 <HAL_CRCEx_Polynomial_Set+0xb2>
        {
          status =   HAL_ERROR;
 8003946:	2317      	movs	r3, #23
 8003948:	18fb      	adds	r3, r7, r3
 800394a:	2201      	movs	r2, #1
 800394c:	701a      	strb	r2, [r3, #0]
        }
        break;
 800394e:	e00a      	b.n	8003966 <HAL_CRCEx_Polynomial_Set+0xb2>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003950:	2317      	movs	r3, #23
 8003952:	18fb      	adds	r3, r7, r3
 8003954:	2201      	movs	r2, #1
 8003956:	701a      	strb	r2, [r3, #0]
        break;
 8003958:	e006      	b.n	8003968 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	e004      	b.n	8003968 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	e002      	b.n	8003968 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	e000      	b.n	8003968 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8003966:	46c0      	nop			; (mov r8, r8)
    }
  }
  if (status == HAL_OK)
 8003968:	2317      	movs	r3, #23
 800396a:	18fb      	adds	r3, r7, r3
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10e      	bne.n	8003990 <HAL_CRCEx_Polynomial_Set+0xdc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	2218      	movs	r2, #24
 8003982:	4393      	bics	r3, r2
 8003984:	0019      	movs	r1, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	430a      	orrs	r2, r1
 800398e:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003990:	2317      	movs	r3, #23
 8003992:	18fb      	adds	r3, r7, r3
 8003994:	781b      	ldrb	r3, [r3, #0]
}
 8003996:	0018      	movs	r0, r3
 8003998:	46bd      	mov	sp, r7
 800399a:	b006      	add	sp, #24
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e091      	b.n	8003ad6 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	001a      	movs	r2, r3
 80039b8:	4b49      	ldr	r3, [pc, #292]	; (8003ae0 <HAL_DMA_Init+0x140>)
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d810      	bhi.n	80039e0 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a48      	ldr	r2, [pc, #288]	; (8003ae4 <HAL_DMA_Init+0x144>)
 80039c4:	4694      	mov	ip, r2
 80039c6:	4463      	add	r3, ip
 80039c8:	2114      	movs	r1, #20
 80039ca:	0018      	movs	r0, r3
 80039cc:	f7fc fbb8 	bl	8000140 <__udivsi3>
 80039d0:	0003      	movs	r3, r0
 80039d2:	009a      	lsls	r2, r3, #2
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a43      	ldr	r2, [pc, #268]	; (8003ae8 <HAL_DMA_Init+0x148>)
 80039dc:	641a      	str	r2, [r3, #64]	; 0x40
 80039de:	e00f      	b.n	8003a00 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a41      	ldr	r2, [pc, #260]	; (8003aec <HAL_DMA_Init+0x14c>)
 80039e6:	4694      	mov	ip, r2
 80039e8:	4463      	add	r3, ip
 80039ea:	2114      	movs	r1, #20
 80039ec:	0018      	movs	r0, r3
 80039ee:	f7fc fba7 	bl	8000140 <__udivsi3>
 80039f2:	0003      	movs	r3, r0
 80039f4:	009a      	lsls	r2, r3, #2
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a3c      	ldr	r2, [pc, #240]	; (8003af0 <HAL_DMA_Init+0x150>)
 80039fe:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2225      	movs	r2, #37	; 0x25
 8003a04:	2102      	movs	r1, #2
 8003a06:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4938      	ldr	r1, [pc, #224]	; (8003af4 <HAL_DMA_Init+0x154>)
 8003a14:	400a      	ands	r2, r1
 8003a16:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6819      	ldr	r1, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	431a      	orrs	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	0018      	movs	r0, r3
 8003a52:	f000 f8c5 	bl	8003be0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	2380      	movs	r3, #128	; 0x80
 8003a5c:	01db      	lsls	r3, r3, #7
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d102      	bne.n	8003a68 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a70:	217f      	movs	r1, #127	; 0x7f
 8003a72:	400a      	ands	r2, r1
 8003a74:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a7e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d011      	beq.n	8003aac <HAL_DMA_Init+0x10c>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d80d      	bhi.n	8003aac <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	0018      	movs	r0, r3
 8003a94:	f000 f8ee 	bl	8003c74 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003aa8:	605a      	str	r2, [r3, #4]
 8003aaa:	e008      	b.n	8003abe <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2225      	movs	r2, #37	; 0x25
 8003ac8:	2101      	movs	r1, #1
 8003aca:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2224      	movs	r2, #36	; 0x24
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b002      	add	sp, #8
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	46c0      	nop			; (mov r8, r8)
 8003ae0:	40020407 	.word	0x40020407
 8003ae4:	bffdfff8 	.word	0xbffdfff8
 8003ae8:	40020000 	.word	0x40020000
 8003aec:	bffdfbf8 	.word	0xbffdfbf8
 8003af0:	40020400 	.word	0x40020400
 8003af4:	ffff800f 	.word	0xffff800f

08003af8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b00:	210f      	movs	r1, #15
 8003b02:	187b      	adds	r3, r7, r1
 8003b04:	2200      	movs	r2, #0
 8003b06:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2225      	movs	r2, #37	; 0x25
 8003b0c:	5c9b      	ldrb	r3, [r3, r2]
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d006      	beq.n	8003b22 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2204      	movs	r2, #4
 8003b18:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003b1a:	187b      	adds	r3, r7, r1
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	701a      	strb	r2, [r3, #0]
 8003b20:	e048      	b.n	8003bb4 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	210e      	movs	r1, #14
 8003b2e:	438a      	bics	r2, r1
 8003b30:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	438a      	bics	r2, r1
 8003b40:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b4c:	491d      	ldr	r1, [pc, #116]	; (8003bc4 <HAL_DMA_Abort_IT+0xcc>)
 8003b4e:	400a      	ands	r2, r1
 8003b50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b56:	221c      	movs	r2, #28
 8003b58:	401a      	ands	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	2101      	movs	r1, #1
 8003b60:	4091      	lsls	r1, r2
 8003b62:	000a      	movs	r2, r1
 8003b64:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b6e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00c      	beq.n	8003b92 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b82:	4910      	ldr	r1, [pc, #64]	; (8003bc4 <HAL_DMA_Abort_IT+0xcc>)
 8003b84:	400a      	ands	r2, r1
 8003b86:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b90:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2225      	movs	r2, #37	; 0x25
 8003b96:	2101      	movs	r1, #1
 8003b98:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2224      	movs	r2, #36	; 0x24
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d004      	beq.n	8003bb4 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	0010      	movs	r0, r2
 8003bb2:	4798      	blx	r3
    }
  }
  return status;
 8003bb4:	230f      	movs	r3, #15
 8003bb6:	18fb      	adds	r3, r7, r3
 8003bb8:	781b      	ldrb	r3, [r3, #0]
}
 8003bba:	0018      	movs	r0, r3
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	b004      	add	sp, #16
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	fffffeff 	.word	0xfffffeff

08003bc8 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2225      	movs	r2, #37	; 0x25
 8003bd4:	5c9b      	ldrb	r3, [r3, r2]
 8003bd6:	b2db      	uxtb	r3, r3
}
 8003bd8:	0018      	movs	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	b002      	add	sp, #8
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	001a      	movs	r2, r3
 8003bee:	4b1d      	ldr	r3, [pc, #116]	; (8003c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d814      	bhi.n	8003c1e <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf8:	089b      	lsrs	r3, r3, #2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4a1a      	ldr	r2, [pc, #104]	; (8003c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8003bfe:	189a      	adds	r2, r3, r2
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	001a      	movs	r2, r3
 8003c0a:	23ff      	movs	r3, #255	; 0xff
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	3b08      	subs	r3, #8
 8003c10:	2114      	movs	r1, #20
 8003c12:	0018      	movs	r0, r3
 8003c14:	f7fc fa94 	bl	8000140 <__udivsi3>
 8003c18:	0003      	movs	r3, r0
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	e014      	b.n	8003c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c22:	089b      	lsrs	r3, r3, #2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4a11      	ldr	r2, [pc, #68]	; (8003c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8003c28:	189a      	adds	r2, r3, r2
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	001a      	movs	r2, r3
 8003c34:	23ff      	movs	r3, #255	; 0xff
 8003c36:	4013      	ands	r3, r2
 8003c38:	3b08      	subs	r3, #8
 8003c3a:	2114      	movs	r1, #20
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	f7fc fa7f 	bl	8000140 <__udivsi3>
 8003c42:	0003      	movs	r3, r0
 8003c44:	3307      	adds	r3, #7
 8003c46:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a09      	ldr	r2, [pc, #36]	; (8003c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8003c4c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	221f      	movs	r2, #31
 8003c52:	4013      	ands	r3, r2
 8003c54:	2201      	movs	r2, #1
 8003c56:	409a      	lsls	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c5c:	46c0      	nop			; (mov r8, r8)
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	b004      	add	sp, #16
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40020407 	.word	0x40020407
 8003c68:	40020800 	.word	0x40020800
 8003c6c:	4002081c 	.word	0x4002081c
 8003c70:	40020880 	.word	0x40020880

08003c74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	227f      	movs	r2, #127	; 0x7f
 8003c82:	4013      	ands	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	4a0a      	ldr	r2, [pc, #40]	; (8003cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003c8a:	4694      	mov	ip, r2
 8003c8c:	4463      	add	r3, ip
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	001a      	movs	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a07      	ldr	r2, [pc, #28]	; (8003cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c9a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	2203      	movs	r2, #3
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	409a      	lsls	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003cac:	46c0      	nop			; (mov r8, r8)
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	b004      	add	sp, #16
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	1000823f 	.word	0x1000823f
 8003cb8:	40020940 	.word	0x40020940

08003cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cca:	e14d      	b.n	8003f68 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4091      	lsls	r1, r2
 8003cd6:	000a      	movs	r2, r1
 8003cd8:	4013      	ands	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d100      	bne.n	8003ce4 <HAL_GPIO_Init+0x28>
 8003ce2:	e13e      	b.n	8003f62 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2203      	movs	r2, #3
 8003cea:	4013      	ands	r3, r2
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d005      	beq.n	8003cfc <HAL_GPIO_Init+0x40>
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2203      	movs	r2, #3
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d130      	bne.n	8003d5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	2203      	movs	r2, #3
 8003d08:	409a      	lsls	r2, r3
 8003d0a:	0013      	movs	r3, r2
 8003d0c:	43da      	mvns	r2, r3
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4013      	ands	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	409a      	lsls	r2, r3
 8003d1e:	0013      	movs	r3, r2
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d32:	2201      	movs	r2, #1
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	409a      	lsls	r2, r3
 8003d38:	0013      	movs	r3, r2
 8003d3a:	43da      	mvns	r2, r3
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	091b      	lsrs	r3, r3, #4
 8003d48:	2201      	movs	r2, #1
 8003d4a:	401a      	ands	r2, r3
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	409a      	lsls	r2, r3
 8003d50:	0013      	movs	r3, r2
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2203      	movs	r2, #3
 8003d64:	4013      	ands	r3, r2
 8003d66:	2b03      	cmp	r3, #3
 8003d68:	d017      	beq.n	8003d9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	2203      	movs	r2, #3
 8003d76:	409a      	lsls	r2, r3
 8003d78:	0013      	movs	r3, r2
 8003d7a:	43da      	mvns	r2, r3
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	409a      	lsls	r2, r3
 8003d8c:	0013      	movs	r3, r2
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2203      	movs	r2, #3
 8003da0:	4013      	ands	r3, r2
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d123      	bne.n	8003dee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	08da      	lsrs	r2, r3, #3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3208      	adds	r2, #8
 8003dae:	0092      	lsls	r2, r2, #2
 8003db0:	58d3      	ldr	r3, [r2, r3]
 8003db2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	2207      	movs	r2, #7
 8003db8:	4013      	ands	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	220f      	movs	r2, #15
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	0013      	movs	r3, r2
 8003dc2:	43da      	mvns	r2, r3
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	691a      	ldr	r2, [r3, #16]
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2107      	movs	r1, #7
 8003dd2:	400b      	ands	r3, r1
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	0013      	movs	r3, r2
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	08da      	lsrs	r2, r3, #3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3208      	adds	r2, #8
 8003de8:	0092      	lsls	r2, r2, #2
 8003dea:	6939      	ldr	r1, [r7, #16]
 8003dec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	2203      	movs	r2, #3
 8003dfa:	409a      	lsls	r2, r3
 8003dfc:	0013      	movs	r3, r2
 8003dfe:	43da      	mvns	r2, r3
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	4013      	ands	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2203      	movs	r2, #3
 8003e0c:	401a      	ands	r2, r3
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	409a      	lsls	r2, r3
 8003e14:	0013      	movs	r3, r2
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	23c0      	movs	r3, #192	; 0xc0
 8003e28:	029b      	lsls	r3, r3, #10
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d100      	bne.n	8003e30 <HAL_GPIO_Init+0x174>
 8003e2e:	e098      	b.n	8003f62 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003e30:	4a53      	ldr	r2, [pc, #332]	; (8003f80 <HAL_GPIO_Init+0x2c4>)
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	089b      	lsrs	r3, r3, #2
 8003e36:	3318      	adds	r3, #24
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	589b      	ldr	r3, [r3, r2]
 8003e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2203      	movs	r2, #3
 8003e42:	4013      	ands	r3, r2
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	220f      	movs	r2, #15
 8003e48:	409a      	lsls	r2, r3
 8003e4a:	0013      	movs	r3, r2
 8003e4c:	43da      	mvns	r2, r3
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	4013      	ands	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	23a0      	movs	r3, #160	; 0xa0
 8003e58:	05db      	lsls	r3, r3, #23
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d019      	beq.n	8003e92 <HAL_GPIO_Init+0x1d6>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a48      	ldr	r2, [pc, #288]	; (8003f84 <HAL_GPIO_Init+0x2c8>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d013      	beq.n	8003e8e <HAL_GPIO_Init+0x1d2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a47      	ldr	r2, [pc, #284]	; (8003f88 <HAL_GPIO_Init+0x2cc>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d00d      	beq.n	8003e8a <HAL_GPIO_Init+0x1ce>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a46      	ldr	r2, [pc, #280]	; (8003f8c <HAL_GPIO_Init+0x2d0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d007      	beq.n	8003e86 <HAL_GPIO_Init+0x1ca>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a45      	ldr	r2, [pc, #276]	; (8003f90 <HAL_GPIO_Init+0x2d4>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d101      	bne.n	8003e82 <HAL_GPIO_Init+0x1c6>
 8003e7e:	2304      	movs	r3, #4
 8003e80:	e008      	b.n	8003e94 <HAL_GPIO_Init+0x1d8>
 8003e82:	2305      	movs	r3, #5
 8003e84:	e006      	b.n	8003e94 <HAL_GPIO_Init+0x1d8>
 8003e86:	2303      	movs	r3, #3
 8003e88:	e004      	b.n	8003e94 <HAL_GPIO_Init+0x1d8>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e002      	b.n	8003e94 <HAL_GPIO_Init+0x1d8>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <HAL_GPIO_Init+0x1d8>
 8003e92:	2300      	movs	r3, #0
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	2103      	movs	r1, #3
 8003e98:	400a      	ands	r2, r1
 8003e9a:	00d2      	lsls	r2, r2, #3
 8003e9c:	4093      	lsls	r3, r2
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003ea4:	4936      	ldr	r1, [pc, #216]	; (8003f80 <HAL_GPIO_Init+0x2c4>)
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	089b      	lsrs	r3, r3, #2
 8003eaa:	3318      	adds	r3, #24
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003eb2:	4b33      	ldr	r3, [pc, #204]	; (8003f80 <HAL_GPIO_Init+0x2c4>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	43da      	mvns	r2, r3
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	2380      	movs	r3, #128	; 0x80
 8003ec8:	035b      	lsls	r3, r3, #13
 8003eca:	4013      	ands	r3, r2
 8003ecc:	d003      	beq.n	8003ed6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ed6:	4b2a      	ldr	r3, [pc, #168]	; (8003f80 <HAL_GPIO_Init+0x2c4>)
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003edc:	4b28      	ldr	r3, [pc, #160]	; (8003f80 <HAL_GPIO_Init+0x2c4>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	43da      	mvns	r2, r3
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	2380      	movs	r3, #128	; 0x80
 8003ef2:	039b      	lsls	r3, r3, #14
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	d003      	beq.n	8003f00 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f00:	4b1f      	ldr	r3, [pc, #124]	; (8003f80 <HAL_GPIO_Init+0x2c4>)
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003f06:	4a1e      	ldr	r2, [pc, #120]	; (8003f80 <HAL_GPIO_Init+0x2c4>)
 8003f08:	2384      	movs	r3, #132	; 0x84
 8003f0a:	58d3      	ldr	r3, [r2, r3]
 8003f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	43da      	mvns	r2, r3
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	4013      	ands	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	2380      	movs	r3, #128	; 0x80
 8003f1e:	029b      	lsls	r3, r3, #10
 8003f20:	4013      	ands	r3, r2
 8003f22:	d003      	beq.n	8003f2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f2c:	4914      	ldr	r1, [pc, #80]	; (8003f80 <HAL_GPIO_Init+0x2c4>)
 8003f2e:	2284      	movs	r2, #132	; 0x84
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003f34:	4a12      	ldr	r2, [pc, #72]	; (8003f80 <HAL_GPIO_Init+0x2c4>)
 8003f36:	2380      	movs	r3, #128	; 0x80
 8003f38:	58d3      	ldr	r3, [r2, r3]
 8003f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	43da      	mvns	r2, r3
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	4013      	ands	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	2380      	movs	r3, #128	; 0x80
 8003f4c:	025b      	lsls	r3, r3, #9
 8003f4e:	4013      	ands	r3, r2
 8003f50:	d003      	beq.n	8003f5a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f5a:	4909      	ldr	r1, [pc, #36]	; (8003f80 <HAL_GPIO_Init+0x2c4>)
 8003f5c:	2280      	movs	r2, #128	; 0x80
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	3301      	adds	r3, #1
 8003f66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	40da      	lsrs	r2, r3
 8003f70:	1e13      	subs	r3, r2, #0
 8003f72:	d000      	beq.n	8003f76 <HAL_GPIO_Init+0x2ba>
 8003f74:	e6aa      	b.n	8003ccc <HAL_GPIO_Init+0x10>
  }
}
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	46c0      	nop			; (mov r8, r8)
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	b006      	add	sp, #24
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40021800 	.word	0x40021800
 8003f84:	50000400 	.word	0x50000400
 8003f88:	50000800 	.word	0x50000800
 8003f8c:	50000c00 	.word	0x50000c00
 8003f90:	50001000 	.word	0x50001000

08003f94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	000a      	movs	r2, r1
 8003f9e:	1cbb      	adds	r3, r7, #2
 8003fa0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	1cba      	adds	r2, r7, #2
 8003fa8:	8812      	ldrh	r2, [r2, #0]
 8003faa:	4013      	ands	r3, r2
 8003fac:	d004      	beq.n	8003fb8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003fae:	230f      	movs	r3, #15
 8003fb0:	18fb      	adds	r3, r7, r3
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	701a      	strb	r2, [r3, #0]
 8003fb6:	e003      	b.n	8003fc0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fb8:	230f      	movs	r3, #15
 8003fba:	18fb      	adds	r3, r7, r3
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003fc0:	230f      	movs	r3, #15
 8003fc2:	18fb      	adds	r3, r7, r3
 8003fc4:	781b      	ldrb	r3, [r3, #0]
}
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	b004      	add	sp, #16
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b082      	sub	sp, #8
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
 8003fd6:	0008      	movs	r0, r1
 8003fd8:	0011      	movs	r1, r2
 8003fda:	1cbb      	adds	r3, r7, #2
 8003fdc:	1c02      	adds	r2, r0, #0
 8003fde:	801a      	strh	r2, [r3, #0]
 8003fe0:	1c7b      	adds	r3, r7, #1
 8003fe2:	1c0a      	adds	r2, r1, #0
 8003fe4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fe6:	1c7b      	adds	r3, r7, #1
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d004      	beq.n	8003ff8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fee:	1cbb      	adds	r3, r7, #2
 8003ff0:	881a      	ldrh	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ff6:	e003      	b.n	8004000 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ff8:	1cbb      	adds	r3, r7, #2
 8003ffa:	881a      	ldrh	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004000:	46c0      	nop			; (mov r8, r8)
 8004002:	46bd      	mov	sp, r7
 8004004:	b002      	add	sp, #8
 8004006:	bd80      	pop	{r7, pc}

08004008 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	0002      	movs	r2, r0
 8004010:	1dbb      	adds	r3, r7, #6
 8004012:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004014:	4b10      	ldr	r3, [pc, #64]	; (8004058 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	1dba      	adds	r2, r7, #6
 800401a:	8812      	ldrh	r2, [r2, #0]
 800401c:	4013      	ands	r3, r2
 800401e:	d008      	beq.n	8004032 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004020:	4b0d      	ldr	r3, [pc, #52]	; (8004058 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004022:	1dba      	adds	r2, r7, #6
 8004024:	8812      	ldrh	r2, [r2, #0]
 8004026:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004028:	1dbb      	adds	r3, r7, #6
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	0018      	movs	r0, r3
 800402e:	f7fd ffbf 	bl	8001fb0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004032:	4b09      	ldr	r3, [pc, #36]	; (8004058 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	1dba      	adds	r2, r7, #6
 8004038:	8812      	ldrh	r2, [r2, #0]
 800403a:	4013      	ands	r3, r2
 800403c:	d008      	beq.n	8004050 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800403e:	4b06      	ldr	r3, [pc, #24]	; (8004058 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004040:	1dba      	adds	r2, r7, #6
 8004042:	8812      	ldrh	r2, [r2, #0]
 8004044:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004046:	1dbb      	adds	r3, r7, #6
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	0018      	movs	r0, r3
 800404c:	f7fd fffc 	bl	8002048 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004050:	46c0      	nop			; (mov r8, r8)
 8004052:	46bd      	mov	sp, r7
 8004054:	b002      	add	sp, #8
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40021800 	.word	0x40021800

0800405c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e08f      	b.n	800418e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2241      	movs	r2, #65	; 0x41
 8004072:	5c9b      	ldrb	r3, [r3, r2]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d107      	bne.n	800408a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2240      	movs	r2, #64	; 0x40
 800407e:	2100      	movs	r1, #0
 8004080:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	0018      	movs	r0, r3
 8004086:	f7fe fd29 	bl	8002adc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2241      	movs	r2, #65	; 0x41
 800408e:	2124      	movs	r1, #36	; 0x24
 8004090:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2101      	movs	r1, #1
 800409e:	438a      	bics	r2, r1
 80040a0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	493b      	ldr	r1, [pc, #236]	; (8004198 <HAL_I2C_Init+0x13c>)
 80040ac:	400a      	ands	r2, r1
 80040ae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689a      	ldr	r2, [r3, #8]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4938      	ldr	r1, [pc, #224]	; (800419c <HAL_I2C_Init+0x140>)
 80040bc:	400a      	ands	r2, r1
 80040be:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d108      	bne.n	80040da <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2180      	movs	r1, #128	; 0x80
 80040d2:	0209      	lsls	r1, r1, #8
 80040d4:	430a      	orrs	r2, r1
 80040d6:	609a      	str	r2, [r3, #8]
 80040d8:	e007      	b.n	80040ea <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2184      	movs	r1, #132	; 0x84
 80040e4:	0209      	lsls	r1, r1, #8
 80040e6:	430a      	orrs	r2, r1
 80040e8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d109      	bne.n	8004106 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2180      	movs	r1, #128	; 0x80
 80040fe:	0109      	lsls	r1, r1, #4
 8004100:	430a      	orrs	r2, r1
 8004102:	605a      	str	r2, [r3, #4]
 8004104:	e007      	b.n	8004116 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4923      	ldr	r1, [pc, #140]	; (80041a0 <HAL_I2C_Init+0x144>)
 8004112:	400a      	ands	r2, r1
 8004114:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4920      	ldr	r1, [pc, #128]	; (80041a4 <HAL_I2C_Init+0x148>)
 8004122:	430a      	orrs	r2, r1
 8004124:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	491a      	ldr	r1, [pc, #104]	; (800419c <HAL_I2C_Init+0x140>)
 8004132:	400a      	ands	r2, r1
 8004134:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691a      	ldr	r2, [r3, #16]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	431a      	orrs	r2, r3
 8004140:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	69d9      	ldr	r1, [r3, #28]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a1a      	ldr	r2, [r3, #32]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2101      	movs	r1, #1
 800416c:	430a      	orrs	r2, r1
 800416e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2241      	movs	r2, #65	; 0x41
 800417a:	2120      	movs	r1, #32
 800417c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2242      	movs	r2, #66	; 0x42
 8004188:	2100      	movs	r1, #0
 800418a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	0018      	movs	r0, r3
 8004190:	46bd      	mov	sp, r7
 8004192:	b002      	add	sp, #8
 8004194:	bd80      	pop	{r7, pc}
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	f0ffffff 	.word	0xf0ffffff
 800419c:	ffff7fff 	.word	0xffff7fff
 80041a0:	fffff7ff 	.word	0xfffff7ff
 80041a4:	02008000 	.word	0x02008000

080041a8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041a8:	b590      	push	{r4, r7, lr}
 80041aa:	b089      	sub	sp, #36	; 0x24
 80041ac:	af02      	add	r7, sp, #8
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	000c      	movs	r4, r1
 80041b2:	0010      	movs	r0, r2
 80041b4:	0019      	movs	r1, r3
 80041b6:	230a      	movs	r3, #10
 80041b8:	18fb      	adds	r3, r7, r3
 80041ba:	1c22      	adds	r2, r4, #0
 80041bc:	801a      	strh	r2, [r3, #0]
 80041be:	2308      	movs	r3, #8
 80041c0:	18fb      	adds	r3, r7, r3
 80041c2:	1c02      	adds	r2, r0, #0
 80041c4:	801a      	strh	r2, [r3, #0]
 80041c6:	1dbb      	adds	r3, r7, #6
 80041c8:	1c0a      	adds	r2, r1, #0
 80041ca:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2241      	movs	r2, #65	; 0x41
 80041d0:	5c9b      	ldrb	r3, [r3, r2]
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d000      	beq.n	80041da <HAL_I2C_Mem_Write+0x32>
 80041d8:	e10c      	b.n	80043f4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d004      	beq.n	80041ea <HAL_I2C_Mem_Write+0x42>
 80041e0:	232c      	movs	r3, #44	; 0x2c
 80041e2:	18fb      	adds	r3, r7, r3
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d105      	bne.n	80041f6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2280      	movs	r2, #128	; 0x80
 80041ee:	0092      	lsls	r2, r2, #2
 80041f0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e0ff      	b.n	80043f6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2240      	movs	r2, #64	; 0x40
 80041fa:	5c9b      	ldrb	r3, [r3, r2]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d101      	bne.n	8004204 <HAL_I2C_Mem_Write+0x5c>
 8004200:	2302      	movs	r3, #2
 8004202:	e0f8      	b.n	80043f6 <HAL_I2C_Mem_Write+0x24e>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2240      	movs	r2, #64	; 0x40
 8004208:	2101      	movs	r1, #1
 800420a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800420c:	f7ff f998 	bl	8003540 <HAL_GetTick>
 8004210:	0003      	movs	r3, r0
 8004212:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004214:	2380      	movs	r3, #128	; 0x80
 8004216:	0219      	lsls	r1, r3, #8
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	2319      	movs	r3, #25
 8004220:	2201      	movs	r2, #1
 8004222:	f001 f8e9 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 8004226:	1e03      	subs	r3, r0, #0
 8004228:	d001      	beq.n	800422e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e0e3      	b.n	80043f6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2241      	movs	r2, #65	; 0x41
 8004232:	2121      	movs	r1, #33	; 0x21
 8004234:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2242      	movs	r2, #66	; 0x42
 800423a:	2140      	movs	r1, #64	; 0x40
 800423c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004248:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	222c      	movs	r2, #44	; 0x2c
 800424e:	18ba      	adds	r2, r7, r2
 8004250:	8812      	ldrh	r2, [r2, #0]
 8004252:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800425a:	1dbb      	adds	r3, r7, #6
 800425c:	881c      	ldrh	r4, [r3, #0]
 800425e:	2308      	movs	r3, #8
 8004260:	18fb      	adds	r3, r7, r3
 8004262:	881a      	ldrh	r2, [r3, #0]
 8004264:	230a      	movs	r3, #10
 8004266:	18fb      	adds	r3, r7, r3
 8004268:	8819      	ldrh	r1, [r3, #0]
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	9301      	str	r3, [sp, #4]
 8004270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	0023      	movs	r3, r4
 8004276:	f000 fba5 	bl	80049c4 <I2C_RequestMemoryWrite>
 800427a:	1e03      	subs	r3, r0, #0
 800427c:	d005      	beq.n	800428a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2240      	movs	r2, #64	; 0x40
 8004282:	2100      	movs	r1, #0
 8004284:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e0b5      	b.n	80043f6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428e:	b29b      	uxth	r3, r3
 8004290:	2bff      	cmp	r3, #255	; 0xff
 8004292:	d911      	bls.n	80042b8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	22ff      	movs	r2, #255	; 0xff
 8004298:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	2380      	movs	r3, #128	; 0x80
 80042a2:	045c      	lsls	r4, r3, #17
 80042a4:	230a      	movs	r3, #10
 80042a6:	18fb      	adds	r3, r7, r3
 80042a8:	8819      	ldrh	r1, [r3, #0]
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	2300      	movs	r3, #0
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	0023      	movs	r3, r4
 80042b2:	f001 fa83 	bl	80057bc <I2C_TransferConfig>
 80042b6:	e012      	b.n	80042de <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	2380      	movs	r3, #128	; 0x80
 80042ca:	049c      	lsls	r4, r3, #18
 80042cc:	230a      	movs	r3, #10
 80042ce:	18fb      	adds	r3, r7, r3
 80042d0:	8819      	ldrh	r1, [r3, #0]
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	2300      	movs	r3, #0
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	0023      	movs	r3, r4
 80042da:	f001 fa6f 	bl	80057bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	0018      	movs	r0, r3
 80042e6:	f001 f8df 	bl	80054a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80042ea:	1e03      	subs	r3, r0, #0
 80042ec:	d001      	beq.n	80042f2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e081      	b.n	80043f6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	781a      	ldrb	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	1c5a      	adds	r2, r3, #1
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430c:	b29b      	uxth	r3, r3
 800430e:	3b01      	subs	r3, #1
 8004310:	b29a      	uxth	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431a:	3b01      	subs	r3, #1
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004326:	b29b      	uxth	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	d03a      	beq.n	80043a2 <HAL_I2C_Mem_Write+0x1fa>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004330:	2b00      	cmp	r3, #0
 8004332:	d136      	bne.n	80043a2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	0013      	movs	r3, r2
 800433e:	2200      	movs	r2, #0
 8004340:	2180      	movs	r1, #128	; 0x80
 8004342:	f001 f859 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 8004346:	1e03      	subs	r3, r0, #0
 8004348:	d001      	beq.n	800434e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e053      	b.n	80043f6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004352:	b29b      	uxth	r3, r3
 8004354:	2bff      	cmp	r3, #255	; 0xff
 8004356:	d911      	bls.n	800437c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	22ff      	movs	r2, #255	; 0xff
 800435c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004362:	b2da      	uxtb	r2, r3
 8004364:	2380      	movs	r3, #128	; 0x80
 8004366:	045c      	lsls	r4, r3, #17
 8004368:	230a      	movs	r3, #10
 800436a:	18fb      	adds	r3, r7, r3
 800436c:	8819      	ldrh	r1, [r3, #0]
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	2300      	movs	r3, #0
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	0023      	movs	r3, r4
 8004376:	f001 fa21 	bl	80057bc <I2C_TransferConfig>
 800437a:	e012      	b.n	80043a2 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438a:	b2da      	uxtb	r2, r3
 800438c:	2380      	movs	r3, #128	; 0x80
 800438e:	049c      	lsls	r4, r3, #18
 8004390:	230a      	movs	r3, #10
 8004392:	18fb      	adds	r3, r7, r3
 8004394:	8819      	ldrh	r1, [r3, #0]
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	2300      	movs	r3, #0
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	0023      	movs	r3, r4
 800439e:	f001 fa0d 	bl	80057bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d198      	bne.n	80042de <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	0018      	movs	r0, r3
 80043b4:	f001 f8be 	bl	8005534 <I2C_WaitOnSTOPFlagUntilTimeout>
 80043b8:	1e03      	subs	r3, r0, #0
 80043ba:	d001      	beq.n	80043c0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e01a      	b.n	80043f6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2220      	movs	r2, #32
 80043c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	490b      	ldr	r1, [pc, #44]	; (8004400 <HAL_I2C_Mem_Write+0x258>)
 80043d4:	400a      	ands	r2, r1
 80043d6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2241      	movs	r2, #65	; 0x41
 80043dc:	2120      	movs	r1, #32
 80043de:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2242      	movs	r2, #66	; 0x42
 80043e4:	2100      	movs	r1, #0
 80043e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2240      	movs	r2, #64	; 0x40
 80043ec:	2100      	movs	r1, #0
 80043ee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	e000      	b.n	80043f6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80043f4:	2302      	movs	r3, #2
  }
}
 80043f6:	0018      	movs	r0, r3
 80043f8:	46bd      	mov	sp, r7
 80043fa:	b007      	add	sp, #28
 80043fc:	bd90      	pop	{r4, r7, pc}
 80043fe:	46c0      	nop			; (mov r8, r8)
 8004400:	fe00e800 	.word	0xfe00e800

08004404 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004404:	b590      	push	{r4, r7, lr}
 8004406:	b089      	sub	sp, #36	; 0x24
 8004408:	af02      	add	r7, sp, #8
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	000c      	movs	r4, r1
 800440e:	0010      	movs	r0, r2
 8004410:	0019      	movs	r1, r3
 8004412:	230a      	movs	r3, #10
 8004414:	18fb      	adds	r3, r7, r3
 8004416:	1c22      	adds	r2, r4, #0
 8004418:	801a      	strh	r2, [r3, #0]
 800441a:	2308      	movs	r3, #8
 800441c:	18fb      	adds	r3, r7, r3
 800441e:	1c02      	adds	r2, r0, #0
 8004420:	801a      	strh	r2, [r3, #0]
 8004422:	1dbb      	adds	r3, r7, #6
 8004424:	1c0a      	adds	r2, r1, #0
 8004426:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2241      	movs	r2, #65	; 0x41
 800442c:	5c9b      	ldrb	r3, [r3, r2]
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b20      	cmp	r3, #32
 8004432:	d000      	beq.n	8004436 <HAL_I2C_Mem_Read+0x32>
 8004434:	e110      	b.n	8004658 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004438:	2b00      	cmp	r3, #0
 800443a:	d004      	beq.n	8004446 <HAL_I2C_Mem_Read+0x42>
 800443c:	232c      	movs	r3, #44	; 0x2c
 800443e:	18fb      	adds	r3, r7, r3
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d105      	bne.n	8004452 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2280      	movs	r2, #128	; 0x80
 800444a:	0092      	lsls	r2, r2, #2
 800444c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e103      	b.n	800465a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2240      	movs	r2, #64	; 0x40
 8004456:	5c9b      	ldrb	r3, [r3, r2]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_I2C_Mem_Read+0x5c>
 800445c:	2302      	movs	r3, #2
 800445e:	e0fc      	b.n	800465a <HAL_I2C_Mem_Read+0x256>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2240      	movs	r2, #64	; 0x40
 8004464:	2101      	movs	r1, #1
 8004466:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004468:	f7ff f86a 	bl	8003540 <HAL_GetTick>
 800446c:	0003      	movs	r3, r0
 800446e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004470:	2380      	movs	r3, #128	; 0x80
 8004472:	0219      	lsls	r1, r3, #8
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	2319      	movs	r3, #25
 800447c:	2201      	movs	r2, #1
 800447e:	f000 ffbb 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 8004482:	1e03      	subs	r3, r0, #0
 8004484:	d001      	beq.n	800448a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e0e7      	b.n	800465a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2241      	movs	r2, #65	; 0x41
 800448e:	2122      	movs	r1, #34	; 0x22
 8004490:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2242      	movs	r2, #66	; 0x42
 8004496:	2140      	movs	r1, #64	; 0x40
 8004498:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	222c      	movs	r2, #44	; 0x2c
 80044aa:	18ba      	adds	r2, r7, r2
 80044ac:	8812      	ldrh	r2, [r2, #0]
 80044ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044b6:	1dbb      	adds	r3, r7, #6
 80044b8:	881c      	ldrh	r4, [r3, #0]
 80044ba:	2308      	movs	r3, #8
 80044bc:	18fb      	adds	r3, r7, r3
 80044be:	881a      	ldrh	r2, [r3, #0]
 80044c0:	230a      	movs	r3, #10
 80044c2:	18fb      	adds	r3, r7, r3
 80044c4:	8819      	ldrh	r1, [r3, #0]
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	9301      	str	r3, [sp, #4]
 80044cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	0023      	movs	r3, r4
 80044d2:	f000 fadb 	bl	8004a8c <I2C_RequestMemoryRead>
 80044d6:	1e03      	subs	r3, r0, #0
 80044d8:	d005      	beq.n	80044e6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2240      	movs	r2, #64	; 0x40
 80044de:	2100      	movs	r1, #0
 80044e0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e0b9      	b.n	800465a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	2bff      	cmp	r3, #255	; 0xff
 80044ee:	d911      	bls.n	8004514 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	22ff      	movs	r2, #255	; 0xff
 80044f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	2380      	movs	r3, #128	; 0x80
 80044fe:	045c      	lsls	r4, r3, #17
 8004500:	230a      	movs	r3, #10
 8004502:	18fb      	adds	r3, r7, r3
 8004504:	8819      	ldrh	r1, [r3, #0]
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	4b56      	ldr	r3, [pc, #344]	; (8004664 <HAL_I2C_Mem_Read+0x260>)
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	0023      	movs	r3, r4
 800450e:	f001 f955 	bl	80057bc <I2C_TransferConfig>
 8004512:	e012      	b.n	800453a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004518:	b29a      	uxth	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004522:	b2da      	uxtb	r2, r3
 8004524:	2380      	movs	r3, #128	; 0x80
 8004526:	049c      	lsls	r4, r3, #18
 8004528:	230a      	movs	r3, #10
 800452a:	18fb      	adds	r3, r7, r3
 800452c:	8819      	ldrh	r1, [r3, #0]
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	4b4c      	ldr	r3, [pc, #304]	; (8004664 <HAL_I2C_Mem_Read+0x260>)
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	0023      	movs	r3, r4
 8004536:	f001 f941 	bl	80057bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800453a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	0013      	movs	r3, r2
 8004544:	2200      	movs	r2, #0
 8004546:	2104      	movs	r1, #4
 8004548:	f000 ff56 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 800454c:	1e03      	subs	r3, r0, #0
 800454e:	d001      	beq.n	8004554 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e082      	b.n	800465a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	1c5a      	adds	r2, r3, #1
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004570:	3b01      	subs	r3, #1
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457c:	b29b      	uxth	r3, r3
 800457e:	3b01      	subs	r3, #1
 8004580:	b29a      	uxth	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458a:	b29b      	uxth	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	d03a      	beq.n	8004606 <HAL_I2C_Mem_Read+0x202>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004594:	2b00      	cmp	r3, #0
 8004596:	d136      	bne.n	8004606 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	0013      	movs	r3, r2
 80045a2:	2200      	movs	r2, #0
 80045a4:	2180      	movs	r1, #128	; 0x80
 80045a6:	f000 ff27 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 80045aa:	1e03      	subs	r3, r0, #0
 80045ac:	d001      	beq.n	80045b2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e053      	b.n	800465a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	2bff      	cmp	r3, #255	; 0xff
 80045ba:	d911      	bls.n	80045e0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	22ff      	movs	r2, #255	; 0xff
 80045c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	2380      	movs	r3, #128	; 0x80
 80045ca:	045c      	lsls	r4, r3, #17
 80045cc:	230a      	movs	r3, #10
 80045ce:	18fb      	adds	r3, r7, r3
 80045d0:	8819      	ldrh	r1, [r3, #0]
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	2300      	movs	r3, #0
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	0023      	movs	r3, r4
 80045da:	f001 f8ef 	bl	80057bc <I2C_TransferConfig>
 80045de:	e012      	b.n	8004606 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	2380      	movs	r3, #128	; 0x80
 80045f2:	049c      	lsls	r4, r3, #18
 80045f4:	230a      	movs	r3, #10
 80045f6:	18fb      	adds	r3, r7, r3
 80045f8:	8819      	ldrh	r1, [r3, #0]
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	2300      	movs	r3, #0
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	0023      	movs	r3, r4
 8004602:	f001 f8db 	bl	80057bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460a:	b29b      	uxth	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	d194      	bne.n	800453a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	0018      	movs	r0, r3
 8004618:	f000 ff8c 	bl	8005534 <I2C_WaitOnSTOPFlagUntilTimeout>
 800461c:	1e03      	subs	r3, r0, #0
 800461e:	d001      	beq.n	8004624 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e01a      	b.n	800465a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2220      	movs	r2, #32
 800462a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	490c      	ldr	r1, [pc, #48]	; (8004668 <HAL_I2C_Mem_Read+0x264>)
 8004638:	400a      	ands	r2, r1
 800463a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2241      	movs	r2, #65	; 0x41
 8004640:	2120      	movs	r1, #32
 8004642:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2242      	movs	r2, #66	; 0x42
 8004648:	2100      	movs	r1, #0
 800464a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2240      	movs	r2, #64	; 0x40
 8004650:	2100      	movs	r1, #0
 8004652:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	e000      	b.n	800465a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004658:	2302      	movs	r3, #2
  }
}
 800465a:	0018      	movs	r0, r3
 800465c:	46bd      	mov	sp, r7
 800465e:	b007      	add	sp, #28
 8004660:	bd90      	pop	{r4, r7, pc}
 8004662:	46c0      	nop			; (mov r8, r8)
 8004664:	80002400 	.word	0x80002400
 8004668:	fe00e800 	.word	0xfe00e800

0800466c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004688:	2b00      	cmp	r3, #0
 800468a:	d005      	beq.n	8004698 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	68f9      	ldr	r1, [r7, #12]
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	4798      	blx	r3
  }
}
 8004698:	46c0      	nop			; (mov r8, r8)
 800469a:	46bd      	mov	sp, r7
 800469c:	b004      	add	sp, #16
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	2380      	movs	r3, #128	; 0x80
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	4013      	ands	r3, r2
 80046c0:	d00e      	beq.n	80046e0 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	2280      	movs	r2, #128	; 0x80
 80046c6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80046c8:	d00a      	beq.n	80046e0 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ce:	2201      	movs	r2, #1
 80046d0:	431a      	orrs	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2280      	movs	r2, #128	; 0x80
 80046dc:	0052      	lsls	r2, r2, #1
 80046de:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	2380      	movs	r3, #128	; 0x80
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	4013      	ands	r3, r2
 80046e8:	d00e      	beq.n	8004708 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	2280      	movs	r2, #128	; 0x80
 80046ee:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80046f0:	d00a      	beq.n	8004708 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f6:	2208      	movs	r2, #8
 80046f8:	431a      	orrs	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2280      	movs	r2, #128	; 0x80
 8004704:	00d2      	lsls	r2, r2, #3
 8004706:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	2380      	movs	r3, #128	; 0x80
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4013      	ands	r3, r2
 8004710:	d00e      	beq.n	8004730 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	2280      	movs	r2, #128	; 0x80
 8004716:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004718:	d00a      	beq.n	8004730 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471e:	2202      	movs	r2, #2
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2280      	movs	r2, #128	; 0x80
 800472c:	0092      	lsls	r2, r2, #2
 800472e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004734:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	220b      	movs	r2, #11
 800473a:	4013      	ands	r3, r2
 800473c:	d005      	beq.n	800474a <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	0011      	movs	r1, r2
 8004744:	0018      	movs	r0, r3
 8004746:	f000 fceb 	bl	8005120 <I2C_ITError>
  }
}
 800474a:	46c0      	nop			; (mov r8, r8)
 800474c:	46bd      	mov	sp, r7
 800474e:	b006      	add	sp, #24
 8004750:	bd80      	pop	{r7, pc}

08004752 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b082      	sub	sp, #8
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	46bd      	mov	sp, r7
 800475e:	b002      	add	sp, #8
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	46bd      	mov	sp, r7
 800476e:	b002      	add	sp, #8
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b082      	sub	sp, #8
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
 800477a:	0008      	movs	r0, r1
 800477c:	0011      	movs	r1, r2
 800477e:	1cfb      	adds	r3, r7, #3
 8004780:	1c02      	adds	r2, r0, #0
 8004782:	701a      	strb	r2, [r3, #0]
 8004784:	003b      	movs	r3, r7
 8004786:	1c0a      	adds	r2, r1, #0
 8004788:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800478a:	46c0      	nop			; (mov r8, r8)
 800478c:	46bd      	mov	sp, r7
 800478e:	b002      	add	sp, #8
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b082      	sub	sp, #8
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	46bd      	mov	sp, r7
 800479e:	b002      	add	sp, #8
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b082      	sub	sp, #8
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80047aa:	46c0      	nop			; (mov r8, r8)
 80047ac:	46bd      	mov	sp, r7
 80047ae:	b002      	add	sp, #8
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b082      	sub	sp, #8
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80047ba:	46c0      	nop			; (mov r8, r8)
 80047bc:	46bd      	mov	sp, r7
 80047be:	b002      	add	sp, #8
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2240      	movs	r2, #64	; 0x40
 80047de:	5c9b      	ldrb	r3, [r3, r2]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d101      	bne.n	80047e8 <I2C_Slave_ISR_IT+0x24>
 80047e4:	2302      	movs	r3, #2
 80047e6:	e0e7      	b.n	80049b8 <I2C_Slave_ISR_IT+0x1f4>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2240      	movs	r2, #64	; 0x40
 80047ec:	2101      	movs	r1, #1
 80047ee:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	2220      	movs	r2, #32
 80047f4:	4013      	ands	r3, r2
 80047f6:	d00a      	beq.n	800480e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2220      	movs	r2, #32
 80047fc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80047fe:	d006      	beq.n	800480e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	0011      	movs	r1, r2
 8004806:	0018      	movs	r0, r3
 8004808:	f000 faaa 	bl	8004d60 <I2C_ITSlaveCplt>
 800480c:	e0cf      	b.n	80049ae <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	2210      	movs	r2, #16
 8004812:	4013      	ands	r3, r2
 8004814:	d052      	beq.n	80048bc <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2210      	movs	r2, #16
 800481a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800481c:	d04e      	beq.n	80048bc <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004822:	b29b      	uxth	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	d12d      	bne.n	8004884 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2241      	movs	r2, #65	; 0x41
 800482c:	5c9b      	ldrb	r3, [r3, r2]
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b28      	cmp	r3, #40	; 0x28
 8004832:	d10b      	bne.n	800484c <I2C_Slave_ISR_IT+0x88>
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	2380      	movs	r3, #128	; 0x80
 8004838:	049b      	lsls	r3, r3, #18
 800483a:	429a      	cmp	r2, r3
 800483c:	d106      	bne.n	800484c <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	0011      	movs	r1, r2
 8004844:	0018      	movs	r0, r3
 8004846:	f000 fc13 	bl	8005070 <I2C_ITListenCplt>
 800484a:	e036      	b.n	80048ba <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2241      	movs	r2, #65	; 0x41
 8004850:	5c9b      	ldrb	r3, [r3, r2]
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b29      	cmp	r3, #41	; 0x29
 8004856:	d110      	bne.n	800487a <I2C_Slave_ISR_IT+0xb6>
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	4a59      	ldr	r2, [pc, #356]	; (80049c0 <I2C_Slave_ISR_IT+0x1fc>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00c      	beq.n	800487a <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2210      	movs	r2, #16
 8004866:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	0018      	movs	r0, r3
 800486c:	f000 fd83 	bl	8005376 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	0018      	movs	r0, r3
 8004874:	f000 fa10 	bl	8004c98 <I2C_ITSlaveSeqCplt>
 8004878:	e01f      	b.n	80048ba <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2210      	movs	r2, #16
 8004880:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004882:	e091      	b.n	80049a8 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2210      	movs	r2, #16
 800488a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004890:	2204      	movs	r2, #4
 8004892:	431a      	orrs	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d005      	beq.n	80048aa <I2C_Slave_ISR_IT+0xe6>
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	2380      	movs	r3, #128	; 0x80
 80048a2:	045b      	lsls	r3, r3, #17
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d000      	beq.n	80048aa <I2C_Slave_ISR_IT+0xe6>
 80048a8:	e07e      	b.n	80049a8 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	0011      	movs	r1, r2
 80048b2:	0018      	movs	r0, r3
 80048b4:	f000 fc34 	bl	8005120 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80048b8:	e076      	b.n	80049a8 <I2C_Slave_ISR_IT+0x1e4>
 80048ba:	e075      	b.n	80049a8 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	2204      	movs	r2, #4
 80048c0:	4013      	ands	r3, r2
 80048c2:	d02f      	beq.n	8004924 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2204      	movs	r2, #4
 80048c8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80048ca:	d02b      	beq.n	8004924 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d018      	beq.n	8004908 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	b2d2      	uxtb	r2, r2
 80048e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	1c5a      	adds	r2, r3, #1
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fe:	b29b      	uxth	r3, r3
 8004900:	3b01      	subs	r3, #1
 8004902:	b29a      	uxth	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490c:	b29b      	uxth	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d14c      	bne.n	80049ac <I2C_Slave_ISR_IT+0x1e8>
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	4a2a      	ldr	r2, [pc, #168]	; (80049c0 <I2C_Slave_ISR_IT+0x1fc>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d048      	beq.n	80049ac <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	0018      	movs	r0, r3
 800491e:	f000 f9bb 	bl	8004c98 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004922:	e043      	b.n	80049ac <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	2208      	movs	r2, #8
 8004928:	4013      	ands	r3, r2
 800492a:	d00a      	beq.n	8004942 <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2208      	movs	r2, #8
 8004930:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004932:	d006      	beq.n	8004942 <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	0011      	movs	r1, r2
 800493a:	0018      	movs	r0, r3
 800493c:	f000 f908 	bl	8004b50 <I2C_ITAddrCplt>
 8004940:	e035      	b.n	80049ae <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	2202      	movs	r2, #2
 8004946:	4013      	ands	r3, r2
 8004948:	d031      	beq.n	80049ae <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2202      	movs	r2, #2
 800494e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004950:	d02d      	beq.n	80049ae <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004956:	b29b      	uxth	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	d018      	beq.n	800498e <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	781a      	ldrb	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004976:	b29b      	uxth	r3, r3
 8004978:	3b01      	subs	r3, #1
 800497a:	b29a      	uxth	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004984:	3b01      	subs	r3, #1
 8004986:	b29a      	uxth	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	851a      	strh	r2, [r3, #40]	; 0x28
 800498c:	e00f      	b.n	80049ae <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	2380      	movs	r3, #128	; 0x80
 8004992:	045b      	lsls	r3, r3, #17
 8004994:	429a      	cmp	r2, r3
 8004996:	d002      	beq.n	800499e <I2C_Slave_ISR_IT+0x1da>
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d107      	bne.n	80049ae <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	0018      	movs	r0, r3
 80049a2:	f000 f979 	bl	8004c98 <I2C_ITSlaveSeqCplt>
 80049a6:	e002      	b.n	80049ae <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 80049a8:	46c0      	nop			; (mov r8, r8)
 80049aa:	e000      	b.n	80049ae <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 80049ac:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2240      	movs	r2, #64	; 0x40
 80049b2:	2100      	movs	r1, #0
 80049b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	0018      	movs	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	b006      	add	sp, #24
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	ffff0000 	.word	0xffff0000

080049c4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80049c4:	b5b0      	push	{r4, r5, r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af02      	add	r7, sp, #8
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	000c      	movs	r4, r1
 80049ce:	0010      	movs	r0, r2
 80049d0:	0019      	movs	r1, r3
 80049d2:	250a      	movs	r5, #10
 80049d4:	197b      	adds	r3, r7, r5
 80049d6:	1c22      	adds	r2, r4, #0
 80049d8:	801a      	strh	r2, [r3, #0]
 80049da:	2308      	movs	r3, #8
 80049dc:	18fb      	adds	r3, r7, r3
 80049de:	1c02      	adds	r2, r0, #0
 80049e0:	801a      	strh	r2, [r3, #0]
 80049e2:	1dbb      	adds	r3, r7, #6
 80049e4:	1c0a      	adds	r2, r1, #0
 80049e6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80049e8:	1dbb      	adds	r3, r7, #6
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	2380      	movs	r3, #128	; 0x80
 80049f0:	045c      	lsls	r4, r3, #17
 80049f2:	197b      	adds	r3, r7, r5
 80049f4:	8819      	ldrh	r1, [r3, #0]
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	4b23      	ldr	r3, [pc, #140]	; (8004a88 <I2C_RequestMemoryWrite+0xc4>)
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	0023      	movs	r3, r4
 80049fe:	f000 fedd 	bl	80057bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a04:	6a39      	ldr	r1, [r7, #32]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	0018      	movs	r0, r3
 8004a0a:	f000 fd4d 	bl	80054a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a0e:	1e03      	subs	r3, r0, #0
 8004a10:	d001      	beq.n	8004a16 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e033      	b.n	8004a7e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a16:	1dbb      	adds	r3, r7, #6
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d107      	bne.n	8004a2e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a1e:	2308      	movs	r3, #8
 8004a20:	18fb      	adds	r3, r7, r3
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	629a      	str	r2, [r3, #40]	; 0x28
 8004a2c:	e019      	b.n	8004a62 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a2e:	2308      	movs	r3, #8
 8004a30:	18fb      	adds	r3, r7, r3
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	0a1b      	lsrs	r3, r3, #8
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a42:	6a39      	ldr	r1, [r7, #32]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	0018      	movs	r0, r3
 8004a48:	f000 fd2e 	bl	80054a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a4c:	1e03      	subs	r3, r0, #0
 8004a4e:	d001      	beq.n	8004a54 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e014      	b.n	8004a7e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a54:	2308      	movs	r3, #8
 8004a56:	18fb      	adds	r3, r7, r3
 8004a58:	881b      	ldrh	r3, [r3, #0]
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004a62:	6a3a      	ldr	r2, [r7, #32]
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	0013      	movs	r3, r2
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	2180      	movs	r1, #128	; 0x80
 8004a70:	f000 fcc2 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 8004a74:	1e03      	subs	r3, r0, #0
 8004a76:	d001      	beq.n	8004a7c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e000      	b.n	8004a7e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	0018      	movs	r0, r3
 8004a80:	46bd      	mov	sp, r7
 8004a82:	b004      	add	sp, #16
 8004a84:	bdb0      	pop	{r4, r5, r7, pc}
 8004a86:	46c0      	nop			; (mov r8, r8)
 8004a88:	80002000 	.word	0x80002000

08004a8c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004a8c:	b5b0      	push	{r4, r5, r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af02      	add	r7, sp, #8
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	000c      	movs	r4, r1
 8004a96:	0010      	movs	r0, r2
 8004a98:	0019      	movs	r1, r3
 8004a9a:	250a      	movs	r5, #10
 8004a9c:	197b      	adds	r3, r7, r5
 8004a9e:	1c22      	adds	r2, r4, #0
 8004aa0:	801a      	strh	r2, [r3, #0]
 8004aa2:	2308      	movs	r3, #8
 8004aa4:	18fb      	adds	r3, r7, r3
 8004aa6:	1c02      	adds	r2, r0, #0
 8004aa8:	801a      	strh	r2, [r3, #0]
 8004aaa:	1dbb      	adds	r3, r7, #6
 8004aac:	1c0a      	adds	r2, r1, #0
 8004aae:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004ab0:	1dbb      	adds	r3, r7, #6
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	197b      	adds	r3, r7, r5
 8004ab8:	8819      	ldrh	r1, [r3, #0]
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	4b23      	ldr	r3, [pc, #140]	; (8004b4c <I2C_RequestMemoryRead+0xc0>)
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	f000 fe7b 	bl	80057bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac8:	6a39      	ldr	r1, [r7, #32]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	0018      	movs	r0, r3
 8004ace:	f000 fceb 	bl	80054a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ad2:	1e03      	subs	r3, r0, #0
 8004ad4:	d001      	beq.n	8004ada <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e033      	b.n	8004b42 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ada:	1dbb      	adds	r3, r7, #6
 8004adc:	881b      	ldrh	r3, [r3, #0]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d107      	bne.n	8004af2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ae2:	2308      	movs	r3, #8
 8004ae4:	18fb      	adds	r3, r7, r3
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	629a      	str	r2, [r3, #40]	; 0x28
 8004af0:	e019      	b.n	8004b26 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004af2:	2308      	movs	r3, #8
 8004af4:	18fb      	adds	r3, r7, r3
 8004af6:	881b      	ldrh	r3, [r3, #0]
 8004af8:	0a1b      	lsrs	r3, r3, #8
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b06:	6a39      	ldr	r1, [r7, #32]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	0018      	movs	r0, r3
 8004b0c:	f000 fccc 	bl	80054a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b10:	1e03      	subs	r3, r0, #0
 8004b12:	d001      	beq.n	8004b18 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e014      	b.n	8004b42 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b18:	2308      	movs	r3, #8
 8004b1a:	18fb      	adds	r3, r7, r3
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004b26:	6a3a      	ldr	r2, [r7, #32]
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	0013      	movs	r3, r2
 8004b30:	2200      	movs	r2, #0
 8004b32:	2140      	movs	r1, #64	; 0x40
 8004b34:	f000 fc60 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 8004b38:	1e03      	subs	r3, r0, #0
 8004b3a:	d001      	beq.n	8004b40 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e000      	b.n	8004b42 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	0018      	movs	r0, r3
 8004b44:	46bd      	mov	sp, r7
 8004b46:	b004      	add	sp, #16
 8004b48:	bdb0      	pop	{r4, r5, r7, pc}
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	80002000 	.word	0x80002000

08004b50 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004b50:	b5b0      	push	{r4, r5, r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2241      	movs	r2, #65	; 0x41
 8004b5e:	5c9b      	ldrb	r3, [r3, r2]
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	001a      	movs	r2, r3
 8004b64:	2328      	movs	r3, #40	; 0x28
 8004b66:	4013      	ands	r3, r2
 8004b68:	2b28      	cmp	r3, #40	; 0x28
 8004b6a:	d000      	beq.n	8004b6e <I2C_ITAddrCplt+0x1e>
 8004b6c:	e088      	b.n	8004c80 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	0c1b      	lsrs	r3, r3, #16
 8004b76:	b2da      	uxtb	r2, r3
 8004b78:	250f      	movs	r5, #15
 8004b7a:	197b      	adds	r3, r7, r5
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	400a      	ands	r2, r1
 8004b80:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	0c1b      	lsrs	r3, r3, #16
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	200c      	movs	r0, #12
 8004b8e:	183b      	adds	r3, r7, r0
 8004b90:	21fe      	movs	r1, #254	; 0xfe
 8004b92:	400a      	ands	r2, r1
 8004b94:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	240a      	movs	r4, #10
 8004ba0:	193b      	adds	r3, r7, r4
 8004ba2:	0592      	lsls	r2, r2, #22
 8004ba4:	0d92      	lsrs	r2, r2, #22
 8004ba6:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	2308      	movs	r3, #8
 8004bb2:	18fb      	adds	r3, r7, r3
 8004bb4:	21fe      	movs	r1, #254	; 0xfe
 8004bb6:	400a      	ands	r2, r1
 8004bb8:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d148      	bne.n	8004c54 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004bc2:	0021      	movs	r1, r4
 8004bc4:	187b      	adds	r3, r7, r1
 8004bc6:	881b      	ldrh	r3, [r3, #0]
 8004bc8:	09db      	lsrs	r3, r3, #7
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	183b      	adds	r3, r7, r0
 8004bce:	881b      	ldrh	r3, [r3, #0]
 8004bd0:	4053      	eors	r3, r2
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	001a      	movs	r2, r3
 8004bd6:	2306      	movs	r3, #6
 8004bd8:	4013      	ands	r3, r2
 8004bda:	d120      	bne.n	8004c1e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8004bdc:	183b      	adds	r3, r7, r0
 8004bde:	187a      	adds	r2, r7, r1
 8004be0:	8812      	ldrh	r2, [r2, #0]
 8004be2:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004be8:	1c5a      	adds	r2, r3, #1
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d14c      	bne.n	8004c90 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2208      	movs	r2, #8
 8004c02:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2240      	movs	r2, #64	; 0x40
 8004c08:	2100      	movs	r1, #0
 8004c0a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004c0c:	183b      	adds	r3, r7, r0
 8004c0e:	881a      	ldrh	r2, [r3, #0]
 8004c10:	197b      	adds	r3, r7, r5
 8004c12:	7819      	ldrb	r1, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	0018      	movs	r0, r3
 8004c18:	f7ff fdab 	bl	8004772 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004c1c:	e038      	b.n	8004c90 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8004c1e:	240c      	movs	r4, #12
 8004c20:	193b      	adds	r3, r7, r4
 8004c22:	2208      	movs	r2, #8
 8004c24:	18ba      	adds	r2, r7, r2
 8004c26:	8812      	ldrh	r2, [r2, #0]
 8004c28:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004c2a:	2380      	movs	r3, #128	; 0x80
 8004c2c:	021a      	lsls	r2, r3, #8
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	0011      	movs	r1, r2
 8004c32:	0018      	movs	r0, r3
 8004c34:	f000 fdfc 	bl	8005830 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2240      	movs	r2, #64	; 0x40
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004c40:	193b      	adds	r3, r7, r4
 8004c42:	881a      	ldrh	r2, [r3, #0]
 8004c44:	230f      	movs	r3, #15
 8004c46:	18fb      	adds	r3, r7, r3
 8004c48:	7819      	ldrb	r1, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f7ff fd90 	bl	8004772 <HAL_I2C_AddrCallback>
}
 8004c52:	e01d      	b.n	8004c90 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004c54:	2380      	movs	r3, #128	; 0x80
 8004c56:	021a      	lsls	r2, r3, #8
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	0011      	movs	r1, r2
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	f000 fde7 	bl	8005830 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2240      	movs	r2, #64	; 0x40
 8004c66:	2100      	movs	r1, #0
 8004c68:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004c6a:	230c      	movs	r3, #12
 8004c6c:	18fb      	adds	r3, r7, r3
 8004c6e:	881a      	ldrh	r2, [r3, #0]
 8004c70:	230f      	movs	r3, #15
 8004c72:	18fb      	adds	r3, r7, r3
 8004c74:	7819      	ldrb	r1, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	0018      	movs	r0, r3
 8004c7a:	f7ff fd7a 	bl	8004772 <HAL_I2C_AddrCallback>
}
 8004c7e:	e007      	b.n	8004c90 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2208      	movs	r2, #8
 8004c86:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2240      	movs	r2, #64	; 0x40
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	5499      	strb	r1, [r3, r2]
}
 8004c90:	46c0      	nop			; (mov r8, r8)
 8004c92:	46bd      	mov	sp, r7
 8004c94:	b004      	add	sp, #16
 8004c96:	bdb0      	pop	{r4, r5, r7, pc}

08004c98 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2242      	movs	r2, #66	; 0x42
 8004cac:	2100      	movs	r1, #0
 8004cae:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	2380      	movs	r3, #128	; 0x80
 8004cb4:	01db      	lsls	r3, r3, #7
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	d008      	beq.n	8004ccc <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4924      	ldr	r1, [pc, #144]	; (8004d58 <I2C_ITSlaveSeqCplt+0xc0>)
 8004cc6:	400a      	ands	r2, r1
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	e00c      	b.n	8004ce6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	2380      	movs	r3, #128	; 0x80
 8004cd0:	021b      	lsls	r3, r3, #8
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	d007      	beq.n	8004ce6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	491e      	ldr	r1, [pc, #120]	; (8004d5c <I2C_ITSlaveSeqCplt+0xc4>)
 8004ce2:	400a      	ands	r2, r1
 8004ce4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2241      	movs	r2, #65	; 0x41
 8004cea:	5c9b      	ldrb	r3, [r3, r2]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b29      	cmp	r3, #41	; 0x29
 8004cf0:	d114      	bne.n	8004d1c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2241      	movs	r2, #65	; 0x41
 8004cf6:	2128      	movs	r1, #40	; 0x28
 8004cf8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2221      	movs	r2, #33	; 0x21
 8004cfe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2101      	movs	r1, #1
 8004d04:	0018      	movs	r0, r3
 8004d06:	f000 fd93 	bl	8005830 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2240      	movs	r2, #64	; 0x40
 8004d0e:	2100      	movs	r1, #0
 8004d10:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	0018      	movs	r0, r3
 8004d16:	f7ff fd1c 	bl	8004752 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004d1a:	e019      	b.n	8004d50 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2241      	movs	r2, #65	; 0x41
 8004d20:	5c9b      	ldrb	r3, [r3, r2]
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b2a      	cmp	r3, #42	; 0x2a
 8004d26:	d113      	bne.n	8004d50 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2241      	movs	r2, #65	; 0x41
 8004d2c:	2128      	movs	r1, #40	; 0x28
 8004d2e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2222      	movs	r2, #34	; 0x22
 8004d34:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2102      	movs	r1, #2
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	f000 fd78 	bl	8005830 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2240      	movs	r2, #64	; 0x40
 8004d44:	2100      	movs	r1, #0
 8004d46:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	0018      	movs	r0, r3
 8004d4c:	f7ff fd09 	bl	8004762 <HAL_I2C_SlaveRxCpltCallback>
}
 8004d50:	46c0      	nop			; (mov r8, r8)
 8004d52:	46bd      	mov	sp, r7
 8004d54:	b004      	add	sp, #16
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	ffffbfff 	.word	0xffffbfff
 8004d5c:	ffff7fff 	.word	0xffff7fff

08004d60 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004d7c:	200b      	movs	r0, #11
 8004d7e:	183b      	adds	r3, r7, r0
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	2141      	movs	r1, #65	; 0x41
 8004d84:	5c52      	ldrb	r2, [r2, r1]
 8004d86:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004d90:	183b      	adds	r3, r7, r0
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	2b21      	cmp	r3, #33	; 0x21
 8004d96:	d003      	beq.n	8004da0 <I2C_ITSlaveCplt+0x40>
 8004d98:	183b      	adds	r3, r7, r0
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	2b29      	cmp	r3, #41	; 0x29
 8004d9e:	d109      	bne.n	8004db4 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004da0:	4aac      	ldr	r2, [pc, #688]	; (8005054 <I2C_ITSlaveCplt+0x2f4>)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	0011      	movs	r1, r2
 8004da6:	0018      	movs	r0, r3
 8004da8:	f000 fd42 	bl	8005830 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2221      	movs	r2, #33	; 0x21
 8004db0:	631a      	str	r2, [r3, #48]	; 0x30
 8004db2:	e020      	b.n	8004df6 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004db4:	220b      	movs	r2, #11
 8004db6:	18bb      	adds	r3, r7, r2
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	2b22      	cmp	r3, #34	; 0x22
 8004dbc:	d003      	beq.n	8004dc6 <I2C_ITSlaveCplt+0x66>
 8004dbe:	18bb      	adds	r3, r7, r2
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8004dc4:	d109      	bne.n	8004dda <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004dc6:	4aa4      	ldr	r2, [pc, #656]	; (8005058 <I2C_ITSlaveCplt+0x2f8>)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	0011      	movs	r1, r2
 8004dcc:	0018      	movs	r0, r3
 8004dce:	f000 fd2f 	bl	8005830 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2222      	movs	r2, #34	; 0x22
 8004dd6:	631a      	str	r2, [r3, #48]	; 0x30
 8004dd8:	e00d      	b.n	8004df6 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004dda:	230b      	movs	r3, #11
 8004ddc:	18fb      	adds	r3, r7, r3
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	2b28      	cmp	r3, #40	; 0x28
 8004de2:	d108      	bne.n	8004df6 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004de4:	4a9d      	ldr	r2, [pc, #628]	; (800505c <I2C_ITSlaveCplt+0x2fc>)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	0011      	movs	r1, r2
 8004dea:	0018      	movs	r0, r3
 8004dec:	f000 fd20 	bl	8005830 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2180      	movs	r1, #128	; 0x80
 8004e02:	0209      	lsls	r1, r1, #8
 8004e04:	430a      	orrs	r2, r1
 8004e06:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4993      	ldr	r1, [pc, #588]	; (8005060 <I2C_ITSlaveCplt+0x300>)
 8004e14:	400a      	ands	r2, r1
 8004e16:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	f000 faab 	bl	8005376 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	2380      	movs	r3, #128	; 0x80
 8004e24:	01db      	lsls	r3, r3, #7
 8004e26:	4013      	ands	r3, r2
 8004e28:	d013      	beq.n	8004e52 <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	498b      	ldr	r1, [pc, #556]	; (8005064 <I2C_ITSlaveCplt+0x304>)
 8004e36:	400a      	ands	r2, r1
 8004e38:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d01f      	beq.n	8004e82 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e50:	e017      	b.n	8004e82 <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	2380      	movs	r3, #128	; 0x80
 8004e56:	021b      	lsls	r3, r3, #8
 8004e58:	4013      	ands	r3, r2
 8004e5a:	d012      	beq.n	8004e82 <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4980      	ldr	r1, [pc, #512]	; (8005068 <I2C_ITSlaveCplt+0x308>)
 8004e68:	400a      	ands	r2, r1
 8004e6a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d006      	beq.n	8004e82 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	2204      	movs	r2, #4
 8004e86:	4013      	ands	r3, r2
 8004e88:	d020      	beq.n	8004ecc <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2204      	movs	r2, #4
 8004e8e:	4393      	bics	r3, r2
 8004e90:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00c      	beq.n	8004ecc <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d005      	beq.n	8004ee2 <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eda:	2204      	movs	r2, #4
 8004edc:	431a      	orrs	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2210      	movs	r2, #16
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	d04f      	beq.n	8004f8a <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	2210      	movs	r2, #16
 8004eee:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004ef0:	d04b      	beq.n	8004f8a <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d12d      	bne.n	8004f58 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2241      	movs	r2, #65	; 0x41
 8004f00:	5c9b      	ldrb	r3, [r3, r2]
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b28      	cmp	r3, #40	; 0x28
 8004f06:	d10b      	bne.n	8004f20 <I2C_ITSlaveCplt+0x1c0>
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	2380      	movs	r3, #128	; 0x80
 8004f0c:	049b      	lsls	r3, r3, #18
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d106      	bne.n	8004f20 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	0011      	movs	r1, r2
 8004f18:	0018      	movs	r0, r3
 8004f1a:	f000 f8a9 	bl	8005070 <I2C_ITListenCplt>
 8004f1e:	e034      	b.n	8004f8a <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2241      	movs	r2, #65	; 0x41
 8004f24:	5c9b      	ldrb	r3, [r3, r2]
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b29      	cmp	r3, #41	; 0x29
 8004f2a:	d110      	bne.n	8004f4e <I2C_ITSlaveCplt+0x1ee>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4a4f      	ldr	r2, [pc, #316]	; (800506c <I2C_ITSlaveCplt+0x30c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d00c      	beq.n	8004f4e <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2210      	movs	r2, #16
 8004f3a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	0018      	movs	r0, r3
 8004f40:	f000 fa19 	bl	8005376 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	0018      	movs	r0, r3
 8004f48:	f7ff fea6 	bl	8004c98 <I2C_ITSlaveSeqCplt>
 8004f4c:	e01d      	b.n	8004f8a <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2210      	movs	r2, #16
 8004f54:	61da      	str	r2, [r3, #28]
 8004f56:	e018      	b.n	8004f8a <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2210      	movs	r2, #16
 8004f5e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f64:	2204      	movs	r2, #4
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d004      	beq.n	8004f7c <I2C_ITSlaveCplt+0x21c>
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	2380      	movs	r3, #128	; 0x80
 8004f76:	045b      	lsls	r3, r3, #17
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d106      	bne.n	8004f8a <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	0011      	movs	r1, r2
 8004f84:	0018      	movs	r0, r3
 8004f86:	f000 f8cb 	bl	8005120 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2242      	movs	r2, #66	; 0x42
 8004f8e:	2100      	movs	r1, #0
 8004f90:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d013      	beq.n	8004fc8 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	0011      	movs	r1, r2
 8004fa8:	0018      	movs	r0, r3
 8004faa:	f000 f8b9 	bl	8005120 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2241      	movs	r2, #65	; 0x41
 8004fb2:	5c9b      	ldrb	r3, [r3, r2]
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b28      	cmp	r3, #40	; 0x28
 8004fb8:	d147      	bne.n	800504a <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	0011      	movs	r1, r2
 8004fc0:	0018      	movs	r0, r3
 8004fc2:	f000 f855 	bl	8005070 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004fc6:	e040      	b.n	800504a <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fcc:	4a27      	ldr	r2, [pc, #156]	; (800506c <I2C_ITSlaveCplt+0x30c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d016      	beq.n	8005000 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	f7ff fe5f 	bl	8004c98 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a23      	ldr	r2, [pc, #140]	; (800506c <I2C_ITSlaveCplt+0x30c>)
 8004fde:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2241      	movs	r2, #65	; 0x41
 8004fe4:	2120      	movs	r1, #32
 8004fe6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2240      	movs	r2, #64	; 0x40
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	f7ff fbca 	bl	8004792 <HAL_I2C_ListenCpltCallback>
}
 8004ffe:	e024      	b.n	800504a <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2241      	movs	r2, #65	; 0x41
 8005004:	5c9b      	ldrb	r3, [r3, r2]
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b22      	cmp	r3, #34	; 0x22
 800500a:	d10f      	bne.n	800502c <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2241      	movs	r2, #65	; 0x41
 8005010:	2120      	movs	r1, #32
 8005012:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2240      	movs	r2, #64	; 0x40
 800501e:	2100      	movs	r1, #0
 8005020:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	0018      	movs	r0, r3
 8005026:	f7ff fb9c 	bl	8004762 <HAL_I2C_SlaveRxCpltCallback>
}
 800502a:	e00e      	b.n	800504a <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2241      	movs	r2, #65	; 0x41
 8005030:	2120      	movs	r1, #32
 8005032:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2240      	movs	r2, #64	; 0x40
 800503e:	2100      	movs	r1, #0
 8005040:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	0018      	movs	r0, r3
 8005046:	f7ff fb84 	bl	8004752 <HAL_I2C_SlaveTxCpltCallback>
}
 800504a:	46c0      	nop			; (mov r8, r8)
 800504c:	46bd      	mov	sp, r7
 800504e:	b006      	add	sp, #24
 8005050:	bd80      	pop	{r7, pc}
 8005052:	46c0      	nop			; (mov r8, r8)
 8005054:	00008001 	.word	0x00008001
 8005058:	00008002 	.word	0x00008002
 800505c:	00008003 	.word	0x00008003
 8005060:	fe00e800 	.word	0xfe00e800
 8005064:	ffffbfff 	.word	0xffffbfff
 8005068:	ffff7fff 	.word	0xffff7fff
 800506c:	ffff0000 	.word	0xffff0000

08005070 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a26      	ldr	r2, [pc, #152]	; (8005118 <I2C_ITListenCplt+0xa8>)
 800507e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2241      	movs	r2, #65	; 0x41
 800508a:	2120      	movs	r1, #32
 800508c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2242      	movs	r2, #66	; 0x42
 8005092:	2100      	movs	r1, #0
 8005094:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	2204      	movs	r2, #4
 80050a0:	4013      	ands	r3, r2
 80050a2:	d022      	beq.n	80050ea <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d012      	beq.n	80050ea <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e2:	2204      	movs	r2, #4
 80050e4:	431a      	orrs	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80050ea:	4a0c      	ldr	r2, [pc, #48]	; (800511c <I2C_ITListenCplt+0xac>)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	0011      	movs	r1, r2
 80050f0:	0018      	movs	r0, r3
 80050f2:	f000 fb9d 	bl	8005830 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2210      	movs	r2, #16
 80050fc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2240      	movs	r2, #64	; 0x40
 8005102:	2100      	movs	r1, #0
 8005104:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	0018      	movs	r0, r3
 800510a:	f7ff fb42 	bl	8004792 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800510e:	46c0      	nop			; (mov r8, r8)
 8005110:	46bd      	mov	sp, r7
 8005112:	b002      	add	sp, #8
 8005114:	bd80      	pop	{r7, pc}
 8005116:	46c0      	nop			; (mov r8, r8)
 8005118:	ffff0000 	.word	0xffff0000
 800511c:	00008003 	.word	0x00008003

08005120 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800512a:	200f      	movs	r0, #15
 800512c:	183b      	adds	r3, r7, r0
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	2141      	movs	r1, #65	; 0x41
 8005132:	5c52      	ldrb	r2, [r2, r1]
 8005134:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2242      	movs	r2, #66	; 0x42
 800513a:	2100      	movs	r1, #0
 800513c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a72      	ldr	r2, [pc, #456]	; (800530c <I2C_ITError+0x1ec>)
 8005142:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	431a      	orrs	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005156:	183b      	adds	r3, r7, r0
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	2b28      	cmp	r3, #40	; 0x28
 800515c:	d007      	beq.n	800516e <I2C_ITError+0x4e>
 800515e:	183b      	adds	r3, r7, r0
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	2b29      	cmp	r3, #41	; 0x29
 8005164:	d003      	beq.n	800516e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005166:	183b      	adds	r3, r7, r0
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	2b2a      	cmp	r3, #42	; 0x2a
 800516c:	d10c      	bne.n	8005188 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2103      	movs	r1, #3
 8005172:	0018      	movs	r0, r3
 8005174:	f000 fb5c 	bl	8005830 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2241      	movs	r2, #65	; 0x41
 800517c:	2128      	movs	r1, #40	; 0x28
 800517e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a63      	ldr	r2, [pc, #396]	; (8005310 <I2C_ITError+0x1f0>)
 8005184:	635a      	str	r2, [r3, #52]	; 0x34
 8005186:	e032      	b.n	80051ee <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005188:	4a62      	ldr	r2, [pc, #392]	; (8005314 <I2C_ITError+0x1f4>)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	0011      	movs	r1, r2
 800518e:	0018      	movs	r0, r3
 8005190:	f000 fb4e 	bl	8005830 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	0018      	movs	r0, r3
 8005198:	f000 f8ed 	bl	8005376 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2241      	movs	r2, #65	; 0x41
 80051a0:	5c9b      	ldrb	r3, [r3, r2]
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b60      	cmp	r3, #96	; 0x60
 80051a6:	d01f      	beq.n	80051e8 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2241      	movs	r2, #65	; 0x41
 80051ac:	2120      	movs	r1, #32
 80051ae:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	2220      	movs	r2, #32
 80051b8:	4013      	ands	r3, r2
 80051ba:	2b20      	cmp	r3, #32
 80051bc:	d114      	bne.n	80051e8 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	2210      	movs	r2, #16
 80051c6:	4013      	ands	r3, r2
 80051c8:	2b10      	cmp	r3, #16
 80051ca:	d109      	bne.n	80051e0 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2210      	movs	r2, #16
 80051d2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d8:	2204      	movs	r2, #4
 80051da:	431a      	orrs	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2220      	movs	r2, #32
 80051e6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d03b      	beq.n	8005274 <I2C_ITError+0x154>
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2b11      	cmp	r3, #17
 8005200:	d002      	beq.n	8005208 <I2C_ITError+0xe8>
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2b21      	cmp	r3, #33	; 0x21
 8005206:	d135      	bne.n	8005274 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	2380      	movs	r3, #128	; 0x80
 8005210:	01db      	lsls	r3, r3, #7
 8005212:	401a      	ands	r2, r3
 8005214:	2380      	movs	r3, #128	; 0x80
 8005216:	01db      	lsls	r3, r3, #7
 8005218:	429a      	cmp	r2, r3
 800521a:	d107      	bne.n	800522c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	493c      	ldr	r1, [pc, #240]	; (8005318 <I2C_ITError+0x1f8>)
 8005228:	400a      	ands	r2, r1
 800522a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005230:	0018      	movs	r0, r3
 8005232:	f7fe fcc9 	bl	8003bc8 <HAL_DMA_GetState>
 8005236:	0003      	movs	r3, r0
 8005238:	2b01      	cmp	r3, #1
 800523a:	d016      	beq.n	800526a <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005240:	4a36      	ldr	r2, [pc, #216]	; (800531c <I2C_ITError+0x1fc>)
 8005242:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2240      	movs	r2, #64	; 0x40
 8005248:	2100      	movs	r1, #0
 800524a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	0018      	movs	r0, r3
 8005252:	f7fe fc51 	bl	8003af8 <HAL_DMA_Abort_IT>
 8005256:	1e03      	subs	r3, r0, #0
 8005258:	d051      	beq.n	80052fe <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005264:	0018      	movs	r0, r3
 8005266:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005268:	e049      	b.n	80052fe <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	0018      	movs	r0, r3
 800526e:	f000 f859 	bl	8005324 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005272:	e044      	b.n	80052fe <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005278:	2b00      	cmp	r3, #0
 800527a:	d03b      	beq.n	80052f4 <I2C_ITError+0x1d4>
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2b12      	cmp	r3, #18
 8005280:	d002      	beq.n	8005288 <I2C_ITError+0x168>
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	2b22      	cmp	r3, #34	; 0x22
 8005286:	d135      	bne.n	80052f4 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	2380      	movs	r3, #128	; 0x80
 8005290:	021b      	lsls	r3, r3, #8
 8005292:	401a      	ands	r2, r3
 8005294:	2380      	movs	r3, #128	; 0x80
 8005296:	021b      	lsls	r3, r3, #8
 8005298:	429a      	cmp	r2, r3
 800529a:	d107      	bne.n	80052ac <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	491e      	ldr	r1, [pc, #120]	; (8005320 <I2C_ITError+0x200>)
 80052a8:	400a      	ands	r2, r1
 80052aa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b0:	0018      	movs	r0, r3
 80052b2:	f7fe fc89 	bl	8003bc8 <HAL_DMA_GetState>
 80052b6:	0003      	movs	r3, r0
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d016      	beq.n	80052ea <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c0:	4a16      	ldr	r2, [pc, #88]	; (800531c <I2C_ITError+0x1fc>)
 80052c2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2240      	movs	r2, #64	; 0x40
 80052c8:	2100      	movs	r1, #0
 80052ca:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d0:	0018      	movs	r0, r3
 80052d2:	f7fe fc11 	bl	8003af8 <HAL_DMA_Abort_IT>
 80052d6:	1e03      	subs	r3, r0, #0
 80052d8:	d013      	beq.n	8005302 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e4:	0018      	movs	r0, r3
 80052e6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052e8:	e00b      	b.n	8005302 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	0018      	movs	r0, r3
 80052ee:	f000 f819 	bl	8005324 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052f2:	e006      	b.n	8005302 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	0018      	movs	r0, r3
 80052f8:	f000 f814 	bl	8005324 <I2C_TreatErrorCallback>
  }
}
 80052fc:	e002      	b.n	8005304 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80052fe:	46c0      	nop			; (mov r8, r8)
 8005300:	e000      	b.n	8005304 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005302:	46c0      	nop			; (mov r8, r8)
}
 8005304:	46c0      	nop			; (mov r8, r8)
 8005306:	46bd      	mov	sp, r7
 8005308:	b004      	add	sp, #16
 800530a:	bd80      	pop	{r7, pc}
 800530c:	ffff0000 	.word	0xffff0000
 8005310:	080047c5 	.word	0x080047c5
 8005314:	00008003 	.word	0x00008003
 8005318:	ffffbfff 	.word	0xffffbfff
 800531c:	080053bb 	.word	0x080053bb
 8005320:	ffff7fff 	.word	0xffff7fff

08005324 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2241      	movs	r2, #65	; 0x41
 8005330:	5c9b      	ldrb	r3, [r3, r2]
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b60      	cmp	r3, #96	; 0x60
 8005336:	d10f      	bne.n	8005358 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2241      	movs	r2, #65	; 0x41
 800533c:	2120      	movs	r1, #32
 800533e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2240      	movs	r2, #64	; 0x40
 800534a:	2100      	movs	r1, #0
 800534c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	0018      	movs	r0, r3
 8005352:	f7ff fa2e 	bl	80047b2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005356:	e00a      	b.n	800536e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2240      	movs	r2, #64	; 0x40
 8005362:	2100      	movs	r1, #0
 8005364:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	0018      	movs	r0, r3
 800536a:	f7ff fa1a 	bl	80047a2 <HAL_I2C_ErrorCallback>
}
 800536e:	46c0      	nop			; (mov r8, r8)
 8005370:	46bd      	mov	sp, r7
 8005372:	b002      	add	sp, #8
 8005374:	bd80      	pop	{r7, pc}

08005376 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b082      	sub	sp, #8
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	2202      	movs	r2, #2
 8005386:	4013      	ands	r3, r2
 8005388:	2b02      	cmp	r3, #2
 800538a:	d103      	bne.n	8005394 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2200      	movs	r2, #0
 8005392:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	2201      	movs	r2, #1
 800539c:	4013      	ands	r3, r2
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d007      	beq.n	80053b2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	699a      	ldr	r2, [r3, #24]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2101      	movs	r1, #1
 80053ae:	430a      	orrs	r2, r1
 80053b0:	619a      	str	r2, [r3, #24]
  }
}
 80053b2:	46c0      	nop			; (mov r8, r8)
 80053b4:	46bd      	mov	sp, r7
 80053b6:	b002      	add	sp, #8
 80053b8:	bd80      	pop	{r7, pc}

080053ba <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b084      	sub	sp, #16
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d003      	beq.n	80053d8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d4:	2200      	movs	r2, #0
 80053d6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d003      	beq.n	80053e8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e4:	2200      	movs	r2, #0
 80053e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	0018      	movs	r0, r3
 80053ec:	f7ff ff9a 	bl	8005324 <I2C_TreatErrorCallback>
}
 80053f0:	46c0      	nop			; (mov r8, r8)
 80053f2:	46bd      	mov	sp, r7
 80053f4:	b004      	add	sp, #16
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	603b      	str	r3, [r7, #0]
 8005404:	1dfb      	adds	r3, r7, #7
 8005406:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005408:	e03a      	b.n	8005480 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800540a:	69ba      	ldr	r2, [r7, #24]
 800540c:	6839      	ldr	r1, [r7, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	0018      	movs	r0, r3
 8005412:	f000 f8d3 	bl	80055bc <I2C_IsErrorOccurred>
 8005416:	1e03      	subs	r3, r0, #0
 8005418:	d001      	beq.n	800541e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e040      	b.n	80054a0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	3301      	adds	r3, #1
 8005422:	d02d      	beq.n	8005480 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005424:	f7fe f88c 	bl	8003540 <HAL_GetTick>
 8005428:	0002      	movs	r2, r0
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	683a      	ldr	r2, [r7, #0]
 8005430:	429a      	cmp	r2, r3
 8005432:	d302      	bcc.n	800543a <I2C_WaitOnFlagUntilTimeout+0x42>
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d122      	bne.n	8005480 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	4013      	ands	r3, r2
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	425a      	negs	r2, r3
 800544a:	4153      	adcs	r3, r2
 800544c:	b2db      	uxtb	r3, r3
 800544e:	001a      	movs	r2, r3
 8005450:	1dfb      	adds	r3, r7, #7
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	429a      	cmp	r2, r3
 8005456:	d113      	bne.n	8005480 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545c:	2220      	movs	r2, #32
 800545e:	431a      	orrs	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2241      	movs	r2, #65	; 0x41
 8005468:	2120      	movs	r1, #32
 800546a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2242      	movs	r2, #66	; 0x42
 8005470:	2100      	movs	r1, #0
 8005472:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2240      	movs	r2, #64	; 0x40
 8005478:	2100      	movs	r1, #0
 800547a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e00f      	b.n	80054a0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	4013      	ands	r3, r2
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	425a      	negs	r2, r3
 8005490:	4153      	adcs	r3, r2
 8005492:	b2db      	uxtb	r3, r3
 8005494:	001a      	movs	r2, r3
 8005496:	1dfb      	adds	r3, r7, #7
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	d0b5      	beq.n	800540a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	0018      	movs	r0, r3
 80054a2:	46bd      	mov	sp, r7
 80054a4:	b004      	add	sp, #16
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054b4:	e032      	b.n	800551c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	68b9      	ldr	r1, [r7, #8]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	0018      	movs	r0, r3
 80054be:	f000 f87d 	bl	80055bc <I2C_IsErrorOccurred>
 80054c2:	1e03      	subs	r3, r0, #0
 80054c4:	d001      	beq.n	80054ca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e030      	b.n	800552c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	3301      	adds	r3, #1
 80054ce:	d025      	beq.n	800551c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054d0:	f7fe f836 	bl	8003540 <HAL_GetTick>
 80054d4:	0002      	movs	r2, r0
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d302      	bcc.n	80054e6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d11a      	bne.n	800551c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	2202      	movs	r2, #2
 80054ee:	4013      	ands	r3, r2
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d013      	beq.n	800551c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f8:	2220      	movs	r2, #32
 80054fa:	431a      	orrs	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2241      	movs	r2, #65	; 0x41
 8005504:	2120      	movs	r1, #32
 8005506:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2242      	movs	r2, #66	; 0x42
 800550c:	2100      	movs	r1, #0
 800550e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2240      	movs	r2, #64	; 0x40
 8005514:	2100      	movs	r1, #0
 8005516:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e007      	b.n	800552c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	2202      	movs	r2, #2
 8005524:	4013      	ands	r3, r2
 8005526:	2b02      	cmp	r3, #2
 8005528:	d1c5      	bne.n	80054b6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	0018      	movs	r0, r3
 800552e:	46bd      	mov	sp, r7
 8005530:	b004      	add	sp, #16
 8005532:	bd80      	pop	{r7, pc}

08005534 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005540:	e02f      	b.n	80055a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	68b9      	ldr	r1, [r7, #8]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	0018      	movs	r0, r3
 800554a:	f000 f837 	bl	80055bc <I2C_IsErrorOccurred>
 800554e:	1e03      	subs	r3, r0, #0
 8005550:	d001      	beq.n	8005556 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e02d      	b.n	80055b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005556:	f7fd fff3 	bl	8003540 <HAL_GetTick>
 800555a:	0002      	movs	r2, r0
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	429a      	cmp	r2, r3
 8005564:	d302      	bcc.n	800556c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d11a      	bne.n	80055a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	2220      	movs	r2, #32
 8005574:	4013      	ands	r3, r2
 8005576:	2b20      	cmp	r3, #32
 8005578:	d013      	beq.n	80055a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557e:	2220      	movs	r2, #32
 8005580:	431a      	orrs	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2241      	movs	r2, #65	; 0x41
 800558a:	2120      	movs	r1, #32
 800558c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2242      	movs	r2, #66	; 0x42
 8005592:	2100      	movs	r1, #0
 8005594:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2240      	movs	r2, #64	; 0x40
 800559a:	2100      	movs	r1, #0
 800559c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e007      	b.n	80055b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	2220      	movs	r2, #32
 80055aa:	4013      	ands	r3, r2
 80055ac:	2b20      	cmp	r3, #32
 80055ae:	d1c8      	bne.n	8005542 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	0018      	movs	r0, r3
 80055b4:	46bd      	mov	sp, r7
 80055b6:	b004      	add	sp, #16
 80055b8:	bd80      	pop	{r7, pc}
	...

080055bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055bc:	b590      	push	{r4, r7, lr}
 80055be:	b08b      	sub	sp, #44	; 0x2c
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055c8:	2327      	movs	r3, #39	; 0x27
 80055ca:	18fb      	adds	r3, r7, r3
 80055cc:	2200      	movs	r2, #0
 80055ce:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80055d8:	2300      	movs	r3, #0
 80055da:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	2210      	movs	r2, #16
 80055e4:	4013      	ands	r3, r2
 80055e6:	d100      	bne.n	80055ea <I2C_IsErrorOccurred+0x2e>
 80055e8:	e082      	b.n	80056f0 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2210      	movs	r2, #16
 80055f0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80055f2:	e060      	b.n	80056b6 <I2C_IsErrorOccurred+0xfa>
 80055f4:	2427      	movs	r4, #39	; 0x27
 80055f6:	193b      	adds	r3, r7, r4
 80055f8:	193a      	adds	r2, r7, r4
 80055fa:	7812      	ldrb	r2, [r2, #0]
 80055fc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	3301      	adds	r3, #1
 8005602:	d058      	beq.n	80056b6 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005604:	f7fd ff9c 	bl	8003540 <HAL_GetTick>
 8005608:	0002      	movs	r2, r0
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	429a      	cmp	r2, r3
 8005612:	d306      	bcc.n	8005622 <I2C_IsErrorOccurred+0x66>
 8005614:	193b      	adds	r3, r7, r4
 8005616:	193a      	adds	r2, r7, r4
 8005618:	7812      	ldrb	r2, [r2, #0]
 800561a:	701a      	strb	r2, [r3, #0]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d149      	bne.n	80056b6 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	2380      	movs	r3, #128	; 0x80
 800562a:	01db      	lsls	r3, r3, #7
 800562c:	4013      	ands	r3, r2
 800562e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005630:	2013      	movs	r0, #19
 8005632:	183b      	adds	r3, r7, r0
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	2142      	movs	r1, #66	; 0x42
 8005638:	5c52      	ldrb	r2, [r2, r1]
 800563a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699a      	ldr	r2, [r3, #24]
 8005642:	2380      	movs	r3, #128	; 0x80
 8005644:	021b      	lsls	r3, r3, #8
 8005646:	401a      	ands	r2, r3
 8005648:	2380      	movs	r3, #128	; 0x80
 800564a:	021b      	lsls	r3, r3, #8
 800564c:	429a      	cmp	r2, r3
 800564e:	d126      	bne.n	800569e <I2C_IsErrorOccurred+0xe2>
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	2380      	movs	r3, #128	; 0x80
 8005654:	01db      	lsls	r3, r3, #7
 8005656:	429a      	cmp	r2, r3
 8005658:	d021      	beq.n	800569e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800565a:	183b      	adds	r3, r7, r0
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	2b20      	cmp	r3, #32
 8005660:	d01d      	beq.n	800569e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2180      	movs	r1, #128	; 0x80
 800566e:	01c9      	lsls	r1, r1, #7
 8005670:	430a      	orrs	r2, r1
 8005672:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005674:	f7fd ff64 	bl	8003540 <HAL_GetTick>
 8005678:	0003      	movs	r3, r0
 800567a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800567c:	e00f      	b.n	800569e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800567e:	f7fd ff5f 	bl	8003540 <HAL_GetTick>
 8005682:	0002      	movs	r2, r0
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b19      	cmp	r3, #25
 800568a:	d908      	bls.n	800569e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	2220      	movs	r2, #32
 8005690:	4313      	orrs	r3, r2
 8005692:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005694:	2327      	movs	r3, #39	; 0x27
 8005696:	18fb      	adds	r3, r7, r3
 8005698:	2201      	movs	r2, #1
 800569a:	701a      	strb	r2, [r3, #0]

              break;
 800569c:	e00b      	b.n	80056b6 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	2220      	movs	r2, #32
 80056a6:	4013      	ands	r3, r2
 80056a8:	2127      	movs	r1, #39	; 0x27
 80056aa:	187a      	adds	r2, r7, r1
 80056ac:	1879      	adds	r1, r7, r1
 80056ae:	7809      	ldrb	r1, [r1, #0]
 80056b0:	7011      	strb	r1, [r2, #0]
 80056b2:	2b20      	cmp	r3, #32
 80056b4:	d1e3      	bne.n	800567e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	2220      	movs	r2, #32
 80056be:	4013      	ands	r3, r2
 80056c0:	2b20      	cmp	r3, #32
 80056c2:	d004      	beq.n	80056ce <I2C_IsErrorOccurred+0x112>
 80056c4:	2327      	movs	r3, #39	; 0x27
 80056c6:	18fb      	adds	r3, r7, r3
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d092      	beq.n	80055f4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80056ce:	2327      	movs	r3, #39	; 0x27
 80056d0:	18fb      	adds	r3, r7, r3
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d103      	bne.n	80056e0 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2220      	movs	r2, #32
 80056de:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	2204      	movs	r2, #4
 80056e4:	4313      	orrs	r3, r2
 80056e6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80056e8:	2327      	movs	r3, #39	; 0x27
 80056ea:	18fb      	adds	r3, r7, r3
 80056ec:	2201      	movs	r2, #1
 80056ee:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	2380      	movs	r3, #128	; 0x80
 80056fc:	005b      	lsls	r3, r3, #1
 80056fe:	4013      	ands	r3, r2
 8005700:	d00c      	beq.n	800571c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	2201      	movs	r2, #1
 8005706:	4313      	orrs	r3, r2
 8005708:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2280      	movs	r2, #128	; 0x80
 8005710:	0052      	lsls	r2, r2, #1
 8005712:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005714:	2327      	movs	r3, #39	; 0x27
 8005716:	18fb      	adds	r3, r7, r3
 8005718:	2201      	movs	r2, #1
 800571a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	2380      	movs	r3, #128	; 0x80
 8005720:	00db      	lsls	r3, r3, #3
 8005722:	4013      	ands	r3, r2
 8005724:	d00c      	beq.n	8005740 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	2208      	movs	r2, #8
 800572a:	4313      	orrs	r3, r2
 800572c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2280      	movs	r2, #128	; 0x80
 8005734:	00d2      	lsls	r2, r2, #3
 8005736:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005738:	2327      	movs	r3, #39	; 0x27
 800573a:	18fb      	adds	r3, r7, r3
 800573c:	2201      	movs	r2, #1
 800573e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	2380      	movs	r3, #128	; 0x80
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4013      	ands	r3, r2
 8005748:	d00c      	beq.n	8005764 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	2202      	movs	r2, #2
 800574e:	4313      	orrs	r3, r2
 8005750:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2280      	movs	r2, #128	; 0x80
 8005758:	0092      	lsls	r2, r2, #2
 800575a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800575c:	2327      	movs	r3, #39	; 0x27
 800575e:	18fb      	adds	r3, r7, r3
 8005760:	2201      	movs	r2, #1
 8005762:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005764:	2327      	movs	r3, #39	; 0x27
 8005766:	18fb      	adds	r3, r7, r3
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d01d      	beq.n	80057aa <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	0018      	movs	r0, r3
 8005772:	f7ff fe00 	bl	8005376 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	490d      	ldr	r1, [pc, #52]	; (80057b8 <I2C_IsErrorOccurred+0x1fc>)
 8005782:	400a      	ands	r2, r1
 8005784:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800578a:	6a3b      	ldr	r3, [r7, #32]
 800578c:	431a      	orrs	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2241      	movs	r2, #65	; 0x41
 8005796:	2120      	movs	r1, #32
 8005798:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2242      	movs	r2, #66	; 0x42
 800579e:	2100      	movs	r1, #0
 80057a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2240      	movs	r2, #64	; 0x40
 80057a6:	2100      	movs	r1, #0
 80057a8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80057aa:	2327      	movs	r3, #39	; 0x27
 80057ac:	18fb      	adds	r3, r7, r3
 80057ae:	781b      	ldrb	r3, [r3, #0]
}
 80057b0:	0018      	movs	r0, r3
 80057b2:	46bd      	mov	sp, r7
 80057b4:	b00b      	add	sp, #44	; 0x2c
 80057b6:	bd90      	pop	{r4, r7, pc}
 80057b8:	fe00e800 	.word	0xfe00e800

080057bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80057bc:	b590      	push	{r4, r7, lr}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	0008      	movs	r0, r1
 80057c6:	0011      	movs	r1, r2
 80057c8:	607b      	str	r3, [r7, #4]
 80057ca:	240a      	movs	r4, #10
 80057cc:	193b      	adds	r3, r7, r4
 80057ce:	1c02      	adds	r2, r0, #0
 80057d0:	801a      	strh	r2, [r3, #0]
 80057d2:	2009      	movs	r0, #9
 80057d4:	183b      	adds	r3, r7, r0
 80057d6:	1c0a      	adds	r2, r1, #0
 80057d8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057da:	193b      	adds	r3, r7, r4
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	059b      	lsls	r3, r3, #22
 80057e0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80057e2:	183b      	adds	r3, r7, r0
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	0419      	lsls	r1, r3, #16
 80057e8:	23ff      	movs	r3, #255	; 0xff
 80057ea:	041b      	lsls	r3, r3, #16
 80057ec:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057ee:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f6:	4313      	orrs	r3, r2
 80057f8:	005b      	lsls	r3, r3, #1
 80057fa:	085b      	lsrs	r3, r3, #1
 80057fc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005806:	0d51      	lsrs	r1, r2, #21
 8005808:	2280      	movs	r2, #128	; 0x80
 800580a:	00d2      	lsls	r2, r2, #3
 800580c:	400a      	ands	r2, r1
 800580e:	4907      	ldr	r1, [pc, #28]	; (800582c <I2C_TransferConfig+0x70>)
 8005810:	430a      	orrs	r2, r1
 8005812:	43d2      	mvns	r2, r2
 8005814:	401a      	ands	r2, r3
 8005816:	0011      	movs	r1, r2
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	430a      	orrs	r2, r1
 8005820:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005822:	46c0      	nop			; (mov r8, r8)
 8005824:	46bd      	mov	sp, r7
 8005826:	b007      	add	sp, #28
 8005828:	bd90      	pop	{r4, r7, pc}
 800582a:	46c0      	nop			; (mov r8, r8)
 800582c:	03ff63ff 	.word	0x03ff63ff

08005830 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	000a      	movs	r2, r1
 800583a:	1cbb      	adds	r3, r7, #2
 800583c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800583e:	2300      	movs	r3, #0
 8005840:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005842:	1cbb      	adds	r3, r7, #2
 8005844:	881b      	ldrh	r3, [r3, #0]
 8005846:	2201      	movs	r2, #1
 8005848:	4013      	ands	r3, r2
 800584a:	d010      	beq.n	800586e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2242      	movs	r2, #66	; 0x42
 8005850:	4313      	orrs	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2241      	movs	r2, #65	; 0x41
 8005858:	5c9b      	ldrb	r3, [r3, r2]
 800585a:	b2db      	uxtb	r3, r3
 800585c:	001a      	movs	r2, r3
 800585e:	2328      	movs	r3, #40	; 0x28
 8005860:	4013      	ands	r3, r2
 8005862:	2b28      	cmp	r3, #40	; 0x28
 8005864:	d003      	beq.n	800586e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	22b0      	movs	r2, #176	; 0xb0
 800586a:	4313      	orrs	r3, r2
 800586c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800586e:	1cbb      	adds	r3, r7, #2
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	2202      	movs	r2, #2
 8005874:	4013      	ands	r3, r2
 8005876:	d010      	beq.n	800589a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2244      	movs	r2, #68	; 0x44
 800587c:	4313      	orrs	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2241      	movs	r2, #65	; 0x41
 8005884:	5c9b      	ldrb	r3, [r3, r2]
 8005886:	b2db      	uxtb	r3, r3
 8005888:	001a      	movs	r2, r3
 800588a:	2328      	movs	r3, #40	; 0x28
 800588c:	4013      	ands	r3, r2
 800588e:	2b28      	cmp	r3, #40	; 0x28
 8005890:	d003      	beq.n	800589a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	22b0      	movs	r2, #176	; 0xb0
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800589a:	1cbb      	adds	r3, r7, #2
 800589c:	2200      	movs	r2, #0
 800589e:	5e9b      	ldrsh	r3, [r3, r2]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	da03      	bge.n	80058ac <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	22b8      	movs	r2, #184	; 0xb8
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80058ac:	1cbb      	adds	r3, r7, #2
 80058ae:	881b      	ldrh	r3, [r3, #0]
 80058b0:	2b10      	cmp	r3, #16
 80058b2:	d103      	bne.n	80058bc <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2290      	movs	r2, #144	; 0x90
 80058b8:	4313      	orrs	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80058bc:	1cbb      	adds	r3, r7, #2
 80058be:	881b      	ldrh	r3, [r3, #0]
 80058c0:	2b20      	cmp	r3, #32
 80058c2:	d103      	bne.n	80058cc <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2220      	movs	r2, #32
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80058cc:	1cbb      	adds	r3, r7, #2
 80058ce:	881b      	ldrh	r3, [r3, #0]
 80058d0:	2b40      	cmp	r3, #64	; 0x40
 80058d2:	d103      	bne.n	80058dc <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2240      	movs	r2, #64	; 0x40
 80058d8:	4313      	orrs	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	43d9      	mvns	r1, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	400a      	ands	r2, r1
 80058ec:	601a      	str	r2, [r3, #0]
}
 80058ee:	46c0      	nop			; (mov r8, r8)
 80058f0:	46bd      	mov	sp, r7
 80058f2:	b004      	add	sp, #16
 80058f4:	bd80      	pop	{r7, pc}
	...

080058f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2241      	movs	r2, #65	; 0x41
 8005906:	5c9b      	ldrb	r3, [r3, r2]
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b20      	cmp	r3, #32
 800590c:	d138      	bne.n	8005980 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2240      	movs	r2, #64	; 0x40
 8005912:	5c9b      	ldrb	r3, [r3, r2]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d101      	bne.n	800591c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005918:	2302      	movs	r3, #2
 800591a:	e032      	b.n	8005982 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2240      	movs	r2, #64	; 0x40
 8005920:	2101      	movs	r1, #1
 8005922:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2241      	movs	r2, #65	; 0x41
 8005928:	2124      	movs	r1, #36	; 0x24
 800592a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2101      	movs	r1, #1
 8005938:	438a      	bics	r2, r1
 800593a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4911      	ldr	r1, [pc, #68]	; (800598c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005948:	400a      	ands	r2, r1
 800594a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6819      	ldr	r1, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2101      	movs	r1, #1
 8005968:	430a      	orrs	r2, r1
 800596a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2241      	movs	r2, #65	; 0x41
 8005970:	2120      	movs	r1, #32
 8005972:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2240      	movs	r2, #64	; 0x40
 8005978:	2100      	movs	r1, #0
 800597a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800597c:	2300      	movs	r3, #0
 800597e:	e000      	b.n	8005982 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005980:	2302      	movs	r3, #2
  }
}
 8005982:	0018      	movs	r0, r3
 8005984:	46bd      	mov	sp, r7
 8005986:	b002      	add	sp, #8
 8005988:	bd80      	pop	{r7, pc}
 800598a:	46c0      	nop			; (mov r8, r8)
 800598c:	ffffefff 	.word	0xffffefff

08005990 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2241      	movs	r2, #65	; 0x41
 800599e:	5c9b      	ldrb	r3, [r3, r2]
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b20      	cmp	r3, #32
 80059a4:	d139      	bne.n	8005a1a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2240      	movs	r2, #64	; 0x40
 80059aa:	5c9b      	ldrb	r3, [r3, r2]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d101      	bne.n	80059b4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80059b0:	2302      	movs	r3, #2
 80059b2:	e033      	b.n	8005a1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2240      	movs	r2, #64	; 0x40
 80059b8:	2101      	movs	r1, #1
 80059ba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2241      	movs	r2, #65	; 0x41
 80059c0:	2124      	movs	r1, #36	; 0x24
 80059c2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2101      	movs	r1, #1
 80059d0:	438a      	bics	r2, r1
 80059d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4a11      	ldr	r2, [pc, #68]	; (8005a24 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80059e0:	4013      	ands	r3, r2
 80059e2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	021b      	lsls	r3, r3, #8
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2101      	movs	r1, #1
 8005a02:	430a      	orrs	r2, r1
 8005a04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2241      	movs	r2, #65	; 0x41
 8005a0a:	2120      	movs	r1, #32
 8005a0c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2240      	movs	r2, #64	; 0x40
 8005a12:	2100      	movs	r1, #0
 8005a14:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	e000      	b.n	8005a1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005a1a:	2302      	movs	r3, #2
  }
}
 8005a1c:	0018      	movs	r0, r3
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	b004      	add	sp, #16
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	fffff0ff 	.word	0xfffff0ff

08005a28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005a30:	4b19      	ldr	r3, [pc, #100]	; (8005a98 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a19      	ldr	r2, [pc, #100]	; (8005a9c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005a36:	4013      	ands	r3, r2
 8005a38:	0019      	movs	r1, r3
 8005a3a:	4b17      	ldr	r3, [pc, #92]	; (8005a98 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	2380      	movs	r3, #128	; 0x80
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d11f      	bne.n	8005a8c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005a4c:	4b14      	ldr	r3, [pc, #80]	; (8005aa0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	0013      	movs	r3, r2
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	189b      	adds	r3, r3, r2
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	4912      	ldr	r1, [pc, #72]	; (8005aa4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	f7fa fb70 	bl	8000140 <__udivsi3>
 8005a60:	0003      	movs	r3, r0
 8005a62:	3301      	adds	r3, #1
 8005a64:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005a66:	e008      	b.n	8005a7a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	3b01      	subs	r3, #1
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	e001      	b.n	8005a7a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e009      	b.n	8005a8e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005a7a:	4b07      	ldr	r3, [pc, #28]	; (8005a98 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005a7c:	695a      	ldr	r2, [r3, #20]
 8005a7e:	2380      	movs	r3, #128	; 0x80
 8005a80:	00db      	lsls	r3, r3, #3
 8005a82:	401a      	ands	r2, r3
 8005a84:	2380      	movs	r3, #128	; 0x80
 8005a86:	00db      	lsls	r3, r3, #3
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d0ed      	beq.n	8005a68 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	0018      	movs	r0, r3
 8005a90:	46bd      	mov	sp, r7
 8005a92:	b004      	add	sp, #16
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	40007000 	.word	0x40007000
 8005a9c:	fffff9ff 	.word	0xfffff9ff
 8005aa0:	20000010 	.word	0x20000010
 8005aa4:	000f4240 	.word	0x000f4240

08005aa8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005aac:	4b03      	ldr	r3, [pc, #12]	; (8005abc <LL_RCC_GetAPB1Prescaler+0x14>)
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	23e0      	movs	r3, #224	; 0xe0
 8005ab2:	01db      	lsls	r3, r3, #7
 8005ab4:	4013      	ands	r3, r2
}
 8005ab6:	0018      	movs	r0, r3
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	40021000 	.word	0x40021000

08005ac0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b088      	sub	sp, #32
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d102      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	f000 fb50 	bl	8006174 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	4013      	ands	r3, r2
 8005adc:	d100      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x20>
 8005ade:	e07c      	b.n	8005bda <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ae0:	4bc3      	ldr	r3, [pc, #780]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	2238      	movs	r2, #56	; 0x38
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005aea:	4bc1      	ldr	r3, [pc, #772]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	2203      	movs	r2, #3
 8005af0:	4013      	ands	r3, r2
 8005af2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	2b10      	cmp	r3, #16
 8005af8:	d102      	bne.n	8005b00 <HAL_RCC_OscConfig+0x40>
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	2b03      	cmp	r3, #3
 8005afe:	d002      	beq.n	8005b06 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	2b08      	cmp	r3, #8
 8005b04:	d10b      	bne.n	8005b1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b06:	4bba      	ldr	r3, [pc, #744]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	2380      	movs	r3, #128	; 0x80
 8005b0c:	029b      	lsls	r3, r3, #10
 8005b0e:	4013      	ands	r3, r2
 8005b10:	d062      	beq.n	8005bd8 <HAL_RCC_OscConfig+0x118>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d15e      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e32a      	b.n	8006174 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	2380      	movs	r3, #128	; 0x80
 8005b24:	025b      	lsls	r3, r3, #9
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d107      	bne.n	8005b3a <HAL_RCC_OscConfig+0x7a>
 8005b2a:	4bb1      	ldr	r3, [pc, #708]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	4bb0      	ldr	r3, [pc, #704]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005b30:	2180      	movs	r1, #128	; 0x80
 8005b32:	0249      	lsls	r1, r1, #9
 8005b34:	430a      	orrs	r2, r1
 8005b36:	601a      	str	r2, [r3, #0]
 8005b38:	e020      	b.n	8005b7c <HAL_RCC_OscConfig+0xbc>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	23a0      	movs	r3, #160	; 0xa0
 8005b40:	02db      	lsls	r3, r3, #11
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d10e      	bne.n	8005b64 <HAL_RCC_OscConfig+0xa4>
 8005b46:	4baa      	ldr	r3, [pc, #680]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	4ba9      	ldr	r3, [pc, #676]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005b4c:	2180      	movs	r1, #128	; 0x80
 8005b4e:	02c9      	lsls	r1, r1, #11
 8005b50:	430a      	orrs	r2, r1
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	4ba6      	ldr	r3, [pc, #664]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	4ba5      	ldr	r3, [pc, #660]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005b5a:	2180      	movs	r1, #128	; 0x80
 8005b5c:	0249      	lsls	r1, r1, #9
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	e00b      	b.n	8005b7c <HAL_RCC_OscConfig+0xbc>
 8005b64:	4ba2      	ldr	r3, [pc, #648]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	4ba1      	ldr	r3, [pc, #644]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005b6a:	49a2      	ldr	r1, [pc, #648]	; (8005df4 <HAL_RCC_OscConfig+0x334>)
 8005b6c:	400a      	ands	r2, r1
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	4b9f      	ldr	r3, [pc, #636]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	4b9e      	ldr	r3, [pc, #632]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005b76:	49a0      	ldr	r1, [pc, #640]	; (8005df8 <HAL_RCC_OscConfig+0x338>)
 8005b78:	400a      	ands	r2, r1
 8005b7a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d014      	beq.n	8005bae <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b84:	f7fd fcdc 	bl	8003540 <HAL_GetTick>
 8005b88:	0003      	movs	r3, r0
 8005b8a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b8c:	e008      	b.n	8005ba0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b8e:	f7fd fcd7 	bl	8003540 <HAL_GetTick>
 8005b92:	0002      	movs	r2, r0
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b64      	cmp	r3, #100	; 0x64
 8005b9a:	d901      	bls.n	8005ba0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e2e9      	b.n	8006174 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ba0:	4b93      	ldr	r3, [pc, #588]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	2380      	movs	r3, #128	; 0x80
 8005ba6:	029b      	lsls	r3, r3, #10
 8005ba8:	4013      	ands	r3, r2
 8005baa:	d0f0      	beq.n	8005b8e <HAL_RCC_OscConfig+0xce>
 8005bac:	e015      	b.n	8005bda <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bae:	f7fd fcc7 	bl	8003540 <HAL_GetTick>
 8005bb2:	0003      	movs	r3, r0
 8005bb4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005bb6:	e008      	b.n	8005bca <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bb8:	f7fd fcc2 	bl	8003540 <HAL_GetTick>
 8005bbc:	0002      	movs	r2, r0
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	2b64      	cmp	r3, #100	; 0x64
 8005bc4:	d901      	bls.n	8005bca <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e2d4      	b.n	8006174 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005bca:	4b89      	ldr	r3, [pc, #548]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	2380      	movs	r3, #128	; 0x80
 8005bd0:	029b      	lsls	r3, r3, #10
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	d1f0      	bne.n	8005bb8 <HAL_RCC_OscConfig+0xf8>
 8005bd6:	e000      	b.n	8005bda <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bd8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2202      	movs	r2, #2
 8005be0:	4013      	ands	r3, r2
 8005be2:	d100      	bne.n	8005be6 <HAL_RCC_OscConfig+0x126>
 8005be4:	e099      	b.n	8005d1a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005be6:	4b82      	ldr	r3, [pc, #520]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	2238      	movs	r2, #56	; 0x38
 8005bec:	4013      	ands	r3, r2
 8005bee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bf0:	4b7f      	ldr	r3, [pc, #508]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	2203      	movs	r2, #3
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	2b10      	cmp	r3, #16
 8005bfe:	d102      	bne.n	8005c06 <HAL_RCC_OscConfig+0x146>
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d002      	beq.n	8005c0c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d135      	bne.n	8005c78 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c0c:	4b78      	ldr	r3, [pc, #480]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	2380      	movs	r3, #128	; 0x80
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	4013      	ands	r3, r2
 8005c16:	d005      	beq.n	8005c24 <HAL_RCC_OscConfig+0x164>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e2a7      	b.n	8006174 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c24:	4b72      	ldr	r3, [pc, #456]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	4a74      	ldr	r2, [pc, #464]	; (8005dfc <HAL_RCC_OscConfig+0x33c>)
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	0019      	movs	r1, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	021a      	lsls	r2, r3, #8
 8005c34:	4b6e      	ldr	r3, [pc, #440]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005c36:	430a      	orrs	r2, r1
 8005c38:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d112      	bne.n	8005c66 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005c40:	4b6b      	ldr	r3, [pc, #428]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a6e      	ldr	r2, [pc, #440]	; (8005e00 <HAL_RCC_OscConfig+0x340>)
 8005c46:	4013      	ands	r3, r2
 8005c48:	0019      	movs	r1, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	691a      	ldr	r2, [r3, #16]
 8005c4e:	4b68      	ldr	r3, [pc, #416]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005c50:	430a      	orrs	r2, r1
 8005c52:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005c54:	4b66      	ldr	r3, [pc, #408]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	0adb      	lsrs	r3, r3, #11
 8005c5a:	2207      	movs	r2, #7
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	4a69      	ldr	r2, [pc, #420]	; (8005e04 <HAL_RCC_OscConfig+0x344>)
 8005c60:	40da      	lsrs	r2, r3
 8005c62:	4b69      	ldr	r3, [pc, #420]	; (8005e08 <HAL_RCC_OscConfig+0x348>)
 8005c64:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005c66:	4b69      	ldr	r3, [pc, #420]	; (8005e0c <HAL_RCC_OscConfig+0x34c>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	0018      	movs	r0, r3
 8005c6c:	f7fd fc0c 	bl	8003488 <HAL_InitTick>
 8005c70:	1e03      	subs	r3, r0, #0
 8005c72:	d051      	beq.n	8005d18 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e27d      	b.n	8006174 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d030      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005c80:	4b5b      	ldr	r3, [pc, #364]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a5e      	ldr	r2, [pc, #376]	; (8005e00 <HAL_RCC_OscConfig+0x340>)
 8005c86:	4013      	ands	r3, r2
 8005c88:	0019      	movs	r1, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	691a      	ldr	r2, [r3, #16]
 8005c8e:	4b58      	ldr	r3, [pc, #352]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005c90:	430a      	orrs	r2, r1
 8005c92:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005c94:	4b56      	ldr	r3, [pc, #344]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	4b55      	ldr	r3, [pc, #340]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005c9a:	2180      	movs	r1, #128	; 0x80
 8005c9c:	0049      	lsls	r1, r1, #1
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca2:	f7fd fc4d 	bl	8003540 <HAL_GetTick>
 8005ca6:	0003      	movs	r3, r0
 8005ca8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005caa:	e008      	b.n	8005cbe <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cac:	f7fd fc48 	bl	8003540 <HAL_GetTick>
 8005cb0:	0002      	movs	r2, r0
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e25a      	b.n	8006174 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cbe:	4b4c      	ldr	r3, [pc, #304]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	2380      	movs	r3, #128	; 0x80
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	d0f0      	beq.n	8005cac <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cca:	4b49      	ldr	r3, [pc, #292]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	4a4b      	ldr	r2, [pc, #300]	; (8005dfc <HAL_RCC_OscConfig+0x33c>)
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	0019      	movs	r1, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	021a      	lsls	r2, r3, #8
 8005cda:	4b45      	ldr	r3, [pc, #276]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	605a      	str	r2, [r3, #4]
 8005ce0:	e01b      	b.n	8005d1a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005ce2:	4b43      	ldr	r3, [pc, #268]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	4b42      	ldr	r3, [pc, #264]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005ce8:	4949      	ldr	r1, [pc, #292]	; (8005e10 <HAL_RCC_OscConfig+0x350>)
 8005cea:	400a      	ands	r2, r1
 8005cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cee:	f7fd fc27 	bl	8003540 <HAL_GetTick>
 8005cf2:	0003      	movs	r3, r0
 8005cf4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005cf6:	e008      	b.n	8005d0a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cf8:	f7fd fc22 	bl	8003540 <HAL_GetTick>
 8005cfc:	0002      	movs	r2, r0
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e234      	b.n	8006174 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d0a:	4b39      	ldr	r3, [pc, #228]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	2380      	movs	r3, #128	; 0x80
 8005d10:	00db      	lsls	r3, r3, #3
 8005d12:	4013      	ands	r3, r2
 8005d14:	d1f0      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x238>
 8005d16:	e000      	b.n	8005d1a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d18:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2208      	movs	r2, #8
 8005d20:	4013      	ands	r3, r2
 8005d22:	d047      	beq.n	8005db4 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005d24:	4b32      	ldr	r3, [pc, #200]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	2238      	movs	r2, #56	; 0x38
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	2b18      	cmp	r3, #24
 8005d2e:	d10a      	bne.n	8005d46 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005d30:	4b2f      	ldr	r3, [pc, #188]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d34:	2202      	movs	r2, #2
 8005d36:	4013      	ands	r3, r2
 8005d38:	d03c      	beq.n	8005db4 <HAL_RCC_OscConfig+0x2f4>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d138      	bne.n	8005db4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e216      	b.n	8006174 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d019      	beq.n	8005d82 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005d4e:	4b28      	ldr	r3, [pc, #160]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005d50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005d52:	4b27      	ldr	r3, [pc, #156]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005d54:	2101      	movs	r1, #1
 8005d56:	430a      	orrs	r2, r1
 8005d58:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d5a:	f7fd fbf1 	bl	8003540 <HAL_GetTick>
 8005d5e:	0003      	movs	r3, r0
 8005d60:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d62:	e008      	b.n	8005d76 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d64:	f7fd fbec 	bl	8003540 <HAL_GetTick>
 8005d68:	0002      	movs	r2, r0
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e1fe      	b.n	8006174 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d76:	4b1e      	ldr	r3, [pc, #120]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	d0f1      	beq.n	8005d64 <HAL_RCC_OscConfig+0x2a4>
 8005d80:	e018      	b.n	8005db4 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005d82:	4b1b      	ldr	r3, [pc, #108]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005d84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005d86:	4b1a      	ldr	r3, [pc, #104]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005d88:	2101      	movs	r1, #1
 8005d8a:	438a      	bics	r2, r1
 8005d8c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d8e:	f7fd fbd7 	bl	8003540 <HAL_GetTick>
 8005d92:	0003      	movs	r3, r0
 8005d94:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d96:	e008      	b.n	8005daa <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d98:	f7fd fbd2 	bl	8003540 <HAL_GetTick>
 8005d9c:	0002      	movs	r2, r0
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d901      	bls.n	8005daa <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e1e4      	b.n	8006174 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005daa:	4b11      	ldr	r3, [pc, #68]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dae:	2202      	movs	r2, #2
 8005db0:	4013      	ands	r3, r2
 8005db2:	d1f1      	bne.n	8005d98 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2204      	movs	r2, #4
 8005dba:	4013      	ands	r3, r2
 8005dbc:	d100      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x300>
 8005dbe:	e0c7      	b.n	8005f50 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dc0:	231f      	movs	r3, #31
 8005dc2:	18fb      	adds	r3, r7, r3
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005dc8:	4b09      	ldr	r3, [pc, #36]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	2238      	movs	r2, #56	; 0x38
 8005dce:	4013      	ands	r3, r2
 8005dd0:	2b20      	cmp	r3, #32
 8005dd2:	d11f      	bne.n	8005e14 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005dd4:	4b06      	ldr	r3, [pc, #24]	; (8005df0 <HAL_RCC_OscConfig+0x330>)
 8005dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dd8:	2202      	movs	r2, #2
 8005dda:	4013      	ands	r3, r2
 8005ddc:	d100      	bne.n	8005de0 <HAL_RCC_OscConfig+0x320>
 8005dde:	e0b7      	b.n	8005f50 <HAL_RCC_OscConfig+0x490>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d000      	beq.n	8005dea <HAL_RCC_OscConfig+0x32a>
 8005de8:	e0b2      	b.n	8005f50 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e1c2      	b.n	8006174 <HAL_RCC_OscConfig+0x6b4>
 8005dee:	46c0      	nop			; (mov r8, r8)
 8005df0:	40021000 	.word	0x40021000
 8005df4:	fffeffff 	.word	0xfffeffff
 8005df8:	fffbffff 	.word	0xfffbffff
 8005dfc:	ffff80ff 	.word	0xffff80ff
 8005e00:	ffffc7ff 	.word	0xffffc7ff
 8005e04:	00f42400 	.word	0x00f42400
 8005e08:	20000010 	.word	0x20000010
 8005e0c:	20000014 	.word	0x20000014
 8005e10:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e14:	4bb5      	ldr	r3, [pc, #724]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8005e16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e18:	2380      	movs	r3, #128	; 0x80
 8005e1a:	055b      	lsls	r3, r3, #21
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	d101      	bne.n	8005e24 <HAL_RCC_OscConfig+0x364>
 8005e20:	2301      	movs	r3, #1
 8005e22:	e000      	b.n	8005e26 <HAL_RCC_OscConfig+0x366>
 8005e24:	2300      	movs	r3, #0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d011      	beq.n	8005e4e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005e2a:	4bb0      	ldr	r3, [pc, #704]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8005e2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e2e:	4baf      	ldr	r3, [pc, #700]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8005e30:	2180      	movs	r1, #128	; 0x80
 8005e32:	0549      	lsls	r1, r1, #21
 8005e34:	430a      	orrs	r2, r1
 8005e36:	63da      	str	r2, [r3, #60]	; 0x3c
 8005e38:	4bac      	ldr	r3, [pc, #688]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8005e3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e3c:	2380      	movs	r3, #128	; 0x80
 8005e3e:	055b      	lsls	r3, r3, #21
 8005e40:	4013      	ands	r3, r2
 8005e42:	60fb      	str	r3, [r7, #12]
 8005e44:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005e46:	231f      	movs	r3, #31
 8005e48:	18fb      	adds	r3, r7, r3
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e4e:	4ba8      	ldr	r3, [pc, #672]	; (80060f0 <HAL_RCC_OscConfig+0x630>)
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	2380      	movs	r3, #128	; 0x80
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	4013      	ands	r3, r2
 8005e58:	d11a      	bne.n	8005e90 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e5a:	4ba5      	ldr	r3, [pc, #660]	; (80060f0 <HAL_RCC_OscConfig+0x630>)
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	4ba4      	ldr	r3, [pc, #656]	; (80060f0 <HAL_RCC_OscConfig+0x630>)
 8005e60:	2180      	movs	r1, #128	; 0x80
 8005e62:	0049      	lsls	r1, r1, #1
 8005e64:	430a      	orrs	r2, r1
 8005e66:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005e68:	f7fd fb6a 	bl	8003540 <HAL_GetTick>
 8005e6c:	0003      	movs	r3, r0
 8005e6e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e70:	e008      	b.n	8005e84 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e72:	f7fd fb65 	bl	8003540 <HAL_GetTick>
 8005e76:	0002      	movs	r2, r0
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d901      	bls.n	8005e84 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e177      	b.n	8006174 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e84:	4b9a      	ldr	r3, [pc, #616]	; (80060f0 <HAL_RCC_OscConfig+0x630>)
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	2380      	movs	r3, #128	; 0x80
 8005e8a:	005b      	lsls	r3, r3, #1
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	d0f0      	beq.n	8005e72 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d106      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x3e6>
 8005e98:	4b94      	ldr	r3, [pc, #592]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8005e9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005e9c:	4b93      	ldr	r3, [pc, #588]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8005e9e:	2101      	movs	r1, #1
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	65da      	str	r2, [r3, #92]	; 0x5c
 8005ea4:	e01c      	b.n	8005ee0 <HAL_RCC_OscConfig+0x420>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	2b05      	cmp	r3, #5
 8005eac:	d10c      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x408>
 8005eae:	4b8f      	ldr	r3, [pc, #572]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8005eb0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005eb2:	4b8e      	ldr	r3, [pc, #568]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8005eb4:	2104      	movs	r1, #4
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	65da      	str	r2, [r3, #92]	; 0x5c
 8005eba:	4b8c      	ldr	r3, [pc, #560]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8005ebc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ebe:	4b8b      	ldr	r3, [pc, #556]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	65da      	str	r2, [r3, #92]	; 0x5c
 8005ec6:	e00b      	b.n	8005ee0 <HAL_RCC_OscConfig+0x420>
 8005ec8:	4b88      	ldr	r3, [pc, #544]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8005eca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ecc:	4b87      	ldr	r3, [pc, #540]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8005ece:	2101      	movs	r1, #1
 8005ed0:	438a      	bics	r2, r1
 8005ed2:	65da      	str	r2, [r3, #92]	; 0x5c
 8005ed4:	4b85      	ldr	r3, [pc, #532]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8005ed6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ed8:	4b84      	ldr	r3, [pc, #528]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8005eda:	2104      	movs	r1, #4
 8005edc:	438a      	bics	r2, r1
 8005ede:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d014      	beq.n	8005f12 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee8:	f7fd fb2a 	bl	8003540 <HAL_GetTick>
 8005eec:	0003      	movs	r3, r0
 8005eee:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ef0:	e009      	b.n	8005f06 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ef2:	f7fd fb25 	bl	8003540 <HAL_GetTick>
 8005ef6:	0002      	movs	r2, r0
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	4a7d      	ldr	r2, [pc, #500]	; (80060f4 <HAL_RCC_OscConfig+0x634>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d901      	bls.n	8005f06 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e136      	b.n	8006174 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f06:	4b79      	ldr	r3, [pc, #484]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8005f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	d0f0      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x432>
 8005f10:	e013      	b.n	8005f3a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f12:	f7fd fb15 	bl	8003540 <HAL_GetTick>
 8005f16:	0003      	movs	r3, r0
 8005f18:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f1a:	e009      	b.n	8005f30 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f1c:	f7fd fb10 	bl	8003540 <HAL_GetTick>
 8005f20:	0002      	movs	r2, r0
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	4a73      	ldr	r2, [pc, #460]	; (80060f4 <HAL_RCC_OscConfig+0x634>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d901      	bls.n	8005f30 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e121      	b.n	8006174 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f30:	4b6e      	ldr	r3, [pc, #440]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8005f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f34:	2202      	movs	r2, #2
 8005f36:	4013      	ands	r3, r2
 8005f38:	d1f0      	bne.n	8005f1c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005f3a:	231f      	movs	r3, #31
 8005f3c:	18fb      	adds	r3, r7, r3
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d105      	bne.n	8005f50 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005f44:	4b69      	ldr	r3, [pc, #420]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8005f46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f48:	4b68      	ldr	r3, [pc, #416]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8005f4a:	496b      	ldr	r1, [pc, #428]	; (80060f8 <HAL_RCC_OscConfig+0x638>)
 8005f4c:	400a      	ands	r2, r1
 8005f4e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2220      	movs	r2, #32
 8005f56:	4013      	ands	r3, r2
 8005f58:	d039      	beq.n	8005fce <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d01b      	beq.n	8005f9a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f62:	4b62      	ldr	r3, [pc, #392]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	4b61      	ldr	r3, [pc, #388]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8005f68:	2180      	movs	r1, #128	; 0x80
 8005f6a:	03c9      	lsls	r1, r1, #15
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f70:	f7fd fae6 	bl	8003540 <HAL_GetTick>
 8005f74:	0003      	movs	r3, r0
 8005f76:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005f78:	e008      	b.n	8005f8c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f7a:	f7fd fae1 	bl	8003540 <HAL_GetTick>
 8005f7e:	0002      	movs	r2, r0
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d901      	bls.n	8005f8c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e0f3      	b.n	8006174 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005f8c:	4b57      	ldr	r3, [pc, #348]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	2380      	movs	r3, #128	; 0x80
 8005f92:	041b      	lsls	r3, r3, #16
 8005f94:	4013      	ands	r3, r2
 8005f96:	d0f0      	beq.n	8005f7a <HAL_RCC_OscConfig+0x4ba>
 8005f98:	e019      	b.n	8005fce <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f9a:	4b54      	ldr	r3, [pc, #336]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	4b53      	ldr	r3, [pc, #332]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8005fa0:	4956      	ldr	r1, [pc, #344]	; (80060fc <HAL_RCC_OscConfig+0x63c>)
 8005fa2:	400a      	ands	r2, r1
 8005fa4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fa6:	f7fd facb 	bl	8003540 <HAL_GetTick>
 8005faa:	0003      	movs	r3, r0
 8005fac:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005fae:	e008      	b.n	8005fc2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fb0:	f7fd fac6 	bl	8003540 <HAL_GetTick>
 8005fb4:	0002      	movs	r2, r0
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e0d8      	b.n	8006174 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005fc2:	4b4a      	ldr	r3, [pc, #296]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	2380      	movs	r3, #128	; 0x80
 8005fc8:	041b      	lsls	r3, r3, #16
 8005fca:	4013      	ands	r3, r2
 8005fcc:	d1f0      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d100      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x518>
 8005fd6:	e0cc      	b.n	8006172 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fd8:	4b44      	ldr	r3, [pc, #272]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	2238      	movs	r2, #56	; 0x38
 8005fde:	4013      	ands	r3, r2
 8005fe0:	2b10      	cmp	r3, #16
 8005fe2:	d100      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x526>
 8005fe4:	e07b      	b.n	80060de <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d156      	bne.n	800609c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fee:	4b3f      	ldr	r3, [pc, #252]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	4b3e      	ldr	r3, [pc, #248]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8005ff4:	4942      	ldr	r1, [pc, #264]	; (8006100 <HAL_RCC_OscConfig+0x640>)
 8005ff6:	400a      	ands	r2, r1
 8005ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ffa:	f7fd faa1 	bl	8003540 <HAL_GetTick>
 8005ffe:	0003      	movs	r3, r0
 8006000:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006002:	e008      	b.n	8006016 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006004:	f7fd fa9c 	bl	8003540 <HAL_GetTick>
 8006008:	0002      	movs	r2, r0
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b02      	cmp	r3, #2
 8006010:	d901      	bls.n	8006016 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e0ae      	b.n	8006174 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006016:	4b35      	ldr	r3, [pc, #212]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	2380      	movs	r3, #128	; 0x80
 800601c:	049b      	lsls	r3, r3, #18
 800601e:	4013      	ands	r3, r2
 8006020:	d1f0      	bne.n	8006004 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006022:	4b32      	ldr	r3, [pc, #200]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	4a37      	ldr	r2, [pc, #220]	; (8006104 <HAL_RCC_OscConfig+0x644>)
 8006028:	4013      	ands	r3, r2
 800602a:	0019      	movs	r1, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006034:	431a      	orrs	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603a:	021b      	lsls	r3, r3, #8
 800603c:	431a      	orrs	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006042:	431a      	orrs	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006048:	431a      	orrs	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604e:	431a      	orrs	r2, r3
 8006050:	4b26      	ldr	r3, [pc, #152]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8006052:	430a      	orrs	r2, r1
 8006054:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006056:	4b25      	ldr	r3, [pc, #148]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	4b24      	ldr	r3, [pc, #144]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 800605c:	2180      	movs	r1, #128	; 0x80
 800605e:	0449      	lsls	r1, r1, #17
 8006060:	430a      	orrs	r2, r1
 8006062:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006064:	4b21      	ldr	r3, [pc, #132]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	4b20      	ldr	r3, [pc, #128]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 800606a:	2180      	movs	r1, #128	; 0x80
 800606c:	0549      	lsls	r1, r1, #21
 800606e:	430a      	orrs	r2, r1
 8006070:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006072:	f7fd fa65 	bl	8003540 <HAL_GetTick>
 8006076:	0003      	movs	r3, r0
 8006078:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800607a:	e008      	b.n	800608e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800607c:	f7fd fa60 	bl	8003540 <HAL_GetTick>
 8006080:	0002      	movs	r2, r0
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	2b02      	cmp	r3, #2
 8006088:	d901      	bls.n	800608e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e072      	b.n	8006174 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800608e:	4b17      	ldr	r3, [pc, #92]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	2380      	movs	r3, #128	; 0x80
 8006094:	049b      	lsls	r3, r3, #18
 8006096:	4013      	ands	r3, r2
 8006098:	d0f0      	beq.n	800607c <HAL_RCC_OscConfig+0x5bc>
 800609a:	e06a      	b.n	8006172 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800609c:	4b13      	ldr	r3, [pc, #76]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	4b12      	ldr	r3, [pc, #72]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 80060a2:	4917      	ldr	r1, [pc, #92]	; (8006100 <HAL_RCC_OscConfig+0x640>)
 80060a4:	400a      	ands	r2, r1
 80060a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a8:	f7fd fa4a 	bl	8003540 <HAL_GetTick>
 80060ac:	0003      	movs	r3, r0
 80060ae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060b0:	e008      	b.n	80060c4 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060b2:	f7fd fa45 	bl	8003540 <HAL_GetTick>
 80060b6:	0002      	movs	r2, r0
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d901      	bls.n	80060c4 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e057      	b.n	8006174 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060c4:	4b09      	ldr	r3, [pc, #36]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	2380      	movs	r3, #128	; 0x80
 80060ca:	049b      	lsls	r3, r3, #18
 80060cc:	4013      	ands	r3, r2
 80060ce:	d1f0      	bne.n	80060b2 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80060d0:	4b06      	ldr	r3, [pc, #24]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	4b05      	ldr	r3, [pc, #20]	; (80060ec <HAL_RCC_OscConfig+0x62c>)
 80060d6:	490c      	ldr	r1, [pc, #48]	; (8006108 <HAL_RCC_OscConfig+0x648>)
 80060d8:	400a      	ands	r2, r1
 80060da:	60da      	str	r2, [r3, #12]
 80060dc:	e049      	b.n	8006172 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d112      	bne.n	800610c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e044      	b.n	8006174 <HAL_RCC_OscConfig+0x6b4>
 80060ea:	46c0      	nop			; (mov r8, r8)
 80060ec:	40021000 	.word	0x40021000
 80060f0:	40007000 	.word	0x40007000
 80060f4:	00001388 	.word	0x00001388
 80060f8:	efffffff 	.word	0xefffffff
 80060fc:	ffbfffff 	.word	0xffbfffff
 8006100:	feffffff 	.word	0xfeffffff
 8006104:	11c1808c 	.word	0x11c1808c
 8006108:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800610c:	4b1b      	ldr	r3, [pc, #108]	; (800617c <HAL_RCC_OscConfig+0x6bc>)
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2203      	movs	r2, #3
 8006116:	401a      	ands	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611c:	429a      	cmp	r2, r3
 800611e:	d126      	bne.n	800616e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	2270      	movs	r2, #112	; 0x70
 8006124:	401a      	ands	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800612a:	429a      	cmp	r2, r3
 800612c:	d11f      	bne.n	800616e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	23fe      	movs	r3, #254	; 0xfe
 8006132:	01db      	lsls	r3, r3, #7
 8006134:	401a      	ands	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800613c:	429a      	cmp	r2, r3
 800613e:	d116      	bne.n	800616e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	23f8      	movs	r3, #248	; 0xf8
 8006144:	039b      	lsls	r3, r3, #14
 8006146:	401a      	ands	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800614c:	429a      	cmp	r2, r3
 800614e:	d10e      	bne.n	800616e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	23e0      	movs	r3, #224	; 0xe0
 8006154:	051b      	lsls	r3, r3, #20
 8006156:	401a      	ands	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800615c:	429a      	cmp	r2, r3
 800615e:	d106      	bne.n	800616e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	0f5b      	lsrs	r3, r3, #29
 8006164:	075a      	lsls	r2, r3, #29
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800616a:	429a      	cmp	r2, r3
 800616c:	d001      	beq.n	8006172 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e000      	b.n	8006174 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	0018      	movs	r0, r3
 8006176:	46bd      	mov	sp, r7
 8006178:	b008      	add	sp, #32
 800617a:	bd80      	pop	{r7, pc}
 800617c:	40021000 	.word	0x40021000

08006180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e0e9      	b.n	8006368 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006194:	4b76      	ldr	r3, [pc, #472]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2207      	movs	r2, #7
 800619a:	4013      	ands	r3, r2
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d91e      	bls.n	80061e0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061a2:	4b73      	ldr	r3, [pc, #460]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2207      	movs	r2, #7
 80061a8:	4393      	bics	r3, r2
 80061aa:	0019      	movs	r1, r3
 80061ac:	4b70      	ldr	r3, [pc, #448]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80061b4:	f7fd f9c4 	bl	8003540 <HAL_GetTick>
 80061b8:	0003      	movs	r3, r0
 80061ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80061bc:	e009      	b.n	80061d2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061be:	f7fd f9bf 	bl	8003540 <HAL_GetTick>
 80061c2:	0002      	movs	r2, r0
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	4a6a      	ldr	r2, [pc, #424]	; (8006374 <HAL_RCC_ClockConfig+0x1f4>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e0ca      	b.n	8006368 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80061d2:	4b67      	ldr	r3, [pc, #412]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2207      	movs	r2, #7
 80061d8:	4013      	ands	r3, r2
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d1ee      	bne.n	80061be <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2202      	movs	r2, #2
 80061e6:	4013      	ands	r3, r2
 80061e8:	d015      	beq.n	8006216 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2204      	movs	r2, #4
 80061f0:	4013      	ands	r3, r2
 80061f2:	d006      	beq.n	8006202 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80061f4:	4b60      	ldr	r3, [pc, #384]	; (8006378 <HAL_RCC_ClockConfig+0x1f8>)
 80061f6:	689a      	ldr	r2, [r3, #8]
 80061f8:	4b5f      	ldr	r3, [pc, #380]	; (8006378 <HAL_RCC_ClockConfig+0x1f8>)
 80061fa:	21e0      	movs	r1, #224	; 0xe0
 80061fc:	01c9      	lsls	r1, r1, #7
 80061fe:	430a      	orrs	r2, r1
 8006200:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006202:	4b5d      	ldr	r3, [pc, #372]	; (8006378 <HAL_RCC_ClockConfig+0x1f8>)
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	4a5d      	ldr	r2, [pc, #372]	; (800637c <HAL_RCC_ClockConfig+0x1fc>)
 8006208:	4013      	ands	r3, r2
 800620a:	0019      	movs	r1, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	4b59      	ldr	r3, [pc, #356]	; (8006378 <HAL_RCC_ClockConfig+0x1f8>)
 8006212:	430a      	orrs	r2, r1
 8006214:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2201      	movs	r2, #1
 800621c:	4013      	ands	r3, r2
 800621e:	d057      	beq.n	80062d0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d107      	bne.n	8006238 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006228:	4b53      	ldr	r3, [pc, #332]	; (8006378 <HAL_RCC_ClockConfig+0x1f8>)
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	2380      	movs	r3, #128	; 0x80
 800622e:	029b      	lsls	r3, r3, #10
 8006230:	4013      	ands	r3, r2
 8006232:	d12b      	bne.n	800628c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e097      	b.n	8006368 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	2b02      	cmp	r3, #2
 800623e:	d107      	bne.n	8006250 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006240:	4b4d      	ldr	r3, [pc, #308]	; (8006378 <HAL_RCC_ClockConfig+0x1f8>)
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	2380      	movs	r3, #128	; 0x80
 8006246:	049b      	lsls	r3, r3, #18
 8006248:	4013      	ands	r3, r2
 800624a:	d11f      	bne.n	800628c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e08b      	b.n	8006368 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d107      	bne.n	8006268 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006258:	4b47      	ldr	r3, [pc, #284]	; (8006378 <HAL_RCC_ClockConfig+0x1f8>)
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	2380      	movs	r3, #128	; 0x80
 800625e:	00db      	lsls	r3, r3, #3
 8006260:	4013      	ands	r3, r2
 8006262:	d113      	bne.n	800628c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e07f      	b.n	8006368 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	2b03      	cmp	r3, #3
 800626e:	d106      	bne.n	800627e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006270:	4b41      	ldr	r3, [pc, #260]	; (8006378 <HAL_RCC_ClockConfig+0x1f8>)
 8006272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006274:	2202      	movs	r2, #2
 8006276:	4013      	ands	r3, r2
 8006278:	d108      	bne.n	800628c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e074      	b.n	8006368 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800627e:	4b3e      	ldr	r3, [pc, #248]	; (8006378 <HAL_RCC_ClockConfig+0x1f8>)
 8006280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006282:	2202      	movs	r2, #2
 8006284:	4013      	ands	r3, r2
 8006286:	d101      	bne.n	800628c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e06d      	b.n	8006368 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800628c:	4b3a      	ldr	r3, [pc, #232]	; (8006378 <HAL_RCC_ClockConfig+0x1f8>)
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	2207      	movs	r2, #7
 8006292:	4393      	bics	r3, r2
 8006294:	0019      	movs	r1, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	4b37      	ldr	r3, [pc, #220]	; (8006378 <HAL_RCC_ClockConfig+0x1f8>)
 800629c:	430a      	orrs	r2, r1
 800629e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062a0:	f7fd f94e 	bl	8003540 <HAL_GetTick>
 80062a4:	0003      	movs	r3, r0
 80062a6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062a8:	e009      	b.n	80062be <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062aa:	f7fd f949 	bl	8003540 <HAL_GetTick>
 80062ae:	0002      	movs	r2, r0
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	4a2f      	ldr	r2, [pc, #188]	; (8006374 <HAL_RCC_ClockConfig+0x1f4>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d901      	bls.n	80062be <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e054      	b.n	8006368 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062be:	4b2e      	ldr	r3, [pc, #184]	; (8006378 <HAL_RCC_ClockConfig+0x1f8>)
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	2238      	movs	r2, #56	; 0x38
 80062c4:	401a      	ands	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	00db      	lsls	r3, r3, #3
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d1ec      	bne.n	80062aa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80062d0:	4b27      	ldr	r3, [pc, #156]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2207      	movs	r2, #7
 80062d6:	4013      	ands	r3, r2
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d21e      	bcs.n	800631c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062de:	4b24      	ldr	r3, [pc, #144]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2207      	movs	r2, #7
 80062e4:	4393      	bics	r3, r2
 80062e6:	0019      	movs	r1, r3
 80062e8:	4b21      	ldr	r3, [pc, #132]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	430a      	orrs	r2, r1
 80062ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80062f0:	f7fd f926 	bl	8003540 <HAL_GetTick>
 80062f4:	0003      	movs	r3, r0
 80062f6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80062f8:	e009      	b.n	800630e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062fa:	f7fd f921 	bl	8003540 <HAL_GetTick>
 80062fe:	0002      	movs	r2, r0
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	4a1b      	ldr	r2, [pc, #108]	; (8006374 <HAL_RCC_ClockConfig+0x1f4>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d901      	bls.n	800630e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e02c      	b.n	8006368 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800630e:	4b18      	ldr	r3, [pc, #96]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2207      	movs	r2, #7
 8006314:	4013      	ands	r3, r2
 8006316:	683a      	ldr	r2, [r7, #0]
 8006318:	429a      	cmp	r2, r3
 800631a:	d1ee      	bne.n	80062fa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2204      	movs	r2, #4
 8006322:	4013      	ands	r3, r2
 8006324:	d009      	beq.n	800633a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006326:	4b14      	ldr	r3, [pc, #80]	; (8006378 <HAL_RCC_ClockConfig+0x1f8>)
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	4a15      	ldr	r2, [pc, #84]	; (8006380 <HAL_RCC_ClockConfig+0x200>)
 800632c:	4013      	ands	r3, r2
 800632e:	0019      	movs	r1, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68da      	ldr	r2, [r3, #12]
 8006334:	4b10      	ldr	r3, [pc, #64]	; (8006378 <HAL_RCC_ClockConfig+0x1f8>)
 8006336:	430a      	orrs	r2, r1
 8006338:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800633a:	f000 f829 	bl	8006390 <HAL_RCC_GetSysClockFreq>
 800633e:	0001      	movs	r1, r0
 8006340:	4b0d      	ldr	r3, [pc, #52]	; (8006378 <HAL_RCC_ClockConfig+0x1f8>)
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	0a1b      	lsrs	r3, r3, #8
 8006346:	220f      	movs	r2, #15
 8006348:	401a      	ands	r2, r3
 800634a:	4b0e      	ldr	r3, [pc, #56]	; (8006384 <HAL_RCC_ClockConfig+0x204>)
 800634c:	0092      	lsls	r2, r2, #2
 800634e:	58d3      	ldr	r3, [r2, r3]
 8006350:	221f      	movs	r2, #31
 8006352:	4013      	ands	r3, r2
 8006354:	000a      	movs	r2, r1
 8006356:	40da      	lsrs	r2, r3
 8006358:	4b0b      	ldr	r3, [pc, #44]	; (8006388 <HAL_RCC_ClockConfig+0x208>)
 800635a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800635c:	4b0b      	ldr	r3, [pc, #44]	; (800638c <HAL_RCC_ClockConfig+0x20c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	0018      	movs	r0, r3
 8006362:	f7fd f891 	bl	8003488 <HAL_InitTick>
 8006366:	0003      	movs	r3, r0
}
 8006368:	0018      	movs	r0, r3
 800636a:	46bd      	mov	sp, r7
 800636c:	b004      	add	sp, #16
 800636e:	bd80      	pop	{r7, pc}
 8006370:	40022000 	.word	0x40022000
 8006374:	00001388 	.word	0x00001388
 8006378:	40021000 	.word	0x40021000
 800637c:	fffff0ff 	.word	0xfffff0ff
 8006380:	ffff8fff 	.word	0xffff8fff
 8006384:	08015f0c 	.word	0x08015f0c
 8006388:	20000010 	.word	0x20000010
 800638c:	20000014 	.word	0x20000014

08006390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006396:	4b3c      	ldr	r3, [pc, #240]	; (8006488 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	2238      	movs	r2, #56	; 0x38
 800639c:	4013      	ands	r3, r2
 800639e:	d10f      	bne.n	80063c0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80063a0:	4b39      	ldr	r3, [pc, #228]	; (8006488 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	0adb      	lsrs	r3, r3, #11
 80063a6:	2207      	movs	r2, #7
 80063a8:	4013      	ands	r3, r2
 80063aa:	2201      	movs	r2, #1
 80063ac:	409a      	lsls	r2, r3
 80063ae:	0013      	movs	r3, r2
 80063b0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80063b2:	6839      	ldr	r1, [r7, #0]
 80063b4:	4835      	ldr	r0, [pc, #212]	; (800648c <HAL_RCC_GetSysClockFreq+0xfc>)
 80063b6:	f7f9 fec3 	bl	8000140 <__udivsi3>
 80063ba:	0003      	movs	r3, r0
 80063bc:	613b      	str	r3, [r7, #16]
 80063be:	e05d      	b.n	800647c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80063c0:	4b31      	ldr	r3, [pc, #196]	; (8006488 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	2238      	movs	r2, #56	; 0x38
 80063c6:	4013      	ands	r3, r2
 80063c8:	2b08      	cmp	r3, #8
 80063ca:	d102      	bne.n	80063d2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80063cc:	4b30      	ldr	r3, [pc, #192]	; (8006490 <HAL_RCC_GetSysClockFreq+0x100>)
 80063ce:	613b      	str	r3, [r7, #16]
 80063d0:	e054      	b.n	800647c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063d2:	4b2d      	ldr	r3, [pc, #180]	; (8006488 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	2238      	movs	r2, #56	; 0x38
 80063d8:	4013      	ands	r3, r2
 80063da:	2b10      	cmp	r3, #16
 80063dc:	d138      	bne.n	8006450 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80063de:	4b2a      	ldr	r3, [pc, #168]	; (8006488 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	2203      	movs	r2, #3
 80063e4:	4013      	ands	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80063e8:	4b27      	ldr	r3, [pc, #156]	; (8006488 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	091b      	lsrs	r3, r3, #4
 80063ee:	2207      	movs	r2, #7
 80063f0:	4013      	ands	r3, r2
 80063f2:	3301      	adds	r3, #1
 80063f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2b03      	cmp	r3, #3
 80063fa:	d10d      	bne.n	8006418 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80063fc:	68b9      	ldr	r1, [r7, #8]
 80063fe:	4824      	ldr	r0, [pc, #144]	; (8006490 <HAL_RCC_GetSysClockFreq+0x100>)
 8006400:	f7f9 fe9e 	bl	8000140 <__udivsi3>
 8006404:	0003      	movs	r3, r0
 8006406:	0019      	movs	r1, r3
 8006408:	4b1f      	ldr	r3, [pc, #124]	; (8006488 <HAL_RCC_GetSysClockFreq+0xf8>)
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	0a1b      	lsrs	r3, r3, #8
 800640e:	227f      	movs	r2, #127	; 0x7f
 8006410:	4013      	ands	r3, r2
 8006412:	434b      	muls	r3, r1
 8006414:	617b      	str	r3, [r7, #20]
        break;
 8006416:	e00d      	b.n	8006434 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006418:	68b9      	ldr	r1, [r7, #8]
 800641a:	481c      	ldr	r0, [pc, #112]	; (800648c <HAL_RCC_GetSysClockFreq+0xfc>)
 800641c:	f7f9 fe90 	bl	8000140 <__udivsi3>
 8006420:	0003      	movs	r3, r0
 8006422:	0019      	movs	r1, r3
 8006424:	4b18      	ldr	r3, [pc, #96]	; (8006488 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	0a1b      	lsrs	r3, r3, #8
 800642a:	227f      	movs	r2, #127	; 0x7f
 800642c:	4013      	ands	r3, r2
 800642e:	434b      	muls	r3, r1
 8006430:	617b      	str	r3, [r7, #20]
        break;
 8006432:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006434:	4b14      	ldr	r3, [pc, #80]	; (8006488 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	0f5b      	lsrs	r3, r3, #29
 800643a:	2207      	movs	r2, #7
 800643c:	4013      	ands	r3, r2
 800643e:	3301      	adds	r3, #1
 8006440:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006442:	6879      	ldr	r1, [r7, #4]
 8006444:	6978      	ldr	r0, [r7, #20]
 8006446:	f7f9 fe7b 	bl	8000140 <__udivsi3>
 800644a:	0003      	movs	r3, r0
 800644c:	613b      	str	r3, [r7, #16]
 800644e:	e015      	b.n	800647c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006450:	4b0d      	ldr	r3, [pc, #52]	; (8006488 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	2238      	movs	r2, #56	; 0x38
 8006456:	4013      	ands	r3, r2
 8006458:	2b20      	cmp	r3, #32
 800645a:	d103      	bne.n	8006464 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800645c:	2380      	movs	r3, #128	; 0x80
 800645e:	021b      	lsls	r3, r3, #8
 8006460:	613b      	str	r3, [r7, #16]
 8006462:	e00b      	b.n	800647c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006464:	4b08      	ldr	r3, [pc, #32]	; (8006488 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	2238      	movs	r2, #56	; 0x38
 800646a:	4013      	ands	r3, r2
 800646c:	2b18      	cmp	r3, #24
 800646e:	d103      	bne.n	8006478 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006470:	23fa      	movs	r3, #250	; 0xfa
 8006472:	01db      	lsls	r3, r3, #7
 8006474:	613b      	str	r3, [r7, #16]
 8006476:	e001      	b.n	800647c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006478:	2300      	movs	r3, #0
 800647a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800647c:	693b      	ldr	r3, [r7, #16]
}
 800647e:	0018      	movs	r0, r3
 8006480:	46bd      	mov	sp, r7
 8006482:	b006      	add	sp, #24
 8006484:	bd80      	pop	{r7, pc}
 8006486:	46c0      	nop			; (mov r8, r8)
 8006488:	40021000 	.word	0x40021000
 800648c:	00f42400 	.word	0x00f42400
 8006490:	007a1200 	.word	0x007a1200

08006494 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006498:	4b02      	ldr	r3, [pc, #8]	; (80064a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800649a:	681b      	ldr	r3, [r3, #0]
}
 800649c:	0018      	movs	r0, r3
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	46c0      	nop			; (mov r8, r8)
 80064a4:	20000010 	.word	0x20000010

080064a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064a8:	b5b0      	push	{r4, r5, r7, lr}
 80064aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80064ac:	f7ff fff2 	bl	8006494 <HAL_RCC_GetHCLKFreq>
 80064b0:	0004      	movs	r4, r0
 80064b2:	f7ff faf9 	bl	8005aa8 <LL_RCC_GetAPB1Prescaler>
 80064b6:	0003      	movs	r3, r0
 80064b8:	0b1a      	lsrs	r2, r3, #12
 80064ba:	4b05      	ldr	r3, [pc, #20]	; (80064d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80064bc:	0092      	lsls	r2, r2, #2
 80064be:	58d3      	ldr	r3, [r2, r3]
 80064c0:	221f      	movs	r2, #31
 80064c2:	4013      	ands	r3, r2
 80064c4:	40dc      	lsrs	r4, r3
 80064c6:	0023      	movs	r3, r4
}
 80064c8:	0018      	movs	r0, r3
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bdb0      	pop	{r4, r5, r7, pc}
 80064ce:	46c0      	nop			; (mov r8, r8)
 80064d0:	08015f4c 	.word	0x08015f4c

080064d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80064dc:	2313      	movs	r3, #19
 80064de:	18fb      	adds	r3, r7, r3
 80064e0:	2200      	movs	r2, #0
 80064e2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064e4:	2312      	movs	r3, #18
 80064e6:	18fb      	adds	r3, r7, r3
 80064e8:	2200      	movs	r2, #0
 80064ea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	2380      	movs	r3, #128	; 0x80
 80064f2:	029b      	lsls	r3, r3, #10
 80064f4:	4013      	ands	r3, r2
 80064f6:	d100      	bne.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x26>
 80064f8:	e0ad      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064fa:	2011      	movs	r0, #17
 80064fc:	183b      	adds	r3, r7, r0
 80064fe:	2200      	movs	r2, #0
 8006500:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006502:	4b47      	ldr	r3, [pc, #284]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006504:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006506:	2380      	movs	r3, #128	; 0x80
 8006508:	055b      	lsls	r3, r3, #21
 800650a:	4013      	ands	r3, r2
 800650c:	d110      	bne.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800650e:	4b44      	ldr	r3, [pc, #272]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006510:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006512:	4b43      	ldr	r3, [pc, #268]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006514:	2180      	movs	r1, #128	; 0x80
 8006516:	0549      	lsls	r1, r1, #21
 8006518:	430a      	orrs	r2, r1
 800651a:	63da      	str	r2, [r3, #60]	; 0x3c
 800651c:	4b40      	ldr	r3, [pc, #256]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800651e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006520:	2380      	movs	r3, #128	; 0x80
 8006522:	055b      	lsls	r3, r3, #21
 8006524:	4013      	ands	r3, r2
 8006526:	60bb      	str	r3, [r7, #8]
 8006528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800652a:	183b      	adds	r3, r7, r0
 800652c:	2201      	movs	r2, #1
 800652e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006530:	4b3c      	ldr	r3, [pc, #240]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	4b3b      	ldr	r3, [pc, #236]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006536:	2180      	movs	r1, #128	; 0x80
 8006538:	0049      	lsls	r1, r1, #1
 800653a:	430a      	orrs	r2, r1
 800653c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800653e:	f7fc ffff 	bl	8003540 <HAL_GetTick>
 8006542:	0003      	movs	r3, r0
 8006544:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006546:	e00b      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006548:	f7fc fffa 	bl	8003540 <HAL_GetTick>
 800654c:	0002      	movs	r2, r0
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	2b02      	cmp	r3, #2
 8006554:	d904      	bls.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006556:	2313      	movs	r3, #19
 8006558:	18fb      	adds	r3, r7, r3
 800655a:	2203      	movs	r2, #3
 800655c:	701a      	strb	r2, [r3, #0]
        break;
 800655e:	e005      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006560:	4b30      	ldr	r3, [pc, #192]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	2380      	movs	r3, #128	; 0x80
 8006566:	005b      	lsls	r3, r3, #1
 8006568:	4013      	ands	r3, r2
 800656a:	d0ed      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800656c:	2313      	movs	r3, #19
 800656e:	18fb      	adds	r3, r7, r3
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d15e      	bne.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006576:	4b2a      	ldr	r3, [pc, #168]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006578:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800657a:	23c0      	movs	r3, #192	; 0xc0
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4013      	ands	r3, r2
 8006580:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d019      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	429a      	cmp	r2, r3
 8006590:	d014      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006592:	4b23      	ldr	r3, [pc, #140]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006596:	4a24      	ldr	r2, [pc, #144]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8006598:	4013      	ands	r3, r2
 800659a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800659c:	4b20      	ldr	r3, [pc, #128]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800659e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80065a0:	4b1f      	ldr	r3, [pc, #124]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80065a2:	2180      	movs	r1, #128	; 0x80
 80065a4:	0249      	lsls	r1, r1, #9
 80065a6:	430a      	orrs	r2, r1
 80065a8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80065aa:	4b1d      	ldr	r3, [pc, #116]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80065ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80065ae:	4b1c      	ldr	r3, [pc, #112]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80065b0:	491e      	ldr	r1, [pc, #120]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80065b2:	400a      	ands	r2, r1
 80065b4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80065b6:	4b1a      	ldr	r3, [pc, #104]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	2201      	movs	r2, #1
 80065c0:	4013      	ands	r3, r2
 80065c2:	d016      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c4:	f7fc ffbc 	bl	8003540 <HAL_GetTick>
 80065c8:	0003      	movs	r3, r0
 80065ca:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065cc:	e00c      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065ce:	f7fc ffb7 	bl	8003540 <HAL_GetTick>
 80065d2:	0002      	movs	r2, r0
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	4a15      	ldr	r2, [pc, #84]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d904      	bls.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80065de:	2313      	movs	r3, #19
 80065e0:	18fb      	adds	r3, r7, r3
 80065e2:	2203      	movs	r2, #3
 80065e4:	701a      	strb	r2, [r3, #0]
            break;
 80065e6:	e004      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065e8:	4b0d      	ldr	r3, [pc, #52]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80065ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ec:	2202      	movs	r2, #2
 80065ee:	4013      	ands	r3, r2
 80065f0:	d0ed      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80065f2:	2313      	movs	r3, #19
 80065f4:	18fb      	adds	r3, r7, r3
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10a      	bne.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065fc:	4b08      	ldr	r3, [pc, #32]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80065fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006600:	4a09      	ldr	r2, [pc, #36]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8006602:	4013      	ands	r3, r2
 8006604:	0019      	movs	r1, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800660a:	4b05      	ldr	r3, [pc, #20]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800660c:	430a      	orrs	r2, r1
 800660e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006610:	e016      	b.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006612:	2312      	movs	r3, #18
 8006614:	18fb      	adds	r3, r7, r3
 8006616:	2213      	movs	r2, #19
 8006618:	18ba      	adds	r2, r7, r2
 800661a:	7812      	ldrb	r2, [r2, #0]
 800661c:	701a      	strb	r2, [r3, #0]
 800661e:	e00f      	b.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006620:	40021000 	.word	0x40021000
 8006624:	40007000 	.word	0x40007000
 8006628:	fffffcff 	.word	0xfffffcff
 800662c:	fffeffff 	.word	0xfffeffff
 8006630:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006634:	2312      	movs	r3, #18
 8006636:	18fb      	adds	r3, r7, r3
 8006638:	2213      	movs	r2, #19
 800663a:	18ba      	adds	r2, r7, r2
 800663c:	7812      	ldrb	r2, [r2, #0]
 800663e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006640:	2311      	movs	r3, #17
 8006642:	18fb      	adds	r3, r7, r3
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d105      	bne.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800664a:	4bb6      	ldr	r3, [pc, #728]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800664c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800664e:	4bb5      	ldr	r3, [pc, #724]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006650:	49b5      	ldr	r1, [pc, #724]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8006652:	400a      	ands	r2, r1
 8006654:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2201      	movs	r2, #1
 800665c:	4013      	ands	r3, r2
 800665e:	d009      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006660:	4bb0      	ldr	r3, [pc, #704]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006664:	2203      	movs	r2, #3
 8006666:	4393      	bics	r3, r2
 8006668:	0019      	movs	r1, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	4bad      	ldr	r3, [pc, #692]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006670:	430a      	orrs	r2, r1
 8006672:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2202      	movs	r2, #2
 800667a:	4013      	ands	r3, r2
 800667c:	d009      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800667e:	4ba9      	ldr	r3, [pc, #676]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006682:	220c      	movs	r2, #12
 8006684:	4393      	bics	r3, r2
 8006686:	0019      	movs	r1, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689a      	ldr	r2, [r3, #8]
 800668c:	4ba5      	ldr	r3, [pc, #660]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800668e:	430a      	orrs	r2, r1
 8006690:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2204      	movs	r2, #4
 8006698:	4013      	ands	r3, r2
 800669a:	d009      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800669c:	4ba1      	ldr	r3, [pc, #644]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800669e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a0:	2230      	movs	r2, #48	; 0x30
 80066a2:	4393      	bics	r3, r2
 80066a4:	0019      	movs	r1, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68da      	ldr	r2, [r3, #12]
 80066aa:	4b9e      	ldr	r3, [pc, #632]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80066ac:	430a      	orrs	r2, r1
 80066ae:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2210      	movs	r2, #16
 80066b6:	4013      	ands	r3, r2
 80066b8:	d009      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80066ba:	4b9a      	ldr	r3, [pc, #616]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80066bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066be:	4a9b      	ldr	r2, [pc, #620]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80066c0:	4013      	ands	r3, r2
 80066c2:	0019      	movs	r1, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	691a      	ldr	r2, [r3, #16]
 80066c8:	4b96      	ldr	r3, [pc, #600]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80066ca:	430a      	orrs	r2, r1
 80066cc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	2380      	movs	r3, #128	; 0x80
 80066d4:	015b      	lsls	r3, r3, #5
 80066d6:	4013      	ands	r3, r2
 80066d8:	d009      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80066da:	4b92      	ldr	r3, [pc, #584]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80066dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066de:	4a94      	ldr	r2, [pc, #592]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80066e0:	4013      	ands	r3, r2
 80066e2:	0019      	movs	r1, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	695a      	ldr	r2, [r3, #20]
 80066e8:	4b8e      	ldr	r3, [pc, #568]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80066ea:	430a      	orrs	r2, r1
 80066ec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	2380      	movs	r3, #128	; 0x80
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4013      	ands	r3, r2
 80066f8:	d009      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066fa:	4b8a      	ldr	r3, [pc, #552]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80066fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066fe:	4a8d      	ldr	r2, [pc, #564]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8006700:	4013      	ands	r3, r2
 8006702:	0019      	movs	r1, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006708:	4b86      	ldr	r3, [pc, #536]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800670a:	430a      	orrs	r2, r1
 800670c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	2380      	movs	r3, #128	; 0x80
 8006714:	00db      	lsls	r3, r3, #3
 8006716:	4013      	ands	r3, r2
 8006718:	d009      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800671a:	4b82      	ldr	r3, [pc, #520]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800671c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671e:	4a86      	ldr	r2, [pc, #536]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8006720:	4013      	ands	r3, r2
 8006722:	0019      	movs	r1, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006728:	4b7e      	ldr	r3, [pc, #504]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800672a:	430a      	orrs	r2, r1
 800672c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2220      	movs	r2, #32
 8006734:	4013      	ands	r3, r2
 8006736:	d009      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006738:	4b7a      	ldr	r3, [pc, #488]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800673a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800673c:	4a7f      	ldr	r2, [pc, #508]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800673e:	4013      	ands	r3, r2
 8006740:	0019      	movs	r1, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	699a      	ldr	r2, [r3, #24]
 8006746:	4b77      	ldr	r3, [pc, #476]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006748:	430a      	orrs	r2, r1
 800674a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2240      	movs	r2, #64	; 0x40
 8006752:	4013      	ands	r3, r2
 8006754:	d009      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006756:	4b73      	ldr	r3, [pc, #460]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800675a:	4a79      	ldr	r2, [pc, #484]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800675c:	4013      	ands	r3, r2
 800675e:	0019      	movs	r1, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	69da      	ldr	r2, [r3, #28]
 8006764:	4b6f      	ldr	r3, [pc, #444]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006766:	430a      	orrs	r2, r1
 8006768:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	2380      	movs	r3, #128	; 0x80
 8006770:	01db      	lsls	r3, r3, #7
 8006772:	4013      	ands	r3, r2
 8006774:	d015      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006776:	4b6b      	ldr	r3, [pc, #428]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	0899      	lsrs	r1, r3, #2
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006782:	4b68      	ldr	r3, [pc, #416]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006784:	430a      	orrs	r2, r1
 8006786:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800678c:	2380      	movs	r3, #128	; 0x80
 800678e:	05db      	lsls	r3, r3, #23
 8006790:	429a      	cmp	r2, r3
 8006792:	d106      	bne.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006794:	4b63      	ldr	r3, [pc, #396]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006796:	68da      	ldr	r2, [r3, #12]
 8006798:	4b62      	ldr	r3, [pc, #392]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800679a:	2180      	movs	r1, #128	; 0x80
 800679c:	0249      	lsls	r1, r1, #9
 800679e:	430a      	orrs	r2, r1
 80067a0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	2380      	movs	r3, #128	; 0x80
 80067a8:	031b      	lsls	r3, r3, #12
 80067aa:	4013      	ands	r3, r2
 80067ac:	d009      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80067ae:	4b5d      	ldr	r3, [pc, #372]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80067b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b2:	2240      	movs	r2, #64	; 0x40
 80067b4:	4393      	bics	r3, r2
 80067b6:	0019      	movs	r1, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067bc:	4b59      	ldr	r3, [pc, #356]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80067be:	430a      	orrs	r2, r1
 80067c0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	2380      	movs	r3, #128	; 0x80
 80067c8:	039b      	lsls	r3, r3, #14
 80067ca:	4013      	ands	r3, r2
 80067cc:	d016      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80067ce:	4b55      	ldr	r3, [pc, #340]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80067d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d2:	4a5c      	ldr	r2, [pc, #368]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80067d4:	4013      	ands	r3, r2
 80067d6:	0019      	movs	r1, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067dc:	4b51      	ldr	r3, [pc, #324]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80067de:	430a      	orrs	r2, r1
 80067e0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067e6:	2380      	movs	r3, #128	; 0x80
 80067e8:	03db      	lsls	r3, r3, #15
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d106      	bne.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80067ee:	4b4d      	ldr	r3, [pc, #308]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80067f0:	68da      	ldr	r2, [r3, #12]
 80067f2:	4b4c      	ldr	r3, [pc, #304]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80067f4:	2180      	movs	r1, #128	; 0x80
 80067f6:	0449      	lsls	r1, r1, #17
 80067f8:	430a      	orrs	r2, r1
 80067fa:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	2380      	movs	r3, #128	; 0x80
 8006802:	03db      	lsls	r3, r3, #15
 8006804:	4013      	ands	r3, r2
 8006806:	d016      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006808:	4b46      	ldr	r3, [pc, #280]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800680a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800680c:	4a4e      	ldr	r2, [pc, #312]	; (8006948 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800680e:	4013      	ands	r3, r2
 8006810:	0019      	movs	r1, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006816:	4b43      	ldr	r3, [pc, #268]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006818:	430a      	orrs	r2, r1
 800681a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006820:	2380      	movs	r3, #128	; 0x80
 8006822:	045b      	lsls	r3, r3, #17
 8006824:	429a      	cmp	r2, r3
 8006826:	d106      	bne.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006828:	4b3e      	ldr	r3, [pc, #248]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800682a:	68da      	ldr	r2, [r3, #12]
 800682c:	4b3d      	ldr	r3, [pc, #244]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800682e:	2180      	movs	r1, #128	; 0x80
 8006830:	0449      	lsls	r1, r1, #17
 8006832:	430a      	orrs	r2, r1
 8006834:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	2380      	movs	r3, #128	; 0x80
 800683c:	011b      	lsls	r3, r3, #4
 800683e:	4013      	ands	r3, r2
 8006840:	d014      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006842:	4b38      	ldr	r3, [pc, #224]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006846:	2203      	movs	r2, #3
 8006848:	4393      	bics	r3, r2
 800684a:	0019      	movs	r1, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a1a      	ldr	r2, [r3, #32]
 8006850:	4b34      	ldr	r3, [pc, #208]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006852:	430a      	orrs	r2, r1
 8006854:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d106      	bne.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800685e:	4b31      	ldr	r3, [pc, #196]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006860:	68da      	ldr	r2, [r3, #12]
 8006862:	4b30      	ldr	r3, [pc, #192]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006864:	2180      	movs	r1, #128	; 0x80
 8006866:	0249      	lsls	r1, r1, #9
 8006868:	430a      	orrs	r2, r1
 800686a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	2380      	movs	r3, #128	; 0x80
 8006872:	019b      	lsls	r3, r3, #6
 8006874:	4013      	ands	r3, r2
 8006876:	d014      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006878:	4b2a      	ldr	r3, [pc, #168]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800687a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800687c:	220c      	movs	r2, #12
 800687e:	4393      	bics	r3, r2
 8006880:	0019      	movs	r1, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006886:	4b27      	ldr	r3, [pc, #156]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006888:	430a      	orrs	r2, r1
 800688a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	2b04      	cmp	r3, #4
 8006892:	d106      	bne.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006894:	4b23      	ldr	r3, [pc, #140]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006896:	68da      	ldr	r2, [r3, #12]
 8006898:	4b22      	ldr	r3, [pc, #136]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800689a:	2180      	movs	r1, #128	; 0x80
 800689c:	0249      	lsls	r1, r1, #9
 800689e:	430a      	orrs	r2, r1
 80068a0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	2380      	movs	r3, #128	; 0x80
 80068a8:	045b      	lsls	r3, r3, #17
 80068aa:	4013      	ands	r3, r2
 80068ac:	d016      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068ae:	4b1d      	ldr	r3, [pc, #116]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80068b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b2:	4a22      	ldr	r2, [pc, #136]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80068b4:	4013      	ands	r3, r2
 80068b6:	0019      	movs	r1, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068bc:	4b19      	ldr	r3, [pc, #100]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80068be:	430a      	orrs	r2, r1
 80068c0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068c6:	2380      	movs	r3, #128	; 0x80
 80068c8:	019b      	lsls	r3, r3, #6
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d106      	bne.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80068ce:	4b15      	ldr	r3, [pc, #84]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80068d0:	68da      	ldr	r2, [r3, #12]
 80068d2:	4b14      	ldr	r3, [pc, #80]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80068d4:	2180      	movs	r1, #128	; 0x80
 80068d6:	0449      	lsls	r1, r1, #17
 80068d8:	430a      	orrs	r2, r1
 80068da:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	2380      	movs	r3, #128	; 0x80
 80068e2:	049b      	lsls	r3, r3, #18
 80068e4:	4013      	ands	r3, r2
 80068e6:	d016      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80068e8:	4b0e      	ldr	r3, [pc, #56]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80068ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ec:	4a10      	ldr	r2, [pc, #64]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80068ee:	4013      	ands	r3, r2
 80068f0:	0019      	movs	r1, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068f6:	4b0b      	ldr	r3, [pc, #44]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80068f8:	430a      	orrs	r2, r1
 80068fa:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006900:	2380      	movs	r3, #128	; 0x80
 8006902:	005b      	lsls	r3, r3, #1
 8006904:	429a      	cmp	r2, r3
 8006906:	d106      	bne.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006908:	4b06      	ldr	r3, [pc, #24]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	4b05      	ldr	r3, [pc, #20]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800690e:	2180      	movs	r1, #128	; 0x80
 8006910:	0449      	lsls	r1, r1, #17
 8006912:	430a      	orrs	r2, r1
 8006914:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006916:	2312      	movs	r3, #18
 8006918:	18fb      	adds	r3, r7, r3
 800691a:	781b      	ldrb	r3, [r3, #0]
}
 800691c:	0018      	movs	r0, r3
 800691e:	46bd      	mov	sp, r7
 8006920:	b006      	add	sp, #24
 8006922:	bd80      	pop	{r7, pc}
 8006924:	40021000 	.word	0x40021000
 8006928:	efffffff 	.word	0xefffffff
 800692c:	fffff3ff 	.word	0xfffff3ff
 8006930:	fffffcff 	.word	0xfffffcff
 8006934:	fff3ffff 	.word	0xfff3ffff
 8006938:	ffcfffff 	.word	0xffcfffff
 800693c:	ffffcfff 	.word	0xffffcfff
 8006940:	ffff3fff 	.word	0xffff3fff
 8006944:	ffbfffff 	.word	0xffbfffff
 8006948:	feffffff 	.word	0xfeffffff

0800694c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e0a8      	b.n	8006ab0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006962:	2b00      	cmp	r3, #0
 8006964:	d109      	bne.n	800697a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	2382      	movs	r3, #130	; 0x82
 800696c:	005b      	lsls	r3, r3, #1
 800696e:	429a      	cmp	r2, r3
 8006970:	d009      	beq.n	8006986 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	61da      	str	r2, [r3, #28]
 8006978:	e005      	b.n	8006986 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	225d      	movs	r2, #93	; 0x5d
 8006990:	5c9b      	ldrb	r3, [r3, r2]
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b00      	cmp	r3, #0
 8006996:	d107      	bne.n	80069a8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	225c      	movs	r2, #92	; 0x5c
 800699c:	2100      	movs	r1, #0
 800699e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	0018      	movs	r0, r3
 80069a4:	f7fc f904 	bl	8002bb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	225d      	movs	r2, #93	; 0x5d
 80069ac:	2102      	movs	r1, #2
 80069ae:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2140      	movs	r1, #64	; 0x40
 80069bc:	438a      	bics	r2, r1
 80069be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68da      	ldr	r2, [r3, #12]
 80069c4:	23e0      	movs	r3, #224	; 0xe0
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d902      	bls.n	80069d2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80069cc:	2300      	movs	r3, #0
 80069ce:	60fb      	str	r3, [r7, #12]
 80069d0:	e002      	b.n	80069d8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80069d2:	2380      	movs	r3, #128	; 0x80
 80069d4:	015b      	lsls	r3, r3, #5
 80069d6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68da      	ldr	r2, [r3, #12]
 80069dc:	23f0      	movs	r3, #240	; 0xf0
 80069de:	011b      	lsls	r3, r3, #4
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d008      	beq.n	80069f6 <HAL_SPI_Init+0xaa>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68da      	ldr	r2, [r3, #12]
 80069e8:	23e0      	movs	r3, #224	; 0xe0
 80069ea:	00db      	lsls	r3, r3, #3
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d002      	beq.n	80069f6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685a      	ldr	r2, [r3, #4]
 80069fa:	2382      	movs	r3, #130	; 0x82
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	401a      	ands	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6899      	ldr	r1, [r3, #8]
 8006a04:	2384      	movs	r3, #132	; 0x84
 8006a06:	021b      	lsls	r3, r3, #8
 8006a08:	400b      	ands	r3, r1
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	2102      	movs	r1, #2
 8006a12:	400b      	ands	r3, r1
 8006a14:	431a      	orrs	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	400b      	ands	r3, r1
 8006a1e:	431a      	orrs	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6999      	ldr	r1, [r3, #24]
 8006a24:	2380      	movs	r3, #128	; 0x80
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	400b      	ands	r3, r1
 8006a2a:	431a      	orrs	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	69db      	ldr	r3, [r3, #28]
 8006a30:	2138      	movs	r1, #56	; 0x38
 8006a32:	400b      	ands	r3, r1
 8006a34:	431a      	orrs	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	2180      	movs	r1, #128	; 0x80
 8006a3c:	400b      	ands	r3, r1
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	0011      	movs	r1, r2
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a46:	2380      	movs	r3, #128	; 0x80
 8006a48:	019b      	lsls	r3, r3, #6
 8006a4a:	401a      	ands	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	0c1b      	lsrs	r3, r3, #16
 8006a5a:	2204      	movs	r2, #4
 8006a5c:	401a      	ands	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a62:	2110      	movs	r1, #16
 8006a64:	400b      	ands	r3, r1
 8006a66:	431a      	orrs	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a6c:	2108      	movs	r1, #8
 8006a6e:	400b      	ands	r3, r1
 8006a70:	431a      	orrs	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	68d9      	ldr	r1, [r3, #12]
 8006a76:	23f0      	movs	r3, #240	; 0xf0
 8006a78:	011b      	lsls	r3, r3, #4
 8006a7a:	400b      	ands	r3, r1
 8006a7c:	431a      	orrs	r2, r3
 8006a7e:	0011      	movs	r1, r2
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	2380      	movs	r3, #128	; 0x80
 8006a84:	015b      	lsls	r3, r3, #5
 8006a86:	401a      	ands	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	69da      	ldr	r2, [r3, #28]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4907      	ldr	r1, [pc, #28]	; (8006ab8 <HAL_SPI_Init+0x16c>)
 8006a9c:	400a      	ands	r2, r1
 8006a9e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	225d      	movs	r2, #93	; 0x5d
 8006aaa:	2101      	movs	r1, #1
 8006aac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	0018      	movs	r0, r3
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	b004      	add	sp, #16
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	fffff7ff 	.word	0xfffff7ff

08006abc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b088      	sub	sp, #32
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	2240      	movs	r2, #64	; 0x40
 8006ad8:	4013      	ands	r3, r2
 8006ada:	d10d      	bne.n	8006af8 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006ae2:	d009      	beq.n	8006af8 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	2240      	movs	r2, #64	; 0x40
 8006ae8:	4013      	ands	r3, r2
 8006aea:	d005      	beq.n	8006af8 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	0010      	movs	r0, r2
 8006af4:	4798      	blx	r3
    return;
 8006af6:	e0c5      	b.n	8006c84 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	2202      	movs	r2, #2
 8006afc:	4013      	ands	r3, r2
 8006afe:	d009      	beq.n	8006b14 <HAL_SPI_IRQHandler+0x58>
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	2280      	movs	r2, #128	; 0x80
 8006b04:	4013      	ands	r3, r2
 8006b06:	d005      	beq.n	8006b14 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	0010      	movs	r0, r2
 8006b10:	4798      	blx	r3
    return;
 8006b12:	e0b7      	b.n	8006c84 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	2220      	movs	r2, #32
 8006b18:	4013      	ands	r3, r2
 8006b1a:	d109      	bne.n	8006b30 <HAL_SPI_IRQHandler+0x74>
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	2240      	movs	r2, #64	; 0x40
 8006b20:	4013      	ands	r3, r2
 8006b22:	d105      	bne.n	8006b30 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006b24:	69ba      	ldr	r2, [r7, #24]
 8006b26:	2380      	movs	r3, #128	; 0x80
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	d100      	bne.n	8006b30 <HAL_SPI_IRQHandler+0x74>
 8006b2e:	e0a9      	b.n	8006c84 <HAL_SPI_IRQHandler+0x1c8>
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	2220      	movs	r2, #32
 8006b34:	4013      	ands	r3, r2
 8006b36:	d100      	bne.n	8006b3a <HAL_SPI_IRQHandler+0x7e>
 8006b38:	e0a4      	b.n	8006c84 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	2240      	movs	r2, #64	; 0x40
 8006b3e:	4013      	ands	r3, r2
 8006b40:	d023      	beq.n	8006b8a <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	225d      	movs	r2, #93	; 0x5d
 8006b46:	5c9b      	ldrb	r3, [r3, r2]
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b03      	cmp	r3, #3
 8006b4c:	d011      	beq.n	8006b72 <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b52:	2204      	movs	r2, #4
 8006b54:	431a      	orrs	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	617b      	str	r3, [r7, #20]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	617b      	str	r3, [r7, #20]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	617b      	str	r3, [r7, #20]
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	e00b      	b.n	8006b8a <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b72:	2300      	movs	r3, #0
 8006b74:	613b      	str	r3, [r7, #16]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	613b      	str	r3, [r7, #16]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	613b      	str	r3, [r7, #16]
 8006b86:	693b      	ldr	r3, [r7, #16]
        return;
 8006b88:	e07c      	b.n	8006c84 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	4013      	ands	r3, r2
 8006b90:	d014      	beq.n	8006bbc <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b96:	2201      	movs	r2, #1
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	60fb      	str	r3, [r7, #12]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	60fb      	str	r3, [r7, #12]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2140      	movs	r1, #64	; 0x40
 8006bb6:	438a      	bics	r2, r1
 8006bb8:	601a      	str	r2, [r3, #0]
 8006bba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006bbc:	69ba      	ldr	r2, [r7, #24]
 8006bbe:	2380      	movs	r3, #128	; 0x80
 8006bc0:	005b      	lsls	r3, r3, #1
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	d00c      	beq.n	8006be0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bca:	2208      	movs	r2, #8
 8006bcc:	431a      	orrs	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60bb      	str	r3, [r7, #8]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	60bb      	str	r3, [r7, #8]
 8006bde:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d04c      	beq.n	8006c82 <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685a      	ldr	r2, [r3, #4]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	21e0      	movs	r1, #224	; 0xe0
 8006bf4:	438a      	bics	r2, r1
 8006bf6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	225d      	movs	r2, #93	; 0x5d
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	2202      	movs	r2, #2
 8006c04:	4013      	ands	r3, r2
 8006c06:	d103      	bne.n	8006c10 <HAL_SPI_IRQHandler+0x154>
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	d032      	beq.n	8006c76 <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685a      	ldr	r2, [r3, #4]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2103      	movs	r1, #3
 8006c1c:	438a      	bics	r2, r1
 8006c1e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d010      	beq.n	8006c4a <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c2c:	4a17      	ldr	r2, [pc, #92]	; (8006c8c <HAL_SPI_IRQHandler+0x1d0>)
 8006c2e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c34:	0018      	movs	r0, r3
 8006c36:	f7fc ff5f 	bl	8003af8 <HAL_DMA_Abort_IT>
 8006c3a:	1e03      	subs	r3, r0, #0
 8006c3c:	d005      	beq.n	8006c4a <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c42:	2240      	movs	r2, #64	; 0x40
 8006c44:	431a      	orrs	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d016      	beq.n	8006c80 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c56:	4a0d      	ldr	r2, [pc, #52]	; (8006c8c <HAL_SPI_IRQHandler+0x1d0>)
 8006c58:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c5e:	0018      	movs	r0, r3
 8006c60:	f7fc ff4a 	bl	8003af8 <HAL_DMA_Abort_IT>
 8006c64:	1e03      	subs	r3, r0, #0
 8006c66:	d00b      	beq.n	8006c80 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c6c:	2240      	movs	r2, #64	; 0x40
 8006c6e:	431a      	orrs	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006c74:	e004      	b.n	8006c80 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	0018      	movs	r0, r3
 8006c7a:	f000 f809 	bl	8006c90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006c7e:	e000      	b.n	8006c82 <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8006c80:	46c0      	nop			; (mov r8, r8)
    return;
 8006c82:	46c0      	nop			; (mov r8, r8)
  }
}
 8006c84:	46bd      	mov	sp, r7
 8006c86:	b008      	add	sp, #32
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	46c0      	nop			; (mov r8, r8)
 8006c8c:	08006ca1 	.word	0x08006ca1

08006c90 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006c98:	46c0      	nop			; (mov r8, r8)
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	b002      	add	sp, #8
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2246      	movs	r2, #70	; 0x46
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	0018      	movs	r0, r3
 8006cc0:	f7ff ffe6 	bl	8006c90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006cc4:	46c0      	nop			; (mov r8, r8)
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	b004      	add	sp, #16
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d101      	bne.n	8006cde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e04a      	b.n	8006d74 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	223d      	movs	r2, #61	; 0x3d
 8006ce2:	5c9b      	ldrb	r3, [r3, r2]
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d107      	bne.n	8006cfa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	223c      	movs	r2, #60	; 0x3c
 8006cee:	2100      	movs	r1, #0
 8006cf0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	0018      	movs	r0, r3
 8006cf6:	f7fc f8a1 	bl	8002e3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	223d      	movs	r2, #61	; 0x3d
 8006cfe:	2102      	movs	r1, #2
 8006d00:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	3304      	adds	r3, #4
 8006d0a:	0019      	movs	r1, r3
 8006d0c:	0010      	movs	r0, r2
 8006d0e:	f000 f90b 	bl	8006f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2248      	movs	r2, #72	; 0x48
 8006d16:	2101      	movs	r1, #1
 8006d18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	223e      	movs	r2, #62	; 0x3e
 8006d1e:	2101      	movs	r1, #1
 8006d20:	5499      	strb	r1, [r3, r2]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	223f      	movs	r2, #63	; 0x3f
 8006d26:	2101      	movs	r1, #1
 8006d28:	5499      	strb	r1, [r3, r2]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2240      	movs	r2, #64	; 0x40
 8006d2e:	2101      	movs	r1, #1
 8006d30:	5499      	strb	r1, [r3, r2]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2241      	movs	r2, #65	; 0x41
 8006d36:	2101      	movs	r1, #1
 8006d38:	5499      	strb	r1, [r3, r2]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2242      	movs	r2, #66	; 0x42
 8006d3e:	2101      	movs	r1, #1
 8006d40:	5499      	strb	r1, [r3, r2]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2243      	movs	r2, #67	; 0x43
 8006d46:	2101      	movs	r1, #1
 8006d48:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2244      	movs	r2, #68	; 0x44
 8006d4e:	2101      	movs	r1, #1
 8006d50:	5499      	strb	r1, [r3, r2]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2245      	movs	r2, #69	; 0x45
 8006d56:	2101      	movs	r1, #1
 8006d58:	5499      	strb	r1, [r3, r2]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2246      	movs	r2, #70	; 0x46
 8006d5e:	2101      	movs	r1, #1
 8006d60:	5499      	strb	r1, [r3, r2]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2247      	movs	r2, #71	; 0x47
 8006d66:	2101      	movs	r1, #1
 8006d68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	223d      	movs	r2, #61	; 0x3d
 8006d6e:	2101      	movs	r1, #1
 8006d70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	0018      	movs	r0, r3
 8006d76:	46bd      	mov	sp, r7
 8006d78:	b002      	add	sp, #8
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d86:	230f      	movs	r3, #15
 8006d88:	18fb      	adds	r3, r7, r3
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	223c      	movs	r2, #60	; 0x3c
 8006d92:	5c9b      	ldrb	r3, [r3, r2]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d101      	bne.n	8006d9c <HAL_TIM_ConfigClockSource+0x20>
 8006d98:	2302      	movs	r3, #2
 8006d9a:	e0bc      	b.n	8006f16 <HAL_TIM_ConfigClockSource+0x19a>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	223c      	movs	r2, #60	; 0x3c
 8006da0:	2101      	movs	r1, #1
 8006da2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	223d      	movs	r2, #61	; 0x3d
 8006da8:	2102      	movs	r1, #2
 8006daa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	4a5a      	ldr	r2, [pc, #360]	; (8006f20 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006db8:	4013      	ands	r3, r2
 8006dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	4a59      	ldr	r2, [pc, #356]	; (8006f24 <HAL_TIM_ConfigClockSource+0x1a8>)
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2280      	movs	r2, #128	; 0x80
 8006dd2:	0192      	lsls	r2, r2, #6
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d040      	beq.n	8006e5a <HAL_TIM_ConfigClockSource+0xde>
 8006dd8:	2280      	movs	r2, #128	; 0x80
 8006dda:	0192      	lsls	r2, r2, #6
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d900      	bls.n	8006de2 <HAL_TIM_ConfigClockSource+0x66>
 8006de0:	e088      	b.n	8006ef4 <HAL_TIM_ConfigClockSource+0x178>
 8006de2:	2280      	movs	r2, #128	; 0x80
 8006de4:	0152      	lsls	r2, r2, #5
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d100      	bne.n	8006dec <HAL_TIM_ConfigClockSource+0x70>
 8006dea:	e088      	b.n	8006efe <HAL_TIM_ConfigClockSource+0x182>
 8006dec:	2280      	movs	r2, #128	; 0x80
 8006dee:	0152      	lsls	r2, r2, #5
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d900      	bls.n	8006df6 <HAL_TIM_ConfigClockSource+0x7a>
 8006df4:	e07e      	b.n	8006ef4 <HAL_TIM_ConfigClockSource+0x178>
 8006df6:	2b70      	cmp	r3, #112	; 0x70
 8006df8:	d018      	beq.n	8006e2c <HAL_TIM_ConfigClockSource+0xb0>
 8006dfa:	d900      	bls.n	8006dfe <HAL_TIM_ConfigClockSource+0x82>
 8006dfc:	e07a      	b.n	8006ef4 <HAL_TIM_ConfigClockSource+0x178>
 8006dfe:	2b60      	cmp	r3, #96	; 0x60
 8006e00:	d04f      	beq.n	8006ea2 <HAL_TIM_ConfigClockSource+0x126>
 8006e02:	d900      	bls.n	8006e06 <HAL_TIM_ConfigClockSource+0x8a>
 8006e04:	e076      	b.n	8006ef4 <HAL_TIM_ConfigClockSource+0x178>
 8006e06:	2b50      	cmp	r3, #80	; 0x50
 8006e08:	d03b      	beq.n	8006e82 <HAL_TIM_ConfigClockSource+0x106>
 8006e0a:	d900      	bls.n	8006e0e <HAL_TIM_ConfigClockSource+0x92>
 8006e0c:	e072      	b.n	8006ef4 <HAL_TIM_ConfigClockSource+0x178>
 8006e0e:	2b40      	cmp	r3, #64	; 0x40
 8006e10:	d057      	beq.n	8006ec2 <HAL_TIM_ConfigClockSource+0x146>
 8006e12:	d900      	bls.n	8006e16 <HAL_TIM_ConfigClockSource+0x9a>
 8006e14:	e06e      	b.n	8006ef4 <HAL_TIM_ConfigClockSource+0x178>
 8006e16:	2b30      	cmp	r3, #48	; 0x30
 8006e18:	d063      	beq.n	8006ee2 <HAL_TIM_ConfigClockSource+0x166>
 8006e1a:	d86b      	bhi.n	8006ef4 <HAL_TIM_ConfigClockSource+0x178>
 8006e1c:	2b20      	cmp	r3, #32
 8006e1e:	d060      	beq.n	8006ee2 <HAL_TIM_ConfigClockSource+0x166>
 8006e20:	d868      	bhi.n	8006ef4 <HAL_TIM_ConfigClockSource+0x178>
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d05d      	beq.n	8006ee2 <HAL_TIM_ConfigClockSource+0x166>
 8006e26:	2b10      	cmp	r3, #16
 8006e28:	d05b      	beq.n	8006ee2 <HAL_TIM_ConfigClockSource+0x166>
 8006e2a:	e063      	b.n	8006ef4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e3c:	f000 f988 	bl	8007150 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2277      	movs	r2, #119	; 0x77
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	609a      	str	r2, [r3, #8]
      break;
 8006e58:	e052      	b.n	8006f00 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e6a:	f000 f971 	bl	8007150 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689a      	ldr	r2, [r3, #8]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2180      	movs	r1, #128	; 0x80
 8006e7a:	01c9      	lsls	r1, r1, #7
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	609a      	str	r2, [r3, #8]
      break;
 8006e80:	e03e      	b.n	8006f00 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e8e:	001a      	movs	r2, r3
 8006e90:	f000 f8e2 	bl	8007058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2150      	movs	r1, #80	; 0x50
 8006e9a:	0018      	movs	r0, r3
 8006e9c:	f000 f93c 	bl	8007118 <TIM_ITRx_SetConfig>
      break;
 8006ea0:	e02e      	b.n	8006f00 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006eae:	001a      	movs	r2, r3
 8006eb0:	f000 f900 	bl	80070b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2160      	movs	r1, #96	; 0x60
 8006eba:	0018      	movs	r0, r3
 8006ebc:	f000 f92c 	bl	8007118 <TIM_ITRx_SetConfig>
      break;
 8006ec0:	e01e      	b.n	8006f00 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ece:	001a      	movs	r2, r3
 8006ed0:	f000 f8c2 	bl	8007058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2140      	movs	r1, #64	; 0x40
 8006eda:	0018      	movs	r0, r3
 8006edc:	f000 f91c 	bl	8007118 <TIM_ITRx_SetConfig>
      break;
 8006ee0:	e00e      	b.n	8006f00 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	0019      	movs	r1, r3
 8006eec:	0010      	movs	r0, r2
 8006eee:	f000 f913 	bl	8007118 <TIM_ITRx_SetConfig>
      break;
 8006ef2:	e005      	b.n	8006f00 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006ef4:	230f      	movs	r3, #15
 8006ef6:	18fb      	adds	r3, r7, r3
 8006ef8:	2201      	movs	r2, #1
 8006efa:	701a      	strb	r2, [r3, #0]
      break;
 8006efc:	e000      	b.n	8006f00 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8006efe:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	223d      	movs	r2, #61	; 0x3d
 8006f04:	2101      	movs	r1, #1
 8006f06:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	223c      	movs	r2, #60	; 0x3c
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	5499      	strb	r1, [r3, r2]

  return status;
 8006f10:	230f      	movs	r3, #15
 8006f12:	18fb      	adds	r3, r7, r3
 8006f14:	781b      	ldrb	r3, [r3, #0]
}
 8006f16:	0018      	movs	r0, r3
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	b004      	add	sp, #16
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	46c0      	nop			; (mov r8, r8)
 8006f20:	ffceff88 	.word	0xffceff88
 8006f24:	ffff00ff 	.word	0xffff00ff

08006f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a3f      	ldr	r2, [pc, #252]	; (8007038 <TIM_Base_SetConfig+0x110>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d00c      	beq.n	8006f5a <TIM_Base_SetConfig+0x32>
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	2380      	movs	r3, #128	; 0x80
 8006f44:	05db      	lsls	r3, r3, #23
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d007      	beq.n	8006f5a <TIM_Base_SetConfig+0x32>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a3b      	ldr	r2, [pc, #236]	; (800703c <TIM_Base_SetConfig+0x114>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d003      	beq.n	8006f5a <TIM_Base_SetConfig+0x32>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a3a      	ldr	r2, [pc, #232]	; (8007040 <TIM_Base_SetConfig+0x118>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d108      	bne.n	8006f6c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2270      	movs	r2, #112	; 0x70
 8006f5e:	4393      	bics	r3, r2
 8006f60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a32      	ldr	r2, [pc, #200]	; (8007038 <TIM_Base_SetConfig+0x110>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d01c      	beq.n	8006fae <TIM_Base_SetConfig+0x86>
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	2380      	movs	r3, #128	; 0x80
 8006f78:	05db      	lsls	r3, r3, #23
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d017      	beq.n	8006fae <TIM_Base_SetConfig+0x86>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a2e      	ldr	r2, [pc, #184]	; (800703c <TIM_Base_SetConfig+0x114>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d013      	beq.n	8006fae <TIM_Base_SetConfig+0x86>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a2d      	ldr	r2, [pc, #180]	; (8007040 <TIM_Base_SetConfig+0x118>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d00f      	beq.n	8006fae <TIM_Base_SetConfig+0x86>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a2c      	ldr	r2, [pc, #176]	; (8007044 <TIM_Base_SetConfig+0x11c>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d00b      	beq.n	8006fae <TIM_Base_SetConfig+0x86>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a2b      	ldr	r2, [pc, #172]	; (8007048 <TIM_Base_SetConfig+0x120>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d007      	beq.n	8006fae <TIM_Base_SetConfig+0x86>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a2a      	ldr	r2, [pc, #168]	; (800704c <TIM_Base_SetConfig+0x124>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d003      	beq.n	8006fae <TIM_Base_SetConfig+0x86>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a29      	ldr	r2, [pc, #164]	; (8007050 <TIM_Base_SetConfig+0x128>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d108      	bne.n	8006fc0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	4a28      	ldr	r2, [pc, #160]	; (8007054 <TIM_Base_SetConfig+0x12c>)
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2280      	movs	r2, #128	; 0x80
 8006fc4:	4393      	bics	r3, r2
 8006fc6:	001a      	movs	r2, r3
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	695b      	ldr	r3, [r3, #20]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	689a      	ldr	r2, [r3, #8]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a13      	ldr	r2, [pc, #76]	; (8007038 <TIM_Base_SetConfig+0x110>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d00b      	beq.n	8007006 <TIM_Base_SetConfig+0xde>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a15      	ldr	r2, [pc, #84]	; (8007048 <TIM_Base_SetConfig+0x120>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d007      	beq.n	8007006 <TIM_Base_SetConfig+0xde>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a14      	ldr	r2, [pc, #80]	; (800704c <TIM_Base_SetConfig+0x124>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d003      	beq.n	8007006 <TIM_Base_SetConfig+0xde>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a13      	ldr	r2, [pc, #76]	; (8007050 <TIM_Base_SetConfig+0x128>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d103      	bne.n	800700e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	691a      	ldr	r2, [r3, #16]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2201      	movs	r2, #1
 8007012:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	2201      	movs	r2, #1
 800701a:	4013      	ands	r3, r2
 800701c:	2b01      	cmp	r3, #1
 800701e:	d106      	bne.n	800702e <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	2201      	movs	r2, #1
 8007026:	4393      	bics	r3, r2
 8007028:	001a      	movs	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	611a      	str	r2, [r3, #16]
  }
}
 800702e:	46c0      	nop			; (mov r8, r8)
 8007030:	46bd      	mov	sp, r7
 8007032:	b004      	add	sp, #16
 8007034:	bd80      	pop	{r7, pc}
 8007036:	46c0      	nop			; (mov r8, r8)
 8007038:	40012c00 	.word	0x40012c00
 800703c:	40000400 	.word	0x40000400
 8007040:	40000800 	.word	0x40000800
 8007044:	40002000 	.word	0x40002000
 8007048:	40014000 	.word	0x40014000
 800704c:	40014400 	.word	0x40014400
 8007050:	40014800 	.word	0x40014800
 8007054:	fffffcff 	.word	0xfffffcff

08007058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6a1b      	ldr	r3, [r3, #32]
 8007068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	2201      	movs	r2, #1
 8007070:	4393      	bics	r3, r2
 8007072:	001a      	movs	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	22f0      	movs	r2, #240	; 0xf0
 8007082:	4393      	bics	r3, r2
 8007084:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	011b      	lsls	r3, r3, #4
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	4313      	orrs	r3, r2
 800708e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	220a      	movs	r2, #10
 8007094:	4393      	bics	r3, r2
 8007096:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	4313      	orrs	r3, r2
 800709e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	621a      	str	r2, [r3, #32]
}
 80070ac:	46c0      	nop			; (mov r8, r8)
 80070ae:	46bd      	mov	sp, r7
 80070b0:	b006      	add	sp, #24
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6a1b      	ldr	r3, [r3, #32]
 80070c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	2210      	movs	r2, #16
 80070cc:	4393      	bics	r3, r2
 80070ce:	001a      	movs	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	4a0d      	ldr	r2, [pc, #52]	; (8007114 <TIM_TI2_ConfigInputStage+0x60>)
 80070de:	4013      	ands	r3, r2
 80070e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	031b      	lsls	r3, r3, #12
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	22a0      	movs	r2, #160	; 0xa0
 80070f0:	4393      	bics	r3, r2
 80070f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	011b      	lsls	r3, r3, #4
 80070f8:	697a      	ldr	r2, [r7, #20]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	621a      	str	r2, [r3, #32]
}
 800710a:	46c0      	nop			; (mov r8, r8)
 800710c:	46bd      	mov	sp, r7
 800710e:	b006      	add	sp, #24
 8007110:	bd80      	pop	{r7, pc}
 8007112:	46c0      	nop			; (mov r8, r8)
 8007114:	ffff0fff 	.word	0xffff0fff

08007118 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	4a08      	ldr	r2, [pc, #32]	; (800714c <TIM_ITRx_SetConfig+0x34>)
 800712c:	4013      	ands	r3, r2
 800712e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	4313      	orrs	r3, r2
 8007136:	2207      	movs	r2, #7
 8007138:	4313      	orrs	r3, r2
 800713a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	609a      	str	r2, [r3, #8]
}
 8007142:	46c0      	nop			; (mov r8, r8)
 8007144:	46bd      	mov	sp, r7
 8007146:	b004      	add	sp, #16
 8007148:	bd80      	pop	{r7, pc}
 800714a:	46c0      	nop			; (mov r8, r8)
 800714c:	ffcfff8f 	.word	0xffcfff8f

08007150 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
 800715c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	4a09      	ldr	r2, [pc, #36]	; (800718c <TIM_ETR_SetConfig+0x3c>)
 8007168:	4013      	ands	r3, r2
 800716a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	021a      	lsls	r2, r3, #8
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	431a      	orrs	r2, r3
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	4313      	orrs	r3, r2
 8007178:	697a      	ldr	r2, [r7, #20]
 800717a:	4313      	orrs	r3, r2
 800717c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	697a      	ldr	r2, [r7, #20]
 8007182:	609a      	str	r2, [r3, #8]
}
 8007184:	46c0      	nop			; (mov r8, r8)
 8007186:	46bd      	mov	sp, r7
 8007188:	b006      	add	sp, #24
 800718a:	bd80      	pop	{r7, pc}
 800718c:	ffff00ff 	.word	0xffff00ff

08007190 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	223c      	movs	r2, #60	; 0x3c
 800719e:	5c9b      	ldrb	r3, [r3, r2]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d101      	bne.n	80071a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071a4:	2302      	movs	r3, #2
 80071a6:	e05a      	b.n	800725e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	223c      	movs	r2, #60	; 0x3c
 80071ac:	2101      	movs	r1, #1
 80071ae:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	223d      	movs	r2, #61	; 0x3d
 80071b4:	2102      	movs	r1, #2
 80071b6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a26      	ldr	r2, [pc, #152]	; (8007268 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d108      	bne.n	80071e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	4a25      	ldr	r2, [pc, #148]	; (800726c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80071d6:	4013      	ands	r3, r2
 80071d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2270      	movs	r2, #112	; 0x70
 80071e8:	4393      	bics	r3, r2
 80071ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a19      	ldr	r2, [pc, #100]	; (8007268 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d014      	beq.n	8007232 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	2380      	movs	r3, #128	; 0x80
 800720e:	05db      	lsls	r3, r3, #23
 8007210:	429a      	cmp	r2, r3
 8007212:	d00e      	beq.n	8007232 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a15      	ldr	r2, [pc, #84]	; (8007270 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d009      	beq.n	8007232 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a14      	ldr	r2, [pc, #80]	; (8007274 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d004      	beq.n	8007232 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a12      	ldr	r2, [pc, #72]	; (8007278 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d10c      	bne.n	800724c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	2280      	movs	r2, #128	; 0x80
 8007236:	4393      	bics	r3, r2
 8007238:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	4313      	orrs	r3, r2
 8007242:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	223d      	movs	r2, #61	; 0x3d
 8007250:	2101      	movs	r1, #1
 8007252:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	223c      	movs	r2, #60	; 0x3c
 8007258:	2100      	movs	r1, #0
 800725a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	0018      	movs	r0, r3
 8007260:	46bd      	mov	sp, r7
 8007262:	b004      	add	sp, #16
 8007264:	bd80      	pop	{r7, pc}
 8007266:	46c0      	nop			; (mov r8, r8)
 8007268:	40012c00 	.word	0x40012c00
 800726c:	ff0fffff 	.word	0xff0fffff
 8007270:	40000400 	.word	0x40000400
 8007274:	40000800 	.word	0x40000800
 8007278:	40014000 	.word	0x40014000

0800727c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e046      	b.n	800731c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2288      	movs	r2, #136	; 0x88
 8007292:	589b      	ldr	r3, [r3, r2]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d107      	bne.n	80072a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2284      	movs	r2, #132	; 0x84
 800729c:	2100      	movs	r1, #0
 800729e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	0018      	movs	r0, r3
 80072a4:	f7fb fde6 	bl	8002e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2288      	movs	r2, #136	; 0x88
 80072ac:	2124      	movs	r1, #36	; 0x24
 80072ae:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2101      	movs	r1, #1
 80072bc:	438a      	bics	r2, r1
 80072be:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d003      	beq.n	80072d0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	0018      	movs	r0, r3
 80072cc:	f000 fb82 	bl	80079d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	0018      	movs	r0, r3
 80072d4:	f000 f828 	bl	8007328 <UART_SetConfig>
 80072d8:	0003      	movs	r3, r0
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d101      	bne.n	80072e2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e01c      	b.n	800731c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	685a      	ldr	r2, [r3, #4]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	490d      	ldr	r1, [pc, #52]	; (8007324 <HAL_UART_Init+0xa8>)
 80072ee:	400a      	ands	r2, r1
 80072f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	689a      	ldr	r2, [r3, #8]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	212a      	movs	r1, #42	; 0x2a
 80072fe:	438a      	bics	r2, r1
 8007300:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2101      	movs	r1, #1
 800730e:	430a      	orrs	r2, r1
 8007310:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	0018      	movs	r0, r3
 8007316:	f000 fc11 	bl	8007b3c <UART_CheckIdleState>
 800731a:	0003      	movs	r3, r0
}
 800731c:	0018      	movs	r0, r3
 800731e:	46bd      	mov	sp, r7
 8007320:	b002      	add	sp, #8
 8007322:	bd80      	pop	{r7, pc}
 8007324:	ffffb7ff 	.word	0xffffb7ff

08007328 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007328:	b5b0      	push	{r4, r5, r7, lr}
 800732a:	b090      	sub	sp, #64	; 0x40
 800732c:	af00      	add	r7, sp, #0
 800732e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007330:	231a      	movs	r3, #26
 8007332:	2220      	movs	r2, #32
 8007334:	189b      	adds	r3, r3, r2
 8007336:	19db      	adds	r3, r3, r7
 8007338:	2200      	movs	r2, #0
 800733a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	689a      	ldr	r2, [r3, #8]
 8007340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	431a      	orrs	r2, r3
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	695b      	ldr	r3, [r3, #20]
 800734a:	431a      	orrs	r2, r3
 800734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734e:	69db      	ldr	r3, [r3, #28]
 8007350:	4313      	orrs	r3, r2
 8007352:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4ac1      	ldr	r2, [pc, #772]	; (8007660 <UART_SetConfig+0x338>)
 800735c:	4013      	ands	r3, r2
 800735e:	0019      	movs	r1, r3
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007366:	430b      	orrs	r3, r1
 8007368:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	4abc      	ldr	r2, [pc, #752]	; (8007664 <UART_SetConfig+0x33c>)
 8007372:	4013      	ands	r3, r2
 8007374:	0018      	movs	r0, r3
 8007376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007378:	68d9      	ldr	r1, [r3, #12]
 800737a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	0003      	movs	r3, r0
 8007380:	430b      	orrs	r3, r1
 8007382:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4ab6      	ldr	r2, [pc, #728]	; (8007668 <UART_SetConfig+0x340>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d009      	beq.n	80073a8 <UART_SetConfig+0x80>
 8007394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4ab4      	ldr	r2, [pc, #720]	; (800766c <UART_SetConfig+0x344>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d004      	beq.n	80073a8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800739e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073a4:	4313      	orrs	r3, r2
 80073a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	4ab0      	ldr	r2, [pc, #704]	; (8007670 <UART_SetConfig+0x348>)
 80073b0:	4013      	ands	r3, r2
 80073b2:	0019      	movs	r1, r3
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ba:	430b      	orrs	r3, r1
 80073bc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c4:	220f      	movs	r2, #15
 80073c6:	4393      	bics	r3, r2
 80073c8:	0018      	movs	r0, r3
 80073ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80073ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	0003      	movs	r3, r0
 80073d4:	430b      	orrs	r3, r1
 80073d6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4aa5      	ldr	r2, [pc, #660]	; (8007674 <UART_SetConfig+0x34c>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d131      	bne.n	8007446 <UART_SetConfig+0x11e>
 80073e2:	4ba5      	ldr	r3, [pc, #660]	; (8007678 <UART_SetConfig+0x350>)
 80073e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e6:	2203      	movs	r2, #3
 80073e8:	4013      	ands	r3, r2
 80073ea:	2b03      	cmp	r3, #3
 80073ec:	d01d      	beq.n	800742a <UART_SetConfig+0x102>
 80073ee:	d823      	bhi.n	8007438 <UART_SetConfig+0x110>
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d00c      	beq.n	800740e <UART_SetConfig+0xe6>
 80073f4:	d820      	bhi.n	8007438 <UART_SetConfig+0x110>
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d002      	beq.n	8007400 <UART_SetConfig+0xd8>
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d00e      	beq.n	800741c <UART_SetConfig+0xf4>
 80073fe:	e01b      	b.n	8007438 <UART_SetConfig+0x110>
 8007400:	231b      	movs	r3, #27
 8007402:	2220      	movs	r2, #32
 8007404:	189b      	adds	r3, r3, r2
 8007406:	19db      	adds	r3, r3, r7
 8007408:	2200      	movs	r2, #0
 800740a:	701a      	strb	r2, [r3, #0]
 800740c:	e154      	b.n	80076b8 <UART_SetConfig+0x390>
 800740e:	231b      	movs	r3, #27
 8007410:	2220      	movs	r2, #32
 8007412:	189b      	adds	r3, r3, r2
 8007414:	19db      	adds	r3, r3, r7
 8007416:	2202      	movs	r2, #2
 8007418:	701a      	strb	r2, [r3, #0]
 800741a:	e14d      	b.n	80076b8 <UART_SetConfig+0x390>
 800741c:	231b      	movs	r3, #27
 800741e:	2220      	movs	r2, #32
 8007420:	189b      	adds	r3, r3, r2
 8007422:	19db      	adds	r3, r3, r7
 8007424:	2204      	movs	r2, #4
 8007426:	701a      	strb	r2, [r3, #0]
 8007428:	e146      	b.n	80076b8 <UART_SetConfig+0x390>
 800742a:	231b      	movs	r3, #27
 800742c:	2220      	movs	r2, #32
 800742e:	189b      	adds	r3, r3, r2
 8007430:	19db      	adds	r3, r3, r7
 8007432:	2208      	movs	r2, #8
 8007434:	701a      	strb	r2, [r3, #0]
 8007436:	e13f      	b.n	80076b8 <UART_SetConfig+0x390>
 8007438:	231b      	movs	r3, #27
 800743a:	2220      	movs	r2, #32
 800743c:	189b      	adds	r3, r3, r2
 800743e:	19db      	adds	r3, r3, r7
 8007440:	2210      	movs	r2, #16
 8007442:	701a      	strb	r2, [r3, #0]
 8007444:	e138      	b.n	80076b8 <UART_SetConfig+0x390>
 8007446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a8c      	ldr	r2, [pc, #560]	; (800767c <UART_SetConfig+0x354>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d131      	bne.n	80074b4 <UART_SetConfig+0x18c>
 8007450:	4b89      	ldr	r3, [pc, #548]	; (8007678 <UART_SetConfig+0x350>)
 8007452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007454:	220c      	movs	r2, #12
 8007456:	4013      	ands	r3, r2
 8007458:	2b0c      	cmp	r3, #12
 800745a:	d01d      	beq.n	8007498 <UART_SetConfig+0x170>
 800745c:	d823      	bhi.n	80074a6 <UART_SetConfig+0x17e>
 800745e:	2b08      	cmp	r3, #8
 8007460:	d00c      	beq.n	800747c <UART_SetConfig+0x154>
 8007462:	d820      	bhi.n	80074a6 <UART_SetConfig+0x17e>
 8007464:	2b00      	cmp	r3, #0
 8007466:	d002      	beq.n	800746e <UART_SetConfig+0x146>
 8007468:	2b04      	cmp	r3, #4
 800746a:	d00e      	beq.n	800748a <UART_SetConfig+0x162>
 800746c:	e01b      	b.n	80074a6 <UART_SetConfig+0x17e>
 800746e:	231b      	movs	r3, #27
 8007470:	2220      	movs	r2, #32
 8007472:	189b      	adds	r3, r3, r2
 8007474:	19db      	adds	r3, r3, r7
 8007476:	2200      	movs	r2, #0
 8007478:	701a      	strb	r2, [r3, #0]
 800747a:	e11d      	b.n	80076b8 <UART_SetConfig+0x390>
 800747c:	231b      	movs	r3, #27
 800747e:	2220      	movs	r2, #32
 8007480:	189b      	adds	r3, r3, r2
 8007482:	19db      	adds	r3, r3, r7
 8007484:	2202      	movs	r2, #2
 8007486:	701a      	strb	r2, [r3, #0]
 8007488:	e116      	b.n	80076b8 <UART_SetConfig+0x390>
 800748a:	231b      	movs	r3, #27
 800748c:	2220      	movs	r2, #32
 800748e:	189b      	adds	r3, r3, r2
 8007490:	19db      	adds	r3, r3, r7
 8007492:	2204      	movs	r2, #4
 8007494:	701a      	strb	r2, [r3, #0]
 8007496:	e10f      	b.n	80076b8 <UART_SetConfig+0x390>
 8007498:	231b      	movs	r3, #27
 800749a:	2220      	movs	r2, #32
 800749c:	189b      	adds	r3, r3, r2
 800749e:	19db      	adds	r3, r3, r7
 80074a0:	2208      	movs	r2, #8
 80074a2:	701a      	strb	r2, [r3, #0]
 80074a4:	e108      	b.n	80076b8 <UART_SetConfig+0x390>
 80074a6:	231b      	movs	r3, #27
 80074a8:	2220      	movs	r2, #32
 80074aa:	189b      	adds	r3, r3, r2
 80074ac:	19db      	adds	r3, r3, r7
 80074ae:	2210      	movs	r2, #16
 80074b0:	701a      	strb	r2, [r3, #0]
 80074b2:	e101      	b.n	80076b8 <UART_SetConfig+0x390>
 80074b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a71      	ldr	r2, [pc, #452]	; (8007680 <UART_SetConfig+0x358>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d131      	bne.n	8007522 <UART_SetConfig+0x1fa>
 80074be:	4b6e      	ldr	r3, [pc, #440]	; (8007678 <UART_SetConfig+0x350>)
 80074c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c2:	2230      	movs	r2, #48	; 0x30
 80074c4:	4013      	ands	r3, r2
 80074c6:	2b30      	cmp	r3, #48	; 0x30
 80074c8:	d01d      	beq.n	8007506 <UART_SetConfig+0x1de>
 80074ca:	d823      	bhi.n	8007514 <UART_SetConfig+0x1ec>
 80074cc:	2b20      	cmp	r3, #32
 80074ce:	d00c      	beq.n	80074ea <UART_SetConfig+0x1c2>
 80074d0:	d820      	bhi.n	8007514 <UART_SetConfig+0x1ec>
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d002      	beq.n	80074dc <UART_SetConfig+0x1b4>
 80074d6:	2b10      	cmp	r3, #16
 80074d8:	d00e      	beq.n	80074f8 <UART_SetConfig+0x1d0>
 80074da:	e01b      	b.n	8007514 <UART_SetConfig+0x1ec>
 80074dc:	231b      	movs	r3, #27
 80074de:	2220      	movs	r2, #32
 80074e0:	189b      	adds	r3, r3, r2
 80074e2:	19db      	adds	r3, r3, r7
 80074e4:	2200      	movs	r2, #0
 80074e6:	701a      	strb	r2, [r3, #0]
 80074e8:	e0e6      	b.n	80076b8 <UART_SetConfig+0x390>
 80074ea:	231b      	movs	r3, #27
 80074ec:	2220      	movs	r2, #32
 80074ee:	189b      	adds	r3, r3, r2
 80074f0:	19db      	adds	r3, r3, r7
 80074f2:	2202      	movs	r2, #2
 80074f4:	701a      	strb	r2, [r3, #0]
 80074f6:	e0df      	b.n	80076b8 <UART_SetConfig+0x390>
 80074f8:	231b      	movs	r3, #27
 80074fa:	2220      	movs	r2, #32
 80074fc:	189b      	adds	r3, r3, r2
 80074fe:	19db      	adds	r3, r3, r7
 8007500:	2204      	movs	r2, #4
 8007502:	701a      	strb	r2, [r3, #0]
 8007504:	e0d8      	b.n	80076b8 <UART_SetConfig+0x390>
 8007506:	231b      	movs	r3, #27
 8007508:	2220      	movs	r2, #32
 800750a:	189b      	adds	r3, r3, r2
 800750c:	19db      	adds	r3, r3, r7
 800750e:	2208      	movs	r2, #8
 8007510:	701a      	strb	r2, [r3, #0]
 8007512:	e0d1      	b.n	80076b8 <UART_SetConfig+0x390>
 8007514:	231b      	movs	r3, #27
 8007516:	2220      	movs	r2, #32
 8007518:	189b      	adds	r3, r3, r2
 800751a:	19db      	adds	r3, r3, r7
 800751c:	2210      	movs	r2, #16
 800751e:	701a      	strb	r2, [r3, #0]
 8007520:	e0ca      	b.n	80076b8 <UART_SetConfig+0x390>
 8007522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a57      	ldr	r2, [pc, #348]	; (8007684 <UART_SetConfig+0x35c>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d106      	bne.n	800753a <UART_SetConfig+0x212>
 800752c:	231b      	movs	r3, #27
 800752e:	2220      	movs	r2, #32
 8007530:	189b      	adds	r3, r3, r2
 8007532:	19db      	adds	r3, r3, r7
 8007534:	2200      	movs	r2, #0
 8007536:	701a      	strb	r2, [r3, #0]
 8007538:	e0be      	b.n	80076b8 <UART_SetConfig+0x390>
 800753a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a52      	ldr	r2, [pc, #328]	; (8007688 <UART_SetConfig+0x360>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d106      	bne.n	8007552 <UART_SetConfig+0x22a>
 8007544:	231b      	movs	r3, #27
 8007546:	2220      	movs	r2, #32
 8007548:	189b      	adds	r3, r3, r2
 800754a:	19db      	adds	r3, r3, r7
 800754c:	2200      	movs	r2, #0
 800754e:	701a      	strb	r2, [r3, #0]
 8007550:	e0b2      	b.n	80076b8 <UART_SetConfig+0x390>
 8007552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a4d      	ldr	r2, [pc, #308]	; (800768c <UART_SetConfig+0x364>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d106      	bne.n	800756a <UART_SetConfig+0x242>
 800755c:	231b      	movs	r3, #27
 800755e:	2220      	movs	r2, #32
 8007560:	189b      	adds	r3, r3, r2
 8007562:	19db      	adds	r3, r3, r7
 8007564:	2200      	movs	r2, #0
 8007566:	701a      	strb	r2, [r3, #0]
 8007568:	e0a6      	b.n	80076b8 <UART_SetConfig+0x390>
 800756a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a3e      	ldr	r2, [pc, #248]	; (8007668 <UART_SetConfig+0x340>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d13e      	bne.n	80075f2 <UART_SetConfig+0x2ca>
 8007574:	4b40      	ldr	r3, [pc, #256]	; (8007678 <UART_SetConfig+0x350>)
 8007576:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007578:	23c0      	movs	r3, #192	; 0xc0
 800757a:	011b      	lsls	r3, r3, #4
 800757c:	4013      	ands	r3, r2
 800757e:	22c0      	movs	r2, #192	; 0xc0
 8007580:	0112      	lsls	r2, r2, #4
 8007582:	4293      	cmp	r3, r2
 8007584:	d027      	beq.n	80075d6 <UART_SetConfig+0x2ae>
 8007586:	22c0      	movs	r2, #192	; 0xc0
 8007588:	0112      	lsls	r2, r2, #4
 800758a:	4293      	cmp	r3, r2
 800758c:	d82a      	bhi.n	80075e4 <UART_SetConfig+0x2bc>
 800758e:	2280      	movs	r2, #128	; 0x80
 8007590:	0112      	lsls	r2, r2, #4
 8007592:	4293      	cmp	r3, r2
 8007594:	d011      	beq.n	80075ba <UART_SetConfig+0x292>
 8007596:	2280      	movs	r2, #128	; 0x80
 8007598:	0112      	lsls	r2, r2, #4
 800759a:	4293      	cmp	r3, r2
 800759c:	d822      	bhi.n	80075e4 <UART_SetConfig+0x2bc>
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d004      	beq.n	80075ac <UART_SetConfig+0x284>
 80075a2:	2280      	movs	r2, #128	; 0x80
 80075a4:	00d2      	lsls	r2, r2, #3
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d00e      	beq.n	80075c8 <UART_SetConfig+0x2a0>
 80075aa:	e01b      	b.n	80075e4 <UART_SetConfig+0x2bc>
 80075ac:	231b      	movs	r3, #27
 80075ae:	2220      	movs	r2, #32
 80075b0:	189b      	adds	r3, r3, r2
 80075b2:	19db      	adds	r3, r3, r7
 80075b4:	2200      	movs	r2, #0
 80075b6:	701a      	strb	r2, [r3, #0]
 80075b8:	e07e      	b.n	80076b8 <UART_SetConfig+0x390>
 80075ba:	231b      	movs	r3, #27
 80075bc:	2220      	movs	r2, #32
 80075be:	189b      	adds	r3, r3, r2
 80075c0:	19db      	adds	r3, r3, r7
 80075c2:	2202      	movs	r2, #2
 80075c4:	701a      	strb	r2, [r3, #0]
 80075c6:	e077      	b.n	80076b8 <UART_SetConfig+0x390>
 80075c8:	231b      	movs	r3, #27
 80075ca:	2220      	movs	r2, #32
 80075cc:	189b      	adds	r3, r3, r2
 80075ce:	19db      	adds	r3, r3, r7
 80075d0:	2204      	movs	r2, #4
 80075d2:	701a      	strb	r2, [r3, #0]
 80075d4:	e070      	b.n	80076b8 <UART_SetConfig+0x390>
 80075d6:	231b      	movs	r3, #27
 80075d8:	2220      	movs	r2, #32
 80075da:	189b      	adds	r3, r3, r2
 80075dc:	19db      	adds	r3, r3, r7
 80075de:	2208      	movs	r2, #8
 80075e0:	701a      	strb	r2, [r3, #0]
 80075e2:	e069      	b.n	80076b8 <UART_SetConfig+0x390>
 80075e4:	231b      	movs	r3, #27
 80075e6:	2220      	movs	r2, #32
 80075e8:	189b      	adds	r3, r3, r2
 80075ea:	19db      	adds	r3, r3, r7
 80075ec:	2210      	movs	r2, #16
 80075ee:	701a      	strb	r2, [r3, #0]
 80075f0:	e062      	b.n	80076b8 <UART_SetConfig+0x390>
 80075f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a1d      	ldr	r2, [pc, #116]	; (800766c <UART_SetConfig+0x344>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d157      	bne.n	80076ac <UART_SetConfig+0x384>
 80075fc:	4b1e      	ldr	r3, [pc, #120]	; (8007678 <UART_SetConfig+0x350>)
 80075fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007600:	23c0      	movs	r3, #192	; 0xc0
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4013      	ands	r3, r2
 8007606:	22c0      	movs	r2, #192	; 0xc0
 8007608:	0092      	lsls	r2, r2, #2
 800760a:	4293      	cmp	r3, r2
 800760c:	d040      	beq.n	8007690 <UART_SetConfig+0x368>
 800760e:	22c0      	movs	r2, #192	; 0xc0
 8007610:	0092      	lsls	r2, r2, #2
 8007612:	4293      	cmp	r3, r2
 8007614:	d843      	bhi.n	800769e <UART_SetConfig+0x376>
 8007616:	2280      	movs	r2, #128	; 0x80
 8007618:	0092      	lsls	r2, r2, #2
 800761a:	4293      	cmp	r3, r2
 800761c:	d011      	beq.n	8007642 <UART_SetConfig+0x31a>
 800761e:	2280      	movs	r2, #128	; 0x80
 8007620:	0092      	lsls	r2, r2, #2
 8007622:	4293      	cmp	r3, r2
 8007624:	d83b      	bhi.n	800769e <UART_SetConfig+0x376>
 8007626:	2b00      	cmp	r3, #0
 8007628:	d004      	beq.n	8007634 <UART_SetConfig+0x30c>
 800762a:	2280      	movs	r2, #128	; 0x80
 800762c:	0052      	lsls	r2, r2, #1
 800762e:	4293      	cmp	r3, r2
 8007630:	d00e      	beq.n	8007650 <UART_SetConfig+0x328>
 8007632:	e034      	b.n	800769e <UART_SetConfig+0x376>
 8007634:	231b      	movs	r3, #27
 8007636:	2220      	movs	r2, #32
 8007638:	189b      	adds	r3, r3, r2
 800763a:	19db      	adds	r3, r3, r7
 800763c:	2200      	movs	r2, #0
 800763e:	701a      	strb	r2, [r3, #0]
 8007640:	e03a      	b.n	80076b8 <UART_SetConfig+0x390>
 8007642:	231b      	movs	r3, #27
 8007644:	2220      	movs	r2, #32
 8007646:	189b      	adds	r3, r3, r2
 8007648:	19db      	adds	r3, r3, r7
 800764a:	2202      	movs	r2, #2
 800764c:	701a      	strb	r2, [r3, #0]
 800764e:	e033      	b.n	80076b8 <UART_SetConfig+0x390>
 8007650:	231b      	movs	r3, #27
 8007652:	2220      	movs	r2, #32
 8007654:	189b      	adds	r3, r3, r2
 8007656:	19db      	adds	r3, r3, r7
 8007658:	2204      	movs	r2, #4
 800765a:	701a      	strb	r2, [r3, #0]
 800765c:	e02c      	b.n	80076b8 <UART_SetConfig+0x390>
 800765e:	46c0      	nop			; (mov r8, r8)
 8007660:	cfff69f3 	.word	0xcfff69f3
 8007664:	ffffcfff 	.word	0xffffcfff
 8007668:	40008000 	.word	0x40008000
 800766c:	40008400 	.word	0x40008400
 8007670:	11fff4ff 	.word	0x11fff4ff
 8007674:	40013800 	.word	0x40013800
 8007678:	40021000 	.word	0x40021000
 800767c:	40004400 	.word	0x40004400
 8007680:	40004800 	.word	0x40004800
 8007684:	40004c00 	.word	0x40004c00
 8007688:	40005000 	.word	0x40005000
 800768c:	40013c00 	.word	0x40013c00
 8007690:	231b      	movs	r3, #27
 8007692:	2220      	movs	r2, #32
 8007694:	189b      	adds	r3, r3, r2
 8007696:	19db      	adds	r3, r3, r7
 8007698:	2208      	movs	r2, #8
 800769a:	701a      	strb	r2, [r3, #0]
 800769c:	e00c      	b.n	80076b8 <UART_SetConfig+0x390>
 800769e:	231b      	movs	r3, #27
 80076a0:	2220      	movs	r2, #32
 80076a2:	189b      	adds	r3, r3, r2
 80076a4:	19db      	adds	r3, r3, r7
 80076a6:	2210      	movs	r2, #16
 80076a8:	701a      	strb	r2, [r3, #0]
 80076aa:	e005      	b.n	80076b8 <UART_SetConfig+0x390>
 80076ac:	231b      	movs	r3, #27
 80076ae:	2220      	movs	r2, #32
 80076b0:	189b      	adds	r3, r3, r2
 80076b2:	19db      	adds	r3, r3, r7
 80076b4:	2210      	movs	r2, #16
 80076b6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4ac1      	ldr	r2, [pc, #772]	; (80079c4 <UART_SetConfig+0x69c>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d005      	beq.n	80076ce <UART_SetConfig+0x3a6>
 80076c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4ac0      	ldr	r2, [pc, #768]	; (80079c8 <UART_SetConfig+0x6a0>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d000      	beq.n	80076ce <UART_SetConfig+0x3a6>
 80076cc:	e093      	b.n	80077f6 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80076ce:	231b      	movs	r3, #27
 80076d0:	2220      	movs	r2, #32
 80076d2:	189b      	adds	r3, r3, r2
 80076d4:	19db      	adds	r3, r3, r7
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	2b08      	cmp	r3, #8
 80076da:	d015      	beq.n	8007708 <UART_SetConfig+0x3e0>
 80076dc:	dc18      	bgt.n	8007710 <UART_SetConfig+0x3e8>
 80076de:	2b04      	cmp	r3, #4
 80076e0:	d00d      	beq.n	80076fe <UART_SetConfig+0x3d6>
 80076e2:	dc15      	bgt.n	8007710 <UART_SetConfig+0x3e8>
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d002      	beq.n	80076ee <UART_SetConfig+0x3c6>
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d005      	beq.n	80076f8 <UART_SetConfig+0x3d0>
 80076ec:	e010      	b.n	8007710 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076ee:	f7fe fedb 	bl	80064a8 <HAL_RCC_GetPCLK1Freq>
 80076f2:	0003      	movs	r3, r0
 80076f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076f6:	e014      	b.n	8007722 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076f8:	4bb4      	ldr	r3, [pc, #720]	; (80079cc <UART_SetConfig+0x6a4>)
 80076fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076fc:	e011      	b.n	8007722 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076fe:	f7fe fe47 	bl	8006390 <HAL_RCC_GetSysClockFreq>
 8007702:	0003      	movs	r3, r0
 8007704:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007706:	e00c      	b.n	8007722 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007708:	2380      	movs	r3, #128	; 0x80
 800770a:	021b      	lsls	r3, r3, #8
 800770c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800770e:	e008      	b.n	8007722 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8007710:	2300      	movs	r3, #0
 8007712:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007714:	231a      	movs	r3, #26
 8007716:	2220      	movs	r2, #32
 8007718:	189b      	adds	r3, r3, r2
 800771a:	19db      	adds	r3, r3, r7
 800771c:	2201      	movs	r2, #1
 800771e:	701a      	strb	r2, [r3, #0]
        break;
 8007720:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007724:	2b00      	cmp	r3, #0
 8007726:	d100      	bne.n	800772a <UART_SetConfig+0x402>
 8007728:	e135      	b.n	8007996 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800772a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800772e:	4ba8      	ldr	r3, [pc, #672]	; (80079d0 <UART_SetConfig+0x6a8>)
 8007730:	0052      	lsls	r2, r2, #1
 8007732:	5ad3      	ldrh	r3, [r2, r3]
 8007734:	0019      	movs	r1, r3
 8007736:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007738:	f7f8 fd02 	bl	8000140 <__udivsi3>
 800773c:	0003      	movs	r3, r0
 800773e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007742:	685a      	ldr	r2, [r3, #4]
 8007744:	0013      	movs	r3, r2
 8007746:	005b      	lsls	r3, r3, #1
 8007748:	189b      	adds	r3, r3, r2
 800774a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800774c:	429a      	cmp	r2, r3
 800774e:	d305      	bcc.n	800775c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007758:	429a      	cmp	r2, r3
 800775a:	d906      	bls.n	800776a <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800775c:	231a      	movs	r3, #26
 800775e:	2220      	movs	r2, #32
 8007760:	189b      	adds	r3, r3, r2
 8007762:	19db      	adds	r3, r3, r7
 8007764:	2201      	movs	r2, #1
 8007766:	701a      	strb	r2, [r3, #0]
 8007768:	e044      	b.n	80077f4 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800776a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800776c:	61bb      	str	r3, [r7, #24]
 800776e:	2300      	movs	r3, #0
 8007770:	61fb      	str	r3, [r7, #28]
 8007772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007776:	4b96      	ldr	r3, [pc, #600]	; (80079d0 <UART_SetConfig+0x6a8>)
 8007778:	0052      	lsls	r2, r2, #1
 800777a:	5ad3      	ldrh	r3, [r2, r3]
 800777c:	613b      	str	r3, [r7, #16]
 800777e:	2300      	movs	r3, #0
 8007780:	617b      	str	r3, [r7, #20]
 8007782:	693a      	ldr	r2, [r7, #16]
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	69b8      	ldr	r0, [r7, #24]
 8007788:	69f9      	ldr	r1, [r7, #28]
 800778a:	f7f8 fe89 	bl	80004a0 <__aeabi_uldivmod>
 800778e:	0002      	movs	r2, r0
 8007790:	000b      	movs	r3, r1
 8007792:	0e11      	lsrs	r1, r2, #24
 8007794:	021d      	lsls	r5, r3, #8
 8007796:	430d      	orrs	r5, r1
 8007798:	0214      	lsls	r4, r2, #8
 800779a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	085b      	lsrs	r3, r3, #1
 80077a0:	60bb      	str	r3, [r7, #8]
 80077a2:	2300      	movs	r3, #0
 80077a4:	60fb      	str	r3, [r7, #12]
 80077a6:	68b8      	ldr	r0, [r7, #8]
 80077a8:	68f9      	ldr	r1, [r7, #12]
 80077aa:	1900      	adds	r0, r0, r4
 80077ac:	4169      	adcs	r1, r5
 80077ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	603b      	str	r3, [r7, #0]
 80077b4:	2300      	movs	r3, #0
 80077b6:	607b      	str	r3, [r7, #4]
 80077b8:	683a      	ldr	r2, [r7, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f7f8 fe70 	bl	80004a0 <__aeabi_uldivmod>
 80077c0:	0002      	movs	r2, r0
 80077c2:	000b      	movs	r3, r1
 80077c4:	0013      	movs	r3, r2
 80077c6:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80077c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077ca:	23c0      	movs	r3, #192	; 0xc0
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d309      	bcc.n	80077e6 <UART_SetConfig+0x4be>
 80077d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077d4:	2380      	movs	r3, #128	; 0x80
 80077d6:	035b      	lsls	r3, r3, #13
 80077d8:	429a      	cmp	r2, r3
 80077da:	d204      	bcs.n	80077e6 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077e2:	60da      	str	r2, [r3, #12]
 80077e4:	e006      	b.n	80077f4 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80077e6:	231a      	movs	r3, #26
 80077e8:	2220      	movs	r2, #32
 80077ea:	189b      	adds	r3, r3, r2
 80077ec:	19db      	adds	r3, r3, r7
 80077ee:	2201      	movs	r2, #1
 80077f0:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80077f2:	e0d0      	b.n	8007996 <UART_SetConfig+0x66e>
 80077f4:	e0cf      	b.n	8007996 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f8:	69da      	ldr	r2, [r3, #28]
 80077fa:	2380      	movs	r3, #128	; 0x80
 80077fc:	021b      	lsls	r3, r3, #8
 80077fe:	429a      	cmp	r2, r3
 8007800:	d000      	beq.n	8007804 <UART_SetConfig+0x4dc>
 8007802:	e070      	b.n	80078e6 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8007804:	231b      	movs	r3, #27
 8007806:	2220      	movs	r2, #32
 8007808:	189b      	adds	r3, r3, r2
 800780a:	19db      	adds	r3, r3, r7
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	2b08      	cmp	r3, #8
 8007810:	d015      	beq.n	800783e <UART_SetConfig+0x516>
 8007812:	dc18      	bgt.n	8007846 <UART_SetConfig+0x51e>
 8007814:	2b04      	cmp	r3, #4
 8007816:	d00d      	beq.n	8007834 <UART_SetConfig+0x50c>
 8007818:	dc15      	bgt.n	8007846 <UART_SetConfig+0x51e>
 800781a:	2b00      	cmp	r3, #0
 800781c:	d002      	beq.n	8007824 <UART_SetConfig+0x4fc>
 800781e:	2b02      	cmp	r3, #2
 8007820:	d005      	beq.n	800782e <UART_SetConfig+0x506>
 8007822:	e010      	b.n	8007846 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007824:	f7fe fe40 	bl	80064a8 <HAL_RCC_GetPCLK1Freq>
 8007828:	0003      	movs	r3, r0
 800782a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800782c:	e014      	b.n	8007858 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800782e:	4b67      	ldr	r3, [pc, #412]	; (80079cc <UART_SetConfig+0x6a4>)
 8007830:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007832:	e011      	b.n	8007858 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007834:	f7fe fdac 	bl	8006390 <HAL_RCC_GetSysClockFreq>
 8007838:	0003      	movs	r3, r0
 800783a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800783c:	e00c      	b.n	8007858 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800783e:	2380      	movs	r3, #128	; 0x80
 8007840:	021b      	lsls	r3, r3, #8
 8007842:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007844:	e008      	b.n	8007858 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8007846:	2300      	movs	r3, #0
 8007848:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800784a:	231a      	movs	r3, #26
 800784c:	2220      	movs	r2, #32
 800784e:	189b      	adds	r3, r3, r2
 8007850:	19db      	adds	r3, r3, r7
 8007852:	2201      	movs	r2, #1
 8007854:	701a      	strb	r2, [r3, #0]
        break;
 8007856:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800785a:	2b00      	cmp	r3, #0
 800785c:	d100      	bne.n	8007860 <UART_SetConfig+0x538>
 800785e:	e09a      	b.n	8007996 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007864:	4b5a      	ldr	r3, [pc, #360]	; (80079d0 <UART_SetConfig+0x6a8>)
 8007866:	0052      	lsls	r2, r2, #1
 8007868:	5ad3      	ldrh	r3, [r2, r3]
 800786a:	0019      	movs	r1, r3
 800786c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800786e:	f7f8 fc67 	bl	8000140 <__udivsi3>
 8007872:	0003      	movs	r3, r0
 8007874:	005a      	lsls	r2, r3, #1
 8007876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	085b      	lsrs	r3, r3, #1
 800787c:	18d2      	adds	r2, r2, r3
 800787e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	0019      	movs	r1, r3
 8007884:	0010      	movs	r0, r2
 8007886:	f7f8 fc5b 	bl	8000140 <__udivsi3>
 800788a:	0003      	movs	r3, r0
 800788c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800788e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007890:	2b0f      	cmp	r3, #15
 8007892:	d921      	bls.n	80078d8 <UART_SetConfig+0x5b0>
 8007894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007896:	2380      	movs	r3, #128	; 0x80
 8007898:	025b      	lsls	r3, r3, #9
 800789a:	429a      	cmp	r2, r3
 800789c:	d21c      	bcs.n	80078d8 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800789e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	200e      	movs	r0, #14
 80078a4:	2420      	movs	r4, #32
 80078a6:	1903      	adds	r3, r0, r4
 80078a8:	19db      	adds	r3, r3, r7
 80078aa:	210f      	movs	r1, #15
 80078ac:	438a      	bics	r2, r1
 80078ae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b2:	085b      	lsrs	r3, r3, #1
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	2207      	movs	r2, #7
 80078b8:	4013      	ands	r3, r2
 80078ba:	b299      	uxth	r1, r3
 80078bc:	1903      	adds	r3, r0, r4
 80078be:	19db      	adds	r3, r3, r7
 80078c0:	1902      	adds	r2, r0, r4
 80078c2:	19d2      	adds	r2, r2, r7
 80078c4:	8812      	ldrh	r2, [r2, #0]
 80078c6:	430a      	orrs	r2, r1
 80078c8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80078ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	1902      	adds	r2, r0, r4
 80078d0:	19d2      	adds	r2, r2, r7
 80078d2:	8812      	ldrh	r2, [r2, #0]
 80078d4:	60da      	str	r2, [r3, #12]
 80078d6:	e05e      	b.n	8007996 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80078d8:	231a      	movs	r3, #26
 80078da:	2220      	movs	r2, #32
 80078dc:	189b      	adds	r3, r3, r2
 80078de:	19db      	adds	r3, r3, r7
 80078e0:	2201      	movs	r2, #1
 80078e2:	701a      	strb	r2, [r3, #0]
 80078e4:	e057      	b.n	8007996 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078e6:	231b      	movs	r3, #27
 80078e8:	2220      	movs	r2, #32
 80078ea:	189b      	adds	r3, r3, r2
 80078ec:	19db      	adds	r3, r3, r7
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	2b08      	cmp	r3, #8
 80078f2:	d015      	beq.n	8007920 <UART_SetConfig+0x5f8>
 80078f4:	dc18      	bgt.n	8007928 <UART_SetConfig+0x600>
 80078f6:	2b04      	cmp	r3, #4
 80078f8:	d00d      	beq.n	8007916 <UART_SetConfig+0x5ee>
 80078fa:	dc15      	bgt.n	8007928 <UART_SetConfig+0x600>
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d002      	beq.n	8007906 <UART_SetConfig+0x5de>
 8007900:	2b02      	cmp	r3, #2
 8007902:	d005      	beq.n	8007910 <UART_SetConfig+0x5e8>
 8007904:	e010      	b.n	8007928 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007906:	f7fe fdcf 	bl	80064a8 <HAL_RCC_GetPCLK1Freq>
 800790a:	0003      	movs	r3, r0
 800790c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800790e:	e014      	b.n	800793a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007910:	4b2e      	ldr	r3, [pc, #184]	; (80079cc <UART_SetConfig+0x6a4>)
 8007912:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007914:	e011      	b.n	800793a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007916:	f7fe fd3b 	bl	8006390 <HAL_RCC_GetSysClockFreq>
 800791a:	0003      	movs	r3, r0
 800791c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800791e:	e00c      	b.n	800793a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007920:	2380      	movs	r3, #128	; 0x80
 8007922:	021b      	lsls	r3, r3, #8
 8007924:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007926:	e008      	b.n	800793a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8007928:	2300      	movs	r3, #0
 800792a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800792c:	231a      	movs	r3, #26
 800792e:	2220      	movs	r2, #32
 8007930:	189b      	adds	r3, r3, r2
 8007932:	19db      	adds	r3, r3, r7
 8007934:	2201      	movs	r2, #1
 8007936:	701a      	strb	r2, [r3, #0]
        break;
 8007938:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800793a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800793c:	2b00      	cmp	r3, #0
 800793e:	d02a      	beq.n	8007996 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007944:	4b22      	ldr	r3, [pc, #136]	; (80079d0 <UART_SetConfig+0x6a8>)
 8007946:	0052      	lsls	r2, r2, #1
 8007948:	5ad3      	ldrh	r3, [r2, r3]
 800794a:	0019      	movs	r1, r3
 800794c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800794e:	f7f8 fbf7 	bl	8000140 <__udivsi3>
 8007952:	0003      	movs	r3, r0
 8007954:	001a      	movs	r2, r3
 8007956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	085b      	lsrs	r3, r3, #1
 800795c:	18d2      	adds	r2, r2, r3
 800795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	0019      	movs	r1, r3
 8007964:	0010      	movs	r0, r2
 8007966:	f7f8 fbeb 	bl	8000140 <__udivsi3>
 800796a:	0003      	movs	r3, r0
 800796c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800796e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007970:	2b0f      	cmp	r3, #15
 8007972:	d90a      	bls.n	800798a <UART_SetConfig+0x662>
 8007974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007976:	2380      	movs	r3, #128	; 0x80
 8007978:	025b      	lsls	r3, r3, #9
 800797a:	429a      	cmp	r2, r3
 800797c:	d205      	bcs.n	800798a <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800797e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007980:	b29a      	uxth	r2, r3
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	60da      	str	r2, [r3, #12]
 8007988:	e005      	b.n	8007996 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800798a:	231a      	movs	r3, #26
 800798c:	2220      	movs	r2, #32
 800798e:	189b      	adds	r3, r3, r2
 8007990:	19db      	adds	r3, r3, r7
 8007992:	2201      	movs	r2, #1
 8007994:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007998:	226a      	movs	r2, #106	; 0x6a
 800799a:	2101      	movs	r1, #1
 800799c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800799e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a0:	2268      	movs	r2, #104	; 0x68
 80079a2:	2101      	movs	r1, #1
 80079a4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a8:	2200      	movs	r2, #0
 80079aa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80079ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ae:	2200      	movs	r2, #0
 80079b0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80079b2:	231a      	movs	r3, #26
 80079b4:	2220      	movs	r2, #32
 80079b6:	189b      	adds	r3, r3, r2
 80079b8:	19db      	adds	r3, r3, r7
 80079ba:	781b      	ldrb	r3, [r3, #0]
}
 80079bc:	0018      	movs	r0, r3
 80079be:	46bd      	mov	sp, r7
 80079c0:	b010      	add	sp, #64	; 0x40
 80079c2:	bdb0      	pop	{r4, r5, r7, pc}
 80079c4:	40008000 	.word	0x40008000
 80079c8:	40008400 	.word	0x40008400
 80079cc:	00f42400 	.word	0x00f42400
 80079d0:	08015f6c 	.word	0x08015f6c

080079d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e0:	2208      	movs	r2, #8
 80079e2:	4013      	ands	r3, r2
 80079e4:	d00b      	beq.n	80079fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	4a4a      	ldr	r2, [pc, #296]	; (8007b18 <UART_AdvFeatureConfig+0x144>)
 80079ee:	4013      	ands	r3, r2
 80079f0:	0019      	movs	r1, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	430a      	orrs	r2, r1
 80079fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a02:	2201      	movs	r2, #1
 8007a04:	4013      	ands	r3, r2
 8007a06:	d00b      	beq.n	8007a20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	4a43      	ldr	r2, [pc, #268]	; (8007b1c <UART_AdvFeatureConfig+0x148>)
 8007a10:	4013      	ands	r3, r2
 8007a12:	0019      	movs	r1, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a24:	2202      	movs	r2, #2
 8007a26:	4013      	ands	r3, r2
 8007a28:	d00b      	beq.n	8007a42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	4a3b      	ldr	r2, [pc, #236]	; (8007b20 <UART_AdvFeatureConfig+0x14c>)
 8007a32:	4013      	ands	r3, r2
 8007a34:	0019      	movs	r1, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	430a      	orrs	r2, r1
 8007a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a46:	2204      	movs	r2, #4
 8007a48:	4013      	ands	r3, r2
 8007a4a:	d00b      	beq.n	8007a64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	4a34      	ldr	r2, [pc, #208]	; (8007b24 <UART_AdvFeatureConfig+0x150>)
 8007a54:	4013      	ands	r3, r2
 8007a56:	0019      	movs	r1, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	430a      	orrs	r2, r1
 8007a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a68:	2210      	movs	r2, #16
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	d00b      	beq.n	8007a86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	4a2c      	ldr	r2, [pc, #176]	; (8007b28 <UART_AdvFeatureConfig+0x154>)
 8007a76:	4013      	ands	r3, r2
 8007a78:	0019      	movs	r1, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	430a      	orrs	r2, r1
 8007a84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8a:	2220      	movs	r2, #32
 8007a8c:	4013      	ands	r3, r2
 8007a8e:	d00b      	beq.n	8007aa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	4a25      	ldr	r2, [pc, #148]	; (8007b2c <UART_AdvFeatureConfig+0x158>)
 8007a98:	4013      	ands	r3, r2
 8007a9a:	0019      	movs	r1, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	430a      	orrs	r2, r1
 8007aa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aac:	2240      	movs	r2, #64	; 0x40
 8007aae:	4013      	ands	r3, r2
 8007ab0:	d01d      	beq.n	8007aee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	4a1d      	ldr	r2, [pc, #116]	; (8007b30 <UART_AdvFeatureConfig+0x15c>)
 8007aba:	4013      	ands	r3, r2
 8007abc:	0019      	movs	r1, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	430a      	orrs	r2, r1
 8007ac8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ace:	2380      	movs	r3, #128	; 0x80
 8007ad0:	035b      	lsls	r3, r3, #13
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d10b      	bne.n	8007aee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	4a15      	ldr	r2, [pc, #84]	; (8007b34 <UART_AdvFeatureConfig+0x160>)
 8007ade:	4013      	ands	r3, r2
 8007ae0:	0019      	movs	r1, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	430a      	orrs	r2, r1
 8007aec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af2:	2280      	movs	r2, #128	; 0x80
 8007af4:	4013      	ands	r3, r2
 8007af6:	d00b      	beq.n	8007b10 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	4a0e      	ldr	r2, [pc, #56]	; (8007b38 <UART_AdvFeatureConfig+0x164>)
 8007b00:	4013      	ands	r3, r2
 8007b02:	0019      	movs	r1, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	430a      	orrs	r2, r1
 8007b0e:	605a      	str	r2, [r3, #4]
  }
}
 8007b10:	46c0      	nop			; (mov r8, r8)
 8007b12:	46bd      	mov	sp, r7
 8007b14:	b002      	add	sp, #8
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	ffff7fff 	.word	0xffff7fff
 8007b1c:	fffdffff 	.word	0xfffdffff
 8007b20:	fffeffff 	.word	0xfffeffff
 8007b24:	fffbffff 	.word	0xfffbffff
 8007b28:	ffffefff 	.word	0xffffefff
 8007b2c:	ffffdfff 	.word	0xffffdfff
 8007b30:	ffefffff 	.word	0xffefffff
 8007b34:	ff9fffff 	.word	0xff9fffff
 8007b38:	fff7ffff 	.word	0xfff7ffff

08007b3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b092      	sub	sp, #72	; 0x48
 8007b40:	af02      	add	r7, sp, #8
 8007b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2290      	movs	r2, #144	; 0x90
 8007b48:	2100      	movs	r1, #0
 8007b4a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b4c:	f7fb fcf8 	bl	8003540 <HAL_GetTick>
 8007b50:	0003      	movs	r3, r0
 8007b52:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2208      	movs	r2, #8
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	2b08      	cmp	r3, #8
 8007b60:	d12d      	bne.n	8007bbe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b64:	2280      	movs	r2, #128	; 0x80
 8007b66:	0391      	lsls	r1, r2, #14
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	4a47      	ldr	r2, [pc, #284]	; (8007c88 <UART_CheckIdleState+0x14c>)
 8007b6c:	9200      	str	r2, [sp, #0]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f000 f88e 	bl	8007c90 <UART_WaitOnFlagUntilTimeout>
 8007b74:	1e03      	subs	r3, r0, #0
 8007b76:	d022      	beq.n	8007bbe <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b78:	f3ef 8310 	mrs	r3, PRIMASK
 8007b7c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007b80:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b82:	2301      	movs	r3, #1
 8007b84:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b88:	f383 8810 	msr	PRIMASK, r3
}
 8007b8c:	46c0      	nop			; (mov r8, r8)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2180      	movs	r1, #128	; 0x80
 8007b9a:	438a      	bics	r2, r1
 8007b9c:	601a      	str	r2, [r3, #0]
 8007b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba4:	f383 8810 	msr	PRIMASK, r3
}
 8007ba8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2288      	movs	r2, #136	; 0x88
 8007bae:	2120      	movs	r1, #32
 8007bb0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2284      	movs	r2, #132	; 0x84
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	e060      	b.n	8007c80 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2204      	movs	r2, #4
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	2b04      	cmp	r3, #4
 8007bca:	d146      	bne.n	8007c5a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bce:	2280      	movs	r2, #128	; 0x80
 8007bd0:	03d1      	lsls	r1, r2, #15
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	4a2c      	ldr	r2, [pc, #176]	; (8007c88 <UART_CheckIdleState+0x14c>)
 8007bd6:	9200      	str	r2, [sp, #0]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f000 f859 	bl	8007c90 <UART_WaitOnFlagUntilTimeout>
 8007bde:	1e03      	subs	r3, r0, #0
 8007be0:	d03b      	beq.n	8007c5a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007be2:	f3ef 8310 	mrs	r3, PRIMASK
 8007be6:	60fb      	str	r3, [r7, #12]
  return(result);
 8007be8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bea:	637b      	str	r3, [r7, #52]	; 0x34
 8007bec:	2301      	movs	r3, #1
 8007bee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	f383 8810 	msr	PRIMASK, r3
}
 8007bf6:	46c0      	nop			; (mov r8, r8)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4922      	ldr	r1, [pc, #136]	; (8007c8c <UART_CheckIdleState+0x150>)
 8007c04:	400a      	ands	r2, r1
 8007c06:	601a      	str	r2, [r3, #0]
 8007c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	f383 8810 	msr	PRIMASK, r3
}
 8007c12:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c14:	f3ef 8310 	mrs	r3, PRIMASK
 8007c18:	61bb      	str	r3, [r7, #24]
  return(result);
 8007c1a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c1c:	633b      	str	r3, [r7, #48]	; 0x30
 8007c1e:	2301      	movs	r3, #1
 8007c20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	f383 8810 	msr	PRIMASK, r3
}
 8007c28:	46c0      	nop			; (mov r8, r8)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	689a      	ldr	r2, [r3, #8]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2101      	movs	r1, #1
 8007c36:	438a      	bics	r2, r1
 8007c38:	609a      	str	r2, [r3, #8]
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c3e:	6a3b      	ldr	r3, [r7, #32]
 8007c40:	f383 8810 	msr	PRIMASK, r3
}
 8007c44:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	228c      	movs	r2, #140	; 0x8c
 8007c4a:	2120      	movs	r1, #32
 8007c4c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2284      	movs	r2, #132	; 0x84
 8007c52:	2100      	movs	r1, #0
 8007c54:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c56:	2303      	movs	r3, #3
 8007c58:	e012      	b.n	8007c80 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2288      	movs	r2, #136	; 0x88
 8007c5e:	2120      	movs	r1, #32
 8007c60:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	228c      	movs	r2, #140	; 0x8c
 8007c66:	2120      	movs	r1, #32
 8007c68:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2284      	movs	r2, #132	; 0x84
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	0018      	movs	r0, r3
 8007c82:	46bd      	mov	sp, r7
 8007c84:	b010      	add	sp, #64	; 0x40
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	01ffffff 	.word	0x01ffffff
 8007c8c:	fffffedf 	.word	0xfffffedf

08007c90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	603b      	str	r3, [r7, #0]
 8007c9c:	1dfb      	adds	r3, r7, #7
 8007c9e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ca0:	e051      	b.n	8007d46 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	d04e      	beq.n	8007d46 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ca8:	f7fb fc4a 	bl	8003540 <HAL_GetTick>
 8007cac:	0002      	movs	r2, r0
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	69ba      	ldr	r2, [r7, #24]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d302      	bcc.n	8007cbe <UART_WaitOnFlagUntilTimeout+0x2e>
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d101      	bne.n	8007cc2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	e051      	b.n	8007d66 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2204      	movs	r2, #4
 8007cca:	4013      	ands	r3, r2
 8007ccc:	d03b      	beq.n	8007d46 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	2b80      	cmp	r3, #128	; 0x80
 8007cd2:	d038      	beq.n	8007d46 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	2b40      	cmp	r3, #64	; 0x40
 8007cd8:	d035      	beq.n	8007d46 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	69db      	ldr	r3, [r3, #28]
 8007ce0:	2208      	movs	r2, #8
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	2b08      	cmp	r3, #8
 8007ce6:	d111      	bne.n	8007d0c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2208      	movs	r2, #8
 8007cee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	0018      	movs	r0, r3
 8007cf4:	f000 f83c 	bl	8007d70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2290      	movs	r2, #144	; 0x90
 8007cfc:	2108      	movs	r1, #8
 8007cfe:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2284      	movs	r2, #132	; 0x84
 8007d04:	2100      	movs	r1, #0
 8007d06:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e02c      	b.n	8007d66 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	69da      	ldr	r2, [r3, #28]
 8007d12:	2380      	movs	r3, #128	; 0x80
 8007d14:	011b      	lsls	r3, r3, #4
 8007d16:	401a      	ands	r2, r3
 8007d18:	2380      	movs	r3, #128	; 0x80
 8007d1a:	011b      	lsls	r3, r3, #4
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d112      	bne.n	8007d46 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2280      	movs	r2, #128	; 0x80
 8007d26:	0112      	lsls	r2, r2, #4
 8007d28:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	0018      	movs	r0, r3
 8007d2e:	f000 f81f 	bl	8007d70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2290      	movs	r2, #144	; 0x90
 8007d36:	2120      	movs	r1, #32
 8007d38:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2284      	movs	r2, #132	; 0x84
 8007d3e:	2100      	movs	r1, #0
 8007d40:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007d42:	2303      	movs	r3, #3
 8007d44:	e00f      	b.n	8007d66 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	69db      	ldr	r3, [r3, #28]
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	4013      	ands	r3, r2
 8007d50:	68ba      	ldr	r2, [r7, #8]
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	425a      	negs	r2, r3
 8007d56:	4153      	adcs	r3, r2
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	001a      	movs	r2, r3
 8007d5c:	1dfb      	adds	r3, r7, #7
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d09e      	beq.n	8007ca2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	0018      	movs	r0, r3
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	b004      	add	sp, #16
 8007d6c:	bd80      	pop	{r7, pc}
	...

08007d70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b08e      	sub	sp, #56	; 0x38
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d78:	f3ef 8310 	mrs	r3, PRIMASK
 8007d7c:	617b      	str	r3, [r7, #20]
  return(result);
 8007d7e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d80:	637b      	str	r3, [r7, #52]	; 0x34
 8007d82:	2301      	movs	r3, #1
 8007d84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	f383 8810 	msr	PRIMASK, r3
}
 8007d8c:	46c0      	nop			; (mov r8, r8)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4926      	ldr	r1, [pc, #152]	; (8007e34 <UART_EndRxTransfer+0xc4>)
 8007d9a:	400a      	ands	r2, r1
 8007d9c:	601a      	str	r2, [r3, #0]
 8007d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	f383 8810 	msr	PRIMASK, r3
}
 8007da8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007daa:	f3ef 8310 	mrs	r3, PRIMASK
 8007dae:	623b      	str	r3, [r7, #32]
  return(result);
 8007db0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007db2:	633b      	str	r3, [r7, #48]	; 0x30
 8007db4:	2301      	movs	r3, #1
 8007db6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dba:	f383 8810 	msr	PRIMASK, r3
}
 8007dbe:	46c0      	nop			; (mov r8, r8)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	689a      	ldr	r2, [r3, #8]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	491b      	ldr	r1, [pc, #108]	; (8007e38 <UART_EndRxTransfer+0xc8>)
 8007dcc:	400a      	ands	r2, r1
 8007dce:	609a      	str	r2, [r3, #8]
 8007dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd6:	f383 8810 	msr	PRIMASK, r3
}
 8007dda:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d118      	bne.n	8007e16 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007de4:	f3ef 8310 	mrs	r3, PRIMASK
 8007de8:	60bb      	str	r3, [r7, #8]
  return(result);
 8007dea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dee:	2301      	movs	r3, #1
 8007df0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f383 8810 	msr	PRIMASK, r3
}
 8007df8:	46c0      	nop			; (mov r8, r8)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2110      	movs	r1, #16
 8007e06:	438a      	bics	r2, r1
 8007e08:	601a      	str	r2, [r3, #0]
 8007e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	f383 8810 	msr	PRIMASK, r3
}
 8007e14:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	228c      	movs	r2, #140	; 0x8c
 8007e1a:	2120      	movs	r1, #32
 8007e1c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007e2a:	46c0      	nop			; (mov r8, r8)
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	b00e      	add	sp, #56	; 0x38
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	46c0      	nop			; (mov r8, r8)
 8007e34:	fffffedf 	.word	0xfffffedf
 8007e38:	effffffe 	.word	0xeffffffe

08007e3c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2284      	movs	r2, #132	; 0x84
 8007e48:	5c9b      	ldrb	r3, [r3, r2]
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d101      	bne.n	8007e52 <HAL_UARTEx_DisableFifoMode+0x16>
 8007e4e:	2302      	movs	r3, #2
 8007e50:	e027      	b.n	8007ea2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2284      	movs	r2, #132	; 0x84
 8007e56:	2101      	movs	r1, #1
 8007e58:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2288      	movs	r2, #136	; 0x88
 8007e5e:	2124      	movs	r1, #36	; 0x24
 8007e60:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2101      	movs	r1, #1
 8007e76:	438a      	bics	r2, r1
 8007e78:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	4a0b      	ldr	r2, [pc, #44]	; (8007eac <HAL_UARTEx_DisableFifoMode+0x70>)
 8007e7e:	4013      	ands	r3, r2
 8007e80:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2288      	movs	r2, #136	; 0x88
 8007e94:	2120      	movs	r1, #32
 8007e96:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2284      	movs	r2, #132	; 0x84
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	0018      	movs	r0, r3
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	b004      	add	sp, #16
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	46c0      	nop			; (mov r8, r8)
 8007eac:	dfffffff 	.word	0xdfffffff

08007eb0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2284      	movs	r2, #132	; 0x84
 8007ebe:	5c9b      	ldrb	r3, [r3, r2]
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d101      	bne.n	8007ec8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	e02e      	b.n	8007f26 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2284      	movs	r2, #132	; 0x84
 8007ecc:	2101      	movs	r1, #1
 8007ece:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2288      	movs	r2, #136	; 0x88
 8007ed4:	2124      	movs	r1, #36	; 0x24
 8007ed6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2101      	movs	r1, #1
 8007eec:	438a      	bics	r2, r1
 8007eee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	00db      	lsls	r3, r3, #3
 8007ef8:	08d9      	lsrs	r1, r3, #3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	683a      	ldr	r2, [r7, #0]
 8007f00:	430a      	orrs	r2, r1
 8007f02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	0018      	movs	r0, r3
 8007f08:	f000 f854 	bl	8007fb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2288      	movs	r2, #136	; 0x88
 8007f18:	2120      	movs	r1, #32
 8007f1a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2284      	movs	r2, #132	; 0x84
 8007f20:	2100      	movs	r1, #0
 8007f22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	0018      	movs	r0, r3
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	b004      	add	sp, #16
 8007f2c:	bd80      	pop	{r7, pc}
	...

08007f30 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2284      	movs	r2, #132	; 0x84
 8007f3e:	5c9b      	ldrb	r3, [r3, r2]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d101      	bne.n	8007f48 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007f44:	2302      	movs	r3, #2
 8007f46:	e02f      	b.n	8007fa8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2284      	movs	r2, #132	; 0x84
 8007f4c:	2101      	movs	r1, #1
 8007f4e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2288      	movs	r2, #136	; 0x88
 8007f54:	2124      	movs	r1, #36	; 0x24
 8007f56:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2101      	movs	r1, #1
 8007f6c:	438a      	bics	r2, r1
 8007f6e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	4a0e      	ldr	r2, [pc, #56]	; (8007fb0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007f78:	4013      	ands	r3, r2
 8007f7a:	0019      	movs	r1, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	683a      	ldr	r2, [r7, #0]
 8007f82:	430a      	orrs	r2, r1
 8007f84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	0018      	movs	r0, r3
 8007f8a:	f000 f813 	bl	8007fb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2288      	movs	r2, #136	; 0x88
 8007f9a:	2120      	movs	r1, #32
 8007f9c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2284      	movs	r2, #132	; 0x84
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	0018      	movs	r0, r3
 8007faa:	46bd      	mov	sp, r7
 8007fac:	b004      	add	sp, #16
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	f1ffffff 	.word	0xf1ffffff

08007fb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d108      	bne.n	8007fd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	226a      	movs	r2, #106	; 0x6a
 8007fc8:	2101      	movs	r1, #1
 8007fca:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2268      	movs	r2, #104	; 0x68
 8007fd0:	2101      	movs	r1, #1
 8007fd2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007fd4:	e043      	b.n	800805e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007fd6:	260f      	movs	r6, #15
 8007fd8:	19bb      	adds	r3, r7, r6
 8007fda:	2208      	movs	r2, #8
 8007fdc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007fde:	200e      	movs	r0, #14
 8007fe0:	183b      	adds	r3, r7, r0
 8007fe2:	2208      	movs	r2, #8
 8007fe4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	0e5b      	lsrs	r3, r3, #25
 8007fee:	b2da      	uxtb	r2, r3
 8007ff0:	240d      	movs	r4, #13
 8007ff2:	193b      	adds	r3, r7, r4
 8007ff4:	2107      	movs	r1, #7
 8007ff6:	400a      	ands	r2, r1
 8007ff8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	0f5b      	lsrs	r3, r3, #29
 8008002:	b2da      	uxtb	r2, r3
 8008004:	250c      	movs	r5, #12
 8008006:	197b      	adds	r3, r7, r5
 8008008:	2107      	movs	r1, #7
 800800a:	400a      	ands	r2, r1
 800800c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800800e:	183b      	adds	r3, r7, r0
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	197a      	adds	r2, r7, r5
 8008014:	7812      	ldrb	r2, [r2, #0]
 8008016:	4914      	ldr	r1, [pc, #80]	; (8008068 <UARTEx_SetNbDataToProcess+0xb4>)
 8008018:	5c8a      	ldrb	r2, [r1, r2]
 800801a:	435a      	muls	r2, r3
 800801c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800801e:	197b      	adds	r3, r7, r5
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	4a12      	ldr	r2, [pc, #72]	; (800806c <UARTEx_SetNbDataToProcess+0xb8>)
 8008024:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008026:	0019      	movs	r1, r3
 8008028:	f7f8 f914 	bl	8000254 <__divsi3>
 800802c:	0003      	movs	r3, r0
 800802e:	b299      	uxth	r1, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	226a      	movs	r2, #106	; 0x6a
 8008034:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008036:	19bb      	adds	r3, r7, r6
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	193a      	adds	r2, r7, r4
 800803c:	7812      	ldrb	r2, [r2, #0]
 800803e:	490a      	ldr	r1, [pc, #40]	; (8008068 <UARTEx_SetNbDataToProcess+0xb4>)
 8008040:	5c8a      	ldrb	r2, [r1, r2]
 8008042:	435a      	muls	r2, r3
 8008044:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008046:	193b      	adds	r3, r7, r4
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	4a08      	ldr	r2, [pc, #32]	; (800806c <UARTEx_SetNbDataToProcess+0xb8>)
 800804c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800804e:	0019      	movs	r1, r3
 8008050:	f7f8 f900 	bl	8000254 <__divsi3>
 8008054:	0003      	movs	r3, r0
 8008056:	b299      	uxth	r1, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2268      	movs	r2, #104	; 0x68
 800805c:	5299      	strh	r1, [r3, r2]
}
 800805e:	46c0      	nop			; (mov r8, r8)
 8008060:	46bd      	mov	sp, r7
 8008062:	b005      	add	sp, #20
 8008064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008066:	46c0      	nop			; (mov r8, r8)
 8008068:	08015f84 	.word	0x08015f84
 800806c:	08015f8c 	.word	0x08015f8c

08008070 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 8008074:	f003 fa30 	bl	800b4d8 <touchgfx_components_init>
    touchgfx_init();
 8008078:	f003 f9f4 	bl	800b464 <touchgfx_init>
}
 800807c:	46c0      	nop			; (mov r8, r8)
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 8008086:	f003 fa2d 	bl	800b4e4 <touchgfx_taskEntry>
}
 800808a:	46c0      	nop			; (mov r8, r8)
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
    {
 8008098:	4a03      	ldr	r2, [pc, #12]	; (80080a8 <_ZN8touchgfx12FontProviderD1Ev+0x18>)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	601a      	str	r2, [r3, #0]
    }
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	0018      	movs	r0, r3
 80080a2:	46bd      	mov	sp, r7
 80080a4:	b002      	add	sp, #8
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	08015fb0 	.word	0x08015fb0

080080ac <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
    }
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	0018      	movs	r0, r3
 80080b8:	f7ff ffea 	bl	8008090 <_ZN8touchgfx12FontProviderD1Ev>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2104      	movs	r1, #4
 80080c0:	0018      	movs	r0, r3
 80080c2:	f00b fe57 	bl	8013d74 <_ZdlPvj>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	0018      	movs	r0, r3
 80080ca:	46bd      	mov	sp, r7
 80080cc:	b002      	add	sp, #8
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	000a      	movs	r2, r1
 80080da:	1cbb      	adds	r3, r7, #2
 80080dc:	801a      	strh	r2, [r3, #0]
    switch (typography)
 80080de:	1cbb      	adds	r3, r7, #2
 80080e0:	881b      	ldrh	r3, [r3, #0]
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	d00f      	beq.n	8008106 <_ZN23ApplicationFontProvider7getFontEt+0x36>
 80080e6:	dc13      	bgt.n	8008110 <_ZN23ApplicationFontProvider7getFontEt+0x40>
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d002      	beq.n	80080f2 <_ZN23ApplicationFontProvider7getFontEt+0x22>
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d005      	beq.n	80080fc <_ZN23ApplicationFontProvider7getFontEt+0x2c>
 80080f0:	e00e      	b.n	8008110 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80080f2:	f001 fecd 	bl	8009e90 <_ZN17TypedTextDatabase8getFontsEv>
 80080f6:	0003      	movs	r3, r0
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	e00a      	b.n	8008112 <_ZN23ApplicationFontProvider7getFontEt+0x42>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80080fc:	f001 fec8 	bl	8009e90 <_ZN17TypedTextDatabase8getFontsEv>
 8008100:	0003      	movs	r3, r0
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	e005      	b.n	8008112 <_ZN23ApplicationFontProvider7getFontEt+0x42>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8008106:	f001 fec3 	bl	8009e90 <_ZN17TypedTextDatabase8getFontsEv>
 800810a:	0003      	movs	r3, r0
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	e000      	b.n	8008112 <_ZN23ApplicationFontProvider7getFontEt+0x42>
    default:
        return 0;
 8008110:	2300      	movs	r3, #0
    }
}
 8008112:	0018      	movs	r0, r3
 8008114:	46bd      	mov	sp, r7
 8008116:	b002      	add	sp, #8
 8008118:	bd80      	pop	{r7, pc}
	...

0800811c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	4a05      	ldr	r2, [pc, #20]	; (800813c <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	601a      	str	r2, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	0018      	movs	r0, r3
 800812e:	f7ff ffaf 	bl	8008090 <_ZN8touchgfx12FontProviderD1Ev>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	0018      	movs	r0, r3
 8008136:	46bd      	mov	sp, r7
 8008138:	b002      	add	sp, #8
 800813a:	bd80      	pop	{r7, pc}
 800813c:	08015f9c 	.word	0x08015f9c

08008140 <_ZN23ApplicationFontProviderD0Ev>:
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	0018      	movs	r0, r3
 800814c:	f7ff ffe6 	bl	800811c <_ZN23ApplicationFontProviderD1Ev>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2104      	movs	r1, #4
 8008154:	0018      	movs	r0, r3
 8008156:	f00b fe0d 	bl	8013d74 <_ZdlPvj>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	0018      	movs	r0, r3
 800815e:	46bd      	mov	sp, r7
 8008160:	b002      	add	sp, #8
 8008162:	bd80      	pop	{r7, pc}

08008164 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
    {
 800816c:	4a03      	ldr	r2, [pc, #12]	; (800817c <_ZN8touchgfx4FontD1Ev+0x18>)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	601a      	str	r2, [r3, #0]
    }
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	0018      	movs	r0, r3
 8008176:	46bd      	mov	sp, r7
 8008178:	b002      	add	sp, #8
 800817a:	bd80      	pop	{r7, pc}
 800817c:	08016280 	.word	0x08016280

08008180 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
    }
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	0018      	movs	r0, r3
 800818c:	f7ff ffea 	bl	8008164 <_ZN8touchgfx4FontD1Ev>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2114      	movs	r1, #20
 8008194:	0018      	movs	r0, r3
 8008196:	f00b fded 	bl	8013d74 <_ZdlPvj>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	0018      	movs	r0, r3
 800819e:	46bd      	mov	sp, r7
 80081a0:	b002      	add	sp, #8
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80081a4:	b5b0      	push	{r4, r5, r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	000a      	movs	r2, r1
 80081ae:	1cbb      	adds	r3, r7, #2
 80081b0:	801a      	strh	r2, [r3, #0]
    {
        if (unicode == 0)
 80081b2:	1cbb      	adds	r3, r7, #2
 80081b4:	881b      	ldrh	r3, [r3, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d101      	bne.n	80081be <_ZNK8touchgfx4Font8getGlyphEt+0x1a>
        {
            return 0;
 80081ba:	2300      	movs	r3, #0
 80081bc:	e014      	b.n	80081e8 <_ZNK8touchgfx4Font8getGlyphEt+0x44>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 80081be:	2300      	movs	r3, #0
 80081c0:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 80081c2:	210f      	movs	r1, #15
 80081c4:	187b      	adds	r3, r7, r1
 80081c6:	2200      	movs	r2, #0
 80081c8:	701a      	strb	r2, [r3, #0]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	3308      	adds	r3, #8
 80081d0:	681c      	ldr	r4, [r3, #0]
 80081d2:	187d      	adds	r5, r7, r1
 80081d4:	2310      	movs	r3, #16
 80081d6:	18fa      	adds	r2, r7, r3
 80081d8:	1cbb      	adds	r3, r7, #2
 80081da:	8819      	ldrh	r1, [r3, #0]
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	002b      	movs	r3, r5
 80081e0:	47a0      	blx	r4
 80081e2:	0003      	movs	r3, r0
 80081e4:	617b      	str	r3, [r7, #20]
        return glyph;
 80081e6:	697b      	ldr	r3, [r7, #20]
    }
 80081e8:	0018      	movs	r0, r3
 80081ea:	46bd      	mov	sp, r7
 80081ec:	b006      	add	sp, #24
 80081ee:	bdb0      	pop	{r4, r5, r7, pc}

080081f0 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	89db      	ldrh	r3, [r3, #14]
    }
 80081fc:	0018      	movs	r0, r3
 80081fe:	46bd      	mov	sp, r7
 8008200:	b002      	add	sp, #8
 8008202:	bd80      	pop	{r7, pc}

08008204 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	8a1b      	ldrh	r3, [r3, #16]
    }
 8008210:	0018      	movs	r0, r3
 8008212:	46bd      	mov	sp, r7
 8008214:	b002      	add	sp, #8
 8008216:	bd80      	pop	{r7, pc}

08008218 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	88db      	ldrh	r3, [r3, #6]
    }
 8008224:	0018      	movs	r0, r3
 8008226:	46bd      	mov	sp, r7
 8008228:	b002      	add	sp, #8
 800822a:	bd80      	pop	{r7, pc}

0800822c <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	889b      	ldrh	r3, [r3, #4]
    }
 8008238:	0018      	movs	r0, r3
 800823a:	46bd      	mov	sp, r7
 800823c:	b002      	add	sp, #8
 800823e:	bd80      	pop	{r7, pc}

08008240 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	7a9b      	ldrb	r3, [r3, #10]
 800824c:	065b      	lsls	r3, r3, #25
 800824e:	0e5b      	lsrs	r3, r3, #25
 8008250:	b2db      	uxtb	r3, r3
    }
 8008252:	0018      	movs	r0, r3
 8008254:	46bd      	mov	sp, r7
 8008256:	b002      	add	sp, #8
 8008258:	bd80      	pop	{r7, pc}

0800825a <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800825a:	b580      	push	{r7, lr}
 800825c:	b082      	sub	sp, #8
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	7a9b      	ldrb	r3, [r3, #10]
 8008266:	061b      	lsls	r3, r3, #24
 8008268:	0fdb      	lsrs	r3, r3, #31
 800826a:	b2db      	uxtb	r3, r3
    }
 800826c:	0018      	movs	r0, r3
 800826e:	46bd      	mov	sp, r7
 8008270:	b002      	add	sp, #8
 8008272:	bd80      	pop	{r7, pc}

08008274 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
    /**
     * Returns true if this Font is vector based. Default is false.
     *
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
    {
        return false;
 800827c:	2300      	movs	r3, #0
    }
 800827e:	0018      	movs	r0, r3
 8008280:	46bd      	mov	sp, r7
 8008282:	b002      	add	sp, #8
 8008284:	bd80      	pop	{r7, pc}

08008286 <_ZNK8touchgfx4Font14getScaleFactorEv>:
    /**
     * Returns the scale factor
     *
     * @return The scale factor
     */
    virtual float getScaleFactor() const
 8008286:	b580      	push	{r7, lr}
 8008288:	b082      	sub	sp, #8
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800828e:	2300      	movs	r3, #0
    }
 8008290:	1c18      	adds	r0, r3, #0
 8008292:	46bd      	mov	sp, r7
 8008294:	b002      	add	sp, #8
 8008296:	bd80      	pop	{r7, pc}

08008298 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	4a05      	ldr	r2, [pc, #20]	; (80082b8 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	601a      	str	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	0018      	movs	r0, r3
 80082aa:	f7ff ff5b 	bl	8008164 <_ZN8touchgfx4FontD1Ev>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	0018      	movs	r0, r3
 80082b2:	46bd      	mov	sp, r7
 80082b4:	b002      	add	sp, #8
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	08016c94 	.word	0x08016c94

080082bc <_ZN8touchgfx9ConstFontD0Ev>:
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	0018      	movs	r0, r3
 80082c8:	f7ff ffe6 	bl	8008298 <_ZN8touchgfx9ConstFontD1Ev>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	211c      	movs	r1, #28
 80082d0:	0018      	movs	r0, r3
 80082d2:	f00b fd4f 	bl	8013d74 <_ZdlPvj>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	0018      	movs	r0, r3
 80082da:	46bd      	mov	sp, r7
 80082dc:	b002      	add	sp, #8
 80082de:	bd80      	pop	{r7, pc}

080082e0 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	4a05      	ldr	r2, [pc, #20]	; (8008300 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	601a      	str	r2, [r3, #0]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	0018      	movs	r0, r3
 80082f2:	f7ff ffd1 	bl	8008298 <_ZN8touchgfx9ConstFontD1Ev>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	0018      	movs	r0, r3
 80082fa:	46bd      	mov	sp, r7
 80082fc:	b002      	add	sp, #8
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	08015fc4 	.word	0x08015fc4

08008304 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	0018      	movs	r0, r3
 8008310:	f7ff ffe6 	bl	80082e0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	212c      	movs	r1, #44	; 0x2c
 8008318:	0018      	movs	r0, r3
 800831a:	f00b fd2b 	bl	8013d74 <_ZdlPvj>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	0018      	movs	r0, r3
 8008322:	46bd      	mov	sp, r7
 8008324:	b002      	add	sp, #8
 8008326:	bd80      	pop	{r7, pc}

08008328 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8008334:	0018      	movs	r0, r3
 8008336:	46bd      	mov	sp, r7
 8008338:	b002      	add	sp, #8
 800833a:	bd80      	pop	{r7, pc}

0800833c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 8008348:	0018      	movs	r0, r3
 800834a:	46bd      	mov	sp, r7
 800834c:	b002      	add	sp, #8
 800834e:	bd80      	pop	{r7, pc}

08008350 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
#include <fonts/GeneratedFont.hpp>
#include <math.h>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8008350:	b590      	push	{r4, r7, lr}
 8008352:	b08f      	sub	sp, #60	; 0x3c
 8008354:	af0a      	add	r7, sp, #40	; 0x28
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	0019      	movs	r1, r3
 800835c:	1dbb      	adds	r3, r7, #6
 800835e:	801a      	strh	r2, [r3, #0]
 8008360:	1d3b      	adds	r3, r7, #4
 8008362:	1c0a      	adds	r2, r1, #0
 8008364:	801a      	strh	r2, [r3, #0]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	1d3b      	adds	r3, r7, #4
 800836a:	881c      	ldrh	r4, [r3, #0]
 800836c:	1dbb      	adds	r3, r7, #6
 800836e:	881a      	ldrh	r2, [r3, #0]
 8008370:	68b9      	ldr	r1, [r7, #8]
 8008372:	2348      	movs	r3, #72	; 0x48
 8008374:	18fb      	adds	r3, r7, r3
 8008376:	881b      	ldrh	r3, [r3, #0]
 8008378:	9308      	str	r3, [sp, #32]
 800837a:	2344      	movs	r3, #68	; 0x44
 800837c:	18fb      	adds	r3, r7, r3
 800837e:	881b      	ldrh	r3, [r3, #0]
 8008380:	9307      	str	r3, [sp, #28]
 8008382:	2338      	movs	r3, #56	; 0x38
 8008384:	18fb      	adds	r3, r7, r3
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	9306      	str	r3, [sp, #24]
 800838a:	2334      	movs	r3, #52	; 0x34
 800838c:	18fb      	adds	r3, r7, r3
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	9305      	str	r3, [sp, #20]
 8008392:	2330      	movs	r3, #48	; 0x30
 8008394:	18fb      	adds	r3, r7, r3
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	9304      	str	r3, [sp, #16]
 800839a:	232c      	movs	r3, #44	; 0x2c
 800839c:	18fb      	adds	r3, r7, r3
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	9303      	str	r3, [sp, #12]
 80083a2:	2328      	movs	r3, #40	; 0x28
 80083a4:	18fb      	adds	r3, r7, r3
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	9302      	str	r3, [sp, #8]
 80083aa:	2324      	movs	r3, #36	; 0x24
 80083ac:	18fb      	adds	r3, r7, r3
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	9301      	str	r3, [sp, #4]
 80083b2:	2320      	movs	r3, #32
 80083b4:	18fb      	adds	r3, r7, r3
 80083b6:	881b      	ldrh	r3, [r3, #0]
 80083b8:	9300      	str	r3, [sp, #0]
 80083ba:	0023      	movs	r3, r4
 80083bc:	f007 fe9a 	bl	80100f4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 80083c0:	4a09      	ldr	r2, [pc, #36]	; (80083e8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x98>)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80083ca:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80083d0:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083d6:	625a      	str	r2, [r3, #36]	; 0x24
      arabicTable(formsTable)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80083dc:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	0018      	movs	r0, r3
 80083e2:	46bd      	mov	sp, r7
 80083e4:	b005      	add	sp, #20
 80083e6:	bd90      	pop	{r4, r7, pc}
 80083e8:	08015fc4 	.word	0x08015fc4

080083ec <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	69db      	ldr	r3, [r3, #28]
 80083fa:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	889b      	ldrh	r3, [r3, #4]
 8008400:	0adb      	lsrs	r3, r3, #11
 8008402:	b29b      	uxth	r3, r3
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	18d3      	adds	r3, r2, r3
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	8819      	ldrh	r1, [r3, #0]
 8008410:	885b      	ldrh	r3, [r3, #2]
 8008412:	041b      	lsls	r3, r3, #16
 8008414:	430b      	orrs	r3, r1
 8008416:	18d3      	adds	r3, r2, r3
}
 8008418:	0018      	movs	r0, r3
 800841a:	46bd      	mov	sp, r7
 800841c:	b004      	add	sp, #16
 800841e:	bd80      	pop	{r7, pc}

08008420 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b088      	sub	sp, #32
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	607a      	str	r2, [r7, #4]
 800842a:	230a      	movs	r3, #10
 800842c:	18fb      	adds	r3, r7, r3
 800842e:	1c0a      	adds	r2, r1, #0
 8008430:	801a      	strh	r2, [r3, #0]
    if (!glyph || glyph->kerningTableSize == 0)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d003      	beq.n	8008440 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	7b1b      	ldrb	r3, [r3, #12]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d101      	bne.n	8008444 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x24>
    {
        return 0;
 8008440:	2300      	movs	r3, #0
 8008442:	e03d      	b.n	80084c0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0xa0>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6a1a      	ldr	r2, [r3, #32]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	7b5b      	ldrb	r3, [r3, #13]
 8008450:	021b      	lsls	r3, r3, #8
 8008452:	b219      	sxth	r1, r3
 8008454:	23e0      	movs	r3, #224	; 0xe0
 8008456:	00db      	lsls	r3, r3, #3
 8008458:	400b      	ands	r3, r1
 800845a:	b219      	sxth	r1, r3
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	7adb      	ldrb	r3, [r3, #11]
 8008460:	b21b      	sxth	r3, r3
 8008462:	430b      	orrs	r3, r1
 8008464:	b21b      	sxth	r3, r3
 8008466:	b29b      	uxth	r3, r3
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	18d3      	adds	r3, r2, r3
 800846c:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	7b1a      	ldrb	r2, [r3, #12]
 8008472:	231a      	movs	r3, #26
 8008474:	18fb      	adds	r3, r7, r3
 8008476:	801a      	strh	r2, [r3, #0]
 8008478:	e01a      	b.n	80084b0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x90>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	881b      	ldrh	r3, [r3, #0]
 800847e:	220a      	movs	r2, #10
 8008480:	18ba      	adds	r2, r7, r2
 8008482:	8812      	ldrh	r2, [r2, #0]
 8008484:	429a      	cmp	r2, r3
 8008486:	d103      	bne.n	8008490 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x70>
        {
            return kerndata->distance;
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	789b      	ldrb	r3, [r3, #2]
 800848c:	b25b      	sxtb	r3, r3
 800848e:	e017      	b.n	80084c0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0xa0>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	881b      	ldrh	r3, [r3, #0]
 8008494:	220a      	movs	r2, #10
 8008496:	18ba      	adds	r2, r7, r2
 8008498:	8812      	ldrh	r2, [r2, #0]
 800849a:	429a      	cmp	r2, r3
 800849c:	d30e      	bcc.n	80084bc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x9c>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800849e:	211a      	movs	r1, #26
 80084a0:	187b      	adds	r3, r7, r1
 80084a2:	881a      	ldrh	r2, [r3, #0]
 80084a4:	187b      	adds	r3, r7, r1
 80084a6:	3a01      	subs	r2, #1
 80084a8:	801a      	strh	r2, [r3, #0]
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	3304      	adds	r3, #4
 80084ae:	61fb      	str	r3, [r7, #28]
 80084b0:	231a      	movs	r3, #26
 80084b2:	18fb      	adds	r3, r7, r3
 80084b4:	881b      	ldrh	r3, [r3, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d1df      	bne.n	800847a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5a>
 80084ba:	e000      	b.n	80084be <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x9e>
        {
            break;
 80084bc:	46c0      	nop			; (mov r8, r8)
        }
    }
    return 0;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	0018      	movs	r0, r3
 80084c2:	46bd      	mov	sp, r7
 80084c4:	b008      	add	sp, #32
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80084c8:	b580      	push	{r7, lr}
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	4b02      	ldr	r3, [pc, #8]	; (80084d8 <__tcf_0+0x10>)
 80084ce:	0018      	movs	r0, r3
 80084d0:	f7ff ff06 	bl	80082e0 <_ZN8touchgfx13GeneratedFontD1Ev>
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	20000400 	.word	0x20000400

080084dc <_Z23getFont_verdana_10_4bppv>:
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b08e      	sub	sp, #56	; 0x38
 80084e0:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80084e2:	4b1b      	ldr	r3, [pc, #108]	; (8008550 <_Z23getFont_verdana_10_4bppv+0x74>)
 80084e4:	0018      	movs	r0, r3
 80084e6:	f00b fc49 	bl	8013d7c <__cxa_guard_acquire>
 80084ea:	0003      	movs	r3, r0
 80084ec:	1e5a      	subs	r2, r3, #1
 80084ee:	4193      	sbcs	r3, r2
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d027      	beq.n	8008546 <_Z23getFont_verdana_10_4bppv+0x6a>
 80084f6:	4917      	ldr	r1, [pc, #92]	; (8008554 <_Z23getFont_verdana_10_4bppv+0x78>)
 80084f8:	4817      	ldr	r0, [pc, #92]	; (8008558 <_Z23getFont_verdana_10_4bppv+0x7c>)
 80084fa:	2300      	movs	r3, #0
 80084fc:	930c      	str	r3, [sp, #48]	; 0x30
 80084fe:	2300      	movs	r3, #0
 8008500:	930b      	str	r3, [sp, #44]	; 0x2c
 8008502:	2300      	movs	r3, #0
 8008504:	930a      	str	r3, [sp, #40]	; 0x28
 8008506:	233f      	movs	r3, #63	; 0x3f
 8008508:	9309      	str	r3, [sp, #36]	; 0x24
 800850a:	4b14      	ldr	r3, [pc, #80]	; (800855c <_Z23getFont_verdana_10_4bppv+0x80>)
 800850c:	9308      	str	r3, [sp, #32]
 800850e:	4b14      	ldr	r3, [pc, #80]	; (8008560 <_Z23getFont_verdana_10_4bppv+0x84>)
 8008510:	9307      	str	r3, [sp, #28]
 8008512:	2300      	movs	r3, #0
 8008514:	9306      	str	r3, [sp, #24]
 8008516:	2300      	movs	r3, #0
 8008518:	9305      	str	r3, [sp, #20]
 800851a:	2301      	movs	r3, #1
 800851c:	9304      	str	r3, [sp, #16]
 800851e:	2304      	movs	r3, #4
 8008520:	9303      	str	r3, [sp, #12]
 8008522:	2300      	movs	r3, #0
 8008524:	9302      	str	r3, [sp, #8]
 8008526:	2300      	movs	r3, #0
 8008528:	9301      	str	r3, [sp, #4]
 800852a:	230a      	movs	r3, #10
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	230a      	movs	r3, #10
 8008530:	2201      	movs	r2, #1
 8008532:	f7ff ff0d 	bl	8008350 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008536:	4b0b      	ldr	r3, [pc, #44]	; (8008564 <_Z23getFont_verdana_10_4bppv+0x88>)
 8008538:	0018      	movs	r0, r3
 800853a:	f00b fc69 	bl	8013e10 <atexit>
 800853e:	4b04      	ldr	r3, [pc, #16]	; (8008550 <_Z23getFont_verdana_10_4bppv+0x74>)
 8008540:	0018      	movs	r0, r3
 8008542:	f00b fc28 	bl	8013d96 <__cxa_guard_release>
    return verdana_10_4bpp;
 8008546:	4b04      	ldr	r3, [pc, #16]	; (8008558 <_Z23getFont_verdana_10_4bppv+0x7c>)
}
 8008548:	0018      	movs	r0, r3
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	46c0      	nop			; (mov r8, r8)
 8008550:	2000042c 	.word	0x2000042c
 8008554:	08016fa8 	.word	0x08016fa8
 8008558:	20000400 	.word	0x20000400
 800855c:	08016fd8 	.word	0x08016fd8
 8008560:	08016fe4 	.word	0x08016fe4
 8008564:	080084c9 	.word	0x080084c9

08008568 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8008568:	b580      	push	{r7, lr}
 800856a:	af00      	add	r7, sp, #0
 800856c:	4b02      	ldr	r3, [pc, #8]	; (8008578 <__tcf_0+0x10>)
 800856e:	0018      	movs	r0, r3
 8008570:	f7ff feb6 	bl	80082e0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	20000430 	.word	0x20000430

0800857c <_Z23getFont_verdana_20_4bppv>:
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b08e      	sub	sp, #56	; 0x38
 8008580:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8008582:	4b1b      	ldr	r3, [pc, #108]	; (80085f0 <_Z23getFont_verdana_20_4bppv+0x74>)
 8008584:	0018      	movs	r0, r3
 8008586:	f00b fbf9 	bl	8013d7c <__cxa_guard_acquire>
 800858a:	0003      	movs	r3, r0
 800858c:	1e5a      	subs	r2, r3, #1
 800858e:	4193      	sbcs	r3, r2
 8008590:	b2db      	uxtb	r3, r3
 8008592:	2b00      	cmp	r3, #0
 8008594:	d027      	beq.n	80085e6 <_Z23getFont_verdana_20_4bppv+0x6a>
 8008596:	4917      	ldr	r1, [pc, #92]	; (80085f4 <_Z23getFont_verdana_20_4bppv+0x78>)
 8008598:	4817      	ldr	r0, [pc, #92]	; (80085f8 <_Z23getFont_verdana_20_4bppv+0x7c>)
 800859a:	2300      	movs	r3, #0
 800859c:	930c      	str	r3, [sp, #48]	; 0x30
 800859e:	2300      	movs	r3, #0
 80085a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80085a2:	2300      	movs	r3, #0
 80085a4:	930a      	str	r3, [sp, #40]	; 0x28
 80085a6:	233f      	movs	r3, #63	; 0x3f
 80085a8:	9309      	str	r3, [sp, #36]	; 0x24
 80085aa:	4b14      	ldr	r3, [pc, #80]	; (80085fc <_Z23getFont_verdana_20_4bppv+0x80>)
 80085ac:	9308      	str	r3, [sp, #32]
 80085ae:	4b14      	ldr	r3, [pc, #80]	; (8008600 <_Z23getFont_verdana_20_4bppv+0x84>)
 80085b0:	9307      	str	r3, [sp, #28]
 80085b2:	2300      	movs	r3, #0
 80085b4:	9306      	str	r3, [sp, #24]
 80085b6:	2300      	movs	r3, #0
 80085b8:	9305      	str	r3, [sp, #20]
 80085ba:	2301      	movs	r3, #1
 80085bc:	9304      	str	r3, [sp, #16]
 80085be:	2304      	movs	r3, #4
 80085c0:	9303      	str	r3, [sp, #12]
 80085c2:	2300      	movs	r3, #0
 80085c4:	9302      	str	r3, [sp, #8]
 80085c6:	2300      	movs	r3, #0
 80085c8:	9301      	str	r3, [sp, #4]
 80085ca:	2314      	movs	r3, #20
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	2314      	movs	r3, #20
 80085d0:	2201      	movs	r2, #1
 80085d2:	f7ff febd 	bl	8008350 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80085d6:	4b0b      	ldr	r3, [pc, #44]	; (8008604 <_Z23getFont_verdana_20_4bppv+0x88>)
 80085d8:	0018      	movs	r0, r3
 80085da:	f00b fc19 	bl	8013e10 <atexit>
 80085de:	4b04      	ldr	r3, [pc, #16]	; (80085f0 <_Z23getFont_verdana_20_4bppv+0x74>)
 80085e0:	0018      	movs	r0, r3
 80085e2:	f00b fbd8 	bl	8013d96 <__cxa_guard_release>
    return verdana_20_4bpp;
 80085e6:	4b04      	ldr	r3, [pc, #16]	; (80085f8 <_Z23getFont_verdana_20_4bppv+0x7c>)
}
 80085e8:	0018      	movs	r0, r3
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	46c0      	nop			; (mov r8, r8)
 80085f0:	2000045c 	.word	0x2000045c
 80085f4:	08016fb8 	.word	0x08016fb8
 80085f8:	20000430 	.word	0x20000430
 80085fc:	08016fdc 	.word	0x08016fdc
 8008600:	08016fe8 	.word	0x08016fe8
 8008604:	08008569 	.word	0x08008569

08008608 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8008608:	b580      	push	{r7, lr}
 800860a:	af00      	add	r7, sp, #0
 800860c:	4b02      	ldr	r3, [pc, #8]	; (8008618 <__tcf_0+0x10>)
 800860e:	0018      	movs	r0, r3
 8008610:	f7ff fe66 	bl	80082e0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	20000460 	.word	0x20000460

0800861c <_Z23getFont_verdana_40_4bppv>:
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b08e      	sub	sp, #56	; 0x38
 8008620:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8008622:	4b1b      	ldr	r3, [pc, #108]	; (8008690 <_Z23getFont_verdana_40_4bppv+0x74>)
 8008624:	0018      	movs	r0, r3
 8008626:	f00b fba9 	bl	8013d7c <__cxa_guard_acquire>
 800862a:	0003      	movs	r3, r0
 800862c:	1e5a      	subs	r2, r3, #1
 800862e:	4193      	sbcs	r3, r2
 8008630:	b2db      	uxtb	r3, r3
 8008632:	2b00      	cmp	r3, #0
 8008634:	d027      	beq.n	8008686 <_Z23getFont_verdana_40_4bppv+0x6a>
 8008636:	4917      	ldr	r1, [pc, #92]	; (8008694 <_Z23getFont_verdana_40_4bppv+0x78>)
 8008638:	4817      	ldr	r0, [pc, #92]	; (8008698 <_Z23getFont_verdana_40_4bppv+0x7c>)
 800863a:	2300      	movs	r3, #0
 800863c:	930c      	str	r3, [sp, #48]	; 0x30
 800863e:	2300      	movs	r3, #0
 8008640:	930b      	str	r3, [sp, #44]	; 0x2c
 8008642:	2300      	movs	r3, #0
 8008644:	930a      	str	r3, [sp, #40]	; 0x28
 8008646:	233f      	movs	r3, #63	; 0x3f
 8008648:	9309      	str	r3, [sp, #36]	; 0x24
 800864a:	4b14      	ldr	r3, [pc, #80]	; (800869c <_Z23getFont_verdana_40_4bppv+0x80>)
 800864c:	9308      	str	r3, [sp, #32]
 800864e:	4b14      	ldr	r3, [pc, #80]	; (80086a0 <_Z23getFont_verdana_40_4bppv+0x84>)
 8008650:	9307      	str	r3, [sp, #28]
 8008652:	2300      	movs	r3, #0
 8008654:	9306      	str	r3, [sp, #24]
 8008656:	2300      	movs	r3, #0
 8008658:	9305      	str	r3, [sp, #20]
 800865a:	2301      	movs	r3, #1
 800865c:	9304      	str	r3, [sp, #16]
 800865e:	2304      	movs	r3, #4
 8008660:	9303      	str	r3, [sp, #12]
 8008662:	2300      	movs	r3, #0
 8008664:	9302      	str	r3, [sp, #8]
 8008666:	2300      	movs	r3, #0
 8008668:	9301      	str	r3, [sp, #4]
 800866a:	2328      	movs	r3, #40	; 0x28
 800866c:	9300      	str	r3, [sp, #0]
 800866e:	2328      	movs	r3, #40	; 0x28
 8008670:	2201      	movs	r2, #1
 8008672:	f7ff fe6d 	bl	8008350 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008676:	4b0b      	ldr	r3, [pc, #44]	; (80086a4 <_Z23getFont_verdana_40_4bppv+0x88>)
 8008678:	0018      	movs	r0, r3
 800867a:	f00b fbc9 	bl	8013e10 <atexit>
 800867e:	4b04      	ldr	r3, [pc, #16]	; (8008690 <_Z23getFont_verdana_40_4bppv+0x74>)
 8008680:	0018      	movs	r0, r3
 8008682:	f00b fb88 	bl	8013d96 <__cxa_guard_release>
    return verdana_40_4bpp;
 8008686:	4b04      	ldr	r3, [pc, #16]	; (8008698 <_Z23getFont_verdana_40_4bppv+0x7c>)
}
 8008688:	0018      	movs	r0, r3
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	46c0      	nop			; (mov r8, r8)
 8008690:	2000048c 	.word	0x2000048c
 8008694:	08016fc8 	.word	0x08016fc8
 8008698:	20000460 	.word	0x20000460
 800869c:	08016fe0 	.word	0x08016fe0
 80086a0:	08016fec 	.word	0x08016fec
 80086a4:	08008609 	.word	0x08008609

080086a8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	0018      	movs	r0, r3
 80086b6:	46bd      	mov	sp, r7
 80086b8:	b002      	add	sp, #8
 80086ba:	bd80      	pop	{r7, pc}

080086bc <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80086c6:	46c0      	nop			; (mov r8, r8)
 80086c8:	46bd      	mov	sp, r7
 80086ca:	b002      	add	sp, #8
 80086cc:	bd80      	pop	{r7, pc}

080086ce <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b082      	sub	sp, #8
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
 80086d6:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80086d8:	46c0      	nop			; (mov r8, r8)
 80086da:	46bd      	mov	sp, r7
 80086dc:	b002      	add	sp, #8
 80086de:	bd80      	pop	{r7, pc}

080086e0 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80086ea:	46c0      	nop			; (mov r8, r8)
 80086ec:	46bd      	mov	sp, r7
 80086ee:	b002      	add	sp, #8
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b082      	sub	sp, #8
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
 80086fa:	000a      	movs	r2, r1
 80086fc:	1cfb      	adds	r3, r7, #3
 80086fe:	701a      	strb	r2, [r3, #0]
    {
        (void)c; // Unused variable
    }
 8008700:	46c0      	nop			; (mov r8, r8)
 8008702:	46bd      	mov	sp, r7
 8008704:	b002      	add	sp, #8
 8008706:	bd80      	pop	{r7, pc}

08008708 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
    {
    }
 8008710:	46c0      	nop			; (mov r8, r8)
 8008712:	46bd      	mov	sp, r7
 8008714:	b002      	add	sp, #8
 8008716:	bd80      	pop	{r7, pc}

08008718 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
    {
    }
 8008720:	46c0      	nop			; (mov r8, r8)
 8008722:	46bd      	mov	sp, r7
 8008724:	b002      	add	sp, #8
 8008726:	bd80      	pop	{r7, pc}

08008728 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
    {
 8008730:	4a03      	ldr	r2, [pc, #12]	; (8008740 <_ZN8touchgfx15UIEventListenerD1Ev+0x18>)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	601a      	str	r2, [r3, #0]
    }
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	0018      	movs	r0, r3
 800873a:	46bd      	mov	sp, r7
 800873c:	b002      	add	sp, #8
 800873e:	bd80      	pop	{r7, pc}
 8008740:	0801614c 	.word	0x0801614c

08008744 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
    }
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	0018      	movs	r0, r3
 8008750:	f7ff ffea 	bl	8008728 <_ZN8touchgfx15UIEventListenerD1Ev>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2104      	movs	r1, #4
 8008758:	0018      	movs	r0, r3
 800875a:	f00b fb0b 	bl	8013d74 <_ZdlPvj>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	0018      	movs	r0, r3
 8008762:	46bd      	mov	sp, r7
 8008764:	b002      	add	sp, #8
 8008766:	bd80      	pop	{r7, pc}

08008768 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
    {
    }
 8008770:	46c0      	nop			; (mov r8, r8)
 8008772:	46bd      	mov	sp, r7
 8008774:	b002      	add	sp, #8
 8008776:	bd80      	pop	{r7, pc}

08008778 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	000a      	movs	r2, r1
 8008782:	1cfb      	adds	r3, r7, #3
 8008784:	701a      	strb	r2, [r3, #0]
    {
        (void)screenId; // Unused variable
    }
 8008786:	46c0      	nop			; (mov r8, r8)
 8008788:	46bd      	mov	sp, r7
 800878a:	b002      	add	sp, #8
 800878c:	bd80      	pop	{r7, pc}

0800878e <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800878e:	b580      	push	{r7, lr}
 8008790:	b082      	sub	sp, #8
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
 8008796:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	2398      	movs	r3, #152	; 0x98
 800879c:	005b      	lsls	r3, r3, #1
 800879e:	6839      	ldr	r1, [r7, #0]
 80087a0:	18d3      	adds	r3, r2, r3
 80087a2:	2208      	movs	r2, #8
 80087a4:	0018      	movs	r0, r3
 80087a6:	f00b fe02 	bl	80143ae <memcpy>
    }
 80087aa:	46c0      	nop			; (mov r8, r8)
 80087ac:	46bd      	mov	sp, r7
 80087ae:	b002      	add	sp, #8
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b082      	sub	sp, #8
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	3304      	adds	r3, #4
 80087be:	0018      	movs	r0, r3
 80087c0:	f006 fae3 	bl	800ed8a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 80087c4:	46c0      	nop			; (mov r8, r8)
 80087c6:	46bd      	mov	sp, r7
 80087c8:	b002      	add	sp, #8
 80087ca:	bd80      	pop	{r7, pc}

080087cc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
    {
 80087d4:	4a03      	ldr	r2, [pc, #12]	; (80087e4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x18>)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	601a      	str	r2, [r3, #0]
    }
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	0018      	movs	r0, r3
 80087de:	46bd      	mov	sp, r7
 80087e0:	b002      	add	sp, #8
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	08016134 	.word	0x08016134

080087e8 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
    }
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	0018      	movs	r0, r3
 80087f4:	f7ff ffea 	bl	80087cc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2104      	movs	r1, #4
 80087fc:	0018      	movs	r0, r3
 80087fe:	f00b fab9 	bl	8013d74 <_ZdlPvj>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	0018      	movs	r0, r3
 8008806:	46bd      	mov	sp, r7
 8008808:	b002      	add	sp, #8
 800880a:	bd80      	pop	{r7, pc}

0800880c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8008814:	4a06      	ldr	r2, [pc, #24]	; (8008830 <_ZN8touchgfx10TransitionC1Ev+0x24>)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	601a      	str	r2, [r3, #0]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	605a      	str	r2, [r3, #4]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	721a      	strb	r2, [r3, #8]
    {
    }
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	0018      	movs	r0, r3
 800882a:	46bd      	mov	sp, r7
 800882c:	b002      	add	sp, #8
 800882e:	bd80      	pop	{r7, pc}
 8008830:	08016110 	.word	0x08016110

08008834 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
    {
 800883c:	4a03      	ldr	r2, [pc, #12]	; (800884c <_ZN8touchgfx10TransitionD1Ev+0x18>)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	601a      	str	r2, [r3, #0]
    }
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	0018      	movs	r0, r3
 8008846:	46bd      	mov	sp, r7
 8008848:	b002      	add	sp, #8
 800884a:	bd80      	pop	{r7, pc}
 800884c:	08016110 	.word	0x08016110

08008850 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
    }
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	0018      	movs	r0, r3
 800885c:	f7ff ffea 	bl	8008834 <_ZN8touchgfx10TransitionD1Ev>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	210c      	movs	r1, #12
 8008864:	0018      	movs	r0, r3
 8008866:	f00b fa85 	bl	8013d74 <_ZdlPvj>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	0018      	movs	r0, r3
 800886e:	46bd      	mov	sp, r7
 8008870:	b002      	add	sp, #8
 8008872:	bd80      	pop	{r7, pc}

08008874 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
    {
    }
 800887c:	46c0      	nop			; (mov r8, r8)
 800887e:	46bd      	mov	sp, r7
 8008880:	b002      	add	sp, #8
 8008882:	bd80      	pop	{r7, pc}

08008884 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
    {
    }
 800888c:	46c0      	nop			; (mov r8, r8)
 800888e:	46bd      	mov	sp, r7
 8008890:	b002      	add	sp, #8
 8008892:	bd80      	pop	{r7, pc}

08008894 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
    {
    }
 800889c:	46c0      	nop			; (mov r8, r8)
 800889e:	46bd      	mov	sp, r7
 80088a0:	b002      	add	sp, #8
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 80088ac:	f006 fa48 	bl	800ed40 <_ZN8touchgfx11Application11getInstanceEv>
 80088b0:	0003      	movs	r3, r0
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	323c      	adds	r2, #60	; 0x3c
 80088b6:	6812      	ldr	r2, [r2, #0]
 80088b8:	0018      	movs	r0, r3
 80088ba:	4790      	blx	r2
    }
 80088bc:	46c0      	nop			; (mov r8, r8)
 80088be:	46bd      	mov	sp, r7
 80088c0:	b002      	add	sp, #8
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	683a      	ldr	r2, [r7, #0]
 80088d2:	605a      	str	r2, [r3, #4]
    }
 80088d4:	46c0      	nop			; (mov r8, r8)
 80088d6:	46bd      	mov	sp, r7
 80088d8:	b002      	add	sp, #8
 80088da:	bd80      	pop	{r7, pc}

080088dc <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	4a05      	ldr	r2, [pc, #20]	; (80088fc <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	601a      	str	r2, [r3, #0]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	0018      	movs	r0, r3
 80088ee:	f7ff ff1b 	bl	8008728 <_ZN8touchgfx15UIEventListenerD1Ev>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	0018      	movs	r0, r3
 80088f6:	46bd      	mov	sp, r7
 80088f8:	b002      	add	sp, #8
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	08016bd8 	.word	0x08016bd8

08008900 <_ZN8touchgfx11ApplicationD0Ev>:
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	0018      	movs	r0, r3
 800890c:	f7ff ffe6 	bl	80088dc <_ZN8touchgfx11ApplicationD1Ev>
 8008910:	239e      	movs	r3, #158	; 0x9e
 8008912:	005a      	lsls	r2, r3, #1
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	0011      	movs	r1, r2
 8008918:	0018      	movs	r0, r3
 800891a:	f00b fa2b 	bl	8013d74 <_ZdlPvj>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	0018      	movs	r0, r3
 8008922:	46bd      	mov	sp, r7
 8008924:	b002      	add	sp, #8
 8008926:	bd80      	pop	{r7, pc}

08008928 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	0018      	movs	r0, r3
 8008934:	f006 fada 	bl	800eeec <_ZN8touchgfx11ApplicationC1Ev>
 8008938:	4a0a      	ldr	r2, [pc, #40]	; (8008964 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	239e      	movs	r3, #158	; 0x9e
 8008942:	005b      	lsls	r3, r3, #1
 8008944:	2100      	movs	r1, #0
 8008946:	50d1      	str	r1, [r2, r3]
          pendingScreenTransitionCallback(0)
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	23a0      	movs	r3, #160	; 0xa0
 800894c:	005b      	lsls	r3, r3, #1
 800894e:	2100      	movs	r1, #0
 8008950:	50d1      	str	r1, [r2, r3]
    {
        instance = this;
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	4b04      	ldr	r3, [pc, #16]	; (8008968 <_ZN8touchgfx14MVPApplicationC1Ev+0x40>)
 8008956:	601a      	str	r2, [r3, #0]
    }
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	0018      	movs	r0, r3
 800895c:	46bd      	mov	sp, r7
 800895e:	b002      	add	sp, #8
 8008960:	bd80      	pop	{r7, pc}
 8008962:	46c0      	nop			; (mov r8, r8)
 8008964:	080160bc 	.word	0x080160bc
 8008968:	20002714 	.word	0x20002714

0800896c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	0018      	movs	r0, r3
 8008978:	f000 f804 	bl	8008984 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800897c:	46c0      	nop			; (mov r8, r8)
 800897e:	46bd      	mov	sp, r7
 8008980:	b002      	add	sp, #8
 8008982:	bd80      	pop	{r7, pc}

08008984 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	23a0      	movs	r3, #160	; 0xa0
 8008990:	005b      	lsls	r3, r3, #1
 8008992:	58d3      	ldr	r3, [r2, r3]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d010      	beq.n	80089ba <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x36>
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	23a0      	movs	r3, #160	; 0xa0
 800899c:	005b      	lsls	r3, r3, #1
 800899e:	58d1      	ldr	r1, [r2, r3]
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	23a0      	movs	r3, #160	; 0xa0
 80089a4:	005b      	lsls	r3, r3, #1
 80089a6:	58d3      	ldr	r3, [r2, r3]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	330c      	adds	r3, #12
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	0008      	movs	r0, r1
 80089b0:	4798      	blx	r3
 80089b2:	1e03      	subs	r3, r0, #0
 80089b4:	d001      	beq.n	80089ba <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x36>
 80089b6:	2301      	movs	r3, #1
 80089b8:	e000      	b.n	80089bc <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x38>
 80089ba:	2300      	movs	r3, #0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d011      	beq.n	80089e4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x60>
        {
            pendingScreenTransitionCallback->execute();
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	23a0      	movs	r3, #160	; 0xa0
 80089c4:	005b      	lsls	r3, r3, #1
 80089c6:	58d1      	ldr	r1, [r2, r3]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	23a0      	movs	r3, #160	; 0xa0
 80089cc:	005b      	lsls	r3, r3, #1
 80089ce:	58d3      	ldr	r3, [r2, r3]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	3308      	adds	r3, #8
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	0008      	movs	r0, r1
 80089d8:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	23a0      	movs	r3, #160	; 0xa0
 80089de:	005b      	lsls	r3, r3, #1
 80089e0:	2100      	movs	r1, #0
 80089e2:	50d1      	str	r1, [r2, r3]
        }
    }
 80089e4:	46c0      	nop			; (mov r8, r8)
 80089e6:	46bd      	mov	sp, r7
 80089e8:	b002      	add	sp, #8
 80089ea:	bd80      	pop	{r7, pc}

080089ec <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	683a      	ldr	r2, [r7, #0]
 80089fa:	601a      	str	r2, [r3, #0]
    }
 80089fc:	46c0      	nop			; (mov r8, r8)
 80089fe:	46bd      	mov	sp, r7
 8008a00:	b002      	add	sp, #8
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	4a05      	ldr	r2, [pc, #20]	; (8008a24 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	601a      	str	r2, [r3, #0]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	0018      	movs	r0, r3
 8008a16:	f7ff ff61 	bl	80088dc <_ZN8touchgfx11ApplicationD1Ev>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	0018      	movs	r0, r3
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	b002      	add	sp, #8
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	080160bc 	.word	0x080160bc

08008a28 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	0018      	movs	r0, r3
 8008a34:	f7ff ffe6 	bl	8008a04 <_ZN8touchgfx14MVPApplicationD1Ev>
 8008a38:	23a2      	movs	r3, #162	; 0xa2
 8008a3a:	005a      	lsls	r2, r3, #1
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	0011      	movs	r1, r2
 8008a40:	0018      	movs	r0, r3
 8008a42:	f00b f997 	bl	8013d74 <_ZdlPvj>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	0018      	movs	r0, r3
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	b002      	add	sp, #8
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	4a08      	ldr	r2, [pc, #32]	; (8008a7c <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	601a      	str	r2, [r3, #0]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	3345      	adds	r3, #69	; 0x45
 8008a62:	33ff      	adds	r3, #255	; 0xff
 8008a64:	0018      	movs	r0, r3
 8008a66:	f000 facf 	bl	8009008 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	0018      	movs	r0, r3
 8008a6e:	f7ff ffc9 	bl	8008a04 <_ZN8touchgfx14MVPApplicationD1Ev>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	0018      	movs	r0, r3
 8008a76:	46bd      	mov	sp, r7
 8008a78:	b002      	add	sp, #8
 8008a7a:	bd80      	pop	{r7, pc}
 8008a7c:	08016050 	.word	0x08016050

08008a80 <_ZN23FrontendApplicationBaseD0Ev>:
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	0018      	movs	r0, r3
 8008a8c:	f7ff ffe0 	bl	8008a50 <_ZN23FrontendApplicationBaseD1Ev>
 8008a90:	23ae      	movs	r3, #174	; 0xae
 8008a92:	005a      	lsls	r2, r3, #1
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	0011      	movs	r1, r2
 8008a98:	0018      	movs	r0, r3
 8008a9a:	f00b f96b 	bl	8013d74 <_ZdlPvj>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	0018      	movs	r0, r3
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	b002      	add	sp, #8
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	0018      	movs	r0, r3
 8008ab4:	f000 f86e 	bl	8008b94 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8008ab8:	46c0      	nop			; (mov r8, r8)
 8008aba:	46bd      	mov	sp, r7
 8008abc:	b002      	add	sp, #8
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	721a      	strb	r2, [r3, #8]
    }
 8008ace:	46c0      	nop			; (mov r8, r8)
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	b002      	add	sp, #8
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b082      	sub	sp, #8
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
 8008ade:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	683a      	ldr	r2, [r7, #0]
 8008ae4:	605a      	str	r2, [r3, #4]
    }
 8008ae6:	46c0      	nop			; (mov r8, r8)
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	b002      	add	sp, #8
 8008aec:	bd80      	pop	{r7, pc}
	...

08008af0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	0018      	movs	r0, r3
 8008b00:	f7ff ff12 	bl	8008928 <_ZN8touchgfx14MVPApplicationC1Ev>
 8008b04:	4a10      	ldr	r2, [pc, #64]	; (8008b48 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	3345      	adds	r3, #69	; 0x45
 8008b0e:	33ff      	adds	r3, #255	; 0xff
 8008b10:	0018      	movs	r0, r3
 8008b12:	f000 f89b 	bl	8008c4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	23aa      	movs	r3, #170	; 0xaa
 8008b1a:	005b      	lsls	r3, r3, #1
 8008b1c:	6879      	ldr	r1, [r7, #4]
 8008b1e:	50d1      	str	r1, [r2, r3]
      model(m)
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	23ac      	movs	r3, #172	; 0xac
 8008b24:	005b      	lsls	r3, r3, #1
 8008b26:	68b9      	ldr	r1, [r7, #8]
 8008b28:	50d1      	str	r1, [r2, r3]
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8008b2a:	f7f8 fcc1 	bl	80014b0 <_ZN8touchgfx3HAL11getInstanceEv>
 8008b2e:	0003      	movs	r3, r0
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	3208      	adds	r2, #8
 8008b34:	6812      	ldr	r2, [r2, #0]
 8008b36:	2100      	movs	r1, #0
 8008b38:	0018      	movs	r0, r3
 8008b3a:	4790      	blx	r2
#endif
#ifdef SIMULATOR
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
#endif
}
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	0018      	movs	r0, r3
 8008b40:	46bd      	mov	sp, r7
 8008b42:	b004      	add	sp, #16
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	46c0      	nop			; (mov r8, r8)
 8008b48:	08016050 	.word	0x08016050

08008b4c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	0018      	movs	r0, r3
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	b002      	add	sp, #8
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	683a      	ldr	r2, [r7, #0]
 8008b6e:	0011      	movs	r1, r2
 8008b70:	0018      	movs	r0, r3
 8008b72:	f7ff ffeb 	bl	8008b4c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	685a      	ldr	r2, [r3, #4]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	605a      	str	r2, [r3, #4]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	683a      	ldr	r2, [r7, #0]
 8008b82:	3308      	adds	r3, #8
 8008b84:	3208      	adds	r2, #8
 8008b86:	ca03      	ldmia	r2!, {r0, r1}
 8008b88:	c303      	stmia	r3!, {r0, r1}
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	0018      	movs	r0, r3
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	b002      	add	sp, #8
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8008b94:	b5b0      	push	{r4, r5, r7, lr}
 8008b96:	b088      	sub	sp, #32
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	3345      	adds	r3, #69	; 0x45
 8008ba0:	33ff      	adds	r3, #255	; 0xff
 8008ba2:	001c      	movs	r4, r3
 8008ba4:	2118      	movs	r1, #24
 8008ba6:	187b      	adds	r3, r7, r1
 8008ba8:	4a10      	ldr	r2, [pc, #64]	; (8008bec <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x58>)
 8008baa:	601a      	str	r2, [r3, #0]
 8008bac:	187b      	adds	r3, r7, r1
 8008bae:	2200      	movs	r2, #0
 8008bb0:	605a      	str	r2, [r3, #4]
 8008bb2:	187b      	adds	r3, r7, r1
 8008bb4:	6879      	ldr	r1, [r7, #4]
 8008bb6:	2508      	movs	r5, #8
 8008bb8:	1978      	adds	r0, r7, r5
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	f000 f861 	bl	8008c84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8008bc2:	197b      	adds	r3, r7, r5
 8008bc4:	0019      	movs	r1, r3
 8008bc6:	0020      	movs	r0, r4
 8008bc8:	f7ff ffca 	bl	8008b60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8008bcc:	197b      	adds	r3, r7, r5
 8008bce:	0018      	movs	r0, r3
 8008bd0:	f000 fa1a 	bl	8009008 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	3345      	adds	r3, #69	; 0x45
 8008bd8:	33ff      	adds	r3, #255	; 0xff
 8008bda:	0019      	movs	r1, r3
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	23a0      	movs	r3, #160	; 0xa0
 8008be0:	005b      	lsls	r3, r3, #1
 8008be2:	50d1      	str	r1, [r2, r3]
}
 8008be4:	46c0      	nop			; (mov r8, r8)
 8008be6:	46bd      	mov	sp, r7
 8008be8:	b008      	add	sp, #32
 8008bea:	bdb0      	pop	{r4, r5, r7, pc}
 8008bec:	08008bf1 	.word	0x08008bf1

08008bf0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8008bf0:	b590      	push	{r4, r7, lr}
 8008bf2:	b085      	sub	sp, #20
 8008bf4:	af02      	add	r7, sp, #8
 8008bf6:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	333d      	adds	r3, #61	; 0x3d
 8008bfc:	33ff      	adds	r3, #255	; 0xff
 8008bfe:	0019      	movs	r1, r3
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	23aa      	movs	r3, #170	; 0xaa
 8008c04:	005b      	lsls	r3, r3, #1
 8008c06:	58d3      	ldr	r3, [r2, r3]
 8008c08:	001c      	movs	r4, r3
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	23ac      	movs	r3, #172	; 0xac
 8008c0e:	005b      	lsls	r3, r3, #1
 8008c10:	58d3      	ldr	r3, [r2, r3]
 8008c12:	4a05      	ldr	r2, [pc, #20]	; (8008c28 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x38>)
 8008c14:	4805      	ldr	r0, [pc, #20]	; (8008c2c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x3c>)
 8008c16:	9300      	str	r3, [sp, #0]
 8008c18:	0013      	movs	r3, r2
 8008c1a:	0022      	movs	r2, r4
 8008c1c:	f000 f862 	bl	8008ce4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8008c20:	46c0      	nop			; (mov r8, r8)
 8008c22:	46bd      	mov	sp, r7
 8008c24:	b003      	add	sp, #12
 8008c26:	bd90      	pop	{r4, r7, pc}
 8008c28:	20002708 	.word	0x20002708
 8008c2c:	20002704 	.word	0x20002704

08008c30 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	4a03      	ldr	r2, [pc, #12]	; (8008c48 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x18>)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	601a      	str	r2, [r3, #0]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	0018      	movs	r0, r3
 8008c42:	46bd      	mov	sp, r7
 8008c44:	b002      	add	sp, #8
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	08016134 	.word	0x08016134

08008c4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	0018      	movs	r0, r3
 8008c58:	f7ff ffea 	bl	8008c30 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8008c5c:	4a08      	ldr	r2, [pc, #32]	; (8008c80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	601a      	str	r2, [r3, #0]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	605a      	str	r2, [r3, #4]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	609a      	str	r2, [r3, #8]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	60da      	str	r2, [r3, #12]
    {
    }
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	0018      	movs	r0, r3
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	b002      	add	sp, #8
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	46c0      	nop			; (mov r8, r8)
 8008c80:	080160a4 	.word	0x080160a4

08008c84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	0039      	movs	r1, r7
 8008c90:	600a      	str	r2, [r1, #0]
 8008c92:	604b      	str	r3, [r1, #4]
        : pobject(pObject), pmemfun(pmemfun_0)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	0018      	movs	r0, r3
 8008c98:	f7ff ffca 	bl	8008c30 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8008c9c:	4a07      	ldr	r2, [pc, #28]	; (8008cbc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x38>)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	601a      	str	r2, [r3, #0]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	68ba      	ldr	r2, [r7, #8]
 8008ca6:	605a      	str	r2, [r3, #4]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	003a      	movs	r2, r7
 8008cac:	3308      	adds	r3, #8
 8008cae:	ca03      	ldmia	r2!, {r0, r1}
 8008cb0:	c303      	stmia	r3!, {r0, r1}
    {
    }
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	0018      	movs	r0, r3
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	b004      	add	sp, #16
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	080160a4 	.word	0x080160a4

08008cc0 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	0018      	movs	r0, r3
 8008ccc:	f7ff fd9e 	bl	800880c <_ZN8touchgfx10TransitionC1Ev>
 8008cd0:	4a03      	ldr	r2, [pc, #12]	; (8008ce0 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	601a      	str	r2, [r3, #0]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	0018      	movs	r0, r3
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	b002      	add	sp, #8
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	0801602c 	.word	0x0801602c

08008ce4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8008ce4:	b590      	push	{r4, r7, lr}
 8008ce6:	b08f      	sub	sp, #60	; 0x3c
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	607a      	str	r2, [r7, #4]
 8008cf0:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	689a      	ldr	r2, [r3, #8]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	3320      	adds	r3, #32
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	0010      	movs	r0, r2
 8008d02:	4798      	blx	r3
 8008d04:	0003      	movs	r3, r0
 8008d06:	2bcb      	cmp	r3, #203	; 0xcb
 8008d08:	d805      	bhi.n	8008d16 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 8008d0a:	4b82      	ldr	r3, [pc, #520]	; (8008f14 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8008d0c:	4a82      	ldr	r2, [pc, #520]	; (8008f18 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8008d0e:	4883      	ldr	r0, [pc, #524]	; (8008f1c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 8008d10:	21a3      	movs	r1, #163	; 0xa3
 8008d12:	f00b f85f 	bl	8013dd4 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	685a      	ldr	r2, [r3, #4]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	3320      	adds	r3, #32
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	0010      	movs	r0, r2
 8008d26:	4798      	blx	r3
 8008d28:	0003      	movs	r3, r0
 8008d2a:	2b0f      	cmp	r3, #15
 8008d2c:	d805      	bhi.n	8008d3a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x56>
 8008d2e:	4b7c      	ldr	r3, [pc, #496]	; (8008f20 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x23c>)
 8008d30:	4a79      	ldr	r2, [pc, #484]	; (8008f18 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8008d32:	487a      	ldr	r0, [pc, #488]	; (8008f1c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 8008d34:	21a4      	movs	r1, #164	; 0xa4
 8008d36:	f00b f84d 	bl	8013dd4 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	68da      	ldr	r2, [r3, #12]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	3320      	adds	r3, #32
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	0010      	movs	r0, r2
 8008d4a:	4798      	blx	r3
 8008d4c:	0003      	movs	r3, r0
 8008d4e:	2b0b      	cmp	r3, #11
 8008d50:	d805      	bhi.n	8008d5e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7a>
 8008d52:	4b74      	ldr	r3, [pc, #464]	; (8008f24 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x240>)
 8008d54:	4a70      	ldr	r2, [pc, #448]	; (8008f18 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8008d56:	4871      	ldr	r0, [pc, #452]	; (8008f1c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 8008d58:	21a5      	movs	r1, #165	; 0xa5
 8008d5a:	f00b f83b 	bl	8013dd4 <__assert_func>
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	627b      	str	r3, [r7, #36]	; 0x24
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8008d6a:	f005 ffe9 	bl	800ed40 <_ZN8touchgfx11Application11getInstanceEv>
 8008d6e:	0003      	movs	r3, r0
 8008d70:	0018      	movs	r0, r3
 8008d72:	f7ff fd1e 	bl	80087b2 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8008d76:	6a3b      	ldr	r3, [r7, #32]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d008      	beq.n	8008d90 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xac>
        (*currentTrans)->tearDown();
 8008d7e:	6a3b      	ldr	r3, [r7, #32]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	6a3b      	ldr	r3, [r7, #32]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	330c      	adds	r3, #12
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	0010      	movs	r0, r2
 8008d8e:	4798      	blx	r3
    if (*currentTrans)
 8008d90:	6a3b      	ldr	r3, [r7, #32]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d007      	beq.n	8008da8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc4>
        (*currentTrans)->~Transition();
 8008d98:	6a3b      	ldr	r3, [r7, #32]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	6a3b      	ldr	r3, [r7, #32]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	0010      	movs	r0, r2
 8008da6:	4798      	blx	r3
    if (*currentScreen)
 8008da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d008      	beq.n	8008dc2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
        (*currentScreen)->tearDownScreen();
 8008db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	3314      	adds	r3, #20
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	0010      	movs	r0, r2
 8008dc0:	4798      	blx	r3
    if (*currentPresenter)
 8008dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d008      	beq.n	8008ddc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xf8>
        (*currentPresenter)->deactivate();
 8008dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	3304      	adds	r3, #4
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	0010      	movs	r0, r2
 8008dda:	4798      	blx	r3
    if (*currentScreen)
 8008ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d007      	beq.n	8008df4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x110>
        (*currentScreen)->~Screen();
 8008de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	0010      	movs	r0, r2
 8008df2:	4798      	blx	r3
    if (*currentPresenter)
 8008df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d008      	beq.n	8008e0e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
        (*currentPresenter)->~Presenter();
 8008dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	3308      	adds	r3, #8
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	0010      	movs	r0, r2
 8008e0c:	4798      	blx	r3
}
 8008e0e:	46c0      	nop			; (mov r8, r8)

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	2100      	movs	r1, #0
 8008e16:	0018      	movs	r0, r3
 8008e18:	f000 f886 	bl	8008f28 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8008e1c:	0003      	movs	r3, r0
 8008e1e:	0019      	movs	r1, r3
 8008e20:	200c      	movs	r0, #12
 8008e22:	f7ff fc41 	bl	80086a8 <_ZnwjPv>
 8008e26:	0004      	movs	r4, r0
 8008e28:	0020      	movs	r0, r4
 8008e2a:	f7ff ff49 	bl	8008cc0 <_ZN8touchgfx12NoTransitionC1Ev>
 8008e2e:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	2100      	movs	r1, #0
 8008e36:	0018      	movs	r0, r3
 8008e38:	f000 f88b 	bl	8008f52 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8008e3c:	0003      	movs	r3, r0
 8008e3e:	0019      	movs	r1, r3
 8008e40:	20cc      	movs	r0, #204	; 0xcc
 8008e42:	f7ff fc31 	bl	80086a8 <_ZnwjPv>
 8008e46:	0004      	movs	r4, r0
 8008e48:	0020      	movs	r0, r4
 8008e4a:	f001 f9bf 	bl	800a1cc <_ZN11Screen1ViewC1Ev>
 8008e4e:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	2100      	movs	r1, #0
 8008e56:	0018      	movs	r0, r3
 8008e58:	f000 f890 	bl	8008f7c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8008e5c:	0003      	movs	r3, r0
 8008e5e:	0019      	movs	r1, r3
 8008e60:	2010      	movs	r0, #16
 8008e62:	f7ff fc21 	bl	80086a8 <_ZnwjPv>
 8008e66:	0004      	movs	r4, r0
 8008e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6a:	0019      	movs	r1, r3
 8008e6c:	0020      	movs	r0, r4
 8008e6e:	f001 f959 	bl	800a124 <_ZN16Screen1PresenterC1ER11Screen1View>
 8008e72:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e78:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e7e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e84:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8008e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d002      	beq.n	8008e92 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ae>
 8008e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8e:	3304      	adds	r3, #4
 8008e90:	e000      	b.n	8008e94 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 8008e92:	2300      	movs	r3, #0
 8008e94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e96:	0019      	movs	r1, r3
 8008e98:	0010      	movs	r0, r2
 8008e9a:	f7ff fda7 	bl	80089ec <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8008e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea0:	3304      	adds	r3, #4
 8008ea2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ea4:	0011      	movs	r1, r2
 8008ea6:	0018      	movs	r0, r3
 8008ea8:	f7ff fe15 	bl	8008ad6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8008eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eb0:	0011      	movs	r1, r2
 8008eb2:	0018      	movs	r0, r3
 8008eb4:	f000 f877 	bl	8008fa6 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8008eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eba:	61fb      	str	r3, [r7, #28]
 8008ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ebe:	61bb      	str	r3, [r7, #24]
 8008ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec2:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	330c      	adds	r3, #12
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	69fa      	ldr	r2, [r7, #28]
 8008ece:	0010      	movs	r0, r2
 8008ed0:	4798      	blx	r3
    newPresenter->activate();
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	69ba      	ldr	r2, [r7, #24]
 8008eda:	0010      	movs	r0, r2
 8008edc:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8008ede:	697a      	ldr	r2, [r7, #20]
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	0011      	movs	r1, r2
 8008ee4:	0018      	movs	r0, r3
 8008ee6:	f007 fca2 	bl	801082e <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	3310      	adds	r3, #16
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	697a      	ldr	r2, [r7, #20]
 8008ef4:	0010      	movs	r0, r2
 8008ef6:	4798      	blx	r3
    newTransition->invalidate();
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	3314      	adds	r3, #20
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	697a      	ldr	r2, [r7, #20]
 8008f02:	0010      	movs	r0, r2
 8008f04:	4798      	blx	r3
}
 8008f06:	46c0      	nop			; (mov r8, r8)

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8008f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008f0a:	0018      	movs	r0, r3
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	b00f      	add	sp, #60	; 0x3c
 8008f10:	bd90      	pop	{r4, r7, pc}
 8008f12:	46c0      	nop			; (mov r8, r8)
 8008f14:	08014ec0 	.word	0x08014ec0
 8008f18:	08014f50 	.word	0x08014f50
 8008f1c:	08015054 	.word	0x08015054
 8008f20:	08015098 	.word	0x08015098
 8008f24:	0801513c 	.word	0x0801513c

08008f28 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	000a      	movs	r2, r1
 8008f32:	1cbb      	adds	r3, r7, #2
 8008f34:	801a      	strh	r2, [r3, #0]
    {
        return *static_cast<T*>(element(index));
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	3324      	adds	r3, #36	; 0x24
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	1cba      	adds	r2, r7, #2
 8008f40:	8811      	ldrh	r1, [r2, #0]
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	0010      	movs	r0, r2
 8008f46:	4798      	blx	r3
 8008f48:	0003      	movs	r3, r0
    }
 8008f4a:	0018      	movs	r0, r3
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	b002      	add	sp, #8
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b082      	sub	sp, #8
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
 8008f5a:	000a      	movs	r2, r1
 8008f5c:	1cbb      	adds	r3, r7, #2
 8008f5e:	801a      	strh	r2, [r3, #0]
        return *static_cast<T*>(element(index));
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	3324      	adds	r3, #36	; 0x24
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	1cba      	adds	r2, r7, #2
 8008f6a:	8811      	ldrh	r1, [r2, #0]
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	0010      	movs	r0, r2
 8008f70:	4798      	blx	r3
 8008f72:	0003      	movs	r3, r0
    }
 8008f74:	0018      	movs	r0, r3
 8008f76:	46bd      	mov	sp, r7
 8008f78:	b002      	add	sp, #8
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	000a      	movs	r2, r1
 8008f86:	1cbb      	adds	r3, r7, #2
 8008f88:	801a      	strh	r2, [r3, #0]
        return *static_cast<T*>(element(index));
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	3324      	adds	r3, #36	; 0x24
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	1cba      	adds	r2, r7, #2
 8008f94:	8811      	ldrh	r1, [r2, #0]
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	0010      	movs	r0, r2
 8008f9a:	4798      	blx	r3
 8008f9c:	0003      	movs	r3, r0
    }
 8008f9e:	0018      	movs	r0, r3
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	b002      	add	sp, #8
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b082      	sub	sp, #8
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
 8008fae:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	683a      	ldr	r2, [r7, #0]
 8008fb4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8008fb6:	46c0      	nop			; (mov r8, r8)
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	b002      	add	sp, #8
 8008fbc:	bd80      	pop	{r7, pc}
	...

08008fc0 <_ZN8touchgfx12NoTransitionD1Ev>:
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	4a05      	ldr	r2, [pc, #20]	; (8008fe0 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	601a      	str	r2, [r3, #0]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	0018      	movs	r0, r3
 8008fd2:	f7ff fc2f 	bl	8008834 <_ZN8touchgfx10TransitionD1Ev>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	0018      	movs	r0, r3
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	b002      	add	sp, #8
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	0801602c 	.word	0x0801602c

08008fe4 <_ZN8touchgfx12NoTransitionD0Ev>:
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	0018      	movs	r0, r3
 8008ff0:	f7ff ffe6 	bl	8008fc0 <_ZN8touchgfx12NoTransitionD1Ev>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	210c      	movs	r1, #12
 8008ff8:	0018      	movs	r0, r3
 8008ffa:	f00a febb 	bl	8013d74 <_ZdlPvj>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	0018      	movs	r0, r3
 8009002:	46bd      	mov	sp, r7
 8009004:	b002      	add	sp, #8
 8009006:	bd80      	pop	{r7, pc}

08009008 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	4a05      	ldr	r2, [pc, #20]	; (8009028 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	601a      	str	r2, [r3, #0]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	0018      	movs	r0, r3
 800901a:	f7ff fbd7 	bl	80087cc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	0018      	movs	r0, r3
 8009022:	46bd      	mov	sp, r7
 8009024:	b002      	add	sp, #8
 8009026:	bd80      	pop	{r7, pc}
 8009028:	080160a4 	.word	0x080160a4

0800902c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	0018      	movs	r0, r3
 8009038:	f7ff ffe6 	bl	8009008 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2110      	movs	r1, #16
 8009040:	0018      	movs	r0, r3
 8009042:	f00a fe97 	bl	8013d74 <_ZdlPvj>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	0018      	movs	r0, r3
 800904a:	46bd      	mov	sp, r7
 800904c:	b002      	add	sp, #8
 800904e:	bd80      	pop	{r7, pc}

08009050 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	685a      	ldr	r2, [r3, #4]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	105b      	asrs	r3, r3, #1
 8009062:	18d1      	adds	r1, r2, r3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	2201      	movs	r2, #1
 800906a:	4013      	ands	r3, r2
 800906c:	d102      	bne.n	8009074 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x24>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	e00a      	b.n	800908a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3a>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685a      	ldr	r2, [r3, #4]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	105b      	asrs	r3, r3, #1
 800907e:	18d3      	adds	r3, r2, r3
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	18d3      	adds	r3, r2, r3
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	0008      	movs	r0, r1
 800908c:	4798      	blx	r3
    }
 800908e:	46c0      	nop			; (mov r8, r8)
 8009090:	46bd      	mov	sp, r7
 8009092:	b002      	add	sp, #8
 8009094:	bd80      	pop	{r7, pc}

08009096 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8009096:	b580      	push	{r7, lr}
 8009098:	b082      	sub	sp, #8
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00f      	beq.n	80090c6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x30>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d106      	bne.n	80090bc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x26>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	2201      	movs	r2, #1
 80090b4:	4013      	ands	r3, r2
 80090b6:	d101      	bne.n	80090bc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x26>
 80090b8:	2301      	movs	r3, #1
 80090ba:	e000      	b.n	80090be <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80090bc:	2300      	movs	r3, #0
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d001      	beq.n	80090c6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x30>
 80090c2:	2301      	movs	r3, #1
 80090c4:	e000      	b.n	80090c8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80090c6:	2300      	movs	r3, #0
    }
 80090c8:	0018      	movs	r0, r3
 80090ca:	46bd      	mov	sp, r7
 80090cc:	b002      	add	sp, #8
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
        : color(col)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	683a      	ldr	r2, [r7, #0]
 80090de:	601a      	str	r2, [r3, #0]
    {
    }
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	0018      	movs	r0, r3
 80090e4:	46bd      	mov	sp, r7
 80090e6:	b002      	add	sp, #8
 80090e8:	bd80      	pop	{r7, pc}

080090ea <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b082      	sub	sp, #8
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	801a      	strh	r2, [r3, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	805a      	strh	r2, [r3, #2]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	809a      	strh	r2, [r3, #4]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	80da      	strh	r2, [r3, #6]
    {
    }
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	0018      	movs	r0, r3
 800910e:	46bd      	mov	sp, r7
 8009110:	b002      	add	sp, #8
 8009112:	bd80      	pop	{r7, pc}

08009114 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	000a      	movs	r2, r1
 800911e:	1cbb      	adds	r3, r7, #2
 8009120:	801a      	strh	r2, [r3, #0]
        : bitmapId(id)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	1cba      	adds	r2, r7, #2
 8009126:	8812      	ldrh	r2, [r2, #0]
 8009128:	801a      	strh	r2, [r3, #0]
    {
    }
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	0018      	movs	r0, r3
 800912e:	46bd      	mov	sp, r7
 8009130:	b002      	add	sp, #8
 8009132:	bd80      	pop	{r7, pc}

08009134 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800913c:	4a14      	ldr	r2, [pc, #80]	; (8009190 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	601a      	str	r2, [r3, #0]
        : rect(),
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	3304      	adds	r3, #4
 8009146:	0018      	movs	r0, r3
 8009148:	f7ff ffcf 	bl	80090ea <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	330c      	adds	r3, #12
 8009150:	0018      	movs	r0, r3
 8009152:	f7ff ffca 	bl	80090ea <_ZN8touchgfx4RectC1Ev>
          parent(0),
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2200      	movs	r2, #0
 8009172:	845a      	strh	r2, [r3, #34]	; 0x22
          touchable(false),
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2224      	movs	r2, #36	; 0x24
 8009178:	2100      	movs	r1, #0
 800917a:	5499      	strb	r1, [r3, r2]
          visible(true)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2225      	movs	r2, #37	; 0x25
 8009180:	2101      	movs	r1, #1
 8009182:	5499      	strb	r1, [r3, r2]
    {
    }
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	0018      	movs	r0, r3
 8009188:	46bd      	mov	sp, r7
 800918a:	b002      	add	sp, #8
 800918c:	bd80      	pop	{r7, pc}
 800918e:	46c0      	nop			; (mov r8, r8)
 8009190:	08016c2c 	.word	0x08016c2c

08009194 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
    {
 800919c:	4a03      	ldr	r2, [pc, #12]	; (80091ac <_ZN8touchgfx8DrawableD1Ev+0x18>)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	601a      	str	r2, [r3, #0]
    }
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	0018      	movs	r0, r3
 80091a6:	46bd      	mov	sp, r7
 80091a8:	b002      	add	sp, #8
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	08016c2c 	.word	0x08016c2c

080091b0 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
    }
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	0018      	movs	r0, r3
 80091bc:	f7ff ffea 	bl	8009194 <_ZN8touchgfx8DrawableD1Ev>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2128      	movs	r1, #40	; 0x28
 80091c4:	0018      	movs	r0, r3
 80091c6:	f00a fdd5 	bl	8013d74 <_ZdlPvj>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	0018      	movs	r0, r3
 80091ce:	46bd      	mov	sp, r7
 80091d0:	b002      	add	sp, #8
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2225      	movs	r2, #37	; 0x25
 80091e0:	5c9b      	ldrb	r3, [r3, r2]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d006      	beq.n	80091f4 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x20>
        {
            invalidate();
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	3314      	adds	r3, #20
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	0010      	movs	r0, r2
 80091f2:	4798      	blx	r3
        }
    }
 80091f4:	46c0      	nop			; (mov r8, r8)
 80091f6:	46bd      	mov	sp, r7
 80091f8:	b002      	add	sp, #8
 80091fa:	bd80      	pop	{r7, pc}

080091fc <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b082      	sub	sp, #8
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8009204:	2300      	movs	r3, #0
    }
 8009206:	0018      	movs	r0, r3
 8009208:	46bd      	mov	sp, r7
 800920a:	b002      	add	sp, #8
 800920c:	bd80      	pop	{r7, pc}

0800920e <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800920e:	b5b0      	push	{r4, r5, r7, lr}
 8009210:	b084      	sub	sp, #16
 8009212:	af00      	add	r7, sp, #0
 8009214:	60f8      	str	r0, [r7, #12]
 8009216:	000c      	movs	r4, r1
 8009218:	0010      	movs	r0, r2
 800921a:	0019      	movs	r1, r3
 800921c:	250a      	movs	r5, #10
 800921e:	197b      	adds	r3, r7, r5
 8009220:	1c22      	adds	r2, r4, #0
 8009222:	801a      	strh	r2, [r3, #0]
 8009224:	2408      	movs	r4, #8
 8009226:	193b      	adds	r3, r7, r4
 8009228:	1c02      	adds	r2, r0, #0
 800922a:	801a      	strh	r2, [r3, #0]
 800922c:	1dbb      	adds	r3, r7, #6
 800922e:	1c0a      	adds	r2, r1, #0
 8009230:	801a      	strh	r2, [r3, #0]
    {
        setXY(x, y);
 8009232:	193b      	adds	r3, r7, r4
 8009234:	2200      	movs	r2, #0
 8009236:	5e9a      	ldrsh	r2, [r3, r2]
 8009238:	197b      	adds	r3, r7, r5
 800923a:	2100      	movs	r1, #0
 800923c:	5e59      	ldrsh	r1, [r3, r1]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	0018      	movs	r0, r3
 8009242:	f000 f82d 	bl	80092a0 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8009246:	2320      	movs	r3, #32
 8009248:	18fb      	adds	r3, r7, r3
 800924a:	2200      	movs	r2, #0
 800924c:	5e9a      	ldrsh	r2, [r3, r2]
 800924e:	1dbb      	adds	r3, r7, #6
 8009250:	2100      	movs	r1, #0
 8009252:	5e59      	ldrsh	r1, [r3, r1]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	0018      	movs	r0, r3
 8009258:	f000 f87e 	bl	8009358 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800925c:	46c0      	nop			; (mov r8, r8)
 800925e:	46bd      	mov	sp, r7
 8009260:	b004      	add	sp, #16
 8009262:	bdb0      	pop	{r4, r5, r7, pc}

08009264 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	000a      	movs	r2, r1
 800926e:	1cbb      	adds	r3, r7, #2
 8009270:	801a      	strh	r2, [r3, #0]
    {
        rect.x = x;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	1cba      	adds	r2, r7, #2
 8009276:	8812      	ldrh	r2, [r2, #0]
 8009278:	809a      	strh	r2, [r3, #4]
    }
 800927a:	46c0      	nop			; (mov r8, r8)
 800927c:	46bd      	mov	sp, r7
 800927e:	b002      	add	sp, #8
 8009280:	bd80      	pop	{r7, pc}

08009282 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8009282:	b580      	push	{r7, lr}
 8009284:	b082      	sub	sp, #8
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
 800928a:	000a      	movs	r2, r1
 800928c:	1cbb      	adds	r3, r7, #2
 800928e:	801a      	strh	r2, [r3, #0]
    {
        rect.y = y;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	1cba      	adds	r2, r7, #2
 8009294:	8812      	ldrh	r2, [r2, #0]
 8009296:	80da      	strh	r2, [r3, #6]
    }
 8009298:	46c0      	nop			; (mov r8, r8)
 800929a:	46bd      	mov	sp, r7
 800929c:	b002      	add	sp, #8
 800929e:	bd80      	pop	{r7, pc}

080092a0 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	0008      	movs	r0, r1
 80092aa:	0011      	movs	r1, r2
 80092ac:	1cbb      	adds	r3, r7, #2
 80092ae:	1c02      	adds	r2, r0, #0
 80092b0:	801a      	strh	r2, [r3, #0]
 80092b2:	003b      	movs	r3, r7
 80092b4:	1c0a      	adds	r2, r1, #0
 80092b6:	801a      	strh	r2, [r3, #0]
    {
        setX(x);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	3330      	adds	r3, #48	; 0x30
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	1cba      	adds	r2, r7, #2
 80092c2:	2100      	movs	r1, #0
 80092c4:	5e51      	ldrsh	r1, [r2, r1]
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	0010      	movs	r0, r2
 80092ca:	4798      	blx	r3
        setY(y);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	3334      	adds	r3, #52	; 0x34
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	003a      	movs	r2, r7
 80092d6:	2100      	movs	r1, #0
 80092d8:	5e51      	ldrsh	r1, [r2, r1]
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	0010      	movs	r0, r2
 80092de:	4798      	blx	r3
    }
 80092e0:	46c0      	nop			; (mov r8, r8)
 80092e2:	46bd      	mov	sp, r7
 80092e4:	b002      	add	sp, #8
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	000a      	movs	r2, r1
 80092f2:	1cbb      	adds	r3, r7, #2
 80092f4:	801a      	strh	r2, [r3, #0]
    {
        rect.width = width;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	1cba      	adds	r2, r7, #2
 80092fa:	8812      	ldrh	r2, [r2, #0]
 80092fc:	811a      	strh	r2, [r3, #8]
    }
 80092fe:	46c0      	nop			; (mov r8, r8)
 8009300:	46bd      	mov	sp, r7
 8009302:	b002      	add	sp, #8
 8009304:	bd80      	pop	{r7, pc}

08009306 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8009306:	b580      	push	{r7, lr}
 8009308:	b082      	sub	sp, #8
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	000a      	movs	r2, r1
 8009310:	1cbb      	adds	r3, r7, #2
 8009312:	801a      	strh	r2, [r3, #0]
    {
        rect.height = height;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	1cba      	adds	r2, r7, #2
 8009318:	8812      	ldrh	r2, [r2, #0]
 800931a:	815a      	strh	r2, [r3, #10]
    }
 800931c:	46c0      	nop			; (mov r8, r8)
 800931e:	46bd      	mov	sp, r7
 8009320:	b002      	add	sp, #8
 8009322:	bd80      	pop	{r7, pc}

08009324 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
    {
    }
 800932c:	46c0      	nop			; (mov r8, r8)
 800932e:	46bd      	mov	sp, r7
 8009330:	b002      	add	sp, #8
 8009332:	bd80      	pop	{r7, pc}

08009334 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800933e:	46c0      	nop			; (mov r8, r8)
 8009340:	46bd      	mov	sp, r7
 8009342:	b002      	add	sp, #8
 8009344:	bd80      	pop	{r7, pc}

08009346 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8009346:	b580      	push	{r7, lr}
 8009348:	b082      	sub	sp, #8
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
 800934e:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8009350:	46c0      	nop			; (mov r8, r8)
 8009352:	46bd      	mov	sp, r7
 8009354:	b002      	add	sp, #8
 8009356:	bd80      	pop	{r7, pc}

08009358 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	0008      	movs	r0, r1
 8009362:	0011      	movs	r1, r2
 8009364:	1cbb      	adds	r3, r7, #2
 8009366:	1c02      	adds	r2, r0, #0
 8009368:	801a      	strh	r2, [r3, #0]
 800936a:	003b      	movs	r3, r7
 800936c:	1c0a      	adds	r2, r1, #0
 800936e:	801a      	strh	r2, [r3, #0]
    {
        setWidth(width);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	3338      	adds	r3, #56	; 0x38
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	1cba      	adds	r2, r7, #2
 800937a:	2100      	movs	r1, #0
 800937c:	5e51      	ldrsh	r1, [r2, r1]
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	0010      	movs	r0, r2
 8009382:	4798      	blx	r3
        setHeight(height);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	333c      	adds	r3, #60	; 0x3c
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	003a      	movs	r2, r7
 800938e:	2100      	movs	r1, #0
 8009390:	5e51      	ldrsh	r1, [r2, r1]
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	0010      	movs	r0, r2
 8009396:	4798      	blx	r3
    }
 8009398:	46c0      	nop			; (mov r8, r8)
 800939a:	46bd      	mov	sp, r7
 800939c:	b002      	add	sp, #8
 800939e:	bd80      	pop	{r7, pc}

080093a0 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80093aa:	46c0      	nop			; (mov r8, r8)
 80093ac:	46bd      	mov	sp, r7
 80093ae:	b002      	add	sp, #8
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b082      	sub	sp, #8
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
    {
    }
 80093ba:	46c0      	nop			; (mov r8, r8)
 80093bc:	46bd      	mov	sp, r7
 80093be:	b002      	add	sp, #8
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b082      	sub	sp, #8
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
 80093ca:	000a      	movs	r2, r1
 80093cc:	1cfb      	adds	r3, r7, #3
 80093ce:	701a      	strb	r2, [r3, #0]
    {
        touchable = touch;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	1cfa      	adds	r2, r7, #3
 80093d4:	2124      	movs	r1, #36	; 0x24
 80093d6:	7812      	ldrb	r2, [r2, #0]
 80093d8:	545a      	strb	r2, [r3, r1]
    }
 80093da:	46c0      	nop			; (mov r8, r8)
 80093dc:	46bd      	mov	sp, r7
 80093de:	b002      	add	sp, #8
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b082      	sub	sp, #8
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
    {
        return visible;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2225      	movs	r2, #37	; 0x25
 80093ee:	5c9b      	ldrb	r3, [r3, r2]
    }
 80093f0:	0018      	movs	r0, r3
 80093f2:	46bd      	mov	sp, r7
 80093f4:	b002      	add	sp, #8
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2224      	movs	r2, #36	; 0x24
 8009404:	5c9b      	ldrb	r3, [r3, r2]
    }
 8009406:	0018      	movs	r0, r3
 8009408:	46bd      	mov	sp, r7
 800940a:	b002      	add	sp, #8
 800940c:	bd80      	pop	{r7, pc}

0800940e <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800940e:	b590      	push	{r4, r7, lr}
 8009410:	b083      	sub	sp, #12
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
 8009416:	0008      	movs	r0, r1
 8009418:	0011      	movs	r1, r2
 800941a:	1cbb      	adds	r3, r7, #2
 800941c:	1c02      	adds	r2, r0, #0
 800941e:	801a      	strh	r2, [r3, #0]
 8009420:	003b      	movs	r3, r7
 8009422:	1c0a      	adds	r2, r1, #0
 8009424:	801a      	strh	r2, [r3, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	3354      	adds	r3, #84	; 0x54
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	1cba      	adds	r2, r7, #2
 8009430:	8811      	ldrh	r1, [r2, #0]
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	2004      	movs	r0, #4
 8009436:	5e12      	ldrsh	r2, [r2, r0]
 8009438:	b292      	uxth	r2, r2
 800943a:	1a8a      	subs	r2, r1, r2
 800943c:	b292      	uxth	r2, r2
 800943e:	b214      	sxth	r4, r2
 8009440:	003a      	movs	r2, r7
 8009442:	8811      	ldrh	r1, [r2, #0]
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	2006      	movs	r0, #6
 8009448:	5e12      	ldrsh	r2, [r2, r0]
 800944a:	b292      	uxth	r2, r2
 800944c:	1a8a      	subs	r2, r1, r2
 800944e:	b292      	uxth	r2, r2
 8009450:	b212      	sxth	r2, r2
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	0021      	movs	r1, r4
 8009456:	4798      	blx	r3
    }
 8009458:	46c0      	nop			; (mov r8, r8)
 800945a:	46bd      	mov	sp, r7
 800945c:	b003      	add	sp, #12
 800945e:	bd90      	pop	{r4, r7, pc}

08009460 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2201      	movs	r2, #1
 800946c:	4252      	negs	r2, r2
 800946e:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	4252      	negs	r2, r2
 8009476:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2201      	movs	r2, #1
 800947c:	4252      	negs	r2, r2
 800947e:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8009480:	46c0      	nop			; (mov r8, r8)
 8009482:	46bd      	mov	sp, r7
 8009484:	b002      	add	sp, #8
 8009486:	bd80      	pop	{r7, pc}

08009488 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	0018      	movs	r0, r3
 8009498:	f7ff ffe2 	bl	8009460 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681a      	ldr	r2, [r3, #0]
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	601a      	str	r2, [r3, #0]
    }
 80094aa:	46c0      	nop			; (mov r8, r8)
 80094ac:	46bd      	mov	sp, r7
 80094ae:	b004      	add	sp, #16
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b084      	sub	sp, #16
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	60f8      	str	r0, [r7, #12]
 80094ba:	0008      	movs	r0, r1
 80094bc:	0011      	movs	r1, r2
 80094be:	607b      	str	r3, [r7, #4]
 80094c0:	230a      	movs	r3, #10
 80094c2:	18fb      	adds	r3, r7, r3
 80094c4:	1c02      	adds	r2, r0, #0
 80094c6:	801a      	strh	r2, [r3, #0]
 80094c8:	2308      	movs	r3, #8
 80094ca:	18fb      	adds	r3, r7, r3
 80094cc:	1c0a      	adds	r2, r1, #0
 80094ce:	801a      	strh	r2, [r3, #0]
    {
        if (isVisible() && isTouchable())
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	0018      	movs	r0, r3
 80094d4:	f7ff ff85 	bl	80093e2 <_ZNK8touchgfx8Drawable9isVisibleEv>
 80094d8:	1e03      	subs	r3, r0, #0
 80094da:	d007      	beq.n	80094ec <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3a>
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	0018      	movs	r0, r3
 80094e0:	f7ff ff8a 	bl	80093f8 <_ZNK8touchgfx8Drawable11isTouchableEv>
 80094e4:	1e03      	subs	r3, r0, #0
 80094e6:	d001      	beq.n	80094ec <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3a>
 80094e8:	2301      	movs	r3, #1
 80094ea:	e000      	b.n	80094ee <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3c>
 80094ec:	2300      	movs	r3, #0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d002      	beq.n	80094f8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x46>
        {
            *last = this;
 80094f2:	68fa      	ldr	r2, [r7, #12]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	601a      	str	r2, [r3, #0]
        }
    }
 80094f8:	46c0      	nop			; (mov r8, r8)
 80094fa:	46bd      	mov	sp, r7
 80094fc:	b004      	add	sp, #16
 80094fe:	bd80      	pop	{r7, pc}

08009500 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
    {
 8009508:	4a06      	ldr	r2, [pc, #24]	; (8009524 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	601a      	str	r2, [r3, #0]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	3304      	adds	r3, #4
 8009512:	0018      	movs	r0, r3
 8009514:	f000 fa72 	bl	80099fc <_ZN8touchgfx9ContainerD1Ev>
    }
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	0018      	movs	r0, r3
 800951c:	46bd      	mov	sp, r7
 800951e:	b002      	add	sp, #8
 8009520:	bd80      	pop	{r7, pc}
 8009522:	46c0      	nop			; (mov r8, r8)
 8009524:	08016d38 	.word	0x08016d38

08009528 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
    }
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	0018      	movs	r0, r3
 8009534:	f7ff ffe4 	bl	8009500 <_ZN8touchgfx6ScreenD1Ev>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	213c      	movs	r1, #60	; 0x3c
 800953c:	0018      	movs	r0, r3
 800953e:	f00a fc19 	bl	8013d74 <_ZdlPvj>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	0018      	movs	r0, r3
 8009546:	46bd      	mov	sp, r7
 8009548:	b002      	add	sp, #8
 800954a:	bd80      	pop	{r7, pc}

0800954c <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
    {
    }
 8009554:	46c0      	nop			; (mov r8, r8)
 8009556:	46bd      	mov	sp, r7
 8009558:	b002      	add	sp, #8
 800955a:	bd80      	pop	{r7, pc}

0800955c <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
    {
    }
 8009564:	46c0      	nop			; (mov r8, r8)
 8009566:	46bd      	mov	sp, r7
 8009568:	b002      	add	sp, #8
 800956a:	bd80      	pop	{r7, pc}

0800956c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
    {
    }
 8009574:	46c0      	nop			; (mov r8, r8)
 8009576:	46bd      	mov	sp, r7
 8009578:	b002      	add	sp, #8
 800957a:	bd80      	pop	{r7, pc}

0800957c <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
    {
    }
 8009584:	46c0      	nop			; (mov r8, r8)
 8009586:	46bd      	mov	sp, r7
 8009588:	b002      	add	sp, #8
 800958a:	bd80      	pop	{r7, pc}

0800958c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	000a      	movs	r2, r1
 8009596:	1cfb      	adds	r3, r7, #3
 8009598:	701a      	strb	r2, [r3, #0]
    {
        (void)key; // Unused variable
    }
 800959a:	46c0      	nop			; (mov r8, r8)
 800959c:	46bd      	mov	sp, r7
 800959e:	b002      	add	sp, #8
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b082      	sub	sp, #8
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
 80095aa:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	3304      	adds	r3, #4
 80095b0:	683a      	ldr	r2, [r7, #0]
 80095b2:	0011      	movs	r1, r2
 80095b4:	0018      	movs	r0, r3
 80095b6:	f002 fe66 	bl	800c286 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80095ba:	46c0      	nop			; (mov r8, r8)
 80095bc:	46bd      	mov	sp, r7
 80095be:	b002      	add	sp, #8
 80095c0:	bd80      	pop	{r7, pc}
	...

080095c4 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	0018      	movs	r0, r3
 80095d0:	f7ff fdb0 	bl	8009134 <_ZN8touchgfx8DrawableC1Ev>
 80095d4:	4a03      	ldr	r2, [pc, #12]	; (80095e4 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	601a      	str	r2, [r3, #0]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	0018      	movs	r0, r3
 80095de:	46bd      	mov	sp, r7
 80095e0:	b002      	add	sp, #8
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	080161dc 	.word	0x080161dc

080095e8 <_ZN8touchgfx6WidgetD1Ev>:
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	4a05      	ldr	r2, [pc, #20]	; (8009608 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	601a      	str	r2, [r3, #0]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	0018      	movs	r0, r3
 80095fa:	f7ff fdcb 	bl	8009194 <_ZN8touchgfx8DrawableD1Ev>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	0018      	movs	r0, r3
 8009602:	46bd      	mov	sp, r7
 8009604:	b002      	add	sp, #8
 8009606:	bd80      	pop	{r7, pc}
 8009608:	080161dc 	.word	0x080161dc

0800960c <_ZN8touchgfx6WidgetD0Ev>:
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	0018      	movs	r0, r3
 8009618:	f7ff ffe6 	bl	80095e8 <_ZN8touchgfx6WidgetD1Ev>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2128      	movs	r1, #40	; 0x28
 8009620:	0018      	movs	r0, r3
 8009622:	f00a fba7 	bl	8013d74 <_ZdlPvj>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	0018      	movs	r0, r3
 800962a:	46bd      	mov	sp, r7
 800962c:	b002      	add	sp, #8
 800962e:	bd80      	pop	{r7, pc}

08009630 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	0018      	movs	r0, r3
 800963c:	2326      	movs	r3, #38	; 0x26
 800963e:	001a      	movs	r2, r3
 8009640:	2100      	movs	r1, #0
 8009642:	f00a fdd5 	bl	80141f0 <memset>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	0018      	movs	r0, r3
 800964a:	f7ff ffbb 	bl	80095c4 <_ZN8touchgfx6WidgetC1Ev>
 800964e:	4a09      	ldr	r2, [pc, #36]	; (8009674 <_ZN8touchgfx3BoxC1Ev+0x44>)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	601a      	str	r2, [r3, #0]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2226      	movs	r2, #38	; 0x26
 8009658:	21ff      	movs	r1, #255	; 0xff
 800965a:	5499      	strb	r1, [r3, r2]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	3328      	adds	r3, #40	; 0x28
 8009660:	2100      	movs	r1, #0
 8009662:	0018      	movs	r0, r3
 8009664:	f7ff fd34 	bl	80090d0 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	0018      	movs	r0, r3
 800966c:	46bd      	mov	sp, r7
 800966e:	b002      	add	sp, #8
 8009670:	bd80      	pop	{r7, pc}
 8009672:	46c0      	nop			; (mov r8, r8)
 8009674:	08016a38 	.word	0x08016a38

08009678 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	683a      	ldr	r2, [r7, #0]
 8009686:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8009688:	46c0      	nop			; (mov r8, r8)
 800968a:	46bd      	mov	sp, r7
 800968c:	b002      	add	sp, #8
 800968e:	bd80      	pop	{r7, pc}

08009690 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	0018      	movs	r0, r3
 800969e:	2326      	movs	r3, #38	; 0x26
 80096a0:	001a      	movs	r2, r3
 80096a2:	2100      	movs	r1, #0
 80096a4:	f00a fda4 	bl	80141f0 <memset>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	0018      	movs	r0, r3
 80096ac:	f7ff ff8a 	bl	80095c4 <_ZN8touchgfx6WidgetC1Ev>
 80096b0:	4a0a      	ldr	r2, [pc, #40]	; (80096dc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x4c>)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	601a      	str	r2, [r3, #0]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	683a      	ldr	r2, [r7, #0]
 80096ba:	8812      	ldrh	r2, [r2, #0]
 80096bc:	84da      	strh	r2, [r3, #38]	; 0x26
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2228      	movs	r2, #40	; 0x28
 80096c2:	21ff      	movs	r1, #255	; 0xff
 80096c4:	5499      	strb	r1, [r3, r2]
    {
        Image::setBitmap(bmp);
 80096c6:	683a      	ldr	r2, [r7, #0]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	0011      	movs	r1, r2
 80096cc:	0018      	movs	r0, r3
 80096ce:	f004 f991 	bl	800d9f4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	0018      	movs	r0, r3
 80096d6:	46bd      	mov	sp, r7
 80096d8:	b002      	add	sp, #8
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	08016b14 	.word	0x08016b14

080096e0 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	0018      	movs	r0, r3
 80096ec:	2326      	movs	r3, #38	; 0x26
 80096ee:	001a      	movs	r2, r3
 80096f0:	2100      	movs	r1, #0
 80096f2:	f00a fd7d 	bl	80141f0 <memset>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	0018      	movs	r0, r3
 80096fa:	f7ff ff63 	bl	80095c4 <_ZN8touchgfx6WidgetC1Ev>
 80096fe:	4a0a      	ldr	r2, [pc, #40]	; (8009728 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	601a      	str	r2, [r3, #0]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	629a      	str	r2, [r3, #40]	; 0x28
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	222c      	movs	r2, #44	; 0x2c
 800970e:	2100      	movs	r1, #0
 8009710:	5499      	strb	r1, [r3, r2]
    {
        setTouchable(true);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2101      	movs	r1, #1
 8009716:	0018      	movs	r0, r3
 8009718:	f7ff fe53 	bl	80093c2 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	0018      	movs	r0, r3
 8009720:	46bd      	mov	sp, r7
 8009722:	b002      	add	sp, #8
 8009724:	bd80      	pop	{r7, pc}
 8009726:	46c0      	nop			; (mov r8, r8)
 8009728:	080169c8 	.word	0x080169c8

0800972c <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	4a05      	ldr	r2, [pc, #20]	; (800974c <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	601a      	str	r2, [r3, #0]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	0018      	movs	r0, r3
 800973e:	f7ff ff53 	bl	80095e8 <_ZN8touchgfx6WidgetD1Ev>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	0018      	movs	r0, r3
 8009746:	46bd      	mov	sp, r7
 8009748:	b002      	add	sp, #8
 800974a:	bd80      	pop	{r7, pc}
 800974c:	080169c8 	.word	0x080169c8

08009750 <_ZN8touchgfx14AbstractButtonD0Ev>:
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	0018      	movs	r0, r3
 800975c:	f7ff ffe6 	bl	800972c <_ZN8touchgfx14AbstractButtonD1Ev>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2130      	movs	r1, #48	; 0x30
 8009764:	0018      	movs	r0, r3
 8009766:	f00a fb05 	bl	8013d74 <_ZdlPvj>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	0018      	movs	r0, r3
 800976e:	46bd      	mov	sp, r7
 8009770:	b002      	add	sp, #8
 8009772:	bd80      	pop	{r7, pc}

08009774 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	0018      	movs	r0, r3
 8009780:	f7ff ffae 	bl	80096e0 <_ZN8touchgfx14AbstractButtonC1Ev>
 8009784:	4a0c      	ldr	r2, [pc, #48]	; (80097b8 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	601a      	str	r2, [r3, #0]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	332e      	adds	r3, #46	; 0x2e
 800978e:	4a0b      	ldr	r2, [pc, #44]	; (80097bc <_ZN8touchgfx6ButtonC1Ev+0x48>)
 8009790:	0011      	movs	r1, r2
 8009792:	0018      	movs	r0, r3
 8009794:	f7ff fcbe 	bl	8009114 <_ZN8touchgfx6BitmapC1Et>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	3330      	adds	r3, #48	; 0x30
 800979c:	4a07      	ldr	r2, [pc, #28]	; (80097bc <_ZN8touchgfx6ButtonC1Ev+0x48>)
 800979e:	0011      	movs	r1, r2
 80097a0:	0018      	movs	r0, r3
 80097a2:	f7ff fcb7 	bl	8009114 <_ZN8touchgfx6BitmapC1Et>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2232      	movs	r2, #50	; 0x32
 80097aa:	21ff      	movs	r1, #255	; 0xff
 80097ac:	5499      	strb	r1, [r3, r2]
    {
    }
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	0018      	movs	r0, r3
 80097b2:	46bd      	mov	sp, r7
 80097b4:	b002      	add	sp, #8
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	08016aa0 	.word	0x08016aa0
 80097bc:	0000ffff 	.word	0x0000ffff

080097c0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	4a05      	ldr	r2, [pc, #20]	; (80097e0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	601a      	str	r2, [r3, #0]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	0018      	movs	r0, r3
 80097d2:	f7ff fe95 	bl	8009500 <_ZN8touchgfx6ScreenD1Ev>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	0018      	movs	r0, r3
 80097da:	46bd      	mov	sp, r7
 80097dc:	b002      	add	sp, #8
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	080161a8 	.word	0x080161a8

080097e4 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	0018      	movs	r0, r3
 80097f0:	f7ff ffe6 	bl	80097c0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2140      	movs	r1, #64	; 0x40
 80097f8:	0018      	movs	r0, r3
 80097fa:	f00a fabb 	bl	8013d74 <_ZdlPvj>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	0018      	movs	r0, r3
 8009802:	46bd      	mov	sp, r7
 8009804:	b002      	add	sp, #8
 8009806:	bd80      	pop	{r7, pc}

08009808 <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

Screen1ViewBase::Screen1ViewBase()
 8009808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800980a:	b08b      	sub	sp, #44	; 0x2c
 800980c:	af02      	add	r7, sp, #8
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	0018      	movs	r0, r3
 8009814:	f000 f8dc 	bl	80099d0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8009818:	4a4d      	ldr	r2, [pc, #308]	; (8009950 <_ZN15Screen1ViewBaseC1Ev+0x148>)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	601a      	str	r2, [r3, #0]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	3340      	adds	r3, #64	; 0x40
 8009822:	0018      	movs	r0, r3
 8009824:	f7ff ff04 	bl	8009630 <_ZN8touchgfx3BoxC1Ev>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	336c      	adds	r3, #108	; 0x6c
 800982c:	001c      	movs	r4, r3
 800982e:	4a49      	ldr	r2, [pc, #292]	; (8009954 <_ZN15Screen1ViewBaseC1Ev+0x14c>)
 8009830:	2508      	movs	r5, #8
 8009832:	197b      	adds	r3, r7, r5
 8009834:	0011      	movs	r1, r2
 8009836:	0018      	movs	r0, r3
 8009838:	f7ff fc6c 	bl	8009114 <_ZN8touchgfx6BitmapC1Et>
 800983c:	197b      	adds	r3, r7, r5
 800983e:	0019      	movs	r1, r3
 8009840:	0020      	movs	r0, r4
 8009842:	f7ff ff25 	bl	8009690 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	3398      	adds	r3, #152	; 0x98
 800984a:	0018      	movs	r0, r3
 800984c:	f7ff ff92 	bl	8009774 <_ZN8touchgfx6ButtonC1Ev>
{
    __background.setPosition(0, 0, 320, 240);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	3340      	adds	r3, #64	; 0x40
 8009854:	0018      	movs	r0, r3
 8009856:	23a0      	movs	r3, #160	; 0xa0
 8009858:	005b      	lsls	r3, r3, #1
 800985a:	22f0      	movs	r2, #240	; 0xf0
 800985c:	9200      	str	r2, [sp, #0]
 800985e:	2200      	movs	r2, #0
 8009860:	2100      	movs	r1, #0
 8009862:	f7ff fcd4 	bl	800920e <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	3340      	adds	r3, #64	; 0x40
 800986a:	001c      	movs	r4, r3
 800986c:	211f      	movs	r1, #31
 800986e:	187b      	adds	r3, r7, r1
 8009870:	2200      	movs	r2, #0
 8009872:	701a      	strb	r2, [r3, #0]
 8009874:	201e      	movs	r0, #30
 8009876:	183b      	adds	r3, r7, r0
 8009878:	2200      	movs	r2, #0
 800987a:	701a      	strb	r2, [r3, #0]
 800987c:	251d      	movs	r5, #29
 800987e:	197b      	adds	r3, r7, r5
 8009880:	2200      	movs	r2, #0
 8009882:	701a      	strb	r2, [r3, #0]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009884:	187b      	adds	r3, r7, r1
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	041b      	lsls	r3, r3, #16
 800988a:	001a      	movs	r2, r3
 800988c:	183b      	adds	r3, r7, r0
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	021b      	lsls	r3, r3, #8
 8009892:	431a      	orrs	r2, r3
 8009894:	197b      	adds	r3, r7, r5
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	4313      	orrs	r3, r2
 800989a:	22ff      	movs	r2, #255	; 0xff
 800989c:	0612      	lsls	r2, r2, #24
 800989e:	431a      	orrs	r2, r3
 80098a0:	2318      	movs	r3, #24
 80098a2:	18fb      	adds	r3, r7, r3
 80098a4:	0011      	movs	r1, r2
 80098a6:	0018      	movs	r0, r3
 80098a8:	f7ff fc12 	bl	80090d0 <_ZN8touchgfx9colortypeC1Em>
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	0019      	movs	r1, r3
 80098b0:	0020      	movs	r0, r4
 80098b2:	f7ff fee1 	bl	8009678 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	3340      	adds	r3, #64	; 0x40
 80098bc:	0019      	movs	r1, r3
 80098be:	0010      	movs	r0, r2
 80098c0:	f7ff fe6f 	bl	80095a2 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    image1.setXY(0, 0);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	336c      	adds	r3, #108	; 0x6c
 80098c8:	2200      	movs	r2, #0
 80098ca:	2100      	movs	r1, #0
 80098cc:	0018      	movs	r0, r3
 80098ce:	f7ff fce7 	bl	80092a0 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_320X240_GRADIENT_DARK_ID));
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	336c      	adds	r3, #108	; 0x6c
 80098d6:	001c      	movs	r4, r3
 80098d8:	250c      	movs	r5, #12
 80098da:	197b      	adds	r3, r7, r5
 80098dc:	2100      	movs	r1, #0
 80098de:	0018      	movs	r0, r3
 80098e0:	f7ff fc18 	bl	8009114 <_ZN8touchgfx6BitmapC1Et>
 80098e4:	197b      	adds	r3, r7, r5
 80098e6:	0019      	movs	r1, r3
 80098e8:	0020      	movs	r0, r4
 80098ea:	f004 f883 	bl	800d9f4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(image1);
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	336c      	adds	r3, #108	; 0x6c
 80098f4:	0019      	movs	r1, r3
 80098f6:	0010      	movs	r0, r2
 80098f8:	f7ff fe53 	bl	80095a2 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    button1.setXY(-68, 95);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	3398      	adds	r3, #152	; 0x98
 8009900:	2244      	movs	r2, #68	; 0x44
 8009902:	4251      	negs	r1, r2
 8009904:	225f      	movs	r2, #95	; 0x5f
 8009906:	0018      	movs	r0, r3
 8009908:	f7ff fcca 	bl	80092a0 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_LARGE_ROUND_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID));
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	3398      	adds	r3, #152	; 0x98
 8009910:	001c      	movs	r4, r3
 8009912:	2510      	movs	r5, #16
 8009914:	197b      	adds	r3, r7, r5
 8009916:	2101      	movs	r1, #1
 8009918:	0018      	movs	r0, r3
 800991a:	f7ff fbfb 	bl	8009114 <_ZN8touchgfx6BitmapC1Et>
 800991e:	2614      	movs	r6, #20
 8009920:	19bb      	adds	r3, r7, r6
 8009922:	2102      	movs	r1, #2
 8009924:	0018      	movs	r0, r3
 8009926:	f7ff fbf5 	bl	8009114 <_ZN8touchgfx6BitmapC1Et>
 800992a:	19ba      	adds	r2, r7, r6
 800992c:	197b      	adds	r3, r7, r5
 800992e:	0019      	movs	r1, r3
 8009930:	0020      	movs	r0, r4
 8009932:	f003 ff98 	bl	800d866 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    add(button1);
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	3398      	adds	r3, #152	; 0x98
 800993c:	0019      	movs	r1, r3
 800993e:	0010      	movs	r0, r2
 8009940:	f7ff fe2f 	bl	80095a2 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	0018      	movs	r0, r3
 8009948:	46bd      	mov	sp, r7
 800994a:	b009      	add	sp, #36	; 0x24
 800994c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800994e:	46c0      	nop			; (mov r8, r8)
 8009950:	08016174 	.word	0x08016174
 8009954:	0000ffff 	.word	0x0000ffff

08009958 <_ZN15Screen1ViewBaseD1Ev>:

Screen1ViewBase::~Screen1ViewBase()
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	4a0d      	ldr	r2, [pc, #52]	; (8009998 <_ZN15Screen1ViewBaseD1Ev+0x40>)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	601a      	str	r2, [r3, #0]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	3398      	adds	r3, #152	; 0x98
 800996a:	0018      	movs	r0, r3
 800996c:	f000 f8b2 	bl	8009ad4 <_ZN8touchgfx6ButtonD1Ev>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	336c      	adds	r3, #108	; 0x6c
 8009974:	0018      	movs	r0, r3
 8009976:	f000 f889 	bl	8009a8c <_ZN8touchgfx5ImageD1Ev>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	3340      	adds	r3, #64	; 0x40
 800997e:	0018      	movs	r0, r3
 8009980:	f000 f860 	bl	8009a44 <_ZN8touchgfx3BoxD1Ev>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	0018      	movs	r0, r3
 8009988:	f7ff ff1a 	bl	80097c0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
{

}
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	0018      	movs	r0, r3
 8009990:	46bd      	mov	sp, r7
 8009992:	b002      	add	sp, #8
 8009994:	bd80      	pop	{r7, pc}
 8009996:	46c0      	nop			; (mov r8, r8)
 8009998:	08016174 	.word	0x08016174

0800999c <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
}
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	0018      	movs	r0, r3
 80099a8:	f7ff ffd6 	bl	8009958 <_ZN15Screen1ViewBaseD1Ev>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	21cc      	movs	r1, #204	; 0xcc
 80099b0:	0018      	movs	r0, r3
 80099b2:	f00a f9df 	bl	8013d74 <_ZdlPvj>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	0018      	movs	r0, r3
 80099ba:	46bd      	mov	sp, r7
 80099bc:	b002      	add	sp, #8
 80099be:	bd80      	pop	{r7, pc}

080099c0 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]

}
 80099c8:	46c0      	nop			; (mov r8, r8)
 80099ca:	46bd      	mov	sp, r7
 80099cc:	b002      	add	sp, #8
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	0018      	movs	r0, r3
 80099dc:	f006 fd8c 	bl	80104f8 <_ZN8touchgfx6ScreenC1Ev>
 80099e0:	4a05      	ldr	r2, [pc, #20]	; (80099f8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	601a      	str	r2, [r3, #0]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	0018      	movs	r0, r3
 80099f0:	46bd      	mov	sp, r7
 80099f2:	b002      	add	sp, #8
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	46c0      	nop			; (mov r8, r8)
 80099f8:	080161a8 	.word	0x080161a8

080099fc <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	4a05      	ldr	r2, [pc, #20]	; (8009a1c <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	601a      	str	r2, [r3, #0]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	0018      	movs	r0, r3
 8009a0e:	f7ff fbc1 	bl	8009194 <_ZN8touchgfx8DrawableD1Ev>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	0018      	movs	r0, r3
 8009a16:	46bd      	mov	sp, r7
 8009a18:	b002      	add	sp, #8
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	080167e0 	.word	0x080167e0

08009a20 <_ZN8touchgfx9ContainerD0Ev>:
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	0018      	movs	r0, r3
 8009a2c:	f7ff ffe6 	bl	80099fc <_ZN8touchgfx9ContainerD1Ev>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	212c      	movs	r1, #44	; 0x2c
 8009a34:	0018      	movs	r0, r3
 8009a36:	f00a f99d 	bl	8013d74 <_ZdlPvj>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	0018      	movs	r0, r3
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	b002      	add	sp, #8
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	4a05      	ldr	r2, [pc, #20]	; (8009a64 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	601a      	str	r2, [r3, #0]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	0018      	movs	r0, r3
 8009a56:	f7ff fdc7 	bl	80095e8 <_ZN8touchgfx6WidgetD1Ev>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	0018      	movs	r0, r3
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	b002      	add	sp, #8
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	08016a38 	.word	0x08016a38

08009a68 <_ZN8touchgfx3BoxD0Ev>:
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	0018      	movs	r0, r3
 8009a74:	f7ff ffe6 	bl	8009a44 <_ZN8touchgfx3BoxD1Ev>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	212c      	movs	r1, #44	; 0x2c
 8009a7c:	0018      	movs	r0, r3
 8009a7e:	f00a f979 	bl	8013d74 <_ZdlPvj>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	0018      	movs	r0, r3
 8009a86:	46bd      	mov	sp, r7
 8009a88:	b002      	add	sp, #8
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	4a05      	ldr	r2, [pc, #20]	; (8009aac <_ZN8touchgfx5ImageD1Ev+0x20>)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	601a      	str	r2, [r3, #0]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	0018      	movs	r0, r3
 8009a9e:	f7ff fda3 	bl	80095e8 <_ZN8touchgfx6WidgetD1Ev>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	0018      	movs	r0, r3
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	b002      	add	sp, #8
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	08016b14 	.word	0x08016b14

08009ab0 <_ZN8touchgfx5ImageD0Ev>:
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	0018      	movs	r0, r3
 8009abc:	f7ff ffe6 	bl	8009a8c <_ZN8touchgfx5ImageD1Ev>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	212c      	movs	r1, #44	; 0x2c
 8009ac4:	0018      	movs	r0, r3
 8009ac6:	f00a f955 	bl	8013d74 <_ZdlPvj>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	0018      	movs	r0, r3
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	b002      	add	sp, #8
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	4a05      	ldr	r2, [pc, #20]	; (8009af4 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	601a      	str	r2, [r3, #0]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	0018      	movs	r0, r3
 8009ae6:	f7ff fe21 	bl	800972c <_ZN8touchgfx14AbstractButtonD1Ev>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	0018      	movs	r0, r3
 8009aee:	46bd      	mov	sp, r7
 8009af0:	b002      	add	sp, #8
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	08016aa0 	.word	0x08016aa0

08009af8 <_ZN8touchgfx6ButtonD0Ev>:
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	0018      	movs	r0, r3
 8009b04:	f7ff ffe6 	bl	8009ad4 <_ZN8touchgfx6ButtonD1Ev>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2134      	movs	r1, #52	; 0x34
 8009b0c:	0018      	movs	r0, r3
 8009b0e:	f00a f931 	bl	8013d74 <_ZdlPvj>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	0018      	movs	r0, r3
 8009b16:	46bd      	mov	sp, r7
 8009b18:	b002      	add	sp, #8
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	af00      	add	r7, sp, #0
    return bitmap_database;
 8009b20:	4b01      	ldr	r3, [pc, #4]	; (8009b28 <_ZN14BitmapDatabase11getInstanceEv+0xc>)
}
 8009b22:	0018      	movs	r0, r3
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	0801623c 	.word	0x0801623c

08009b2c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8009b30:	2303      	movs	r3, #3
}
 8009b32:	0018      	movs	r0, r3
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	607a      	str	r2, [r7, #4]
 8009b42:	230a      	movs	r3, #10
 8009b44:	18fb      	adds	r3, r7, r3
 8009b46:	1c0a      	adds	r2, r1, #0
 8009b48:	801a      	strh	r2, [r3, #0]
        return 0;
 8009b4a:	2300      	movs	r3, #0
    }
 8009b4c:	0018      	movs	r0, r3
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	b004      	add	sp, #16
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    virtual const uint16_t* getGSUBTable() const
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
        return 0;
 8009b5c:	2300      	movs	r3, #0
    }
 8009b5e:	0018      	movs	r0, r3
 8009b60:	46bd      	mov	sp, r7
 8009b62:	b002      	add	sp, #8
 8009b64:	bd80      	pop	{r7, pc}

08009b66 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b082      	sub	sp, #8
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
        return 0;
 8009b6e:	2300      	movs	r3, #0
    }
 8009b70:	0018      	movs	r0, r3
 8009b72:	46bd      	mov	sp, r7
 8009b74:	b002      	add	sp, #8
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	1dbb      	adds	r3, r7, #6
 8009b84:	801a      	strh	r2, [r3, #0]
    {
        typedTexts = data;
 8009b86:	4b07      	ldr	r3, [pc, #28]	; (8009ba4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8009b88:	68fa      	ldr	r2, [r7, #12]
 8009b8a:	601a      	str	r2, [r3, #0]
        fonts = f;
 8009b8c:	4b06      	ldr	r3, [pc, #24]	; (8009ba8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8009b8e:	68ba      	ldr	r2, [r7, #8]
 8009b90:	601a      	str	r2, [r3, #0]
        numberOfTypedTexts = n;
 8009b92:	4b06      	ldr	r3, [pc, #24]	; (8009bac <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8009b94:	1dba      	adds	r2, r7, #6
 8009b96:	8812      	ldrh	r2, [r2, #0]
 8009b98:	801a      	strh	r2, [r3, #0]
    }
 8009b9a:	46c0      	nop			; (mov r8, r8)
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	b004      	add	sp, #16
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	46c0      	nop			; (mov r8, r8)
 8009ba4:	20002718 	.word	0x20002718
 8009ba8:	20002720 	.word	0x20002720
 8009bac:	2000271c 	.word	0x2000271c

08009bb0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8009bb0:	b40e      	push	{r1, r2, r3}
 8009bb2:	b5b0      	push	{r4, r5, r7, lr}
 8009bb4:	b085      	sub	sp, #20
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8009bba:	2320      	movs	r3, #32
 8009bbc:	2208      	movs	r2, #8
 8009bbe:	189b      	adds	r3, r3, r2
 8009bc0:	19db      	adds	r3, r3, r7
 8009bc2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8009bc4:	250e      	movs	r5, #14
 8009bc6:	197c      	adds	r4, r7, r5
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	2100      	movs	r1, #0
 8009bd0:	f006 f8a2 	bl	800fd18 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8009bd4:	0003      	movs	r3, r0
 8009bd6:	8023      	strh	r3, [r4, #0]
    va_end(pArg);
    return width;
 8009bd8:	197b      	adds	r3, r7, r5
 8009bda:	881b      	ldrh	r3, [r3, #0]
}
 8009bdc:	0018      	movs	r0, r3
 8009bde:	46bd      	mov	sp, r7
 8009be0:	b005      	add	sp, #20
 8009be2:	bcb0      	pop	{r4, r5, r7}
 8009be4:	bc08      	pop	{r3}
 8009be6:	b003      	add	sp, #12
 8009be8:	4718      	bx	r3

08009bea <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8009bea:	b40c      	push	{r2, r3}
 8009bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	000a      	movs	r2, r1
 8009bf6:	1cfb      	adds	r3, r7, #3
 8009bf8:	701a      	strb	r2, [r3, #0]
    va_list pArg;
    va_start(pArg, text);
 8009bfa:	2324      	movs	r3, #36	; 0x24
 8009bfc:	2208      	movs	r2, #8
 8009bfe:	189b      	adds	r3, r3, r2
 8009c00:	19db      	adds	r3, r3, r7
 8009c02:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8009c04:	260e      	movs	r6, #14
 8009c06:	19bc      	adds	r4, r7, r6
 8009c08:	68bd      	ldr	r5, [r7, #8]
 8009c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c0c:	1cfb      	adds	r3, r7, #3
 8009c0e:	7819      	ldrb	r1, [r3, #0]
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	002b      	movs	r3, r5
 8009c14:	f006 f880 	bl	800fd18 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8009c18:	0003      	movs	r3, r0
 8009c1a:	8023      	strh	r3, [r4, #0]
    va_end(pArg);
    return width;
 8009c1c:	19bb      	adds	r3, r7, r6
 8009c1e:	881b      	ldrh	r3, [r3, #0]
}
 8009c20:	0018      	movs	r0, r3
 8009c22:	46bd      	mov	sp, r7
 8009c24:	b005      	add	sp, #20
 8009c26:	bcf0      	pop	{r4, r5, r6, r7}
 8009c28:	bc08      	pop	{r3}
 8009c2a:	b002      	add	sp, #8
 8009c2c:	4718      	bx	r3
	...

08009c30 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b08a      	sub	sp, #40	; 0x28
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	000a      	movs	r2, r1
 8009c3a:	1cfb      	adds	r3, r7, #3
 8009c3c:	701a      	strb	r2, [r3, #0]
    if (fontGsubTable && nextCharacters.peekChar())
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d016      	beq.n	8009c74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	3322      	adds	r3, #34	; 0x22
 8009c4a:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4e:	8adb      	ldrh	r3, [r3, #22]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d105      	bne.n	8009c60 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x30>
 8009c54:	4b4e      	ldr	r3, [pc, #312]	; (8009d90 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x160>)
 8009c56:	4a4f      	ldr	r2, [pc, #316]	; (8009d94 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x164>)
 8009c58:	484f      	ldr	r0, [pc, #316]	; (8009d98 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x168>)
 8009c5a:	21c5      	movs	r1, #197	; 0xc5
 8009c5c:	f00a f8ba 	bl	8013dd4 <__assert_func>
            return buffer[pos];
 8009c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c62:	8a9b      	ldrh	r3, [r3, #20]
 8009c64:	001a      	movs	r2, r3
 8009c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c68:	0052      	lsls	r2, r2, #1
 8009c6a:	5ad3      	ldrh	r3, [r2, r3]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d001      	beq.n	8009c74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8009c70:	2301      	movs	r3, #1
 8009c72:	e000      	b.n	8009c76 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x46>
 8009c74:	2300      	movs	r3, #0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d100      	bne.n	8009c7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x4c>
 8009c7a:	e07f      	b.n	8009d7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x14c>
    {
        substituteGlyphs();
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	0018      	movs	r0, r3
 8009c80:	f007 fac6 	bl	8011210 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	3322      	adds	r3, #34	; 0x22
 8009c88:	623b      	str	r3, [r7, #32]
 8009c8a:	211e      	movs	r1, #30
 8009c8c:	187b      	adds	r3, r7, r1
 8009c8e:	2201      	movs	r2, #1
 8009c90:	801a      	strh	r2, [r3, #0]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8009c92:	6a3b      	ldr	r3, [r7, #32]
 8009c94:	8adb      	ldrh	r3, [r3, #22]
 8009c96:	187a      	adds	r2, r7, r1
 8009c98:	8812      	ldrh	r2, [r2, #0]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d305      	bcc.n	8009caa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7a>
 8009c9e:	4b3f      	ldr	r3, [pc, #252]	; (8009d9c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16c>)
 8009ca0:	4a3f      	ldr	r2, [pc, #252]	; (8009da0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x170>)
 8009ca2:	483d      	ldr	r0, [pc, #244]	; (8009d98 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x168>)
 8009ca4:	21cb      	movs	r1, #203	; 0xcb
 8009ca6:	f00a f895 	bl	8013dd4 <__assert_func>
            const uint16_t index = pos + offset;
 8009caa:	6a3b      	ldr	r3, [r7, #32]
 8009cac:	8a99      	ldrh	r1, [r3, #20]
 8009cae:	201c      	movs	r0, #28
 8009cb0:	183b      	adds	r3, r7, r0
 8009cb2:	221e      	movs	r2, #30
 8009cb4:	18ba      	adds	r2, r7, r2
 8009cb6:	8812      	ldrh	r2, [r2, #0]
 8009cb8:	188a      	adds	r2, r1, r2
 8009cba:	801a      	strh	r2, [r3, #0]
            return buffer[index < size ? index : index - size];
 8009cbc:	183b      	adds	r3, r7, r0
 8009cbe:	881b      	ldrh	r3, [r3, #0]
 8009cc0:	2b09      	cmp	r3, #9
 8009cc2:	d802      	bhi.n	8009cca <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x9a>
 8009cc4:	183b      	adds	r3, r7, r0
 8009cc6:	881b      	ldrh	r3, [r3, #0]
 8009cc8:	e003      	b.n	8009cd2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xa2>
 8009cca:	231c      	movs	r3, #28
 8009ccc:	18fb      	adds	r3, r7, r3
 8009cce:	881b      	ldrh	r3, [r3, #0]
 8009cd0:	3b0a      	subs	r3, #10
 8009cd2:	6a3a      	ldr	r2, [r7, #32]
 8009cd4:	005b      	lsls	r3, r3, #1
 8009cd6:	5a9b      	ldrh	r3, [r3, r2]
 8009cd8:	4a32      	ldr	r2, [pc, #200]	; (8009da4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x174>)
 8009cda:	4694      	mov	ip, r2
 8009cdc:	4463      	add	r3, ip
 8009cde:	425a      	negs	r2, r3
 8009ce0:	4153      	adcs	r3, r2
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d049      	beq.n	8009d7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x14c>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	3322      	adds	r3, #34	; 0x22
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	3222      	adds	r2, #34	; 0x22
 8009cf0:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8009cf2:	68ba      	ldr	r2, [r7, #8]
 8009cf4:	8ad2      	ldrh	r2, [r2, #22]
 8009cf6:	2a00      	cmp	r2, #0
 8009cf8:	d105      	bne.n	8009d06 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xd6>
 8009cfa:	4b25      	ldr	r3, [pc, #148]	; (8009d90 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x160>)
 8009cfc:	4a25      	ldr	r2, [pc, #148]	; (8009d94 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x164>)
 8009cfe:	4826      	ldr	r0, [pc, #152]	; (8009d98 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x168>)
 8009d00:	21c5      	movs	r1, #197	; 0xc5
 8009d02:	f00a f867 	bl	8013dd4 <__assert_func>
            return buffer[pos];
 8009d06:	68ba      	ldr	r2, [r7, #8]
 8009d08:	8a92      	ldrh	r2, [r2, #20]
 8009d0a:	0011      	movs	r1, r2
 8009d0c:	68ba      	ldr	r2, [r7, #8]
 8009d0e:	0049      	lsls	r1, r1, #1
 8009d10:	5a8a      	ldrh	r2, [r1, r2]
 8009d12:	613b      	str	r3, [r7, #16]
 8009d14:	230e      	movs	r3, #14
 8009d16:	18fb      	adds	r3, r7, r3
 8009d18:	801a      	strh	r2, [r3, #0]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	8adb      	ldrh	r3, [r3, #22]
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d806      	bhi.n	8009d30 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x100>
 8009d22:	4b21      	ldr	r3, [pc, #132]	; (8009da8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x178>)
 8009d24:	4a21      	ldr	r2, [pc, #132]	; (8009dac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x17c>)
 8009d26:	218e      	movs	r1, #142	; 0x8e
 8009d28:	0049      	lsls	r1, r1, #1
 8009d2a:	481b      	ldr	r0, [pc, #108]	; (8009d98 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x168>)
 8009d2c:	f00a f852 	bl	8013dd4 <__assert_func>
            const uint16_t index = pos + 1;
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	8a9a      	ldrh	r2, [r3, #20]
 8009d34:	210c      	movs	r1, #12
 8009d36:	187b      	adds	r3, r7, r1
 8009d38:	3201      	adds	r2, #1
 8009d3a:	801a      	strh	r2, [r3, #0]
            buffer[index < size ? index : 0] = newChar;
 8009d3c:	000a      	movs	r2, r1
 8009d3e:	18bb      	adds	r3, r7, r2
 8009d40:	881b      	ldrh	r3, [r3, #0]
 8009d42:	2b09      	cmp	r3, #9
 8009d44:	d802      	bhi.n	8009d4c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11c>
 8009d46:	18bb      	adds	r3, r7, r2
 8009d48:	881b      	ldrh	r3, [r3, #0]
 8009d4a:	e000      	b.n	8009d4e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	693a      	ldr	r2, [r7, #16]
 8009d50:	005b      	lsls	r3, r3, #1
 8009d52:	210e      	movs	r1, #14
 8009d54:	1879      	adds	r1, r7, r1
 8009d56:	8809      	ldrh	r1, [r1, #0]
 8009d58:	5299      	strh	r1, [r3, r2]
        }
 8009d5a:	46c0      	nop			; (mov r8, r8)
            nextCharacters.replaceAt0(0x093F);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	3322      	adds	r3, #34	; 0x22
 8009d60:	61bb      	str	r3, [r7, #24]
 8009d62:	2116      	movs	r1, #22
 8009d64:	187b      	adds	r3, r7, r1
 8009d66:	4a12      	ldr	r2, [pc, #72]	; (8009db0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x180>)
 8009d68:	801a      	strh	r2, [r3, #0]
            buffer[pos] = newChar;
 8009d6a:	69bb      	ldr	r3, [r7, #24]
 8009d6c:	8a9b      	ldrh	r3, [r3, #20]
 8009d6e:	001a      	movs	r2, r3
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	0052      	lsls	r2, r2, #1
 8009d74:	1879      	adds	r1, r7, r1
 8009d76:	8809      	ldrh	r1, [r1, #0]
 8009d78:	52d1      	strh	r1, [r2, r3]
        }
 8009d7a:	46c0      	nop			; (mov r8, r8)
        }
    }
    return getNextChar();
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	0018      	movs	r0, r3
 8009d80:	f007 f93b 	bl	8010ffa <_ZN8touchgfx12TextProvider11getNextCharEv>
 8009d84:	0003      	movs	r3, r0
}
 8009d86:	0018      	movs	r0, r3
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	b00a      	add	sp, #40	; 0x28
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	46c0      	nop			; (mov r8, r8)
 8009d90:	080151e0 	.word	0x080151e0
 8009d94:	080151ec 	.word	0x080151ec
 8009d98:	08015298 	.word	0x08015298
 8009d9c:	080152e0 	.word	0x080152e0
 8009da0:	080152f0 	.word	0x080152f0
 8009da4:	fffff6c1 	.word	0xfffff6c1
 8009da8:	080153c4 	.word	0x080153c4
 8009dac:	080153d0 	.word	0x080153d0
 8009db0:	0000093f 	.word	0x0000093f

08009db4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	0018      	movs	r0, r3
 8009dc0:	f007 f8e2 	bl	8010f88 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8009dc4:	46c0      	nop			; (mov r8, r8)
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	b002      	add	sp, #8
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8009dcc:	b590      	push	{r4, r7, lr}
 8009dce:	b085      	sub	sp, #20
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	0002      	movs	r2, r0
 8009dd4:	1dbb      	adds	r3, r7, #6
 8009dd6:	801a      	strh	r2, [r3, #0]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8009ddc:	1dbb      	adds	r3, r7, #6
 8009dde:	881b      	ldrh	r3, [r3, #0]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d12a      	bne.n	8009e3a <_ZN8touchgfx5Texts11setLanguageEt+0x6e>
    {
        if (languagesArray[id] != 0)
 8009de4:	1dbb      	adds	r3, r7, #6
 8009de6:	881a      	ldrh	r2, [r3, #0]
 8009de8:	4b1f      	ldr	r3, [pc, #124]	; (8009e68 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8009dea:	0092      	lsls	r2, r2, #2
 8009dec:	58d3      	ldr	r3, [r2, r3]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d017      	beq.n	8009e22 <_ZN8touchgfx5Texts11setLanguageEt+0x56>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8009df2:	1dbb      	adds	r3, r7, #6
 8009df4:	881a      	ldrh	r2, [r3, #0]
 8009df6:	4b1c      	ldr	r3, [pc, #112]	; (8009e68 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8009df8:	0092      	lsls	r2, r2, #2
 8009dfa:	58d3      	ldr	r3, [r2, r3]
 8009dfc:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68ba      	ldr	r2, [r7, #8]
 8009e04:	18d2      	adds	r2, r2, r3
 8009e06:	4b19      	ldr	r3, [pc, #100]	; (8009e6c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8009e08:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	68ba      	ldr	r2, [r7, #8]
 8009e10:	18d2      	adds	r2, r2, r3
 8009e12:	4b17      	ldr	r3, [pc, #92]	; (8009e70 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8009e14:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	68ba      	ldr	r2, [r7, #8]
 8009e1c:	18d3      	adds	r3, r2, r3
 8009e1e:	60fb      	str	r3, [r7, #12]
 8009e20:	e00b      	b.n	8009e3a <_ZN8touchgfx5Texts11setLanguageEt+0x6e>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8009e22:	4b12      	ldr	r3, [pc, #72]	; (8009e6c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8009e24:	4a13      	ldr	r2, [pc, #76]	; (8009e74 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8009e26:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8009e28:	4a13      	ldr	r2, [pc, #76]	; (8009e78 <_ZN8touchgfx5Texts11setLanguageEt+0xac>)
 8009e2a:	4b11      	ldr	r3, [pc, #68]	; (8009e70 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8009e2c:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8009e2e:	1dbb      	adds	r3, r7, #6
 8009e30:	881a      	ldrh	r2, [r3, #0]
 8009e32:	4b12      	ldr	r3, [pc, #72]	; (8009e7c <_ZN8touchgfx5Texts11setLanguageEt+0xb0>)
 8009e34:	0092      	lsls	r2, r2, #2
 8009e36:	58d3      	ldr	r3, [r2, r3]
 8009e38:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d00f      	beq.n	8009e60 <_ZN8touchgfx5Texts11setLanguageEt+0x94>
    {
        currentLanguage = id;
 8009e40:	4b0f      	ldr	r3, [pc, #60]	; (8009e80 <_ZN8touchgfx5Texts11setLanguageEt+0xb4>)
 8009e42:	1dba      	adds	r2, r7, #6
 8009e44:	8812      	ldrh	r2, [r2, #0]
 8009e46:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8009e48:	f000 f822 	bl	8009e90 <_ZN17TypedTextDatabase8getFontsEv>
 8009e4c:	0004      	movs	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8009e4e:	f000 f819 	bl	8009e84 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8009e52:	0003      	movs	r3, r0
 8009e54:	001a      	movs	r2, r3
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	0021      	movs	r1, r4
 8009e5a:	0018      	movs	r0, r3
 8009e5c:	f7ff fe8c 	bl	8009b78 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8009e60:	46c0      	nop			; (mov r8, r8)
 8009e62:	46bd      	mov	sp, r7
 8009e64:	b005      	add	sp, #20
 8009e66:	bd90      	pop	{r4, r7, pc}
 8009e68:	20000490 	.word	0x20000490
 8009e6c:	20000498 	.word	0x20000498
 8009e70:	2000049c 	.word	0x2000049c
 8009e74:	08016ff4 	.word	0x08016ff4
 8009e78:	08016ff0 	.word	0x08016ff0
 8009e7c:	08016ffc 	.word	0x08016ffc
 8009e80:	20000494 	.word	0x20000494

08009e84 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	af00      	add	r7, sp, #0
    return 0;
 8009e88:	2300      	movs	r3, #0
}
 8009e8a:	0018      	movs	r0, r3
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8009e94:	4b01      	ldr	r3, [pc, #4]	; (8009e9c <_ZN17TypedTextDatabase8getFontsEv+0xc>)
}
 8009e96:	0018      	movs	r0, r3
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	200004a0 	.word	0x200004a0

08009ea0 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d112      	bne.n	8009ed6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	4a0b      	ldr	r2, [pc, #44]	; (8009ee0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d10e      	bne.n	8009ed6 <_Z41__static_initialization_and_destruction_0ii+0x36>
    &(getFont_verdana_20_4bpp()),
 8009eb8:	f7fe fb60 	bl	800857c <_Z23getFont_verdana_20_4bppv>
 8009ebc:	0002      	movs	r2, r0
};
 8009ebe:	4b09      	ldr	r3, [pc, #36]	; (8009ee4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8009ec0:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 8009ec2:	f7fe fbab 	bl	800861c <_Z23getFont_verdana_40_4bppv>
 8009ec6:	0002      	movs	r2, r0
};
 8009ec8:	4b06      	ldr	r3, [pc, #24]	; (8009ee4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8009eca:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_10_4bpp())
 8009ecc:	f7fe fb06 	bl	80084dc <_Z23getFont_verdana_10_4bppv>
 8009ed0:	0002      	movs	r2, r0
};
 8009ed2:	4b04      	ldr	r3, [pc, #16]	; (8009ee4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8009ed4:	609a      	str	r2, [r3, #8]
} // namespace TypedTextDatabase
 8009ed6:	46c0      	nop			; (mov r8, r8)
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	b002      	add	sp, #8
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	46c0      	nop			; (mov r8, r8)
 8009ee0:	0000ffff 	.word	0x0000ffff
 8009ee4:	200004a0 	.word	0x200004a0

08009ee8 <_GLOBAL__sub_I_touchgfx_fonts>:
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	4b03      	ldr	r3, [pc, #12]	; (8009efc <_GLOBAL__sub_I_touchgfx_fonts+0x14>)
 8009eee:	0019      	movs	r1, r3
 8009ef0:	2001      	movs	r0, #1
 8009ef2:	f7ff ffd5 	bl	8009ea0 <_Z41__static_initialization_and_destruction_0ii>
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	46c0      	nop			; (mov r8, r8)
 8009efc:	0000ffff 	.word	0x0000ffff

08009f00 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	4a05      	ldr	r2, [pc, #20]	; (8009f20 <_ZN19FrontendApplicationD1Ev+0x20>)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	601a      	str	r2, [r3, #0]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	0018      	movs	r0, r3
 8009f12:	f7fe fd9d 	bl	8008a50 <_ZN23FrontendApplicationBaseD1Ev>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	0018      	movs	r0, r3
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	b002      	add	sp, #8
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	080162e4 	.word	0x080162e4

08009f24 <_ZN19FrontendApplicationD0Ev>:
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	0018      	movs	r0, r3
 8009f30:	f7ff ffe6 	bl	8009f00 <_ZN19FrontendApplicationD1Ev>
 8009f34:	23ae      	movs	r3, #174	; 0xae
 8009f36:	005a      	lsls	r2, r3, #1
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	0011      	movs	r1, r2
 8009f3c:	0018      	movs	r0, r3
 8009f3e:	f009 ff19 	bl	8013d74 <_ZdlPvj>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	0018      	movs	r0, r3
 8009f46:	46bd      	mov	sp, r7
 8009f48:	b002      	add	sp, #8
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	23ac      	movs	r3, #172	; 0xac
 8009f58:	005b      	lsls	r3, r3, #1
 8009f5a:	58d3      	ldr	r3, [r2, r3]
 8009f5c:	0018      	movs	r0, r3
 8009f5e:	f000 f82b 	bl	8009fb8 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	0018      	movs	r0, r3
 8009f66:	f004 ff7b 	bl	800ee60 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8009f6a:	46c0      	nop			; (mov r8, r8)
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	b002      	add	sp, #8
 8009f70:	bd80      	pop	{r7, pc}
	...

08009f74 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	68b9      	ldr	r1, [r7, #8]
 8009f86:	0018      	movs	r0, r3
 8009f88:	f7fe fdb2 	bl	8008af0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8009f8c:	4a03      	ldr	r2, [pc, #12]	; (8009f9c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	601a      	str	r2, [r3, #0]
{

}
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	0018      	movs	r0, r3
 8009f96:	46bd      	mov	sp, r7
 8009f98:	b004      	add	sp, #16
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	080162e4 	.word	0x080162e4

08009fa0 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b082      	sub	sp, #8
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	601a      	str	r2, [r3, #0]
{

}
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	0018      	movs	r0, r3
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	b002      	add	sp, #8
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <_ZN5Model4tickEv>:

void Model::tick()
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b082      	sub	sp, #8
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]

}
 8009fc0:	46c0      	nop			; (mov r8, r8)
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	b002      	add	sp, #8
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
    {
    }
 8009fd0:	46c0      	nop			; (mov r8, r8)
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	b002      	add	sp, #8
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
    {
    }
 8009fe0:	46c0      	nop			; (mov r8, r8)
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	b002      	add	sp, #8
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
    {
 8009ff0:	4a03      	ldr	r2, [pc, #12]	; (800a000 <_ZN8touchgfx9PresenterD1Ev+0x18>)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	601a      	str	r2, [r3, #0]
    }
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	0018      	movs	r0, r3
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	b002      	add	sp, #8
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	08016370 	.word	0x08016370

0800a004 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
    }
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	0018      	movs	r0, r3
 800a010:	f7ff ffea 	bl	8009fe8 <_ZN8touchgfx9PresenterD1Ev>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2104      	movs	r1, #4
 800a018:	0018      	movs	r0, r3
 800a01a:	f009 feab 	bl	8013d74 <_ZdlPvj>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	0018      	movs	r0, r3
 800a022:	46bd      	mov	sp, r7
 800a024:	b002      	add	sp, #8
 800a026:	bd80      	pop	{r7, pc}

0800a028 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800a028:	b580      	push	{r7, lr}
 800a02a:	b082      	sub	sp, #8
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
    {
 800a030:	4a03      	ldr	r2, [pc, #12]	; (800a040 <_ZN8touchgfx9PresenterC1Ev+0x18>)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	601a      	str	r2, [r3, #0]
    }
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	0018      	movs	r0, r3
 800a03a:	46bd      	mov	sp, r7
 800a03c:	b002      	add	sp, #8
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	08016370 	.word	0x08016370

0800a044 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	4a05      	ldr	r2, [pc, #20]	; (800a064 <_ZN13ModelListenerC1Ev+0x20>)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	601a      	str	r2, [r3, #0]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	605a      	str	r2, [r3, #4]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	0018      	movs	r0, r3
 800a05c:	46bd      	mov	sp, r7
 800a05e:	b002      	add	sp, #8
 800a060:	bd80      	pop	{r7, pc}
 800a062:	46c0      	nop			; (mov r8, r8)
 800a064:	08016360 	.word	0x08016360

0800a068 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	4a03      	ldr	r2, [pc, #12]	; (800a080 <_ZN13ModelListenerD1Ev+0x18>)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	601a      	str	r2, [r3, #0]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	0018      	movs	r0, r3
 800a07a:	46bd      	mov	sp, r7
 800a07c:	b002      	add	sp, #8
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	08016360 	.word	0x08016360

0800a084 <_ZN13ModelListenerD0Ev>:
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	0018      	movs	r0, r3
 800a090:	f7ff ffea 	bl	800a068 <_ZN13ModelListenerD1Ev>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2108      	movs	r1, #8
 800a098:	0018      	movs	r0, r3
 800a09a:	f009 fe6b 	bl	8013d74 <_ZdlPvj>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	0018      	movs	r0, r3
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	b002      	add	sp, #8
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	4a09      	ldr	r2, [pc, #36]	; (800a0d8 <_ZN16Screen1PresenterD1Ev+0x30>)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	601a      	str	r2, [r3, #0]
 800a0b6:	4a09      	ldr	r2, [pc, #36]	; (800a0dc <_ZN16Screen1PresenterD1Ev+0x34>)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	605a      	str	r2, [r3, #4]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	3304      	adds	r3, #4
 800a0c0:	0018      	movs	r0, r3
 800a0c2:	f7ff ffd1 	bl	800a068 <_ZN13ModelListenerD1Ev>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	0018      	movs	r0, r3
 800a0ca:	f7ff ff8d 	bl	8009fe8 <_ZN8touchgfx9PresenterD1Ev>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	0018      	movs	r0, r3
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	b002      	add	sp, #8
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	08016338 	.word	0x08016338
 800a0dc:	08016350 	.word	0x08016350

0800a0e0 <_ZThn4_N16Screen1PresenterD1Ev>:
 800a0e0:	b408      	push	{r3}
 800a0e2:	4b02      	ldr	r3, [pc, #8]	; (800a0ec <_ZThn4_N16Screen1PresenterD1Ev+0xc>)
 800a0e4:	469c      	mov	ip, r3
 800a0e6:	3804      	subs	r0, #4
 800a0e8:	bc08      	pop	{r3}
 800a0ea:	4760      	bx	ip
 800a0ec:	0800a0a9 	.word	0x0800a0a9

0800a0f0 <_ZN16Screen1PresenterD0Ev>:
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	0018      	movs	r0, r3
 800a0fc:	f7ff ffd4 	bl	800a0a8 <_ZN16Screen1PresenterD1Ev>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2110      	movs	r1, #16
 800a104:	0018      	movs	r0, r3
 800a106:	f009 fe35 	bl	8013d74 <_ZdlPvj>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	0018      	movs	r0, r3
 800a10e:	46bd      	mov	sp, r7
 800a110:	b002      	add	sp, #8
 800a112:	bd80      	pop	{r7, pc}

0800a114 <_ZThn4_N16Screen1PresenterD0Ev>:
 800a114:	b408      	push	{r3}
 800a116:	4b02      	ldr	r3, [pc, #8]	; (800a120 <_ZThn4_N16Screen1PresenterD0Ev+0xc>)
 800a118:	469c      	mov	ip, r3
 800a11a:	3804      	subs	r0, #4
 800a11c:	bc08      	pop	{r3}
 800a11e:	4760      	bx	ip
 800a120:	0800a0f1 	.word	0x0800a0f1

0800a124 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
    : view(v)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	0018      	movs	r0, r3
 800a132:	f7ff ff79 	bl	800a028 <_ZN8touchgfx9PresenterC1Ev>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	3304      	adds	r3, #4
 800a13a:	0018      	movs	r0, r3
 800a13c:	f7ff ff82 	bl	800a044 <_ZN13ModelListenerC1Ev>
 800a140:	4a06      	ldr	r2, [pc, #24]	; (800a15c <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	601a      	str	r2, [r3, #0]
 800a146:	4a06      	ldr	r2, [pc, #24]	; (800a160 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	605a      	str	r2, [r3, #4]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	683a      	ldr	r2, [r7, #0]
 800a150:	60da      	str	r2, [r3, #12]
{

}
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	0018      	movs	r0, r3
 800a156:	46bd      	mov	sp, r7
 800a158:	b002      	add	sp, #8
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	08016338 	.word	0x08016338
 800a160:	08016350 	.word	0x08016350

0800a164 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b082      	sub	sp, #8
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]

}
 800a16c:	46c0      	nop			; (mov r8, r8)
 800a16e:	46bd      	mov	sp, r7
 800a170:	b002      	add	sp, #8
 800a172:	bd80      	pop	{r7, pc}

0800a174 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b082      	sub	sp, #8
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]

}
 800a17c:	46c0      	nop			; (mov r8, r8)
 800a17e:	46bd      	mov	sp, r7
 800a180:	b002      	add	sp, #8
 800a182:	bd80      	pop	{r7, pc}

0800a184 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	4a05      	ldr	r2, [pc, #20]	; (800a1a4 <_ZN11Screen1ViewD1Ev+0x20>)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	601a      	str	r2, [r3, #0]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	0018      	movs	r0, r3
 800a196:	f7ff fbdf 	bl	8009958 <_ZN15Screen1ViewBaseD1Ev>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	0018      	movs	r0, r3
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	b002      	add	sp, #8
 800a1a2:	bd80      	pop	{r7, pc}
 800a1a4:	08016388 	.word	0x08016388

0800a1a8 <_ZN11Screen1ViewD0Ev>:
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	0018      	movs	r0, r3
 800a1b4:	f7ff ffe6 	bl	800a184 <_ZN11Screen1ViewD1Ev>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	21cc      	movs	r1, #204	; 0xcc
 800a1bc:	0018      	movs	r0, r3
 800a1be:	f009 fdd9 	bl	8013d74 <_ZdlPvj>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	0018      	movs	r0, r3
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	b002      	add	sp, #8
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	0018      	movs	r0, r3
 800a1d8:	f7ff fb16 	bl	8009808 <_ZN15Screen1ViewBaseC1Ev>
 800a1dc:	4a03      	ldr	r2, [pc, #12]	; (800a1ec <_ZN11Screen1ViewC1Ev+0x20>)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	601a      	str	r2, [r3, #0]
{

}
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	0018      	movs	r0, r3
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	b002      	add	sp, #8
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	08016388 	.word	0x08016388

0800a1f0 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	0018      	movs	r0, r3
 800a1fc:	f7ff fbe0 	bl	80099c0 <_ZN15Screen1ViewBase11setupScreenEv>
}
 800a200:	46c0      	nop			; (mov r8, r8)
 800a202:	46bd      	mov	sp, r7
 800a204:	b002      	add	sp, #8
 800a206:	bd80      	pop	{r7, pc}

0800a208 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	0018      	movs	r0, r3
 800a214:	f7ff f9aa 	bl	800956c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800a218:	46c0      	nop			; (mov r8, r8)
 800a21a:	46bd      	mov	sp, r7
 800a21c:	b002      	add	sp, #8
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
    {
 800a228:	4a03      	ldr	r2, [pc, #12]	; (800a238 <_ZN8touchgfx15TouchControllerD1Ev+0x18>)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	601a      	str	r2, [r3, #0]
    }
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	0018      	movs	r0, r3
 800a232:	46bd      	mov	sp, r7
 800a234:	b002      	add	sp, #8
 800a236:	bd80      	pop	{r7, pc}
 800a238:	080163d4 	.word	0x080163d4

0800a23c <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
    }
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	0018      	movs	r0, r3
 800a248:	f7ff ffea 	bl	800a220 <_ZN8touchgfx15TouchControllerD1Ev>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2104      	movs	r1, #4
 800a250:	0018      	movs	r0, r3
 800a252:	f009 fd8f 	bl	8013d74 <_ZdlPvj>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	0018      	movs	r0, r3
 800a25a:	46bd      	mov	sp, r7
 800a25c:	b002      	add	sp, #8
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b082      	sub	sp, #8
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 800a268:	46c0      	nop			; (mov r8, r8)
 800a26a:	46bd      	mov	sp, r7
 800a26c:	b002      	add	sp, #8
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <_ZN20STM32TouchController11sampleTouchERlS0_>:
extern uint8_t updated;
extern uint16_t x0;
extern uint16_t y0;
bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	60b9      	str	r1, [r7, #8]
 800a27a:	607a      	str	r2, [r7, #4]

	if(updated){
 800a27c:	4b0b      	ldr	r3, [pc, #44]	; (800a2ac <_ZN20STM32TouchController11sampleTouchERlS0_+0x3c>)
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d00e      	beq.n	800a2a2 <_ZN20STM32TouchController11sampleTouchERlS0_+0x32>
		x = x0;
 800a284:	4b0a      	ldr	r3, [pc, #40]	; (800a2b0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>)
 800a286:	881b      	ldrh	r3, [r3, #0]
 800a288:	001a      	movs	r2, r3
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	601a      	str	r2, [r3, #0]
		y = y0;
 800a28e:	4b09      	ldr	r3, [pc, #36]	; (800a2b4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x44>)
 800a290:	881b      	ldrh	r3, [r3, #0]
 800a292:	001a      	movs	r2, r3
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	601a      	str	r2, [r3, #0]
		updated = 0;
 800a298:	4b04      	ldr	r3, [pc, #16]	; (800a2ac <_ZN20STM32TouchController11sampleTouchERlS0_+0x3c>)
 800a29a:	2200      	movs	r2, #0
 800a29c:	701a      	strb	r2, [r3, #0]
		return true;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e000      	b.n	800a2a4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x34>
	}
    return false;
 800a2a2:	2300      	movs	r3, #0
}
 800a2a4:	0018      	movs	r0, r3
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	b004      	add	sp, #16
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	200000b0 	.word	0x200000b0
 800a2b0:	200000b2 	.word	0x200000b2
 800a2b4:	200000b4 	.word	0x200000b4

0800a2b8 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	4a05      	ldr	r2, [pc, #20]	; (800a2d8 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	601a      	str	r2, [r3, #0]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	0018      	movs	r0, r3
 800a2ca:	f7ff ffa9 	bl	800a220 <_ZN8touchgfx15TouchControllerD1Ev>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	0018      	movs	r0, r3
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	b002      	add	sp, #8
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	080163bc 	.word	0x080163bc

0800a2dc <_ZN20STM32TouchControllerD0Ev>:
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	0018      	movs	r0, r3
 800a2e8:	f7ff ffe6 	bl	800a2b8 <_ZN20STM32TouchControllerD1Ev>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2104      	movs	r1, #4
 800a2f0:	0018      	movs	r0, r3
 800a2f2:	f009 fd3f 	bl	8013d74 <_ZdlPvj>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	0018      	movs	r0, r3
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	b002      	add	sp, #8
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <_ZN8touchgfx15FlashDataReaderD1Ev>:
 */
class FlashDataReader
{
public:
    /** Finalizes an instance of the FlashDataReader class. */
    virtual ~FlashDataReader()
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
    {
 800a308:	4a03      	ldr	r2, [pc, #12]	; (800a318 <_ZN8touchgfx15FlashDataReaderD1Ev+0x18>)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	601a      	str	r2, [r3, #0]
    }
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	0018      	movs	r0, r3
 800a312:	46bd      	mov	sp, r7
 800a314:	b002      	add	sp, #8
 800a316:	bd80      	pop	{r7, pc}
 800a318:	0801640c 	.word	0x0801640c

0800a31c <_ZN8touchgfx15FlashDataReaderD0Ev>:
    virtual ~FlashDataReader()
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
    }
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	0018      	movs	r0, r3
 800a328:	f7ff ffea 	bl	800a300 <_ZN8touchgfx15FlashDataReaderD1Ev>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2104      	movs	r1, #4
 800a330:	0018      	movs	r0, r3
 800a332:	f009 fd1f 	bl	8013d74 <_ZdlPvj>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	0018      	movs	r0, r3
 800a33a:	46bd      	mov	sp, r7
 800a33c:	b002      	add	sp, #8
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <_ZN27TouchGFXGeneratedDataReaderD1Ev>:
    TouchGFXGeneratedDataReader()
    {
    }

    /** Finalizes an instance of the TouchGFXGeneratedDataReader class. */
    virtual ~TouchGFXGeneratedDataReader()
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
    {
 800a348:	4a05      	ldr	r2, [pc, #20]	; (800a360 <_ZN27TouchGFXGeneratedDataReaderD1Ev+0x20>)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	601a      	str	r2, [r3, #0]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	0018      	movs	r0, r3
 800a352:	f7ff ffd5 	bl	800a300 <_ZN8touchgfx15FlashDataReaderD1Ev>
    }
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	0018      	movs	r0, r3
 800a35a:	46bd      	mov	sp, r7
 800a35c:	b002      	add	sp, #8
 800a35e:	bd80      	pop	{r7, pc}
 800a360:	08016654 	.word	0x08016654

0800a364 <_ZN27TouchGFXGeneratedDataReaderD0Ev>:
    virtual ~TouchGFXGeneratedDataReader()
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
    }
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	0018      	movs	r0, r3
 800a370:	f7ff ffe6 	bl	800a340 <_ZN27TouchGFXGeneratedDataReaderD1Ev>
 800a374:	23f1      	movs	r3, #241	; 0xf1
 800a376:	00da      	lsls	r2, r3, #3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	0011      	movs	r1, r2
 800a37c:	0018      	movs	r0, r3
 800a37e:	f009 fcf9 	bl	8013d74 <_ZdlPvj>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	0018      	movs	r0, r3
 800a386:	46bd      	mov	sp, r7
 800a388:	b002      	add	sp, #8
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <_ZN18TouchGFXDataReaderD1Ev>:
 */
class TouchGFXDataReader : public TouchGFXGeneratedDataReader
{
public:
    /** Finalizes an instance of the TouchGFXDataReader class. */
    virtual ~TouchGFXDataReader()
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
    {
 800a394:	4a05      	ldr	r2, [pc, #20]	; (800a3ac <_ZN18TouchGFXDataReaderD1Ev+0x20>)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	601a      	str	r2, [r3, #0]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	0018      	movs	r0, r3
 800a39e:	f7ff ffcf 	bl	800a340 <_ZN27TouchGFXGeneratedDataReaderD1Ev>
    }
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	0018      	movs	r0, r3
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	b002      	add	sp, #8
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	080163ec 	.word	0x080163ec

0800a3b0 <_ZN18TouchGFXDataReaderD0Ev>:
    virtual ~TouchGFXDataReader()
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
    }
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	0018      	movs	r0, r3
 800a3bc:	f7ff ffe6 	bl	800a38c <_ZN18TouchGFXDataReaderD1Ev>
 800a3c0:	23f1      	movs	r3, #241	; 0xf1
 800a3c2:	00da      	lsls	r2, r3, #3
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	0011      	movs	r1, r2
 800a3c8:	0018      	movs	r0, r3
 800a3ca:	f009 fcd3 	bl	8013d74 <_ZdlPvj>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	0018      	movs	r0, r3
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	b002      	add	sp, #8
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <_ZN18TouchGFXDataReader20addressIsAddressableEPKv>:
#include <TouchGFXDataReader.hpp>

/* USER CODE BEGIN TouchGFXDataReader.cpp */

bool TouchGFXDataReader::addressIsAddressable(const void* address)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of addressIsAddressable().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedDataReader::addressIsAddressable(address);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	683a      	ldr	r2, [r7, #0]
 800a3e6:	0011      	movs	r1, r2
 800a3e8:	0018      	movs	r0, r3
 800a3ea:	f001 fa6f 	bl	800b8cc <_ZN27TouchGFXGeneratedDataReader20addressIsAddressableEPKv>
 800a3ee:	0003      	movs	r3, r0
}
 800a3f0:	0018      	movs	r0, r3
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	b002      	add	sp, #8
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <_ZN18TouchGFXDataReader8copyDataEPKvPvm>:

void TouchGFXDataReader::copyData(const void* src, void* dst, uint32_t bytes)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	60b9      	str	r1, [r7, #8]
 800a402:	607a      	str	r2, [r7, #4]
 800a404:	603b      	str	r3, [r7, #0]
    // Calling parent implementation of copyData().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedDataReader::copyData(src, dst, bytes);
 800a406:	68f8      	ldr	r0, [r7, #12]
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	68b9      	ldr	r1, [r7, #8]
 800a40e:	f001 fa75 	bl	800b8fc <_ZN27TouchGFXGeneratedDataReader8copyDataEPKvPvm>
}
 800a412:	46c0      	nop			; (mov r8, r8)
 800a414:	46bd      	mov	sp, r7
 800a416:	b004      	add	sp, #16
 800a418:	bd80      	pop	{r7, pc}

0800a41a <_ZN18TouchGFXDataReader18startFlashLineReadEPKvm>:

void TouchGFXDataReader::startFlashLineRead(const void* src, uint32_t bytes)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b084      	sub	sp, #16
 800a41e:	af00      	add	r7, sp, #0
 800a420:	60f8      	str	r0, [r7, #12]
 800a422:	60b9      	str	r1, [r7, #8]
 800a424:	607a      	str	r2, [r7, #4]
    // Calling parent implementation of startFlashLineRead().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedDataReader::startFlashLineRead(src, bytes);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	68b9      	ldr	r1, [r7, #8]
 800a42c:	0018      	movs	r0, r3
 800a42e:	f001 fa83 	bl	800b938 <_ZN27TouchGFXGeneratedDataReader18startFlashLineReadEPKvm>
}
 800a432:	46c0      	nop			; (mov r8, r8)
 800a434:	46bd      	mov	sp, r7
 800a436:	b004      	add	sp, #16
 800a438:	bd80      	pop	{r7, pc}

0800a43a <_ZN18TouchGFXDataReader21waitFlashReadCompleteEv>:

const uint8_t* TouchGFXDataReader::waitFlashReadComplete()
{
 800a43a:	b580      	push	{r7, lr}
 800a43c:	b082      	sub	sp, #8
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of waitFlashReadComplete().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedDataReader::waitFlashReadComplete();
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	0018      	movs	r0, r3
 800a446:	f001 fa95 	bl	800b974 <_ZN27TouchGFXGeneratedDataReader21waitFlashReadCompleteEv>
 800a44a:	0003      	movs	r3, r0
}
 800a44c:	0018      	movs	r0, r3
 800a44e:	46bd      	mov	sp, r7
 800a450:	b002      	add	sp, #8
 800a452:	bd80      	pop	{r7, pc}

0800a454 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 800a454:	b580      	push	{r7, lr}
 800a456:	af00      	add	r7, sp, #0

}
 800a458:	46c0      	nop			; (mov r8, r8)
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}

0800a45e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800a45e:	b580      	push	{r7, lr}
 800a460:	b082      	sub	sp, #8
 800a462:	af00      	add	r7, sp, #0
 800a464:	0002      	movs	r2, r0
 800a466:	1dfb      	adds	r3, r7, #7
 800a468:	701a      	strb	r2, [r3, #0]
    switch (id)
 800a46a:	1dfb      	adds	r3, r7, #7
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	2b03      	cmp	r3, #3
 800a470:	d004      	beq.n	800a47c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1e>
 800a472:	dc06      	bgt.n	800a482 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
 800a474:	2b02      	cmp	r3, #2
 800a476:	d003      	beq.n	800a480 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x22>
 800a478:	dc03      	bgt.n	800a482 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 800a47a:	e002      	b.n	800a482 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
 800a47c:	46c0      	nop			; (mov r8, r8)
 800a47e:	e000      	b.n	800a482 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
        break;
 800a480:	46c0      	nop			; (mov r8, r8)
    }
}
 800a482:	46c0      	nop			; (mov r8, r8)
 800a484:	46bd      	mov	sp, r7
 800a486:	b002      	add	sp, #8
 800a488:	bd80      	pop	{r7, pc}

0800a48a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b082      	sub	sp, #8
 800a48e:	af00      	add	r7, sp, #0
 800a490:	0002      	movs	r2, r0
 800a492:	1dfb      	adds	r3, r7, #7
 800a494:	701a      	strb	r2, [r3, #0]
    switch (id)
 800a496:	1dfb      	adds	r3, r7, #7
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	2b03      	cmp	r3, #3
 800a49c:	d004      	beq.n	800a4a8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1e>
 800a49e:	dc06      	bgt.n	800a4ae <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
 800a4a0:	2b02      	cmp	r3, #2
 800a4a2:	d003      	beq.n	800a4ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x22>
 800a4a4:	dc03      	bgt.n	800a4ae <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 800a4a6:	e002      	b.n	800a4ae <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
 800a4a8:	46c0      	nop			; (mov r8, r8)
 800a4aa:	e000      	b.n	800a4ae <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        break;
 800a4ac:	46c0      	nop			; (mov r8, r8)
    }
}
 800a4ae:	46c0      	nop			; (mov r8, r8)
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	b002      	add	sp, #8
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b082      	sub	sp, #8
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	0002      	movs	r2, r0
 800a4be:	1dfb      	adds	r3, r7, #7
 800a4c0:	701a      	strb	r2, [r3, #0]
    switch (id)
 800a4c2:	1dfb      	adds	r3, r7, #7
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	2b03      	cmp	r3, #3
 800a4c8:	d004      	beq.n	800a4d4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x1e>
 800a4ca:	dc06      	bgt.n	800a4da <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>
 800a4cc:	2b02      	cmp	r3, #2
 800a4ce:	d003      	beq.n	800a4d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x22>
 800a4d0:	dc03      	bgt.n	800a4da <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 800a4d2:	e002      	b.n	800a4da <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
 800a4d4:	46c0      	nop			; (mov r8, r8)
 800a4d6:	e000      	b.n	800a4da <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>
        break;
 800a4d8:	46c0      	nop			; (mov r8, r8)
    }
}
 800a4da:	46c0      	nop			; (mov r8, r8)
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	b002      	add	sp, #8
 800a4e0:	bd80      	pop	{r7, pc}
	...

0800a4e4 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
    {
 800a4ec:	4a03      	ldr	r2, [pc, #12]	; (800a4fc <_ZN8touchgfx3HALD1Ev+0x18>)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	601a      	str	r2, [r3, #0]
    }
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	0018      	movs	r0, r3
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	b002      	add	sp, #8
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	0801687c 	.word	0x0801687c

0800a500 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
    }
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	0018      	movs	r0, r3
 800a50c:	f7ff ffea 	bl	800a4e4 <_ZN8touchgfx3HALD1Ev>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	217c      	movs	r1, #124	; 0x7c
 800a514:	0018      	movs	r0, r3
 800a516:	f009 fc2d 	bl	8013d74 <_ZdlPvj>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	0018      	movs	r0, r3
 800a51e:	46bd      	mov	sp, r7
 800a520:	b002      	add	sp, #8
 800a522:	bd80      	pop	{r7, pc}

0800a524 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	000a      	movs	r2, r1
 800a52e:	1cfb      	adds	r3, r7, #3
 800a530:	701a      	strb	r2, [r3, #0]
        requestedOrientation = orientation;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	1cfa      	adds	r2, r7, #3
 800a536:	2178      	movs	r1, #120	; 0x78
 800a538:	7812      	ldrb	r2, [r2, #0]
 800a53a:	545a      	strb	r2, [r3, r1]
        displayOrientationChangeRequested = true;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2279      	movs	r2, #121	; 0x79
 800a540:	2101      	movs	r1, #1
 800a542:	5499      	strb	r1, [r3, r2]
    }
 800a544:	46c0      	nop			; (mov r8, r8)
 800a546:	46bd      	mov	sp, r7
 800a548:	b002      	add	sp, #8
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	0008      	movs	r0, r1
 800a556:	0011      	movs	r1, r2
 800a558:	1cbb      	adds	r3, r7, #2
 800a55a:	1c02      	adds	r2, r0, #0
 800a55c:	801a      	strh	r2, [r3, #0]
 800a55e:	003b      	movs	r3, r7
 800a560:	1c0a      	adds	r2, r1, #0
 800a562:	801a      	strh	r2, [r3, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800a564:	4b0e      	ldr	r3, [pc, #56]	; (800a5a0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 800a566:	881b      	ldrh	r3, [r3, #0]
 800a568:	1cba      	adds	r2, r7, #2
 800a56a:	8812      	ldrh	r2, [r2, #0]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d305      	bcc.n	800a57c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 800a570:	4b0c      	ldr	r3, [pc, #48]	; (800a5a4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 800a572:	881b      	ldrh	r3, [r3, #0]
 800a574:	003a      	movs	r2, r7
 800a576:	8812      	ldrh	r2, [r2, #0]
 800a578:	429a      	cmp	r2, r3
 800a57a:	d205      	bcs.n	800a588 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>
 800a57c:	4b0a      	ldr	r3, [pc, #40]	; (800a5a8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 800a57e:	4a0b      	ldr	r2, [pc, #44]	; (800a5ac <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x60>)
 800a580:	480b      	ldr	r0, [pc, #44]	; (800a5b0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x64>)
 800a582:	219e      	movs	r1, #158	; 0x9e
 800a584:	f009 fc26 	bl	8013dd4 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800a588:	4b0a      	ldr	r3, [pc, #40]	; (800a5b4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x68>)
 800a58a:	1cba      	adds	r2, r7, #2
 800a58c:	8812      	ldrh	r2, [r2, #0]
 800a58e:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 800a590:	4b09      	ldr	r3, [pc, #36]	; (800a5b8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x6c>)
 800a592:	003a      	movs	r2, r7
 800a594:	8812      	ldrh	r2, [r2, #0]
 800a596:	801a      	strh	r2, [r3, #0]
    }
 800a598:	46c0      	nop			; (mov r8, r8)
 800a59a:	46bd      	mov	sp, r7
 800a59c:	b002      	add	sp, #8
 800a59e:	bd80      	pop	{r7, pc}
 800a5a0:	200026bc 	.word	0x200026bc
 800a5a4:	200026be 	.word	0x200026be
 800a5a8:	08015484 	.word	0x08015484
 800a5ac:	080154e8 	.word	0x080154e8
 800a5b0:	0801552c 	.word	0x0801552c
 800a5b4:	200026c2 	.word	0x200026c2
 800a5b8:	200026c4 	.word	0x200026c4

0800a5bc <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	227a      	movs	r2, #122	; 0x7a
 800a5c8:	5c9b      	ldrb	r3, [r3, r2]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d009      	beq.n	800a5e2 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	685a      	ldr	r2, [r3, #4]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	0010      	movs	r0, r2
 800a5dc:	4798      	blx	r3
 800a5de:	0003      	movs	r3, r0
 800a5e0:	e000      	b.n	800a5e4 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 800a5e2:	2300      	movs	r3, #0
    }
 800a5e4:	0018      	movs	r0, r3
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	b002      	add	sp, #8
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	0018      	movs	r0, r3
 800a5f8:	f002 ff78 	bl	800d4ec <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	33ac      	adds	r3, #172	; 0xac
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	0010      	movs	r0, r2
 800a608:	4798      	blx	r3
    }
 800a60a:	46c0      	nop			; (mov r8, r8)
 800a60c:	46bd      	mov	sp, r7
 800a60e:	b002      	add	sp, #8
 800a610:	bd80      	pop	{r7, pc}

0800a612 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800a612:	b580      	push	{r7, lr}
 800a614:	b082      	sub	sp, #8
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
 800a61a:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 800a61c:	2300      	movs	r3, #0
    }
 800a61e:	0018      	movs	r0, r3
 800a620:	46bd      	mov	sp, r7
 800a622:	b002      	add	sp, #8
 800a624:	bd80      	pop	{r7, pc}
	...

0800a628 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	607a      	str	r2, [r7, #4]
 800a634:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d105      	bne.n	800a648 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x20>
 800a63c:	4b0e      	ldr	r3, [pc, #56]	; (800a678 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x50>)
 800a63e:	4a0f      	ldr	r2, [pc, #60]	; (800a67c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 800a640:	490f      	ldr	r1, [pc, #60]	; (800a680 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 800a642:	4810      	ldr	r0, [pc, #64]	; (800a684 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800a644:	f009 fbc6 	bl	8013dd4 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	68ba      	ldr	r2, [r7, #8]
 800a64c:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	1e5a      	subs	r2, r3, #1
 800a658:	4193      	sbcs	r3, r2
 800a65a:	b2da      	uxtb	r2, r3
 800a65c:	4b0a      	ldr	r3, [pc, #40]	; (800a688 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800a65e:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	338c      	adds	r3, #140	; 0x8c
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	6839      	ldr	r1, [r7, #0]
 800a66a:	68fa      	ldr	r2, [r7, #12]
 800a66c:	0010      	movs	r0, r2
 800a66e:	4798      	blx	r3
    }
 800a670:	46c0      	nop			; (mov r8, r8)
 800a672:	46bd      	mov	sp, r7
 800a674:	b004      	add	sp, #16
 800a676:	bd80      	pop	{r7, pc}
 800a678:	08015570 	.word	0x08015570
 800a67c:	080155a8 	.word	0x080155a8
 800a680:	000002d2 	.word	0x000002d2
 800a684:	0801552c 	.word	0x0801552c
 800a688:	200026c6 	.word	0x200026c6

0800a68c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	683a      	ldr	r2, [r7, #0]
 800a69a:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	1e5a      	subs	r2, r3, #1
 800a6a0:	4193      	sbcs	r3, r2
 800a6a2:	b2da      	uxtb	r2, r3
 800a6a4:	4b02      	ldr	r3, [pc, #8]	; (800a6b0 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x24>)
 800a6a6:	701a      	strb	r2, [r3, #0]
    }
 800a6a8:	46c0      	nop			; (mov r8, r8)
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	b002      	add	sp, #8
 800a6ae:	bd80      	pop	{r7, pc}
 800a6b0:	200026c7 	.word	0x200026c7

0800a6b4 <_ZN8touchgfx3HAL19setButtonControllerEPNS_16ButtonControllerE>:
    /**
     * Stores a pointer to an instance of a specific implementation of a ButtonController.
     *
     * @param [in] btnCtrl pointer to button controller.
     */
    void setButtonController(ButtonController* btnCtrl)
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	6039      	str	r1, [r7, #0]
    {
        buttonController = btnCtrl;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	683a      	ldr	r2, [r7, #0]
 800a6c2:	615a      	str	r2, [r3, #20]
    }
 800a6c4:	46c0      	nop			; (mov r8, r8)
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	b002      	add	sp, #8
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800a6d4:	2300      	movs	r3, #0
    }
 800a6d6:	0018      	movs	r0, r3
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	b002      	add	sp, #8
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b082      	sub	sp, #8
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
 800a6e6:	000a      	movs	r2, r1
 800a6e8:	1cbb      	adds	r3, r7, #2
 800a6ea:	801a      	strh	r2, [r3, #0]
    {
        if (taskDelayFunc)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d005      	beq.n	800a700 <_ZN8touchgfx3HAL9taskDelayEt+0x22>
        {
            taskDelayFunc(ms);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6f8:	1cba      	adds	r2, r7, #2
 800a6fa:	8812      	ldrh	r2, [r2, #0]
 800a6fc:	0010      	movs	r0, r2
 800a6fe:	4798      	blx	r3
        }
    }
 800a700:	46c0      	nop			; (mov r8, r8)
 800a702:	46bd      	mov	sp, r7
 800a704:	b002      	add	sp, #8
 800a706:	bd80      	pop	{r7, pc}

0800a708 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 800a708:	b580      	push	{r7, lr}
 800a70a:	b082      	sub	sp, #8
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 800a710:	4b02      	ldr	r3, [pc, #8]	; (800a71c <_ZN8touchgfx3HAL17getTFTCurrentLineEv+0x14>)
    }
 800a712:	0018      	movs	r0, r3
 800a714:	46bd      	mov	sp, r7
 800a716:	b002      	add	sp, #8
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	46c0      	nop			; (mov r8, r8)
 800a71c:	0000ffff 	.word	0x0000ffff

0800a720 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	685a      	ldr	r2, [r3, #4]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	3318      	adds	r3, #24
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	0010      	movs	r0, r2
 800a738:	4798      	blx	r3
 800a73a:	0003      	movs	r3, r0
    }
 800a73c:	0018      	movs	r0, r3
 800a73e:	46bd      	mov	sp, r7
 800a740:	b002      	add	sp, #8
 800a742:	bd80      	pop	{r7, pc}

0800a744 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2278      	movs	r2, #120	; 0x78
 800a750:	5c9a      	ldrb	r2, [r3, r2]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2134      	movs	r1, #52	; 0x34
 800a756:	5c5b      	ldrb	r3, [r3, r1]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d014      	beq.n	800a786 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x42>
        {
            if (DISPLAY_ROTATION == rotate0)
 800a75c:	4b16      	ldr	r3, [pc, #88]	; (800a7b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d124      	bne.n	800a7ae <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6a>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800a764:	210c      	movs	r1, #12
 800a766:	187b      	adds	r3, r7, r1
 800a768:	4a14      	ldr	r2, [pc, #80]	; (800a7bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x78>)
 800a76a:	8812      	ldrh	r2, [r2, #0]
 800a76c:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800a76e:	4b14      	ldr	r3, [pc, #80]	; (800a7c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x7c>)
 800a770:	881a      	ldrh	r2, [r3, #0]
 800a772:	4b12      	ldr	r3, [pc, #72]	; (800a7bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x78>)
 800a774:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 800a776:	4b12      	ldr	r3, [pc, #72]	; (800a7c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x7c>)
 800a778:	187a      	adds	r2, r7, r1
 800a77a:	8812      	ldrh	r2, [r2, #0]
 800a77c:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 800a77e:	4b0e      	ldr	r3, [pc, #56]	; (800a7b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800a780:	2201      	movs	r2, #1
 800a782:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800a784:	e013      	b.n	800a7ae <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6a>
        else if (DISPLAY_ROTATION != rotate0)
 800a786:	4b0c      	ldr	r3, [pc, #48]	; (800a7b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d00f      	beq.n	800a7ae <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6a>
            const uint16_t tmp = DISPLAY_HEIGHT;
 800a78e:	210e      	movs	r1, #14
 800a790:	187b      	adds	r3, r7, r1
 800a792:	4a0a      	ldr	r2, [pc, #40]	; (800a7bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x78>)
 800a794:	8812      	ldrh	r2, [r2, #0]
 800a796:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800a798:	4b09      	ldr	r3, [pc, #36]	; (800a7c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x7c>)
 800a79a:	881a      	ldrh	r2, [r3, #0]
 800a79c:	4b07      	ldr	r3, [pc, #28]	; (800a7bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x78>)
 800a79e:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 800a7a0:	4b07      	ldr	r3, [pc, #28]	; (800a7c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x7c>)
 800a7a2:	187a      	adds	r2, r7, r1
 800a7a4:	8812      	ldrh	r2, [r2, #0]
 800a7a6:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 800a7a8:	4b03      	ldr	r3, [pc, #12]	; (800a7b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	701a      	strb	r2, [r3, #0]
    }
 800a7ae:	46c0      	nop			; (mov r8, r8)
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	b004      	add	sp, #16
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	46c0      	nop			; (mov r8, r8)
 800a7b8:	200026c0 	.word	0x200026c0
 800a7bc:	200026be 	.word	0x200026be
 800a7c0:	200026bc 	.word	0x200026bc

0800a7c4 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
    {
    }
 800a7cc:	46c0      	nop			; (mov r8, r8)
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	b002      	add	sp, #8
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
    {
    }
 800a7dc:	46c0      	nop			; (mov r8, r8)
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	b002      	add	sp, #8
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	0018      	movs	r0, r3
 800a7f0:	f002 f8ac 	bl	800c94c <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800a7f4:	46c0      	nop			; (mov r8, r8)
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	b002      	add	sp, #8
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <_ZN20TouchGFXGeneratedHAL13setDataReaderEPN8touchgfx15FlashDataReaderE>:
     * @brief This function is used to store the pointer to the object of FlashDataReader.
     *
     * @param datareader The pointer to the FlashDataReader object used for accessing unmapped data.
     *
     */
    virtual void setDataReader(touchgfx::FlashDataReader* datareader)
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b082      	sub	sp, #8
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
    {
        reader = datareader;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	683a      	ldr	r2, [r7, #0]
 800a80a:	67da      	str	r2, [r3, #124]	; 0x7c
    }
 800a80c:	46c0      	nop			; (mov r8, r8)
 800a80e:	46bd      	mov	sp, r7
 800a810:	b002      	add	sp, #8
 800a812:	bd80      	pop	{r7, pc}

0800a814 <_ZN20TouchGFXGeneratedHAL13getDataReaderEv>:
     * @brief This function is used to store the pointer to the object of FlashDataReader.
     *
     * @return pointer to the FlashDataReader object used for accessing unmapped data.
     *
     */
    virtual touchgfx::FlashDataReader* getDataReader()
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
    {
        return reader;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    }
 800a820:	0018      	movs	r0, r3
 800a822:	46bd      	mov	sp, r7
 800a824:	b002      	add	sp, #8
 800a826:	bd80      	pop	{r7, pc}

0800a828 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	4a05      	ldr	r2, [pc, #20]	; (800a848 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	601a      	str	r2, [r3, #0]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	0018      	movs	r0, r3
 800a83a:	f7ff fe53 	bl	800a4e4 <_ZN8touchgfx3HALD1Ev>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	0018      	movs	r0, r3
 800a842:	46bd      	mov	sp, r7
 800a844:	b002      	add	sp, #8
 800a846:	bd80      	pop	{r7, pc}
 800a848:	080166a0 	.word	0x080166a0

0800a84c <_ZN20TouchGFXGeneratedHALD0Ev>:
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	0018      	movs	r0, r3
 800a858:	f7ff ffe6 	bl	800a828 <_ZN20TouchGFXGeneratedHALD1Ev>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2180      	movs	r1, #128	; 0x80
 800a860:	0018      	movs	r0, r3
 800a862:	f009 fa87 	bl	8013d74 <_ZdlPvj>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	0018      	movs	r0, r3
 800a86a:	46bd      	mov	sp, r7
 800a86c:	b002      	add	sp, #8
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	0018      	movs	r0, r3
 800a87c:	f7ff ffb2 	bl	800a7e4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 800a880:	46c0      	nop			; (mov r8, r8)
 800a882:	46bd      	mov	sp, r7
 800a884:	b002      	add	sp, #8
 800a886:	bd80      	pop	{r7, pc}

0800a888 <_ZN8touchgfx16ButtonControllerC1Ev>:
class ButtonController
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	4a03      	ldr	r2, [pc, #12]	; (800a8a0 <_ZN8touchgfx16ButtonControllerC1Ev+0x18>)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	601a      	str	r2, [r3, #0]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	0018      	movs	r0, r3
 800a89a:	46bd      	mov	sp, r7
 800a89c:	b002      	add	sp, #8
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	08015ed4 	.word	0x08015ed4

0800a8a4 <_ZN23MB1642AButtonControllerC1Ev>:
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	0018      	movs	r0, r3
 800a8b0:	f7ff ffea 	bl	800a888 <_ZN8touchgfx16ButtonControllerC1Ev>
 800a8b4:	4a03      	ldr	r2, [pc, #12]	; (800a8c4 <_ZN23MB1642AButtonControllerC1Ev+0x20>)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	601a      	str	r2, [r3, #0]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	0018      	movs	r0, r3
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	b002      	add	sp, #8
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	08015eb8 	.word	0x08015eb8

0800a8c8 <_ZN11TouchGFXHAL10initializeEv>:
 *  A user must call touchgfx::startNewTransfer(); once touchgfxDisplayDriverTransmitBlock() has successfully sent a block.
 *  E.g. if using DMA to transfer the block, this could be called in the "Transfer Completed" interrupt handler.
 *
 */
//#error "A user must implement C-methods touchgfxDisplayDriverTransmitActive() and touchgfxDisplayDriverTransmitBlock() used by the Partial Framebuffer Strategy."
void TouchGFXHAL::initialize() {
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.
	// Please note, HAL::initialize() must be called to initialize the framework.


	MB1642BDisplayDriver_Init();
 800a8d0:	f7f7 fcb5 	bl	800223e <MB1642BDisplayDriver_Init>
	DataReader_Init();
 800a8d4:	f7f7 f978 	bl	8001bc8 <DataReader_Init>

	/* Prepares Display for operation */
	MB1642BDisplayDriver_DisplayReset();
 800a8d8:	f7f7 fc98 	bl	800220c <MB1642BDisplayDriver_DisplayReset>
	MB1642BDisplayDriver_DisplayInit();
 800a8dc:	f7f7 fbc8 	bl	8002070 <MB1642BDisplayDriver_DisplayInit>

	/* Initialize TouchGFX Engine */
	TouchGFXGeneratedHAL::initialize();
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	0018      	movs	r0, r3
 800a8e4:	f001 f8ee 	bl	800bac4 <_ZN20TouchGFXGeneratedHAL10initializeEv>
	setButtonController(&bc);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	4a0b      	ldr	r2, [pc, #44]	; (800a918 <_ZN11TouchGFXHAL10initializeEv+0x50>)
 800a8ec:	0011      	movs	r1, r2
 800a8ee:	0018      	movs	r0, r3
 800a8f0:	f7ff fee0 	bl	800a6b4 <_ZN8touchgfx3HAL19setButtonControllerEPNS_16ButtonControllerE>


	/* Wait for first VSync from display */
	touchgfx::OSWrappers::waitForVSync();
 800a8f4:	f000 f96a 	bl	800abcc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>

	/* Render first frame, so there is valid date in the displays GRAM */
	HAL::getInstance()->backPorchExited();
 800a8f8:	f7f6 fdda 	bl	80014b0 <_ZN8touchgfx3HAL11getInstanceEv>
 800a8fc:	0003      	movs	r3, r0
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	3270      	adds	r2, #112	; 0x70
 800a902:	6812      	ldr	r2, [r2, #0]
 800a904:	0018      	movs	r0, r3
 800a906:	4790      	blx	r2

	/* GRAM has been filled, turn on display to show content of GRAM */
	MB1642BDisplayDriver_DisplayOn();
 800a908:	f7f7 f9e4 	bl	8001cd4 <MB1642BDisplayDriver_DisplayOn>
	touchgfx::OSWrappers::signalRenderingDone();
 800a90c:	f000 f948 	bl	800aba0 <_ZN8touchgfx10OSWrappers19signalRenderingDoneEv>
}
 800a910:	46c0      	nop			; (mov r8, r8)
 800a912:	46bd      	mov	sp, r7
 800a914:	b002      	add	sp, #8
 800a916:	bd80      	pop	{r7, pc}
 800a918:	200004ac 	.word	0x200004ac

0800a91c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
/**
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const {
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of getTFTFrameBuffer().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	0018      	movs	r0, r3
 800a928:	f001 f93b 	bl	800bba2 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 800a92c:	0003      	movs	r3, r0
}
 800a92e:	0018      	movs	r0, r3
 800a930:	46bd      	mov	sp, r7
 800a932:	b002      	add	sp, #8
 800a934:	bd80      	pop	{r7, pc}

0800a936 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
/**
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t *address) {
 800a936:	b580      	push	{r7, lr}
 800a938:	b082      	sub	sp, #8
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
 800a93e:	6039      	str	r1, [r7, #0]
	// Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	683a      	ldr	r2, [r7, #0]
 800a944:	0011      	movs	r1, r2
 800a946:	0018      	movs	r0, r3
 800a948:	f001 f934 	bl	800bbb4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800a94c:	46c0      	nop			; (mov r8, r8)
 800a94e:	46bd      	mov	sp, r7
 800a950:	b002      	add	sp, #8
 800a952:	bd80      	pop	{r7, pc}

0800a954 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 *
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect &rect) {
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
	// be called to notify the touchgfx framework that flush has been performed.
	// To calculate he start adress of rect,
	// use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
	// defined in TouchGFXGeneratedHAL.cpp

	TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	683a      	ldr	r2, [r7, #0]
 800a962:	0011      	movs	r1, r2
 800a964:	0018      	movs	r0, r3
 800a966:	f001 f92e 	bl	800bbc6 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 800a96a:	46c0      	nop			; (mov r8, r8)
 800a96c:	46bd      	mov	sp, r7
 800a96e:	b002      	add	sp, #8
 800a970:	bd80      	pop	{r7, pc}
	...

0800a974 <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame() {
 800a974:	b580      	push	{r7, lr}
 800a976:	b082      	sub	sp, #8
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
	TE = 0;
 800a97c:	4b05      	ldr	r3, [pc, #20]	; (800a994 <_ZN11TouchGFXHAL10beginFrameEv+0x20>)
 800a97e:	2200      	movs	r2, #0
 800a980:	801a      	strh	r2, [r3, #0]
	return TouchGFXGeneratedHAL::beginFrame();
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	0018      	movs	r0, r3
 800a986:	f001 f8ef 	bl	800bb68 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 800a98a:	0003      	movs	r3, r0
}
 800a98c:	0018      	movs	r0, r3
 800a98e:	46bd      	mov	sp, r7
 800a990:	b002      	add	sp, #8
 800a992:	bd80      	pop	{r7, pc}
 800a994:	200000a6 	.word	0x200000a6

0800a998 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame() {
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
	TouchGFXGeneratedHAL::endFrame();
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	0018      	movs	r0, r3
 800a9a4:	f001 f8ed 	bl	800bb82 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
	if (TE > 0) {
 800a9a8:	4b06      	ldr	r3, [pc, #24]	; (800a9c4 <_ZN11TouchGFXHAL8endFrameEv+0x2c>)
 800a9aa:	881b      	ldrh	r3, [r3, #0]
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	1e5a      	subs	r2, r3, #1
 800a9b0:	4193      	sbcs	r3, r2
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d001      	beq.n	800a9bc <_ZN11TouchGFXHAL8endFrameEv+0x24>
		touchgfx::OSWrappers::signalVSync();
 800a9b8:	f000 f8e8 	bl	800ab8c <_ZN8touchgfx10OSWrappers11signalVSyncEv>
	}
}
 800a9bc:	46c0      	nop			; (mov r8, r8)
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	b002      	add	sp, #8
 800a9c2:	bd80      	pop	{r7, pc}
 800a9c4:	200000a6 	.word	0x200000a6

0800a9c8 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void *RESTRICT dest, const void *RESTRICT src,
		uint32_t numBytes) {
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
 800a9d4:	603b      	str	r3, [r7, #0]
	return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 800a9d6:	68f8      	ldr	r0, [r7, #12]
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	68b9      	ldr	r1, [r7, #8]
 800a9de:	f001 f903 	bl	800bbe8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 800a9e2:	0003      	movs	r3, r0
}
 800a9e4:	0018      	movs	r0, r3
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	b004      	add	sp, #16
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <_ZN11TouchGFXHAL19configureInterruptsEv>:

/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts() {
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b082      	sub	sp, #8
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of configureInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::configureInterrupts();
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	0018      	movs	r0, r3
 800a9f8:	f001 f896 	bl	800bb28 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800a9fc:	46c0      	nop			; (mov r8, r8)
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	b002      	add	sp, #8
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts() {
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b082      	sub	sp, #8
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of enableInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::enableInterrupts();
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	0018      	movs	r0, r3
 800aa10:	f001 f892 	bl	800bb38 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800aa14:	46c0      	nop			; (mov r8, r8)
 800aa16:	46bd      	mov	sp, r7
 800aa18:	b002      	add	sp, #8
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts() {
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of disableInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::disableInterrupts();
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	0018      	movs	r0, r3
 800aa28:	f001 f88e 	bl	800bb48 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800aa2c:	46c0      	nop			; (mov r8, r8)
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	b002      	add	sp, #8
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:

/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt() {
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b082      	sub	sp, #8
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of enableLCDControllerInterrupt().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	0018      	movs	r0, r3
 800aa40:	f001 f88a 	bl	800bb58 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800aa44:	46c0      	nop			; (mov r8, r8)
 800aa46:	46bd      	mov	sp, r7
 800aa48:	b002      	add	sp, #8
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	4a05      	ldr	r2, [pc, #20]	; (800aa6c <_ZN11TouchGFXHALD1Ev+0x20>)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	601a      	str	r2, [r3, #0]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	0018      	movs	r0, r3
 800aa5e:	f7ff fee3 	bl	800a828 <_ZN20TouchGFXGeneratedHALD1Ev>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	0018      	movs	r0, r3
 800aa66:	46bd      	mov	sp, r7
 800aa68:	b002      	add	sp, #8
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	0801642c 	.word	0x0801642c

0800aa70 <_ZN11TouchGFXHALD0Ev>:
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b082      	sub	sp, #8
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	0018      	movs	r0, r3
 800aa7c:	f7ff ffe6 	bl	800aa4c <_ZN11TouchGFXHALD1Ev>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2180      	movs	r1, #128	; 0x80
 800aa84:	0018      	movs	r0, r3
 800aa86:	f009 f975 	bl	8013d74 <_ZdlPvj>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	0018      	movs	r0, r3
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	b002      	add	sp, #8
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <_Z41__static_initialization_and_destruction_0ii>:
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	6039      	str	r1, [r7, #0]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d107      	bne.n	800aab4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	4a0b      	ldr	r2, [pc, #44]	; (800aad4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d103      	bne.n	800aab4 <_Z41__static_initialization_and_destruction_0ii+0x20>
MB1642AButtonController bc;
 800aaac:	4b0a      	ldr	r3, [pc, #40]	; (800aad8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800aaae:	0018      	movs	r0, r3
 800aab0:	f7ff fef8 	bl	800a8a4 <_ZN23MB1642AButtonControllerC1Ev>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d107      	bne.n	800aaca <_Z41__static_initialization_and_destruction_0ii+0x36>
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	4a05      	ldr	r2, [pc, #20]	; (800aad4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d103      	bne.n	800aaca <_Z41__static_initialization_and_destruction_0ii+0x36>
 800aac2:	4b05      	ldr	r3, [pc, #20]	; (800aad8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800aac4:	0018      	movs	r0, r3
 800aac6:	f7f6 fd8f 	bl	80015e8 <_ZN23MB1642AButtonControllerD1Ev>
}
 800aaca:	46c0      	nop			; (mov r8, r8)
 800aacc:	46bd      	mov	sp, r7
 800aace:	b002      	add	sp, #8
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	46c0      	nop			; (mov r8, r8)
 800aad4:	0000ffff 	.word	0x0000ffff
 800aad8:	200004ac 	.word	0x200004ac

0800aadc <_GLOBAL__sub_I_bc>:
 800aadc:	b580      	push	{r7, lr}
 800aade:	af00      	add	r7, sp, #0
 800aae0:	4b03      	ldr	r3, [pc, #12]	; (800aaf0 <_GLOBAL__sub_I_bc+0x14>)
 800aae2:	0019      	movs	r1, r3
 800aae4:	2001      	movs	r0, #1
 800aae6:	f7ff ffd5 	bl	800aa94 <_Z41__static_initialization_and_destruction_0ii>
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	46c0      	nop			; (mov r8, r8)
 800aaf0:	0000ffff 	.word	0x0000ffff

0800aaf4 <_GLOBAL__sub_D_bc>:
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	4b03      	ldr	r3, [pc, #12]	; (800ab08 <_GLOBAL__sub_D_bc+0x14>)
 800aafa:	0019      	movs	r1, r3
 800aafc:	2000      	movs	r0, #0
 800aafe:	f7ff ffc9 	bl	800aa94 <_Z41__static_initialization_and_destruction_0ii>
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	46c0      	nop			; (mov r8, r8)
 800ab08:	0000ffff 	.word	0x0000ffff

0800ab0c <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	af00      	add	r7, sp, #0
    fb_sem = 0;
 800ab10:	4b04      	ldr	r3, [pc, #16]	; (800ab24 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>)
 800ab12:	2200      	movs	r2, #0
 800ab14:	601a      	str	r2, [r3, #0]
    vsync_sem = 0;
 800ab16:	4b04      	ldr	r3, [pc, #16]	; (800ab28 <_ZN8touchgfx10OSWrappers10initializeEv+0x1c>)
 800ab18:	2200      	movs	r2, #0
 800ab1a:	601a      	str	r2, [r3, #0]
}
 800ab1c:	46c0      	nop			; (mov r8, r8)
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
 800ab22:	46c0      	nop			; (mov r8, r8)
 800ab24:	200004b4 	.word	0x200004b4
 800ab28:	200004b8 	.word	0x200004b8

0800ab2c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	af00      	add	r7, sp, #0
    while (fb_sem);
 800ab30:	46c0      	nop			; (mov r8, r8)
 800ab32:	4b06      	ldr	r3, [pc, #24]	; (800ab4c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x20>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	1e5a      	subs	r2, r3, #1
 800ab38:	4193      	sbcs	r3, r2
 800ab3a:	b2db      	uxtb	r3, r3
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d1f8      	bne.n	800ab32 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x6>
    fb_sem = 1;
 800ab40:	4b02      	ldr	r3, [pc, #8]	; (800ab4c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x20>)
 800ab42:	2201      	movs	r2, #1
 800ab44:	601a      	str	r2, [r3, #0]
}
 800ab46:	46c0      	nop			; (mov r8, r8)
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	200004b4 	.word	0x200004b4

0800ab50 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	af00      	add	r7, sp, #0
    fb_sem = 0;
 800ab54:	4b02      	ldr	r3, [pc, #8]	; (800ab60 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x10>)
 800ab56:	2200      	movs	r2, #0
 800ab58:	601a      	str	r2, [r3, #0]
}
 800ab5a:	46c0      	nop			; (mov r8, r8)
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	200004b4 	.word	0x200004b4

0800ab64 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	af00      	add	r7, sp, #0
    fb_sem = 1;
 800ab68:	4b02      	ldr	r3, [pc, #8]	; (800ab74 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x10>)
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	601a      	str	r2, [r3, #0]
}
 800ab6e:	46c0      	nop			; (mov r8, r8)
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}
 800ab74:	200004b4 	.word	0x200004b4

0800ab78 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	af00      	add	r7, sp, #0
    fb_sem = 0;
 800ab7c:	4b02      	ldr	r3, [pc, #8]	; (800ab88 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x10>)
 800ab7e:	2200      	movs	r2, #0
 800ab80:	601a      	str	r2, [r3, #0]
}
 800ab82:	46c0      	nop			; (mov r8, r8)
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}
 800ab88:	200004b4 	.word	0x200004b4

0800ab8c <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	af00      	add	r7, sp, #0
    vsync_sem = 1;
 800ab90:	4b02      	ldr	r3, [pc, #8]	; (800ab9c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 800ab92:	2201      	movs	r2, #1
 800ab94:	601a      	str	r2, [r3, #0]
}
 800ab96:	46c0      	nop			; (mov r8, r8)
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}
 800ab9c:	200004b8 	.word	0x200004b8

0800aba0 <_ZN8touchgfx10OSWrappers19signalRenderingDoneEv>:
/*
  * Signal that the rendering of the frame has completed. Used by
  * some systems to avoid using any previous vsync.
  */
void OSWrappers::signalRenderingDone()
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	af00      	add	r7, sp, #0
    vsync_sem = 0;
 800aba4:	4b02      	ldr	r3, [pc, #8]	; (800abb0 <_ZN8touchgfx10OSWrappers19signalRenderingDoneEv+0x10>)
 800aba6:	2200      	movs	r2, #0
 800aba8:	601a      	str	r2, [r3, #0]
}
 800abaa:	46c0      	nop			; (mov r8, r8)
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	200004b8 	.word	0x200004b8

0800abb4 <_ZN8touchgfx10OSWrappers16isVSyncAvailableEv>:
 * @note signalRenderingDone is typically used together with this function.
 *
 * @return True if VSync occurred.
 */
bool OSWrappers::isVSyncAvailable()
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	af00      	add	r7, sp, #0
    return vsync_sem;
 800abb8:	4b03      	ldr	r3, [pc, #12]	; (800abc8 <_ZN8touchgfx10OSWrappers16isVSyncAvailableEv+0x14>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	1e5a      	subs	r2, r3, #1
 800abbe:	4193      	sbcs	r3, r2
 800abc0:	b2db      	uxtb	r3, r3
}
 800abc2:	0018      	movs	r0, r3
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	200004b8 	.word	0x200004b8

0800abcc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
/*
 * This function check if a VSYNC has occured.
 * If VSYNC has occured, signal TouchGFX to start a rendering
 */
void OSWrappers::waitForVSync()
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	af00      	add	r7, sp, #0
    if (vsync_sem)
 800abd0:	4b0a      	ldr	r3, [pc, #40]	; (800abfc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	1e5a      	subs	r2, r3, #1
 800abd6:	4193      	sbcs	r3, r2
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d00a      	beq.n	800abf4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>
    {
        vsync_sem = 0;
 800abde:	4b07      	ldr	r3, [pc, #28]	; (800abfc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 800abe0:	2200      	movs	r2, #0
 800abe2:	601a      	str	r2, [r3, #0]
        HAL::getInstance()->backPorchExited();
 800abe4:	f7f6 fc64 	bl	80014b0 <_ZN8touchgfx3HAL11getInstanceEv>
 800abe8:	0003      	movs	r3, r0
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	3270      	adds	r2, #112	; 0x70
 800abee:	6812      	ldr	r2, [r2, #0]
 800abf0:	0018      	movs	r0, r3
 800abf2:	4790      	blx	r2
    }
}
 800abf4:	46c0      	nop			; (mov r8, r8)
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	46c0      	nop			; (mov r8, r8)
 800abfc:	200004b8 	.word	0x200004b8

0800ac00 <_ZN8touchgfx10OSWrappers9taskYieldEv>:
 * system to change to another task of similar priority. When
 * running without an operating system, the implementation can run
 * a very short task and return.
 */
void OSWrappers::taskYield()
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	af00      	add	r7, sp, #0

}
 800ac04:	46c0      	nop			; (mov r8, r8)
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 800ac0a:	b580      	push	{r7, lr}
 800ac0c:	b082      	sub	sp, #8
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
        : color(0)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2200      	movs	r2, #0
 800ac16:	601a      	str	r2, [r3, #0]
    }
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	0018      	movs	r0, r3
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	b002      	add	sp, #8
 800ac20:	bd80      	pop	{r7, pc}
	...

0800ac24 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
    {
 800ac2c:	4a03      	ldr	r2, [pc, #12]	; (800ac3c <_ZN8touchgfx9DMA_QueueD1Ev+0x18>)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	601a      	str	r2, [r3, #0]
    }
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	0018      	movs	r0, r3
 800ac36:	46bd      	mov	sp, r7
 800ac38:	b002      	add	sp, #8
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	0801655c 	.word	0x0801655c

0800ac40 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
    }
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	0018      	movs	r0, r3
 800ac4c:	f7ff ffea 	bl	800ac24 <_ZN8touchgfx9DMA_QueueD1Ev>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2104      	movs	r1, #4
 800ac54:	0018      	movs	r0, r3
 800ac56:	f009 f88d 	bl	8013d74 <_ZdlPvj>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	0018      	movs	r0, r3
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	b002      	add	sp, #8
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <_ZN8touchgfx13DMA_Interface10initializeEv>:
    {
        waitForFrameBufferSemaphore();
    }

    /** Perform initialization. Does nothing in this base class. */
    virtual void initialize()
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b082      	sub	sp, #8
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
    {
    }
 800ac6c:	46c0      	nop			; (mov r8, r8)
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	b002      	add	sp, #8
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 800ac7c:	2300      	movs	r3, #0
    }
 800ac7e:	0018      	movs	r0, r3
 800ac80:	46bd      	mov	sp, r7
 800ac82:	b002      	add	sp, #8
 800ac84:	bd80      	pop	{r7, pc}
	...

0800ac88 <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
    {
 800ac90:	4a03      	ldr	r2, [pc, #12]	; (800aca0 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x18>)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	601a      	str	r2, [r3, #0]
    }
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	0018      	movs	r0, r3
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	b002      	add	sp, #8
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	08016954 	.word	0x08016954

0800aca4 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
    }
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	0018      	movs	r0, r3
 800acb0:	f7ff ffea 	bl	800ac88 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	210c      	movs	r1, #12
 800acb8:	0018      	movs	r0, r3
 800acba:	f009 f85b 	bl	8013d74 <_ZdlPvj>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	0018      	movs	r0, r3
 800acc2:	46bd      	mov	sp, r7
 800acc4:	b002      	add	sp, #8
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800acd2:	4a08      	ldr	r2, [pc, #32]	; (800acf4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x2c>)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	601a      	str	r2, [r3, #0]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	683a      	ldr	r2, [r7, #0]
 800acdc:	605a      	str	r2, [r3, #4]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2200      	movs	r2, #0
 800ace2:	721a      	strb	r2, [r3, #8]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2200      	movs	r2, #0
 800ace8:	725a      	strb	r2, [r3, #9]
    {
    }
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	0018      	movs	r0, r3
 800acee:	46bd      	mov	sp, r7
 800acf0:	b002      	add	sp, #8
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	08016954 	.word	0x08016954

0800acf8 <_ZN8STM32DMA18signalDMAInterruptEv>:
    /**
     * @fn virtual void STM32DMA::signalDMAInterrupt();
     *
     * @brief Does nothing.
     */
    virtual void signalDMAInterrupt()
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
    {
    }
 800ad00:	46c0      	nop			; (mov r8, r8)
 800ad02:	46bd      	mov	sp, r7
 800ad04:	b002      	add	sp, #8
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <_ZN8STM32DMA5flushEv>:
     * @fn virtual void STM32DMA::flush();
     *
     * @brief Block until all DMA transfers are complete. Since this particular DMA does not do
     * anything, return immediately.
     */
    virtual void flush()
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
    {
    }
 800ad10:	46c0      	nop			; (mov r8, r8)
 800ad12:	46bd      	mov	sp, r7
 800ad14:	b002      	add	sp, #8
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	330c      	adds	r3, #12
 800ad24:	0018      	movs	r0, r3
 800ad26:	f7ff ff70 	bl	800ac0a <_ZN8touchgfx9colortypeC1Ev>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	0018      	movs	r0, r3
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	b002      	add	sp, #8
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <_ZN8STM32DMAC1Ev>:
  */

#include <STM32DMA.hpp>
#include <assert.h>

STM32DMA::STM32DMA()
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
    : DMA_Interface(q), q(&b, 1)
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	330c      	adds	r3, #12
 800ad42:	0019      	movs	r1, r3
 800ad44:	0010      	movs	r0, r2
 800ad46:	f7ff ffbf 	bl	800acc8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800ad4a:	4a0b      	ldr	r2, [pc, #44]	; (800ad78 <_ZN8STM32DMAC1Ev+0x44>)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	601a      	str	r2, [r3, #0]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	330c      	adds	r3, #12
 800ad54:	0018      	movs	r0, r3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	3320      	adds	r3, #32
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	0019      	movs	r1, r3
 800ad5e:	f002 fd03 	bl	800d768 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	3320      	adds	r3, #32
 800ad66:	0018      	movs	r0, r3
 800ad68:	f7ff ffd6 	bl	800ad18 <_ZN8touchgfx6BlitOpC1Ev>
{
}
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	0018      	movs	r0, r3
 800ad70:	46bd      	mov	sp, r7
 800ad72:	b002      	add	sp, #8
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	46c0      	nop			; (mov r8, r8)
 800ad78:	0801650c 	.word	0x0801650c

0800ad7c <_ZN8STM32DMA11getBlitCapsEv>:

touchgfx::BlitOperations STM32DMA::getBlitCaps()
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b082      	sub	sp, #8
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
    return static_cast<touchgfx::BlitOperations>(0);
 800ad84:	2300      	movs	r3, #0
}
 800ad86:	0018      	movs	r0, r3
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	b002      	add	sp, #8
 800ad8c:	bd80      	pop	{r7, pc}
	...

0800ad90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32DMA::setupDataCopy(const touchgfx::BlitOp& blitOp)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 800ad9a:	4b03      	ldr	r3, [pc, #12]	; (800ada8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18>)
 800ad9c:	4a03      	ldr	r2, [pc, #12]	; (800adac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c>)
 800ad9e:	4804      	ldr	r0, [pc, #16]	; (800adb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20>)
 800ada0:	2122      	movs	r1, #34	; 0x22
 800ada2:	f009 f817 	bl	8013dd4 <__assert_func>
 800ada6:	46c0      	nop			; (mov r8, r8)
 800ada8:	080155f8 	.word	0x080155f8
 800adac:	0801561c 	.word	0x0801561c
 800adb0:	0801565c 	.word	0x0801565c

0800adb4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
}

void STM32DMA::setupDataFill(const touchgfx::BlitOp& blitOp)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b082      	sub	sp, #8
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 800adbe:	4b03      	ldr	r3, [pc, #12]	; (800adcc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x18>)
 800adc0:	4a03      	ldr	r2, [pc, #12]	; (800add0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>)
 800adc2:	4804      	ldr	r0, [pc, #16]	; (800add4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x20>)
 800adc4:	2127      	movs	r1, #39	; 0x27
 800adc6:	f009 f805 	bl	8013dd4 <__assert_func>
 800adca:	46c0      	nop			; (mov r8, r8)
 800adcc:	080155f8 	.word	0x080155f8
 800add0:	08015688 	.word	0x08015688
 800add4:	0801565c 	.word	0x0801565c

0800add8 <_ZN8STM32DMAD1Ev>:
class STM32DMA : public touchgfx::DMA_Interface
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	4a08      	ldr	r2, [pc, #32]	; (800ae04 <_ZN8STM32DMAD1Ev+0x2c>)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	601a      	str	r2, [r3, #0]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	330c      	adds	r3, #12
 800adea:	0018      	movs	r0, r3
 800adec:	f000 f81e 	bl	800ae2c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	0018      	movs	r0, r3
 800adf4:	f7ff ff48 	bl	800ac88 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	0018      	movs	r0, r3
 800adfc:	46bd      	mov	sp, r7
 800adfe:	b002      	add	sp, #8
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	46c0      	nop			; (mov r8, r8)
 800ae04:	0801650c 	.word	0x0801650c

0800ae08 <_ZN8STM32DMAD0Ev>:
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	0018      	movs	r0, r3
 800ae14:	f7ff ffe0 	bl	800add8 <_ZN8STM32DMAD1Ev>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2144      	movs	r1, #68	; 0x44
 800ae1c:	0018      	movs	r0, r3
 800ae1e:	f008 ffa9 	bl	8013d74 <_ZdlPvj>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	0018      	movs	r0, r3
 800ae26:	46bd      	mov	sp, r7
 800ae28:	b002      	add	sp, #8
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b082      	sub	sp, #8
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	4a05      	ldr	r2, [pc, #20]	; (800ae4c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	601a      	str	r2, [r3, #0]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	0018      	movs	r0, r3
 800ae3e:	f7ff fef1 	bl	800ac24 <_ZN8touchgfx9DMA_QueueD1Ev>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	0018      	movs	r0, r3
 800ae46:	46bd      	mov	sp, r7
 800ae48:	b002      	add	sp, #8
 800ae4a:	bd80      	pop	{r7, pc}
 800ae4c:	080169a4 	.word	0x080169a4

0800ae50 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	0018      	movs	r0, r3
 800ae5c:	f7ff ffe6 	bl	800ae2c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2114      	movs	r1, #20
 800ae64:	0018      	movs	r0, r3
 800ae66:	f008 ff85 	bl	8013d74 <_ZdlPvj>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	0018      	movs	r0, r3
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	b002      	add	sp, #8
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 800ae7c:	4b03      	ldr	r3, [pc, #12]	; (800ae8c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x18>)
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	601a      	str	r2, [r3, #0]
    }
 800ae82:	46c0      	nop			; (mov r8, r8)
 800ae84:	46bd      	mov	sp, r7
 800ae86:	b002      	add	sp, #8
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	46c0      	nop			; (mov r8, r8)
 800ae8c:	20002724 	.word	0x20002724

0800ae90 <_ZN23ApplicationFontProvider14setFlashReaderEPN8touchgfx15FlashDataReaderE>:
{
public:
    virtual touchgfx::Font* getFont(touchgfx::FontId typography);

    static void setFlashReader(touchgfx::FlashDataReader* /*flashReader*/)
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
    {
    }
 800ae98:	46c0      	nop			; (mov r8, r8)
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	b002      	add	sp, #8
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	607a      	str	r2, [r7, #4]
 800aeac:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800aeae:	4a0a      	ldr	r2, [pc, #40]	; (800aed8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x38>)
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	68ba      	ldr	r2, [r7, #8]
 800aeb8:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	683a      	ldr	r2, [r7, #0]
 800aec4:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	69ba      	ldr	r2, [r7, #24]
 800aeca:	611a      	str	r2, [r3, #16]
    {
    }
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	0018      	movs	r0, r3
 800aed0:	46bd      	mov	sp, r7
 800aed2:	b004      	add	sp, #16
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	46c0      	nop			; (mov r8, r8)
 800aed8:	08016644 	.word	0x08016644

0800aedc <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
    {
 800aee4:	4a03      	ldr	r2, [pc, #12]	; (800aef4 <_ZN8touchgfx7MVPHeapD1Ev+0x18>)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	601a      	str	r2, [r3, #0]
    }
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	0018      	movs	r0, r3
 800aeee:	46bd      	mov	sp, r7
 800aef0:	b002      	add	sp, #8
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	08016644 	.word	0x08016644

0800aef8 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
    }
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	0018      	movs	r0, r3
 800af04:	f7ff ffea 	bl	800aedc <_ZN8touchgfx7MVPHeapD1Ev>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2114      	movs	r1, #20
 800af0c:	0018      	movs	r0, r3
 800af0e:	f008 ff31 	bl	8013d74 <_ZdlPvj>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	0018      	movs	r0, r3
 800af16:	46bd      	mov	sp, r7
 800af18:	b002      	add	sp, #8
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0), vectorFontRenderer(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
    {
 800af24:	4a03      	ldr	r2, [pc, #12]	; (800af34 <_ZN8touchgfx3LCDD1Ev+0x18>)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	601a      	str	r2, [r3, #0]
    }
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	0018      	movs	r0, r3
 800af2e:	46bd      	mov	sp, r7
 800af30:	b002      	add	sp, #8
 800af32:	bd80      	pop	{r7, pc}
 800af34:	08016b80 	.word	0x08016b80

0800af38 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
    }
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	0018      	movs	r0, r3
 800af44:	f7ff ffea 	bl	800af1c <_ZN8touchgfx3LCDD1Ev>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	210c      	movs	r1, #12
 800af4c:	0018      	movs	r0, r3
 800af4e:	f008 ff11 	bl	8013d74 <_ZdlPvj>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	0018      	movs	r0, r3
 800af56:	46bd      	mov	sp, r7
 800af58:	b002      	add	sp, #8
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b082      	sub	sp, #8
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
            : startX(0),
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	801a      	strh	r2, [r3, #0]
              startY(0),
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2200      	movs	r2, #0
 800af6e:	805a      	strh	r2, [r3, #2]
              downX(0),
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2200      	movs	r2, #0
 800af74:	809a      	strh	r2, [r3, #4]
              downY(0),
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2200      	movs	r2, #0
 800af7a:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2200      	movs	r2, #0
 800af80:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2200      	movs	r2, #0
 800af86:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2200      	movs	r2, #0
 800af92:	739a      	strb	r2, [r3, #14]
        {
        }
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	0018      	movs	r0, r3
 800af98:	46bd      	mov	sp, r7
 800af9a:	b002      	add	sp, #8
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b082      	sub	sp, #8
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	0018      	movs	r0, r3
 800afaa:	f7ff ffd7 	bl	800af5c <_ZN8touchgfx8Gestures9DragStateC1Ev>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2200      	movs	r2, #0
 800afb2:	611a      	str	r2, [r3, #16]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	829a      	strh	r2, [r3, #20]
    {
    }
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	0018      	movs	r0, r3
 800afbe:	46bd      	mov	sp, r7
 800afc0:	b002      	add	sp, #8
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	607a      	str	r2, [r7, #4]
 800afd0:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 800afd2:	4a57      	ldr	r2, [pc, #348]	; (800b130 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	68ba      	ldr	r2, [r7, #8]
 800afdc:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	683a      	ldr	r2, [r7, #0]
 800afe8:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2200      	movs	r2, #0
 800afee:	611a      	str	r2, [r3, #16]
          buttonController(0),
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2200      	movs	r2, #0
 800aff4:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2200      	movs	r2, #0
 800affa:	619a      	str	r2, [r3, #24]
          gestures(),
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	331c      	adds	r3, #28
 800b000:	0018      	movs	r0, r3
 800b002:	f7ff ffcc 	bl	800af9e <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2234      	movs	r2, #52	; 0x34
 800b00a:	2100      	movs	r1, #0
 800b00c:	5499      	strb	r1, [r3, r2]
          taskDelayFunc(0),
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2200      	movs	r2, #0
 800b012:	639a      	str	r2, [r3, #56]	; 0x38
          frameBuffer0(0),
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2200      	movs	r2, #0
 800b018:	63da      	str	r2, [r3, #60]	; 0x3c
          frameBuffer1(0),
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2200      	movs	r2, #0
 800b01e:	641a      	str	r2, [r3, #64]	; 0x40
          frameBuffer2(0),
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	2200      	movs	r2, #0
 800b024:	645a      	str	r2, [r3, #68]	; 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2248      	movs	r2, #72	; 0x48
 800b02a:	2100      	movs	r1, #0
 800b02c:	5499      	strb	r1, [r3, r2]
          fingerSize(1),
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2249      	movs	r2, #73	; 0x49
 800b032:	2101      	movs	r1, #1
 800b034:	5499      	strb	r1, [r3, r2]
          lockDMAToPorch(false),
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	224a      	movs	r2, #74	; 0x4a
 800b03a:	2100      	movs	r1, #0
 800b03c:	5499      	strb	r1, [r3, r2]
          frameBufferUpdatedThisFrame(false),
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	224b      	movs	r2, #75	; 0x4b
 800b042:	2100      	movs	r1, #0
 800b044:	5499      	strb	r1, [r3, r2]
          auxiliaryLCD(0),
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2200      	movs	r2, #0
 800b04a:	64da      	str	r2, [r3, #76]	; 0x4c
          partialFrameBufferRect(),
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	3350      	adds	r3, #80	; 0x50
 800b050:	0018      	movs	r0, r3
 800b052:	f7fe f84a 	bl	80090ea <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2258      	movs	r2, #88	; 0x58
 800b05a:	2100      	movs	r1, #0
 800b05c:	5499      	strb	r1, [r3, r2]
          listener(0),
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2200      	movs	r2, #0
 800b062:	65da      	str	r2, [r3, #92]	; 0x5c
          lastX(0),
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2200      	movs	r2, #0
 800b068:	661a      	str	r2, [r3, #96]	; 0x60
          lastY(0),
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2200      	movs	r2, #0
 800b06e:	665a      	str	r2, [r3, #100]	; 0x64
          touchSampleRate(1),
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2268      	movs	r2, #104	; 0x68
 800b074:	2101      	movs	r1, #1
 800b076:	5499      	strb	r1, [r3, r2]
          mcuLoadPct(0),
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2269      	movs	r2, #105	; 0x69
 800b07c:	2100      	movs	r1, #0
 800b07e:	5499      	strb	r1, [r3, r2]
          vSyncCnt(0),
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	226a      	movs	r2, #106	; 0x6a
 800b084:	2100      	movs	r1, #0
 800b086:	5499      	strb	r1, [r3, r2]
          vSyncForFrame(1),
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	226b      	movs	r2, #107	; 0x6b
 800b08c:	2101      	movs	r1, #1
 800b08e:	5499      	strb	r1, [r3, r2]
          vSyncCompensationEnabled(false),
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	226c      	movs	r2, #108	; 0x6c
 800b094:	2100      	movs	r1, #0
 800b096:	5499      	strb	r1, [r3, r2]
          clientDirty(false),
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	226d      	movs	r2, #109	; 0x6d
 800b09c:	2100      	movs	r1, #0
 800b09e:	5499      	strb	r1, [r3, r2]
          swapRequested(false),
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	226e      	movs	r2, #110	; 0x6e
 800b0a4:	2100      	movs	r1, #0
 800b0a6:	5499      	strb	r1, [r3, r2]
          lastTouched(false),
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	226f      	movs	r2, #111	; 0x6f
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	5499      	strb	r1, [r3, r2]
          updateMCULoad(0),
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2270      	movs	r2, #112	; 0x70
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	5499      	strb	r1, [r3, r2]
          cc_begin(0),
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	675a      	str	r2, [r3, #116]	; 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2278      	movs	r2, #120	; 0x78
 800b0c2:	2100      	movs	r1, #0
 800b0c4:	5499      	strb	r1, [r3, r2]
          displayOrientationChangeRequested(false),
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2279      	movs	r2, #121	; 0x79
 800b0ca:	2100      	movs	r1, #0
 800b0cc:	5499      	strb	r1, [r3, r2]
          useDMAAcceleration(true),
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	227a      	movs	r2, #122	; 0x7a
 800b0d2:	2101      	movs	r1, #1
 800b0d4:	5499      	strb	r1, [r3, r2]
          lastRenderMethod(HARDWARE)
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	227b      	movs	r2, #123	; 0x7b
 800b0da:	2101      	movs	r1, #1
 800b0dc:	5499      	strb	r1, [r3, r2]
        instance = this;
 800b0de:	4b15      	ldr	r3, [pc, #84]	; (800b134 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 800b0e0:	68fa      	ldr	r2, [r7, #12]
 800b0e2:	601a      	str	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800b0e4:	4a14      	ldr	r2, [pc, #80]	; (800b138 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800b0e6:	2118      	movs	r1, #24
 800b0e8:	187b      	adds	r3, r7, r1
 800b0ea:	881b      	ldrh	r3, [r3, #0]
 800b0ec:	8013      	strh	r3, [r2, #0]
 800b0ee:	4b12      	ldr	r3, [pc, #72]	; (800b138 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800b0f0:	881a      	ldrh	r2, [r3, #0]
 800b0f2:	4b12      	ldr	r3, [pc, #72]	; (800b13c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 800b0f4:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800b0f6:	4b12      	ldr	r3, [pc, #72]	; (800b140 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 800b0f8:	201c      	movs	r0, #28
 800b0fa:	183a      	adds	r2, r7, r0
 800b0fc:	8812      	ldrh	r2, [r2, #0]
 800b0fe:	801a      	strh	r2, [r3, #0]
 800b100:	4b0f      	ldr	r3, [pc, #60]	; (800b140 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 800b102:	881a      	ldrh	r2, [r3, #0]
 800b104:	4b0f      	ldr	r3, [pc, #60]	; (800b144 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x180>)
 800b106:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 800b108:	4b0f      	ldr	r3, [pc, #60]	; (800b148 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x184>)
 800b10a:	2200      	movs	r2, #0
 800b10c:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800b10e:	187b      	adds	r3, r7, r1
 800b110:	1839      	adds	r1, r7, r0
 800b112:	881a      	ldrh	r2, [r3, #0]
 800b114:	880b      	ldrh	r3, [r1, #0]
 800b116:	429a      	cmp	r2, r3
 800b118:	419b      	sbcs	r3, r3
 800b11a:	425b      	negs	r3, r3
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	0019      	movs	r1, r3
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2234      	movs	r2, #52	; 0x34
 800b124:	5499      	strb	r1, [r3, r2]
    }
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	0018      	movs	r0, r3
 800b12a:	46bd      	mov	sp, r7
 800b12c:	b004      	add	sp, #16
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	0801687c 	.word	0x0801687c
 800b134:	200026c8 	.word	0x200026c8
 800b138:	200026bc 	.word	0x200026bc
 800b13c:	200026c2 	.word	0x200026c2
 800b140:	200026be 	.word	0x200026be
 800b144:	200026c4 	.word	0x200026c4
 800b148:	200026c0 	.word	0x200026c0

0800b14c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	0018      	movs	r0, r3
 800b15a:	f7fd fd1b 	bl	8008b94 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800b15e:	46c0      	nop			; (mov r8, r8)
 800b160:	46bd      	mov	sp, r7
 800b162:	b002      	add	sp, #8
 800b164:	bd80      	pop	{r7, pc}
	...

0800b168 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 800b168:	b590      	push	{r4, r7, lr}
 800b16a:	b087      	sub	sp, #28
 800b16c:	af02      	add	r7, sp, #8
 800b16e:	60f8      	str	r0, [r7, #12]
 800b170:	60b9      	str	r1, [r7, #8]
 800b172:	607a      	str	r2, [r7, #4]
 800b174:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 800b176:	68f8      	ldr	r0, [r7, #12]
 800b178:	6a3b      	ldr	r3, [r7, #32]
 800b17a:	683c      	ldr	r4, [r7, #0]
 800b17c:	687a      	ldr	r2, [r7, #4]
 800b17e:	68b9      	ldr	r1, [r7, #8]
 800b180:	9300      	str	r3, [sp, #0]
 800b182:	0023      	movs	r3, r4
 800b184:	f7ff fe8c 	bl	800aea0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 800b188:	4a03      	ldr	r2, [pc, #12]	; (800b198 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	601a      	str	r2, [r3, #0]
    {

    }
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	0018      	movs	r0, r3
 800b192:	46bd      	mov	sp, r7
 800b194:	b005      	add	sp, #20
 800b196:	bd90      	pop	{r4, r7, pc}
 800b198:	08016630 	.word	0x08016630

0800b19c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800b19c:	b580      	push	{r7, lr}
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	4b02      	ldr	r3, [pc, #8]	; (800b1ac <__tcf_0+0x10>)
 800b1a2:	0018      	movs	r0, r3
 800b1a4:	f000 f9ae 	bl	800b504 <_ZN12FrontendHeapD1Ev>
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}
 800b1ac:	200004bc 	.word	0x200004bc

0800b1b0 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 800b1b4:	4b0c      	ldr	r3, [pc, #48]	; (800b1e8 <_ZN12FrontendHeap11getInstanceEv+0x38>)
 800b1b6:	0018      	movs	r0, r3
 800b1b8:	f008 fde0 	bl	8013d7c <__cxa_guard_acquire>
 800b1bc:	0003      	movs	r3, r0
 800b1be:	1e5a      	subs	r2, r3, #1
 800b1c0:	4193      	sbcs	r3, r2
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d00b      	beq.n	800b1e0 <_ZN12FrontendHeap11getInstanceEv+0x30>
 800b1c8:	4b08      	ldr	r3, [pc, #32]	; (800b1ec <_ZN12FrontendHeap11getInstanceEv+0x3c>)
 800b1ca:	0018      	movs	r0, r3
 800b1cc:	f000 f86c 	bl	800b2a8 <_ZN12FrontendHeapC1Ev>
 800b1d0:	4b07      	ldr	r3, [pc, #28]	; (800b1f0 <_ZN12FrontendHeap11getInstanceEv+0x40>)
 800b1d2:	0018      	movs	r0, r3
 800b1d4:	f008 fe1c 	bl	8013e10 <atexit>
 800b1d8:	4b03      	ldr	r3, [pc, #12]	; (800b1e8 <_ZN12FrontendHeap11getInstanceEv+0x38>)
 800b1da:	0018      	movs	r0, r3
 800b1dc:	f008 fddb 	bl	8013d96 <__cxa_guard_release>
        return instance;
 800b1e0:	4b02      	ldr	r3, [pc, #8]	; (800b1ec <_ZN12FrontendHeap11getInstanceEv+0x3c>)
    }
 800b1e2:	0018      	movs	r0, r3
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}
 800b1e8:	20000730 	.word	0x20000730
 800b1ec:	200004bc 	.word	0x200004bc
 800b1f0:	0800b19d 	.word	0x0800b19d

0800b1f4 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	4a05      	ldr	r2, [pc, #20]	; (800b214 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	601a      	str	r2, [r3, #0]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	0018      	movs	r0, r3
 800b206:	f7ff fe69 	bl	800aedc <_ZN8touchgfx7MVPHeapD1Ev>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	0018      	movs	r0, r3
 800b20e:	46bd      	mov	sp, r7
 800b210:	b002      	add	sp, #8
 800b212:	bd80      	pop	{r7, pc}
 800b214:	08016630 	.word	0x08016630

0800b218 <_ZN16FrontendHeapBaseD0Ev>:
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	0018      	movs	r0, r3
 800b224:	f7ff ffe6 	bl	800b1f4 <_ZN16FrontendHeapBaseD1Ev>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2114      	movs	r1, #20
 800b22c:	0018      	movs	r0, r3
 800b22e:	f008 fda1 	bl	8013d74 <_ZdlPvj>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	0018      	movs	r0, r3
 800b236:	46bd      	mov	sp, r7
 800b238:	b002      	add	sp, #8
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	0018      	movs	r0, r3
 800b248:	f001 f806 	bl	800c258 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800b24c:	4a03      	ldr	r2, [pc, #12]	; (800b25c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	601a      	str	r2, [r3, #0]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	0018      	movs	r0, r3
 800b256:	46bd      	mov	sp, r7
 800b258:	b002      	add	sp, #8
 800b25a:	bd80      	pop	{r7, pc}
 800b25c:	080165fc 	.word	0x080165fc

0800b260 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	0018      	movs	r0, r3
 800b26c:	f000 fff4 	bl	800c258 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800b270:	4a03      	ldr	r2, [pc, #12]	; (800b280 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	601a      	str	r2, [r3, #0]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	0018      	movs	r0, r3
 800b27a:	46bd      	mov	sp, r7
 800b27c:	b002      	add	sp, #8
 800b27e:	bd80      	pop	{r7, pc}
 800b280:	080165c8 	.word	0x080165c8

0800b284 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	0018      	movs	r0, r3
 800b290:	f000 ffe2 	bl	800c258 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800b294:	4a03      	ldr	r2, [pc, #12]	; (800b2a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	601a      	str	r2, [r3, #0]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	0018      	movs	r0, r3
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	b002      	add	sp, #8
 800b2a2:	bd80      	pop	{r7, pc}
 800b2a4:	08016594 	.word	0x08016594

0800b2a8 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800b2a8:	b590      	push	{r4, r7, lr}
 800b2aa:	b085      	sub	sp, #20
 800b2ac:	af02      	add	r7, sp, #8
 800b2ae:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	3314      	adds	r3, #20
 800b2b6:	0019      	movs	r1, r3
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	332c      	adds	r3, #44	; 0x2c
 800b2bc:	001a      	movs	r2, r3
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	1c5c      	adds	r4, r3, #1
 800b2c2:	34ff      	adds	r4, #255	; 0xff
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	3319      	adds	r3, #25
 800b2c8:	33ff      	adds	r3, #255	; 0xff
                     app(model, *this)
 800b2ca:	9300      	str	r3, [sp, #0]
 800b2cc:	0023      	movs	r3, r4
 800b2ce:	f7ff ff4b 	bl	800b168 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800b2d2:	4a18      	ldr	r2, [pc, #96]	; (800b334 <_ZN12FrontendHeapC1Ev+0x8c>)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	601a      	str	r2, [r3, #0]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	3314      	adds	r3, #20
 800b2dc:	0018      	movs	r0, r3
 800b2de:	f7ff ffad 	bl	800b23c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	332c      	adds	r3, #44	; 0x2c
 800b2e6:	0018      	movs	r0, r3
 800b2e8:	f7ff ffba 	bl	800b260 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	33ff      	adds	r3, #255	; 0xff
 800b2f2:	0018      	movs	r0, r3
 800b2f4:	f7ff ffc6 	bl	800b284 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	3315      	adds	r3, #21
 800b2fc:	33ff      	adds	r3, #255	; 0xff
 800b2fe:	0018      	movs	r0, r3
 800b300:	f7fe fe4e 	bl	8009fa0 <_ZN5ModelC1Ev>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	3319      	adds	r3, #25
 800b308:	33ff      	adds	r3, #255	; 0xff
 800b30a:	0018      	movs	r0, r3
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	3315      	adds	r3, #21
 800b310:	33ff      	adds	r3, #255	; 0xff
 800b312:	687a      	ldr	r2, [r7, #4]
 800b314:	0019      	movs	r1, r3
 800b316:	f7fe fe2d 	bl	8009f74 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	3319      	adds	r3, #25
 800b320:	33ff      	adds	r3, #255	; 0xff
 800b322:	0019      	movs	r1, r3
 800b324:	0010      	movs	r0, r2
 800b326:	f7ff ff11 	bl	800b14c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	0018      	movs	r0, r3
 800b32e:	46bd      	mov	sp, r7
 800b330:	b003      	add	sp, #12
 800b332:	bd90      	pop	{r4, r7, pc}
 800b334:	08016580 	.word	0x08016580

0800b338 <_ZN8touchgfx15FlashDataReaderC1Ev>:
class FlashDataReader
 800b338:	b580      	push	{r7, lr}
 800b33a:	b082      	sub	sp, #8
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	4a03      	ldr	r2, [pc, #12]	; (800b350 <_ZN8touchgfx15FlashDataReaderC1Ev+0x18>)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	601a      	str	r2, [r3, #0]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	0018      	movs	r0, r3
 800b34a:	46bd      	mov	sp, r7
 800b34c:	b002      	add	sp, #8
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	0801640c 	.word	0x0801640c

0800b354 <_ZN27TouchGFXGeneratedDataReaderC1Ev>:
    TouchGFXGeneratedDataReader()
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
    {
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	0018      	movs	r0, r3
 800b360:	f7ff ffea 	bl	800b338 <_ZN8touchgfx15FlashDataReaderC1Ev>
 800b364:	4a03      	ldr	r2, [pc, #12]	; (800b374 <_ZN27TouchGFXGeneratedDataReaderC1Ev+0x20>)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	601a      	str	r2, [r3, #0]
    }
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	0018      	movs	r0, r3
 800b36e:	46bd      	mov	sp, r7
 800b370:	b002      	add	sp, #8
 800b372:	bd80      	pop	{r7, pc}
 800b374:	08016654 	.word	0x08016654

0800b378 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 800b378:	b590      	push	{r4, r7, lr}
 800b37a:	b087      	sub	sp, #28
 800b37c:	af02      	add	r7, sp, #8
 800b37e:	60f8      	str	r0, [r7, #12]
 800b380:	60b9      	str	r1, [r7, #8]
 800b382:	607a      	str	r2, [r7, #4]
 800b384:	603b      	str	r3, [r7, #0]
        reader(0)
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	683c      	ldr	r4, [r7, #0]
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	68b9      	ldr	r1, [r7, #8]
 800b38e:	2324      	movs	r3, #36	; 0x24
 800b390:	18fb      	adds	r3, r7, r3
 800b392:	881b      	ldrh	r3, [r3, #0]
 800b394:	9301      	str	r3, [sp, #4]
 800b396:	2320      	movs	r3, #32
 800b398:	18fb      	adds	r3, r7, r3
 800b39a:	881b      	ldrh	r3, [r3, #0]
 800b39c:	9300      	str	r3, [sp, #0]
 800b39e:	0023      	movs	r3, r4
 800b3a0:	f7ff fe10 	bl	800afc4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800b3a4:	4a05      	ldr	r2, [pc, #20]	; (800b3bc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x44>)
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	601a      	str	r2, [r3, #0]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	67da      	str	r2, [r3, #124]	; 0x7c
    }
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	0018      	movs	r0, r3
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	b005      	add	sp, #20
 800b3b8:	bd90      	pop	{r4, r7, pc}
 800b3ba:	46c0      	nop			; (mov r8, r8)
 800b3bc:	080166a0 	.word	0x080166a0

0800b3c0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800b3c0:	b590      	push	{r4, r7, lr}
 800b3c2:	b087      	sub	sp, #28
 800b3c4:	af02      	add	r7, sp, #8
 800b3c6:	60f8      	str	r0, [r7, #12]
 800b3c8:	60b9      	str	r1, [r7, #8]
 800b3ca:	607a      	str	r2, [r7, #4]
 800b3cc:	603b      	str	r3, [r7, #0]
 800b3ce:	68f8      	ldr	r0, [r7, #12]
 800b3d0:	683c      	ldr	r4, [r7, #0]
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	68b9      	ldr	r1, [r7, #8]
 800b3d6:	2324      	movs	r3, #36	; 0x24
 800b3d8:	18fb      	adds	r3, r7, r3
 800b3da:	881b      	ldrh	r3, [r3, #0]
 800b3dc:	9301      	str	r3, [sp, #4]
 800b3de:	2320      	movs	r3, #32
 800b3e0:	18fb      	adds	r3, r7, r3
 800b3e2:	881b      	ldrh	r3, [r3, #0]
 800b3e4:	9300      	str	r3, [sp, #0]
 800b3e6:	0023      	movs	r3, r4
 800b3e8:	f7ff ffc6 	bl	800b378 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800b3ec:	4a03      	ldr	r2, [pc, #12]	; (800b3fc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x3c>)
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	601a      	str	r2, [r3, #0]
    }
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	0018      	movs	r0, r3
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	b005      	add	sp, #20
 800b3fa:	bd90      	pop	{r4, r7, pc}
 800b3fc:	0801642c 	.word	0x0801642c

0800b400 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800b400:	b580      	push	{r7, lr}
 800b402:	b082      	sub	sp, #8
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	4a03      	ldr	r2, [pc, #12]	; (800b418 <_ZN8touchgfx15TouchControllerC1Ev+0x18>)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	601a      	str	r2, [r3, #0]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	0018      	movs	r0, r3
 800b412:	46bd      	mov	sp, r7
 800b414:	b002      	add	sp, #8
 800b416:	bd80      	pop	{r7, pc}
 800b418:	080163d4 	.word	0x080163d4

0800b41c <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b082      	sub	sp, #8
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	0018      	movs	r0, r3
 800b428:	f7ff ffea 	bl	800b400 <_ZN8touchgfx15TouchControllerC1Ev>
 800b42c:	4a03      	ldr	r2, [pc, #12]	; (800b43c <_ZN20STM32TouchControllerC1Ev+0x20>)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	601a      	str	r2, [r3, #0]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	0018      	movs	r0, r3
 800b436:	46bd      	mov	sp, r7
 800b438:	b002      	add	sp, #8
 800b43a:	bd80      	pop	{r7, pc}
 800b43c:	080163bc 	.word	0x080163bc

0800b440 <_ZN18TouchGFXDataReaderC1Ev>:
class TouchGFXDataReader : public TouchGFXGeneratedDataReader
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	0018      	movs	r0, r3
 800b44c:	f7ff ff82 	bl	800b354 <_ZN27TouchGFXGeneratedDataReaderC1Ev>
 800b450:	4a03      	ldr	r2, [pc, #12]	; (800b460 <_ZN18TouchGFXDataReaderC1Ev+0x20>)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	601a      	str	r2, [r3, #0]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	0018      	movs	r0, r3
 800b45a:	46bd      	mov	sp, r7
 800b45c:	b002      	add	sp, #8
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	080163ec 	.word	0x080163ec

0800b464 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 800b464:	b590      	push	{r4, r7, lr}
 800b466:	b085      	sub	sp, #20
 800b468:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800b46a:	f7fe fb57 	bl	8009b1c <_ZN14BitmapDatabase11getInstanceEv>
 800b46e:	0004      	movs	r4, r0
 800b470:	f7fe fb5c 	bl	8009b2c <_ZN14BitmapDatabase15getInstanceSizeEv>
 800b474:	0003      	movs	r3, r0
 800b476:	0019      	movs	r1, r3
 800b478:	2300      	movs	r3, #0
 800b47a:	9300      	str	r3, [sp, #0]
 800b47c:	2300      	movs	r3, #0
 800b47e:	2200      	movs	r2, #0
 800b480:	0020      	movs	r0, r4
 800b482:	f006 fa1b 	bl	80118bc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 800b486:	4b10      	ldr	r3, [pc, #64]	; (800b4c8 <touchgfx_init+0x64>)
 800b488:	0018      	movs	r0, r3
 800b48a:	f7ff fcf3 	bl	800ae74 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 800b48e:	2000      	movs	r0, #0
 800b490:	f7fe fc9c 	bl	8009dcc <_ZN8touchgfx5Texts11setLanguageEt>

    /*
     * Parse TouchGFXDataReader instance pointer to TouchGFXHAL and ApplicationFontProvider
     * in order to enable external data access.
     */
    hal.setDataReader(&dataReader);
 800b494:	4a0d      	ldr	r2, [pc, #52]	; (800b4cc <touchgfx_init+0x68>)
 800b496:	4b0e      	ldr	r3, [pc, #56]	; (800b4d0 <touchgfx_init+0x6c>)
 800b498:	0011      	movs	r1, r2
 800b49a:	0018      	movs	r0, r3
 800b49c:	f7ff f9ae 	bl	800a7fc <_ZN20TouchGFXGeneratedHAL13setDataReaderEPN8touchgfx15FlashDataReaderE>
    fontProvider.setFlashReader(&dataReader);
 800b4a0:	4b0a      	ldr	r3, [pc, #40]	; (800b4cc <touchgfx_init+0x68>)
 800b4a2:	0018      	movs	r0, r3
 800b4a4:	f7ff fcf4 	bl	800ae90 <_ZN23ApplicationFontProvider14setFlashReaderEPN8touchgfx15FlashDataReaderE>

    FontManager::setFontProvider(&fontProvider);
 800b4a8:	4b0a      	ldr	r3, [pc, #40]	; (800b4d4 <touchgfx_init+0x70>)
 800b4aa:	0018      	movs	r0, r3
 800b4ac:	f006 f968 	bl	8011780 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 800b4b0:	f7ff fe7e 	bl	800b1b0 <_ZN12FrontendHeap11getInstanceEv>
 800b4b4:	0003      	movs	r3, r0
 800b4b6:	607b      	str	r3, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800b4b8:	4b05      	ldr	r3, [pc, #20]	; (800b4d0 <touchgfx_init+0x6c>)
 800b4ba:	0018      	movs	r0, r3
 800b4bc:	f7ff fa04 	bl	800a8c8 <_ZN11TouchGFXHAL10initializeEv>
}
 800b4c0:	46c0      	nop			; (mov r8, r8)
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	b003      	add	sp, #12
 800b4c6:	bd90      	pop	{r4, r7, pc}
 800b4c8:	20000f90 	.word	0x20000f90
 800b4cc:	2000077c 	.word	0x2000077c
 800b4d0:	20000f94 	.word	0x20000f94
 800b4d4:	2000001c 	.word	0x2000001c

0800b4d8 <touchgfx_components_init>:

void touchgfx_components_init()
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	af00      	add	r7, sp, #0
}
 800b4dc:	46c0      	nop			; (mov r8, r8)
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
	...

0800b4e4 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	af00      	add	r7, sp, #0
    /*
     * Main event loop will check for VSYNC signal, and then process next frame.
     *
     * Note This function returns immediately if there is no VSYNC signal.
     */
    if (OSWrappers::isVSyncAvailable())
 800b4e8:	f7ff fb64 	bl	800abb4 <_ZN8touchgfx10OSWrappers16isVSyncAvailableEv>
 800b4ec:	1e03      	subs	r3, r0, #0
 800b4ee:	d003      	beq.n	800b4f8 <touchgfx_taskEntry+0x14>
    {
        hal.backPorchExited();
 800b4f0:	4b03      	ldr	r3, [pc, #12]	; (800b500 <touchgfx_taskEntry+0x1c>)
 800b4f2:	0018      	movs	r0, r3
 800b4f4:	f7ff f87a 	bl	800a5ec <_ZN8touchgfx3HAL15backPorchExitedEv>
    }
}
 800b4f8:	46c0      	nop			; (mov r8, r8)
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	46c0      	nop			; (mov r8, r8)
 800b500:	20000f94 	.word	0x20000f94

0800b504 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 800b504:	b580      	push	{r7, lr}
 800b506:	b082      	sub	sp, #8
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	4a10      	ldr	r2, [pc, #64]	; (800b550 <_ZN12FrontendHeapD1Ev+0x4c>)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	601a      	str	r2, [r3, #0]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	3319      	adds	r3, #25
 800b516:	33ff      	adds	r3, #255	; 0xff
 800b518:	0018      	movs	r0, r3
 800b51a:	f7fe fcf1 	bl	8009f00 <_ZN19FrontendApplicationD1Ev>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	3301      	adds	r3, #1
 800b522:	33ff      	adds	r3, #255	; 0xff
 800b524:	0018      	movs	r0, r3
 800b526:	f000 f829 	bl	800b57c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	332c      	adds	r3, #44	; 0x2c
 800b52e:	0018      	movs	r0, r3
 800b530:	f000 f848 	bl	800b5c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	3314      	adds	r3, #20
 800b538:	0018      	movs	r0, r3
 800b53a:	f000 f867 	bl	800b60c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	0018      	movs	r0, r3
 800b542:	f7ff fe57 	bl	800b1f4 <_ZN16FrontendHeapBaseD1Ev>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	0018      	movs	r0, r3
 800b54a:	46bd      	mov	sp, r7
 800b54c:	b002      	add	sp, #8
 800b54e:	bd80      	pop	{r7, pc}
 800b550:	08016580 	.word	0x08016580

0800b554 <_ZN12FrontendHeapD0Ev>:
 800b554:	b580      	push	{r7, lr}
 800b556:	b082      	sub	sp, #8
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	0018      	movs	r0, r3
 800b560:	f7ff ffd0 	bl	800b504 <_ZN12FrontendHeapD1Ev>
 800b564:	239d      	movs	r3, #157	; 0x9d
 800b566:	009a      	lsls	r2, r3, #2
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	0011      	movs	r1, r2
 800b56c:	0018      	movs	r0, r3
 800b56e:	f008 fc01 	bl	8013d74 <_ZdlPvj>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	0018      	movs	r0, r3
 800b576:	46bd      	mov	sp, r7
 800b578:	b002      	add	sp, #8
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b082      	sub	sp, #8
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	4a05      	ldr	r2, [pc, #20]	; (800b59c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	601a      	str	r2, [r3, #0]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	0018      	movs	r0, r3
 800b58e:	f000 fe62 	bl	800c256 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	0018      	movs	r0, r3
 800b596:	46bd      	mov	sp, r7
 800b598:	b002      	add	sp, #8
 800b59a:	bd80      	pop	{r7, pc}
 800b59c:	08016594 	.word	0x08016594

0800b5a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b082      	sub	sp, #8
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	0018      	movs	r0, r3
 800b5ac:	f7ff ffe6 	bl	800b57c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2114      	movs	r1, #20
 800b5b4:	0018      	movs	r0, r3
 800b5b6:	f008 fbdd 	bl	8013d74 <_ZdlPvj>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	0018      	movs	r0, r3
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	b002      	add	sp, #8
 800b5c2:	bd80      	pop	{r7, pc}

0800b5c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b082      	sub	sp, #8
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	4a05      	ldr	r2, [pc, #20]	; (800b5e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	601a      	str	r2, [r3, #0]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	0018      	movs	r0, r3
 800b5d6:	f000 fe3e 	bl	800c256 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	0018      	movs	r0, r3
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	b002      	add	sp, #8
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	080165c8 	.word	0x080165c8

0800b5e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	0018      	movs	r0, r3
 800b5f4:	f7ff ffe6 	bl	800b5c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	21d4      	movs	r1, #212	; 0xd4
 800b5fc:	0018      	movs	r0, r3
 800b5fe:	f008 fbb9 	bl	8013d74 <_ZdlPvj>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	0018      	movs	r0, r3
 800b606:	46bd      	mov	sp, r7
 800b608:	b002      	add	sp, #8
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	4a05      	ldr	r2, [pc, #20]	; (800b62c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	601a      	str	r2, [r3, #0]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	0018      	movs	r0, r3
 800b61e:	f000 fe1a 	bl	800c256 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	0018      	movs	r0, r3
 800b626:	46bd      	mov	sp, r7
 800b628:	b002      	add	sp, #8
 800b62a:	bd80      	pop	{r7, pc}
 800b62c:	080165fc 	.word	0x080165fc

0800b630 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	0018      	movs	r0, r3
 800b63c:	f7ff ffe6 	bl	800b60c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2118      	movs	r1, #24
 800b644:	0018      	movs	r0, r3
 800b646:	f008 fb95 	bl	8013d74 <_ZdlPvj>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	0018      	movs	r0, r3
 800b64e:	46bd      	mov	sp, r7
 800b650:	b002      	add	sp, #8
 800b652:	bd80      	pop	{r7, pc}

0800b654 <_ZN8touchgfx19LCD16bppSerialFlashD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bppSerialFlash : public LCD
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	4a05      	ldr	r2, [pc, #20]	; (800b674 <_ZN8touchgfx19LCD16bppSerialFlashD1Ev+0x20>)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	601a      	str	r2, [r3, #0]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	0018      	movs	r0, r3
 800b666:	f7ff fc59 	bl	800af1c <_ZN8touchgfx3LCDD1Ev>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	0018      	movs	r0, r3
 800b66e:	46bd      	mov	sp, r7
 800b670:	b002      	add	sp, #8
 800b672:	bd80      	pop	{r7, pc}
 800b674:	08016d6c 	.word	0x08016d6c

0800b678 <_ZN8touchgfx19LCD16bppSerialFlashD0Ev>:
 800b678:	b580      	push	{r7, lr}
 800b67a:	b082      	sub	sp, #8
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	0018      	movs	r0, r3
 800b684:	f7ff ffe6 	bl	800b654 <_ZN8touchgfx19LCD16bppSerialFlashD1Ev>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	218c      	movs	r1, #140	; 0x8c
 800b68c:	0018      	movs	r0, r3
 800b68e:	f008 fb71 	bl	8013d74 <_ZdlPvj>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	0018      	movs	r0, r3
 800b696:	46bd      	mov	sp, r7
 800b698:	b002      	add	sp, #8
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <_Z41__static_initialization_and_destruction_0ii>:
 800b69c:	b590      	push	{r4, r7, lr}
 800b69e:	b085      	sub	sp, #20
 800b6a0:	af02      	add	r7, sp, #8
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d121      	bne.n	800b6f0 <_Z41__static_initialization_and_destruction_0ii+0x54>
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	4a22      	ldr	r2, [pc, #136]	; (800b738 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d11d      	bne.n	800b6f0 <_Z41__static_initialization_and_destruction_0ii+0x54>
static STM32TouchController tc;
 800b6b4:	4b21      	ldr	r3, [pc, #132]	; (800b73c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800b6b6:	0018      	movs	r0, r3
 800b6b8:	f7ff feb0 	bl	800b41c <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 800b6bc:	4b20      	ldr	r3, [pc, #128]	; (800b740 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800b6be:	0018      	movs	r0, r3
 800b6c0:	f7ff fb38 	bl	800ad34 <_ZN8STM32DMAC1Ev>
static TouchGFXDataReader dataReader;
 800b6c4:	4b1f      	ldr	r3, [pc, #124]	; (800b744 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800b6c6:	0018      	movs	r0, r3
 800b6c8:	f7ff feba 	bl	800b440 <_ZN18TouchGFXDataReaderC1Ev>
static LCD16bppSerialFlash display(dataReader);
 800b6cc:	4a1d      	ldr	r2, [pc, #116]	; (800b744 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800b6ce:	4b1e      	ldr	r3, [pc, #120]	; (800b748 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800b6d0:	0011      	movs	r1, r2
 800b6d2:	0018      	movs	r0, r3
 800b6d4:	f006 ff5e 	bl	8012594 <_ZN8touchgfx19LCD16bppSerialFlashC1ERNS_15FlashDataReaderE>
static TouchGFXHAL hal(dma, display, tc, 240, 320);
 800b6d8:	4c18      	ldr	r4, [pc, #96]	; (800b73c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800b6da:	4a1b      	ldr	r2, [pc, #108]	; (800b748 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800b6dc:	4918      	ldr	r1, [pc, #96]	; (800b740 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800b6de:	481b      	ldr	r0, [pc, #108]	; (800b74c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800b6e0:	23a0      	movs	r3, #160	; 0xa0
 800b6e2:	005b      	lsls	r3, r3, #1
 800b6e4:	9301      	str	r3, [sp, #4]
 800b6e6:	23f0      	movs	r3, #240	; 0xf0
 800b6e8:	9300      	str	r3, [sp, #0]
 800b6ea:	0023      	movs	r3, r4
 800b6ec:	f7ff fe68 	bl	800b3c0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d11b      	bne.n	800b72e <_Z41__static_initialization_and_destruction_0ii+0x92>
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	4a0f      	ldr	r2, [pc, #60]	; (800b738 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d117      	bne.n	800b72e <_Z41__static_initialization_and_destruction_0ii+0x92>
 800b6fe:	4b13      	ldr	r3, [pc, #76]	; (800b74c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800b700:	0018      	movs	r0, r3
 800b702:	f7ff f9a3 	bl	800aa4c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 800b706:	4b12      	ldr	r3, [pc, #72]	; (800b750 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800b708:	0018      	movs	r0, r3
 800b70a:	f7fc fd07 	bl	800811c <_ZN23ApplicationFontProviderD1Ev>
static LCD16bppSerialFlash display(dataReader);
 800b70e:	4b0e      	ldr	r3, [pc, #56]	; (800b748 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800b710:	0018      	movs	r0, r3
 800b712:	f7ff ff9f 	bl	800b654 <_ZN8touchgfx19LCD16bppSerialFlashD1Ev>
static TouchGFXDataReader dataReader;
 800b716:	4b0b      	ldr	r3, [pc, #44]	; (800b744 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800b718:	0018      	movs	r0, r3
 800b71a:	f7fe fe37 	bl	800a38c <_ZN18TouchGFXDataReaderD1Ev>
static STM32DMA dma;
 800b71e:	4b08      	ldr	r3, [pc, #32]	; (800b740 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800b720:	0018      	movs	r0, r3
 800b722:	f7ff fb59 	bl	800add8 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 800b726:	4b05      	ldr	r3, [pc, #20]	; (800b73c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800b728:	0018      	movs	r0, r3
 800b72a:	f7fe fdc5 	bl	800a2b8 <_ZN20STM32TouchControllerD1Ev>
}
 800b72e:	46c0      	nop			; (mov r8, r8)
 800b730:	46bd      	mov	sp, r7
 800b732:	b003      	add	sp, #12
 800b734:	bd90      	pop	{r4, r7, pc}
 800b736:	46c0      	nop			; (mov r8, r8)
 800b738:	0000ffff 	.word	0x0000ffff
 800b73c:	20000734 	.word	0x20000734
 800b740:	20000738 	.word	0x20000738
 800b744:	2000077c 	.word	0x2000077c
 800b748:	20000f04 	.word	0x20000f04
 800b74c:	20000f94 	.word	0x20000f94
 800b750:	2000001c 	.word	0x2000001c

0800b754 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 800b75c:	2301      	movs	r3, #1
    }
 800b75e:	0018      	movs	r0, r3
 800b760:	46bd      	mov	sp, r7
 800b762:	b002      	add	sp, #8
 800b764:	bd80      	pop	{r7, pc}

0800b766 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 800b766:	b580      	push	{r7, lr}
 800b768:	b082      	sub	sp, #8
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 800b76e:	230c      	movs	r3, #12
    }
 800b770:	0018      	movs	r0, r3
 800b772:	46bd      	mov	sp, r7
 800b774:	b002      	add	sp, #8
 800b776:	bd80      	pop	{r7, pc}

0800b778 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	000a      	movs	r2, r1
 800b782:	1cbb      	adds	r3, r7, #2
 800b784:	801a      	strh	r2, [r3, #0]
    {
        return &stBlocks[index];
 800b786:	1cbb      	adds	r3, r7, #2
 800b788:	881a      	ldrh	r2, [r3, #0]
 800b78a:	0013      	movs	r3, r2
 800b78c:	005b      	lsls	r3, r3, #1
 800b78e:	189b      	adds	r3, r3, r2
 800b790:	009b      	lsls	r3, r3, #2
 800b792:	3308      	adds	r3, #8
 800b794:	687a      	ldr	r2, [r7, #4]
 800b796:	18d3      	adds	r3, r2, r3
    }
 800b798:	0018      	movs	r0, r3
 800b79a:	46bd      	mov	sp, r7
 800b79c:	b002      	add	sp, #8
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	000a      	movs	r2, r1
 800b7aa:	1cbb      	adds	r3, r7, #2
 800b7ac:	801a      	strh	r2, [r3, #0]
    {
        return &stBlocks[index];
 800b7ae:	1cbb      	adds	r3, r7, #2
 800b7b0:	881a      	ldrh	r2, [r3, #0]
 800b7b2:	0013      	movs	r3, r2
 800b7b4:	005b      	lsls	r3, r3, #1
 800b7b6:	189b      	adds	r3, r3, r2
 800b7b8:	009b      	lsls	r3, r3, #2
 800b7ba:	3308      	adds	r3, #8
 800b7bc:	687a      	ldr	r2, [r7, #4]
 800b7be:	18d3      	adds	r3, r2, r3
    }
 800b7c0:	0018      	movs	r0, r3
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	b002      	add	sp, #8
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b082      	sub	sp, #8
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800b7d0:	2301      	movs	r3, #1
    }
 800b7d2:	0018      	movs	r0, r3
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	b002      	add	sp, #8
 800b7d8:	bd80      	pop	{r7, pc}

0800b7da <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800b7da:	b580      	push	{r7, lr}
 800b7dc:	b082      	sub	sp, #8
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800b7e2:	23cc      	movs	r3, #204	; 0xcc
    }
 800b7e4:	0018      	movs	r0, r3
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	b002      	add	sp, #8
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	000a      	movs	r2, r1
 800b7f6:	1cbb      	adds	r3, r7, #2
 800b7f8:	801a      	strh	r2, [r3, #0]
        return &stBlocks[index];
 800b7fa:	1cbb      	adds	r3, r7, #2
 800b7fc:	881b      	ldrh	r3, [r3, #0]
 800b7fe:	22cc      	movs	r2, #204	; 0xcc
 800b800:	4353      	muls	r3, r2
 800b802:	3308      	adds	r3, #8
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	18d3      	adds	r3, r2, r3
    }
 800b808:	0018      	movs	r0, r3
 800b80a:	46bd      	mov	sp, r7
 800b80c:	b002      	add	sp, #8
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	000a      	movs	r2, r1
 800b81a:	1cbb      	adds	r3, r7, #2
 800b81c:	801a      	strh	r2, [r3, #0]
        return &stBlocks[index];
 800b81e:	1cbb      	adds	r3, r7, #2
 800b820:	881b      	ldrh	r3, [r3, #0]
 800b822:	22cc      	movs	r2, #204	; 0xcc
 800b824:	4353      	muls	r3, r2
 800b826:	3308      	adds	r3, #8
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	18d3      	adds	r3, r2, r3
    }
 800b82c:	0018      	movs	r0, r3
 800b82e:	46bd      	mov	sp, r7
 800b830:	b002      	add	sp, #8
 800b832:	bd80      	pop	{r7, pc}

0800b834 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800b83c:	2301      	movs	r3, #1
    }
 800b83e:	0018      	movs	r0, r3
 800b840:	46bd      	mov	sp, r7
 800b842:	b002      	add	sp, #8
 800b844:	bd80      	pop	{r7, pc}

0800b846 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800b846:	b580      	push	{r7, lr}
 800b848:	b082      	sub	sp, #8
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800b84e:	2310      	movs	r3, #16
    }
 800b850:	0018      	movs	r0, r3
 800b852:	46bd      	mov	sp, r7
 800b854:	b002      	add	sp, #8
 800b856:	bd80      	pop	{r7, pc}

0800b858 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	000a      	movs	r2, r1
 800b862:	1cbb      	adds	r3, r7, #2
 800b864:	801a      	strh	r2, [r3, #0]
        return &stBlocks[index];
 800b866:	1cbb      	adds	r3, r7, #2
 800b868:	881b      	ldrh	r3, [r3, #0]
 800b86a:	011b      	lsls	r3, r3, #4
 800b86c:	3308      	adds	r3, #8
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	18d3      	adds	r3, r2, r3
    }
 800b872:	0018      	movs	r0, r3
 800b874:	46bd      	mov	sp, r7
 800b876:	b002      	add	sp, #8
 800b878:	bd80      	pop	{r7, pc}

0800b87a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800b87a:	b580      	push	{r7, lr}
 800b87c:	b082      	sub	sp, #8
 800b87e:	af00      	add	r7, sp, #0
 800b880:	6078      	str	r0, [r7, #4]
 800b882:	000a      	movs	r2, r1
 800b884:	1cbb      	adds	r3, r7, #2
 800b886:	801a      	strh	r2, [r3, #0]
        return &stBlocks[index];
 800b888:	1cbb      	adds	r3, r7, #2
 800b88a:	881b      	ldrh	r3, [r3, #0]
 800b88c:	011b      	lsls	r3, r3, #4
 800b88e:	3308      	adds	r3, #8
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	18d3      	adds	r3, r2, r3
    }
 800b894:	0018      	movs	r0, r3
 800b896:	46bd      	mov	sp, r7
 800b898:	b002      	add	sp, #8
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <_GLOBAL__sub_I_touchgfx_init>:
 800b89c:	b580      	push	{r7, lr}
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	4b03      	ldr	r3, [pc, #12]	; (800b8b0 <_GLOBAL__sub_I_touchgfx_init+0x14>)
 800b8a2:	0019      	movs	r1, r3
 800b8a4:	2001      	movs	r0, #1
 800b8a6:	f7ff fef9 	bl	800b69c <_Z41__static_initialization_and_destruction_0ii>
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	46c0      	nop			; (mov r8, r8)
 800b8b0:	0000ffff 	.word	0x0000ffff

0800b8b4 <_GLOBAL__sub_D_touchgfx_init>:
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	4b03      	ldr	r3, [pc, #12]	; (800b8c8 <_GLOBAL__sub_D_touchgfx_init+0x14>)
 800b8ba:	0019      	movs	r1, r3
 800b8bc:	2000      	movs	r0, #0
 800b8be:	f7ff feed 	bl	800b69c <_Z41__static_initialization_and_destruction_0ii>
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	46c0      	nop			; (mov r8, r8)
 800b8c8:	0000ffff 	.word	0x0000ffff

0800b8cc <_ZN27TouchGFXGeneratedDataReader20addressIsAddressableEPKv>:
extern "C" void DataReader_WaitForReceiveDone();
extern "C" void DataReader_ReadData(uint32_t address24, uint8_t* buffer, uint32_t length);
extern "C" void DataReader_StartDMAReadData(uint32_t address24, uint8_t* buffer, uint32_t length);

bool TouchGFXGeneratedDataReader::addressIsAddressable(const void* address)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
    if (address >= (void*)MEM_BASE_ADDRESS && address < (void*)(MEM_BASE_ADDRESS + MEM_FLASH_SIZE))
 800b8d6:	683a      	ldr	r2, [r7, #0]
 800b8d8:	2390      	movs	r3, #144	; 0x90
 800b8da:	061b      	lsls	r3, r3, #24
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d305      	bcc.n	800b8ec <_ZN27TouchGFXGeneratedDataReader20addressIsAddressableEPKv+0x20>
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	4a05      	ldr	r2, [pc, #20]	; (800b8f8 <_ZN27TouchGFXGeneratedDataReader20addressIsAddressableEPKv+0x2c>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d801      	bhi.n	800b8ec <_ZN27TouchGFXGeneratedDataReader20addressIsAddressableEPKv+0x20>
    {
        return false;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	e000      	b.n	800b8ee <_ZN27TouchGFXGeneratedDataReader20addressIsAddressableEPKv+0x22>
    }

    return true;
 800b8ec:	2301      	movs	r3, #1
}
 800b8ee:	0018      	movs	r0, r3
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	b002      	add	sp, #8
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	46c0      	nop			; (mov r8, r8)
 800b8f8:	907fffff 	.word	0x907fffff

0800b8fc <_ZN27TouchGFXGeneratedDataReader8copyDataEPKvPvm>:

void TouchGFXGeneratedDataReader::copyData(const void* src, void* dst, uint32_t bytes)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b084      	sub	sp, #16
 800b900:	af00      	add	r7, sp, #0
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	60b9      	str	r1, [r7, #8]
 800b906:	607a      	str	r2, [r7, #4]
 800b908:	603b      	str	r3, [r7, #0]
    /* If requested number of bytes are less than 250
     * CPU and polling will be used to read from flash.
     * If number of bytes requested is larger than 250
     * a DMA transfer will be started.
     */
    if (bytes < 250)
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	2bf9      	cmp	r3, #249	; 0xf9
 800b90e:	d806      	bhi.n	800b91e <_ZN27TouchGFXGeneratedDataReader8copyDataEPKvPvm+0x22>
    {
        /* Start transfer using the CPU */
        DataReader_ReadData((uint32_t)src, (uint8_t*)dst, bytes);
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	683a      	ldr	r2, [r7, #0]
 800b914:	6879      	ldr	r1, [r7, #4]
 800b916:	0018      	movs	r0, r3
 800b918:	f7f6 f928 	bl	8001b6c <DataReader_ReadData>
        DataReader_StartDMAReadData((uint32_t)src, (uint8_t*)dst, bytes);

        /* Wait on data transmision complete */
        DataReader_WaitForReceiveDone();
    }
}
 800b91c:	e007      	b.n	800b92e <_ZN27TouchGFXGeneratedDataReader8copyDataEPKvPvm+0x32>
        DataReader_StartDMAReadData((uint32_t)src, (uint8_t*)dst, bytes);
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	683a      	ldr	r2, [r7, #0]
 800b922:	6879      	ldr	r1, [r7, #4]
 800b924:	0018      	movs	r0, r3
 800b926:	f7f6 f931 	bl	8001b8c <DataReader_StartDMAReadData>
        DataReader_WaitForReceiveDone();
 800b92a:	f7f6 f93f 	bl	8001bac <DataReader_WaitForReceiveDone>
}
 800b92e:	46c0      	nop			; (mov r8, r8)
 800b930:	46bd      	mov	sp, r7
 800b932:	b004      	add	sp, #16
 800b934:	bd80      	pop	{r7, pc}
	...

0800b938 <_ZN27TouchGFXGeneratedDataReader18startFlashLineReadEPKvm>:

void TouchGFXGeneratedDataReader::startFlashLineRead(const void* src, uint32_t bytes)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	607a      	str	r2, [r7, #4]
    /* Start transfer using DMA */
    DataReader_StartDMAReadData((uint32_t)src, (readToBuffer1 ? buffer1 : buffer2), bytes);
 800b944:	68b8      	ldr	r0, [r7, #8]
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	4a09      	ldr	r2, [pc, #36]	; (800b970 <_ZN27TouchGFXGeneratedDataReader18startFlashLineReadEPKvm+0x38>)
 800b94a:	5c9b      	ldrb	r3, [r3, r2]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d002      	beq.n	800b956 <_ZN27TouchGFXGeneratedDataReader18startFlashLineReadEPKvm+0x1e>
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	3304      	adds	r3, #4
 800b954:	e004      	b.n	800b960 <_ZN27TouchGFXGeneratedDataReader18startFlashLineReadEPKvm+0x28>
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	22f1      	movs	r2, #241	; 0xf1
 800b95a:	0092      	lsls	r2, r2, #2
 800b95c:	4694      	mov	ip, r2
 800b95e:	4463      	add	r3, ip
 800b960:	687a      	ldr	r2, [r7, #4]
 800b962:	0019      	movs	r1, r3
 800b964:	f7f6 f912 	bl	8001b8c <DataReader_StartDMAReadData>
}
 800b968:	46c0      	nop			; (mov r8, r8)
 800b96a:	46bd      	mov	sp, r7
 800b96c:	b004      	add	sp, #16
 800b96e:	bd80      	pop	{r7, pc}
 800b970:	00000784 	.word	0x00000784

0800b974 <_ZN27TouchGFXGeneratedDataReader21waitFlashReadCompleteEv>:

const uint8_t* TouchGFXGeneratedDataReader::waitFlashReadComplete()
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b084      	sub	sp, #16
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
    /*
     * Switch line buffer and then wait for transmission to complete before returning new buffer.
     */
    uint8_t* readBuffer = readToBuffer1 ? buffer1 : buffer2;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	4a0e      	ldr	r2, [pc, #56]	; (800b9b8 <_ZN27TouchGFXGeneratedDataReader21waitFlashReadCompleteEv+0x44>)
 800b980:	5c9b      	ldrb	r3, [r3, r2]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d002      	beq.n	800b98c <_ZN27TouchGFXGeneratedDataReader21waitFlashReadCompleteEv+0x18>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	3304      	adds	r3, #4
 800b98a:	e004      	b.n	800b996 <_ZN27TouchGFXGeneratedDataReader21waitFlashReadCompleteEv+0x22>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	22f1      	movs	r2, #241	; 0xf1
 800b990:	0092      	lsls	r2, r2, #2
 800b992:	4694      	mov	ip, r2
 800b994:	4463      	add	r3, ip
 800b996:	60fb      	str	r3, [r7, #12]
    DataReader_WaitForReceiveDone();
 800b998:	f7f6 f908 	bl	8001bac <DataReader_WaitForReceiveDone>
    readToBuffer1 = !readToBuffer1;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	4a06      	ldr	r2, [pc, #24]	; (800b9b8 <_ZN27TouchGFXGeneratedDataReader21waitFlashReadCompleteEv+0x44>)
 800b9a0:	5c9b      	ldrb	r3, [r3, r2]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	4053      	eors	r3, r2
 800b9a6:	b2d9      	uxtb	r1, r3
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	4a03      	ldr	r2, [pc, #12]	; (800b9b8 <_ZN27TouchGFXGeneratedDataReader21waitFlashReadCompleteEv+0x44>)
 800b9ac:	5499      	strb	r1, [r3, r2]
    return readBuffer;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
}
 800b9b0:	0018      	movs	r0, r3
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	b004      	add	sp, #16
 800b9b6:	bd80      	pop	{r7, pc}
 800b9b8:	00000784 	.word	0x00000784

0800b9bc <_ZN8touchgfx20FrameBufferAllocatorD1Ev>:
     * transferred and ready to reuse.
     */
    virtual void freeBlockAfterTransfer() = 0;

    /** Finalizes an instance of the FrameBufferAllocator class. */
    virtual ~FrameBufferAllocator()
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b082      	sub	sp, #8
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
    {
 800b9c4:	4a03      	ldr	r2, [pc, #12]	; (800b9d4 <_ZN8touchgfx20FrameBufferAllocatorD1Ev+0x18>)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	601a      	str	r2, [r3, #0]
    }
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	0018      	movs	r0, r3
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	b002      	add	sp, #8
 800b9d2:	bd80      	pop	{r7, pc}
 800b9d4:	08016780 	.word	0x08016780

0800b9d8 <_ZN8touchgfx20FrameBufferAllocatorD0Ev>:
    virtual ~FrameBufferAllocator()
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b082      	sub	sp, #8
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
    }
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	0018      	movs	r0, r3
 800b9e4:	f7ff ffea 	bl	800b9bc <_ZN8touchgfx20FrameBufferAllocatorD1Ev>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2104      	movs	r1, #4
 800b9ec:	0018      	movs	r0, r3
 800b9ee:	f008 f9c1 	bl	8013d74 <_ZdlPvj>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	0018      	movs	r0, r3
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	b002      	add	sp, #8
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b082      	sub	sp, #8
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	226a      	movs	r2, #106	; 0x6a
 800ba08:	5c9b      	ldrb	r3, [r3, r2]
 800ba0a:	3301      	adds	r3, #1
 800ba0c:	b2d9      	uxtb	r1, r3
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	226a      	movs	r2, #106	; 0x6a
 800ba12:	5499      	strb	r1, [r3, r2]
    }
 800ba14:	46c0      	nop			; (mov r8, r8)
 800ba16:	46bd      	mov	sp, r7
 800ba18:	b002      	add	sp, #8
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <_ZN8touchgfx3HAL23setFrameBufferAllocatorEPNS_20FrameBufferAllocatorE>:
    void setFrameBufferAllocator(FrameBufferAllocator* allocator)
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b082      	sub	sp, #8
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	6039      	str	r1, [r7, #0]
        frameBufferAllocator = allocator;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	683a      	ldr	r2, [r7, #0]
 800ba2a:	619a      	str	r2, [r3, #24]
    }
 800ba2c:	46c0      	nop			; (mov r8, r8)
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	b002      	add	sp, #8
 800ba32:	bd80      	pop	{r7, pc}

0800ba34 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b082      	sub	sp, #8
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	000a      	movs	r2, r1
 800ba3e:	1cfb      	adds	r3, r7, #3
 800ba40:	701a      	strb	r2, [r3, #0]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 800ba42:	1cfb      	adds	r3, r7, #3
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d003      	beq.n	800ba52 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x1e>
 800ba4a:	1cfb      	adds	r3, r7, #3
 800ba4c:	781b      	ldrb	r3, [r3, #0]
 800ba4e:	2b02      	cmp	r3, #2
 800ba50:	d106      	bne.n	800ba60 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x2c>
            refreshStrategy = s;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	1cfa      	adds	r2, r7, #3
 800ba56:	2148      	movs	r1, #72	; 0x48
 800ba58:	7812      	ldrb	r2, [r2, #0]
 800ba5a:	545a      	strb	r2, [r3, r1]
            return true;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e029      	b.n	800bab4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x80>
        if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 800ba60:	1cfb      	adds	r3, r7, #3
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	d124      	bne.n	800bab2 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7e>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d014      	beq.n	800ba9a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x66>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	339c      	adds	r3, #156	; 0x9c
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	687a      	ldr	r2, [r7, #4]
 800ba7a:	0010      	movs	r0, r2
 800ba7c:	4798      	blx	r3
 800ba7e:	0003      	movs	r3, r0
 800ba80:	001a      	movs	r2, r3
 800ba82:	4b0e      	ldr	r3, [pc, #56]	; (800babc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x88>)
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d008      	beq.n	800ba9a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x66>
 800ba88:	4b0d      	ldr	r3, [pc, #52]	; (800bac0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x8c>)
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	4053      	eors	r3, r2
 800ba90:	b2db      	uxtb	r3, r3
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d001      	beq.n	800ba9a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x66>
 800ba96:	2301      	movs	r3, #1
 800ba98:	e000      	b.n	800ba9c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x68>
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d006      	beq.n	800baae <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7a>
                refreshStrategy = s;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	1cfa      	adds	r2, r7, #3
 800baa4:	2148      	movs	r1, #72	; 0x48
 800baa6:	7812      	ldrb	r2, [r2, #0]
 800baa8:	545a      	strb	r2, [r3, r1]
                return true;
 800baaa:	2301      	movs	r3, #1
 800baac:	e002      	b.n	800bab4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x80>
            return false;
 800baae:	2300      	movs	r3, #0
 800bab0:	e000      	b.n	800bab4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x80>
        return false;
 800bab2:	2300      	movs	r3, #0
    }
 800bab4:	0018      	movs	r0, r3
 800bab6:	46bd      	mov	sp, r7
 800bab8:	b002      	add	sp, #8
 800baba:	bd80      	pop	{r7, pc}
 800babc:	0000ffff 	.word	0x0000ffff
 800bac0:	200026c6 	.word	0x200026c6

0800bac4 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
       3, /* number of blocks */
       2 /* bytes per pixel */
       > blockAllocator;

void TouchGFXGeneratedHAL::initialize()
{
 800bac4:	b5b0      	push	{r4, r5, r7, lr}
 800bac6:	b082      	sub	sp, #8
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	0018      	movs	r0, r3
 800bad0:	f000 ffa5 	bl	800ca1e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 800bad4:	687d      	ldr	r5, [r7, #4]
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	3364      	adds	r3, #100	; 0x64
 800badc:	681c      	ldr	r4, [r3, #0]
 800bade:	f003 f92f 	bl	800ed40 <_ZN8touchgfx11Application11getInstanceEv>
 800bae2:	0003      	movs	r3, r0
 800bae4:	0019      	movs	r1, r3
 800bae6:	0028      	movs	r0, r5
 800bae8:	47a0      	blx	r4
    enableLCDControllerInterrupt();
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	3380      	adds	r3, #128	; 0x80
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	0010      	movs	r0, r2
 800baf6:	4798      	blx	r3
    enableInterrupts();
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	3378      	adds	r3, #120	; 0x78
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	687a      	ldr	r2, [r7, #4]
 800bb02:	0010      	movs	r0, r2
 800bb04:	4798      	blx	r3
    // Partial framebuffer strategy
    setFrameBufferAllocator(&blockAllocator);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	4a06      	ldr	r2, [pc, #24]	; (800bb24 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 800bb0a:	0011      	movs	r1, r2
 800bb0c:	0018      	movs	r0, r3
 800bb0e:	f7ff ff85 	bl	800ba1c <_ZN8touchgfx3HAL23setFrameBufferAllocatorEPNS_20FrameBufferAllocatorE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2102      	movs	r1, #2
 800bb16:	0018      	movs	r0, r3
 800bb18:	f7ff ff8c 	bl	800ba34 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
}
 800bb1c:	46c0      	nop			; (mov r8, r8)
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	b002      	add	sp, #8
 800bb22:	bdb0      	pop	{r4, r5, r7, pc}
 800bb24:	20001014 	.word	0x20001014

0800bb28 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b082      	sub	sp, #8
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
}
 800bb30:	46c0      	nop			; (mov r8, r8)
 800bb32:	46bd      	mov	sp, r7
 800bb34:	b002      	add	sp, #8
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
}
 800bb40:	46c0      	nop			; (mov r8, r8)
 800bb42:	46bd      	mov	sp, r7
 800bb44:	b002      	add	sp, #8
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b082      	sub	sp, #8
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
}
 800bb50:	46c0      	nop			; (mov r8, r8)
 800bb52:	46bd      	mov	sp, r7
 800bb54:	b002      	add	sp, #8
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
}
 800bb60:	46c0      	nop			; (mov r8, r8)
 800bb62:	46bd      	mov	sp, r7
 800bb64:	b002      	add	sp, #8
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	0018      	movs	r0, r3
 800bb74:	f000 ff38 	bl	800c9e8 <_ZN8touchgfx3HAL10beginFrameEv>
 800bb78:	0003      	movs	r3, r0
}
 800bb7a:	0018      	movs	r0, r3
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	b002      	add	sp, #8
 800bb80:	bd80      	pop	{r7, pc}

0800bb82 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 800bb82:	b580      	push	{r7, lr}
 800bb84:	b082      	sub	sp, #8
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
    // We must guard the next frame until we're done transferring all blocks over our display interface
    // through either a semaphore if user is running an OS or a simple variable if not
    PartialFrameBufferManager::transmitRemainingBlocks();
 800bb8a:	f000 fe17 	bl	800c7bc <_ZN8touchgfx25PartialFrameBufferManager23transmitRemainingBlocksEv>
    HAL::endFrame();
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	0018      	movs	r0, r3
 800bb92:	f000 ff35 	bl	800ca00 <_ZN8touchgfx3HAL8endFrameEv>
    touchgfx::OSWrappers::signalRenderingDone();
 800bb96:	f7ff f803 	bl	800aba0 <_ZN8touchgfx10OSWrappers19signalRenderingDoneEv>
}
 800bb9a:	46c0      	nop			; (mov r8, r8)
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	b002      	add	sp, #8
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    fbPtr += rect.y * lcd().framebufferStride() + rect.x * 2;
    return fbPtr;
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 800bba2:	b580      	push	{r7, lr}
 800bba4:	b082      	sub	sp, #8
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]
    //getTFTFrameBuffer() not used for selected Frame Buffer Strategy
    return 0;
 800bbaa:	2300      	movs	r3, #0
}
 800bbac:	0018      	movs	r0, r3
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	b002      	add	sp, #8
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b082      	sub	sp, #8
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 800bbbe:	46c0      	nop			; (mov r8, r8)
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	b002      	add	sp, #8
 800bbc4:	bd80      	pop	{r7, pc}

0800bbc6 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800bbc6:	b580      	push	{r7, lr}
 800bbc8:	b082      	sub	sp, #8
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
 800bbce:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	683a      	ldr	r2, [r7, #0]
 800bbd4:	0011      	movs	r1, r2
 800bbd6:	0018      	movs	r0, r3
 800bbd8:	f000 febf 	bl	800c95a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // Try transmitting a block
    PartialFrameBufferManager::tryTransmitBlock();
 800bbdc:	f000 fe32 	bl	800c844 <_ZN8touchgfx25PartialFrameBufferManager16tryTransmitBlockEv>
}
 800bbe0:	46c0      	nop			; (mov r8, r8)
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	b002      	add	sp, #8
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800bbe8:	b590      	push	{r4, r7, lr}
 800bbea:	b085      	sub	sp, #20
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	60f8      	str	r0, [r7, #12]
 800bbf0:	60b9      	str	r1, [r7, #8]
 800bbf2:	607a      	str	r2, [r7, #4]
 800bbf4:	603b      	str	r3, [r7, #0]
    // If requested address is addressable use TouchGFXDataReader to retrive the data
    if (reader != NULL && (static_cast<TouchGFXDataReader*>(reader)->addressIsAddressable(src) == false))
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d00d      	beq.n	800bc1a <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm+0x32>
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	3308      	adds	r3, #8
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	6879      	ldr	r1, [r7, #4]
 800bc0e:	0010      	movs	r0, r2
 800bc10:	4798      	blx	r3
 800bc12:	1e03      	subs	r3, r0, #0
 800bc14:	d101      	bne.n	800bc1a <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm+0x32>
 800bc16:	2301      	movs	r3, #1
 800bc18:	e000      	b.n	800bc1c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm+0x34>
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d00c      	beq.n	800bc3a <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm+0x52>
    {
        static_cast<TouchGFXDataReader*>(reader)->copyData(src, dest, numBytes);
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	330c      	adds	r3, #12
 800bc2c:	681c      	ldr	r4, [r3, #0]
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	68ba      	ldr	r2, [r7, #8]
 800bc32:	6879      	ldr	r1, [r7, #4]
 800bc34:	47a0      	blx	r4
        return true;
 800bc36:	2301      	movs	r3, #1
 800bc38:	e007      	b.n	800bc4a <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm+0x62>
    }
    return HAL::blockCopy(dest, src, numBytes);
 800bc3a:	68f8      	ldr	r0, [r7, #12]
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	68b9      	ldr	r1, [r7, #8]
 800bc42:	f001 f81e 	bl	800cc82 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 800bc46:	0003      	movs	r3, r0
 800bc48:	46c0      	nop			; (mov r8, r8)
}
 800bc4a:	0018      	movs	r0, r3
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	b005      	add	sp, #20
 800bc50:	bd90      	pop	{r4, r7, pc}

0800bc52 <_ZN8touchgfx34FrameBufferAllocatorWaitOnTransferEv>:
/**
 * This function is called by FrameBufferAllocator if no block is
 * available.
 */
void FrameBufferAllocatorWaitOnTransfer()
{
 800bc52:	b580      	push	{r7, lr}
 800bc54:	af00      	add	r7, sp, #0
    /* NOTE: This function should not be modified, when the fuction is needed,
     *       FrameBufferAllocatorWaitOnTransfer should be implemented in the user file
     */
}
 800bc56:	46c0      	nop			; (mov r8, r8)
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}

0800bc5c <_ZN8touchgfx36FrameBufferAllocatorSignalBlockDrawnEv>:
 * Called by FrameBufferAllocator when a block is drawn and
 * therefore ready for transfer. The LCD driver should use this
 * method to start a transfer.
 */
void FrameBufferAllocatorSignalBlockDrawn()
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	af00      	add	r7, sp, #0
    /* NOTE: This function should not be modified, when the fuction is needed,
     *       FrameBufferAllocatorSignalBlockDrawn should be implemented in the user file
     */
}
 800bc60:	46c0      	nop			; (mov r8, r8)
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}

0800bc66 <_ZN8touchgfx14transmitActiveEv>:

/**
 * Check if a Frame Buffer Block is beeing transmitted.
 */
int transmitActive()
{
 800bc66:	b580      	push	{r7, lr}
 800bc68:	af00      	add	r7, sp, #0
    return touchgfxDisplayDriverTransmitActive();
 800bc6a:	f7f6 faf5 	bl	8002258 <touchgfxDisplayDriverTransmitActive>
 800bc6e:	0003      	movs	r3, r0
}
 800bc70:	0018      	movs	r0, r3
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}

0800bc76 <_ZN8touchgfx19shouldTransferBlockEt>:

/**
 * Check if a Frame Buffer Block ending at bottom should be transferred.
 */
int shouldTransferBlock(uint16_t bottom)
{
 800bc76:	b580      	push	{r7, lr}
 800bc78:	b082      	sub	sp, #8
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	0002      	movs	r2, r0
 800bc7e:	1dbb      	adds	r3, r7, #6
 800bc80:	801a      	strh	r2, [r3, #0]
    return touchgfxDisplayDriverShouldTransferBlock(bottom);
 800bc82:	1dbb      	adds	r3, r7, #6
 800bc84:	881b      	ldrh	r3, [r3, #0]
 800bc86:	0018      	movs	r0, r3
 800bc88:	f7f6 fb8c 	bl	80023a4 <touchgfxDisplayDriverShouldTransferBlock>
 800bc8c:	0003      	movs	r3, r0
}
 800bc8e:	0018      	movs	r0, r3
 800bc90:	46bd      	mov	sp, r7
 800bc92:	b002      	add	sp, #8
 800bc94:	bd80      	pop	{r7, pc}

0800bc96 <_ZN8touchgfx13transmitBlockEPKhtttt>:

/**
 * Transmit a Frame Buffer Block.
 */
void transmitBlock(const uint8_t* pixels, uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
 800bc96:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc98:	b087      	sub	sp, #28
 800bc9a:	af02      	add	r7, sp, #8
 800bc9c:	60f8      	str	r0, [r7, #12]
 800bc9e:	000c      	movs	r4, r1
 800bca0:	0010      	movs	r0, r2
 800bca2:	0019      	movs	r1, r3
 800bca4:	250a      	movs	r5, #10
 800bca6:	197b      	adds	r3, r7, r5
 800bca8:	1c22      	adds	r2, r4, #0
 800bcaa:	801a      	strh	r2, [r3, #0]
 800bcac:	2608      	movs	r6, #8
 800bcae:	19bb      	adds	r3, r7, r6
 800bcb0:	1c02      	adds	r2, r0, #0
 800bcb2:	801a      	strh	r2, [r3, #0]
 800bcb4:	1dbb      	adds	r3, r7, #6
 800bcb6:	1c0a      	adds	r2, r1, #0
 800bcb8:	801a      	strh	r2, [r3, #0]
    touchgfxDisplayDriverTransmitBlock(pixels, x, y, w, h);
 800bcba:	1dbb      	adds	r3, r7, #6
 800bcbc:	881c      	ldrh	r4, [r3, #0]
 800bcbe:	19bb      	adds	r3, r7, r6
 800bcc0:	881a      	ldrh	r2, [r3, #0]
 800bcc2:	197b      	adds	r3, r7, r5
 800bcc4:	8819      	ldrh	r1, [r3, #0]
 800bcc6:	68f8      	ldr	r0, [r7, #12]
 800bcc8:	2320      	movs	r3, #32
 800bcca:	2508      	movs	r5, #8
 800bccc:	195b      	adds	r3, r3, r5
 800bcce:	19db      	adds	r3, r3, r7
 800bcd0:	881b      	ldrh	r3, [r3, #0]
 800bcd2:	9300      	str	r3, [sp, #0]
 800bcd4:	0023      	movs	r3, r4
 800bcd6:	f7f6 fac9 	bl	800226c <touchgfxDisplayDriverTransmitBlock>
}
 800bcda:	46c0      	nop			; (mov r8, r8)
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	b005      	add	sp, #20
 800bce0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bce2 <DisplayDriver_TransferCompleteCallback>:

extern "C"
void DisplayDriver_TransferCompleteCallback()
{
 800bce2:	b580      	push	{r7, lr}
 800bce4:	af00      	add	r7, sp, #0
    // After completed transmission start new transfer if blocks are ready.
    PartialFrameBufferManager::tryTransmitBlockFromIRQ();
 800bce6:	f000 fdf5 	bl	800c8d4 <_ZN8touchgfx25PartialFrameBufferManager23tryTransmitBlockFromIRQEv>
}
 800bcea:	46c0      	nop			; (mov r8, r8)
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}

0800bcf0 <touchgfxSignalVSync>:
}

extern "C"
void touchgfxSignalVSync(void)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	af00      	add	r7, sp, #0
    /* VSync has occurred, increment TouchGFX engine vsync counter */
    touchgfx::HAL::getInstance()->vSync();
 800bcf4:	f7f5 fbdc 	bl	80014b0 <_ZN8touchgfx3HAL11getInstanceEv>
 800bcf8:	0003      	movs	r3, r0
 800bcfa:	0018      	movs	r0, r3
 800bcfc:	f7ff fe7e 	bl	800b9fc <_ZN8touchgfx3HAL5vSyncEv>

    /* VSync has occurred, signal TouchGFX engine */
    touchgfx::OSWrappers::signalVSync();
 800bd00:	f7fe ff44 	bl	800ab8c <_ZN8touchgfx10OSWrappers11signalVSyncEv>
}
 800bd04:	46c0      	nop			; (mov r8, r8)
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
	...

0800bd0c <_ZN8touchgfx20FrameBufferAllocatorC1Ev>:
class FrameBufferAllocator
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	4a03      	ldr	r2, [pc, #12]	; (800bd24 <_ZN8touchgfx20FrameBufferAllocatorC1Ev+0x18>)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	601a      	str	r2, [r3, #0]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	0018      	movs	r0, r3
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	b002      	add	sp, #8
 800bd22:	bd80      	pop	{r7, pc}
 800bd24:	08016780 	.word	0x08016780

0800bd28 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev>:
 */
template <uint32_t block_size, uint32_t blocks, uint32_t bytes_pr_pixel>
class ManyBlockAllocator : public FrameBufferAllocator
{
public:
    ManyBlockAllocator()
 800bd28:	b5b0      	push	{r4, r5, r7, lr}
 800bd2a:	b084      	sub	sp, #16
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
    {
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	0018      	movs	r0, r3
 800bd34:	f7ff ffea 	bl	800bd0c <_ZN8touchgfx20FrameBufferAllocatorC1Ev>
 800bd38:	4a17      	ldr	r2, [pc, #92]	; (800bd98 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x70>)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	601a      	str	r2, [r3, #0]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	4a16      	ldr	r2, [pc, #88]	; (800bd9c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x74>)
 800bd42:	4694      	mov	ip, r2
 800bd44:	4463      	add	r3, ip
 800bd46:	2402      	movs	r4, #2
 800bd48:	001d      	movs	r5, r3
 800bd4a:	e004      	b.n	800bd56 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x2e>
 800bd4c:	0028      	movs	r0, r5
 800bd4e:	f7fd f9cc 	bl	80090ea <_ZN8touchgfx4RectC1Ev>
 800bd52:	3508      	adds	r5, #8
 800bd54:	3c01      	subs	r4, #1
 800bd56:	2c00      	cmp	r4, #0
 800bd58:	daf8      	bge.n	800bd4c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x24>
        sendingBlock = -1;
 800bd5a:	687a      	ldr	r2, [r7, #4]
 800bd5c:	23b5      	movs	r3, #181	; 0xb5
 800bd5e:	015b      	lsls	r3, r3, #5
 800bd60:	2101      	movs	r1, #1
 800bd62:	4249      	negs	r1, r1
 800bd64:	50d1      	str	r1, [r2, r3]
        drawingBlock = -1;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	490d      	ldr	r1, [pc, #52]	; (800bda0 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x78>)
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	4252      	negs	r2, r2
 800bd6e:	505a      	str	r2, [r3, r1]
        for (uint32_t i = 0; i < blocks; i++)
 800bd70:	2300      	movs	r3, #0
 800bd72:	60fb      	str	r3, [r7, #12]
 800bd74:	e008      	b.n	800bd88 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x60>
        {
            state[i] = EMPTY;
 800bd76:	687a      	ldr	r2, [r7, #4]
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	18d3      	adds	r3, r2, r3
 800bd7c:	3304      	adds	r3, #4
 800bd7e:	2200      	movs	r2, #0
 800bd80:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < blocks; i++)
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	3301      	adds	r3, #1
 800bd86:	60fb      	str	r3, [r7, #12]
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2b02      	cmp	r3, #2
 800bd8c:	d9f3      	bls.n	800bd76 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x4e>
        }
    }
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	0018      	movs	r0, r3
 800bd92:	46bd      	mov	sp, r7
 800bd94:	b004      	add	sp, #16
 800bd96:	bdb0      	pop	{r4, r5, r7, pc}
 800bd98:	08016674 	.word	0x08016674
 800bd9c:	00001688 	.word	0x00001688
 800bda0:	000016a4 	.word	0x000016a4

0800bda4 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED1Ev>:
class ManyBlockAllocator : public FrameBufferAllocator
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b082      	sub	sp, #8
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	4a05      	ldr	r2, [pc, #20]	; (800bdc4 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED1Ev+0x20>)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	601a      	str	r2, [r3, #0]
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	0018      	movs	r0, r3
 800bdb6:	f7ff fe01 	bl	800b9bc <_ZN8touchgfx20FrameBufferAllocatorD1Ev>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	0018      	movs	r0, r3
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	b002      	add	sp, #8
 800bdc2:	bd80      	pop	{r7, pc}
 800bdc4:	08016674 	.word	0x08016674

0800bdc8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED0Ev>:
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	0018      	movs	r0, r3
 800bdd4:	f7ff ffe6 	bl	800bda4 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED1Ev>
 800bdd8:	4a05      	ldr	r2, [pc, #20]	; (800bdf0 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED0Ev+0x28>)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	0011      	movs	r1, r2
 800bdde:	0018      	movs	r0, r3
 800bde0:	f007 ffc8 	bl	8013d74 <_ZdlPvj>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	0018      	movs	r0, r3
 800bde8:	46bd      	mov	sp, r7
 800bdea:	b002      	add	sp, #8
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	46c0      	nop			; (mov r8, r8)
 800bdf0:	000016a8 	.word	0x000016a8

0800bdf4 <_Z41__static_initialization_and_destruction_0ii>:
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b082      	sub	sp, #8
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
 800bdfc:	6039      	str	r1, [r7, #0]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2b01      	cmp	r3, #1
 800be02:	d107      	bne.n	800be14 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	4a0b      	ldr	r2, [pc, #44]	; (800be34 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d103      	bne.n	800be14 <_Z41__static_initialization_and_destruction_0ii+0x20>
       > blockAllocator;
 800be0c:	4b0a      	ldr	r3, [pc, #40]	; (800be38 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800be0e:	0018      	movs	r0, r3
 800be10:	f7ff ff8a 	bl	800bd28 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d107      	bne.n	800be2a <_Z41__static_initialization_and_destruction_0ii+0x36>
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	4a05      	ldr	r2, [pc, #20]	; (800be34 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800be1e:	4293      	cmp	r3, r2
 800be20:	d103      	bne.n	800be2a <_Z41__static_initialization_and_destruction_0ii+0x36>
 800be22:	4b05      	ldr	r3, [pc, #20]	; (800be38 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800be24:	0018      	movs	r0, r3
 800be26:	f7ff ffbd 	bl	800bda4 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED1Ev>
}
 800be2a:	46c0      	nop			; (mov r8, r8)
 800be2c:	46bd      	mov	sp, r7
 800be2e:	b002      	add	sp, #8
 800be30:	bd80      	pop	{r7, pc}
 800be32:	46c0      	nop			; (mov r8, r8)
 800be34:	0000ffff 	.word	0x0000ffff
 800be38:	20001014 	.word	0x20001014

0800be3c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh>:
     * @param          height The height of the block.
     * @param [in,out] block  Pointer to pointer to return the block address in.
     *
     * @return The height of the allocated block.
     */
    virtual uint16_t allocateBlock(const uint16_t x, const uint16_t y, const uint16_t width, const uint16_t height, uint8_t** block)
 800be3c:	b590      	push	{r4, r7, lr}
 800be3e:	b087      	sub	sp, #28
 800be40:	af00      	add	r7, sp, #0
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	000c      	movs	r4, r1
 800be46:	0010      	movs	r0, r2
 800be48:	0019      	movs	r1, r3
 800be4a:	230a      	movs	r3, #10
 800be4c:	18fb      	adds	r3, r7, r3
 800be4e:	1c22      	adds	r2, r4, #0
 800be50:	801a      	strh	r2, [r3, #0]
 800be52:	2308      	movs	r3, #8
 800be54:	18fb      	adds	r3, r7, r3
 800be56:	1c02      	adds	r2, r0, #0
 800be58:	801a      	strh	r2, [r3, #0]
 800be5a:	1dbb      	adds	r3, r7, #6
 800be5c:	1c0a      	adds	r2, r1, #0
 800be5e:	801a      	strh	r2, [r3, #0]
    {
        drawingBlock++;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	4a4e      	ldr	r2, [pc, #312]	; (800bf9c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x160>)
 800be64:	589b      	ldr	r3, [r3, r2]
 800be66:	1c5a      	adds	r2, r3, #1
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	494c      	ldr	r1, [pc, #304]	; (800bf9c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x160>)
 800be6c:	505a      	str	r2, [r3, r1]
        if (drawingBlock == blocks)
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	4a4a      	ldr	r2, [pc, #296]	; (800bf9c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x160>)
 800be72:	589b      	ldr	r3, [r3, r2]
 800be74:	2b03      	cmp	r3, #3
 800be76:	d106      	bne.n	800be86 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x4a>
        {
            drawingBlock = 0;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	4a48      	ldr	r2, [pc, #288]	; (800bf9c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x160>)
 800be7c:	2100      	movs	r1, #0
 800be7e:	5099      	str	r1, [r3, r2]
        }
        while (state[drawingBlock] != EMPTY)
 800be80:	e001      	b.n	800be86 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x4a>
        {
            FrameBufferAllocatorWaitOnTransfer();
 800be82:	f7ff fee6 	bl	800bc52 <_ZN8touchgfx34FrameBufferAllocatorWaitOnTransferEv>
        while (state[drawingBlock] != EMPTY)
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	4a44      	ldr	r2, [pc, #272]	; (800bf9c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x160>)
 800be8a:	589b      	ldr	r3, [r3, r2]
 800be8c:	68fa      	ldr	r2, [r7, #12]
 800be8e:	18d3      	adds	r3, r2, r3
 800be90:	791b      	ldrb	r3, [r3, #4]
 800be92:	b2db      	uxtb	r3, r3
 800be94:	1e5a      	subs	r2, r3, #1
 800be96:	4193      	sbcs	r3, r2
 800be98:	b2db      	uxtb	r3, r3
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d1f1      	bne.n	800be82 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x46>
        }
        assert(state[drawingBlock] == EMPTY);
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	4a3e      	ldr	r2, [pc, #248]	; (800bf9c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x160>)
 800bea2:	589b      	ldr	r3, [r3, r2]
 800bea4:	68fa      	ldr	r2, [r7, #12]
 800bea6:	18d3      	adds	r3, r2, r3
 800bea8:	791b      	ldrb	r3, [r3, #4]
 800beaa:	b2db      	uxtb	r3, r3
 800beac:	2b00      	cmp	r3, #0
 800beae:	d005      	beq.n	800bebc <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x80>
 800beb0:	4b3b      	ldr	r3, [pc, #236]	; (800bfa0 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x164>)
 800beb2:	4a3c      	ldr	r2, [pc, #240]	; (800bfa4 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x168>)
 800beb4:	483c      	ldr	r0, [pc, #240]	; (800bfa8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x16c>)
 800beb6:	21aa      	movs	r1, #170	; 0xaa
 800beb8:	f007 ff8c 	bl	8013dd4 <__assert_func>
        state[drawingBlock] = ALLOCATED;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	4a37      	ldr	r2, [pc, #220]	; (800bf9c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x160>)
 800bec0:	589b      	ldr	r3, [r3, r2]
 800bec2:	68fa      	ldr	r2, [r7, #12]
 800bec4:	18d3      	adds	r3, r2, r3
 800bec6:	2201      	movs	r2, #1
 800bec8:	711a      	strb	r2, [r3, #4]
        const int32_t stride = width * bytes_pr_pixel;
 800beca:	1dbb      	adds	r3, r7, #6
 800becc:	881b      	ldrh	r3, [r3, #0]
 800bece:	005b      	lsls	r3, r3, #1
 800bed0:	617b      	str	r3, [r7, #20]
        const int32_t lines = block_size / stride;
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	0019      	movs	r1, r3
 800bed6:	23f0      	movs	r3, #240	; 0xf0
 800bed8:	00d8      	lsls	r0, r3, #3
 800beda:	f7f4 f931 	bl	8000140 <__udivsi3>
 800bede:	0003      	movs	r3, r0
 800bee0:	613b      	str	r3, [r7, #16]
        *block = (uint8_t*)&memory[drawingBlock][0];
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	4a2d      	ldr	r2, [pc, #180]	; (800bf9c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x160>)
 800bee6:	589a      	ldr	r2, [r3, r2]
 800bee8:	0013      	movs	r3, r2
 800beea:	011b      	lsls	r3, r3, #4
 800beec:	1a9b      	subs	r3, r3, r2
 800beee:	01db      	lsls	r3, r3, #7
 800bef0:	3308      	adds	r3, #8
 800bef2:	68fa      	ldr	r2, [r7, #12]
 800bef4:	18d2      	adds	r2, r2, r3
 800bef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef8:	601a      	str	r2, [r3, #0]
        blockRect[drawingBlock].x = x;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	4a27      	ldr	r2, [pc, #156]	; (800bf9c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x160>)
 800befe:	589a      	ldr	r2, [r3, r2]
 800bf00:	230a      	movs	r3, #10
 800bf02:	18fb      	adds	r3, r7, r3
 800bf04:	2100      	movs	r1, #0
 800bf06:	5e59      	ldrsh	r1, [r3, r1]
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	4828      	ldr	r0, [pc, #160]	; (800bfac <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x170>)
 800bf0c:	4684      	mov	ip, r0
 800bf0e:	4462      	add	r2, ip
 800bf10:	00d2      	lsls	r2, r2, #3
 800bf12:	52d1      	strh	r1, [r2, r3]
        blockRect[drawingBlock].y = y;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	4a21      	ldr	r2, [pc, #132]	; (800bf9c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x160>)
 800bf18:	589b      	ldr	r3, [r3, r2]
 800bf1a:	2208      	movs	r2, #8
 800bf1c:	18ba      	adds	r2, r7, r2
 800bf1e:	2100      	movs	r1, #0
 800bf20:	5e51      	ldrsh	r1, [r2, r1]
 800bf22:	68fa      	ldr	r2, [r7, #12]
 800bf24:	4821      	ldr	r0, [pc, #132]	; (800bfac <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x170>)
 800bf26:	4684      	mov	ip, r0
 800bf28:	4463      	add	r3, ip
 800bf2a:	00db      	lsls	r3, r3, #3
 800bf2c:	18d3      	adds	r3, r2, r3
 800bf2e:	3302      	adds	r3, #2
 800bf30:	1c0a      	adds	r2, r1, #0
 800bf32:	801a      	strh	r2, [r3, #0]
        blockRect[drawingBlock].width = width;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	4a19      	ldr	r2, [pc, #100]	; (800bf9c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x160>)
 800bf38:	589b      	ldr	r3, [r3, r2]
 800bf3a:	1dba      	adds	r2, r7, #6
 800bf3c:	2100      	movs	r1, #0
 800bf3e:	5e51      	ldrsh	r1, [r2, r1]
 800bf40:	68fa      	ldr	r2, [r7, #12]
 800bf42:	481a      	ldr	r0, [pc, #104]	; (800bfac <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x170>)
 800bf44:	4684      	mov	ip, r0
 800bf46:	4463      	add	r3, ip
 800bf48:	00db      	lsls	r3, r3, #3
 800bf4a:	18d3      	adds	r3, r2, r3
 800bf4c:	3304      	adds	r3, #4
 800bf4e:	1c0a      	adds	r2, r1, #0
 800bf50:	801a      	strh	r2, [r3, #0]
        blockRect[drawingBlock].height = MIN(height, lines);
 800bf52:	2328      	movs	r3, #40	; 0x28
 800bf54:	18fb      	adds	r3, r7, r3
 800bf56:	881a      	ldrh	r2, [r3, #0]
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	dd00      	ble.n	800bf60 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x124>
 800bf5e:	0013      	movs	r3, r2
 800bf60:	68fa      	ldr	r2, [r7, #12]
 800bf62:	490e      	ldr	r1, [pc, #56]	; (800bf9c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x160>)
 800bf64:	5851      	ldr	r1, [r2, r1]
 800bf66:	b218      	sxth	r0, r3
 800bf68:	68fa      	ldr	r2, [r7, #12]
 800bf6a:	4b10      	ldr	r3, [pc, #64]	; (800bfac <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x170>)
 800bf6c:	18cb      	adds	r3, r1, r3
 800bf6e:	00db      	lsls	r3, r3, #3
 800bf70:	18d3      	adds	r3, r2, r3
 800bf72:	3306      	adds	r3, #6
 800bf74:	1c02      	adds	r2, r0, #0
 800bf76:	801a      	strh	r2, [r3, #0]
        return blockRect[drawingBlock].height;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	4a08      	ldr	r2, [pc, #32]	; (800bf9c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x160>)
 800bf7c:	589b      	ldr	r3, [r3, r2]
 800bf7e:	68fa      	ldr	r2, [r7, #12]
 800bf80:	490a      	ldr	r1, [pc, #40]	; (800bfac <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x170>)
 800bf82:	468c      	mov	ip, r1
 800bf84:	4463      	add	r3, ip
 800bf86:	00db      	lsls	r3, r3, #3
 800bf88:	18d3      	adds	r3, r2, r3
 800bf8a:	3306      	adds	r3, #6
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	5e9b      	ldrsh	r3, [r3, r2]
 800bf90:	b29b      	uxth	r3, r3
    }
 800bf92:	0018      	movs	r0, r3
 800bf94:	46bd      	mov	sp, r7
 800bf96:	b007      	add	sp, #28
 800bf98:	bd90      	pop	{r4, r7, pc}
 800bf9a:	46c0      	nop			; (mov r8, r8)
 800bf9c:	000016a4 	.word	0x000016a4
 800bfa0:	0801583c 	.word	0x0801583c
 800bfa4:	0801585c 	.word	0x0801585c
 800bfa8:	08015990 	.word	0x08015990
 800bfac:	000002d1 	.word	0x000002d1

0800bfb0 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv>:

    /** Marks a previously allocated block as ready to be transferred to the LCD. */
    virtual void markBlockReadyForTransfer()
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b082      	sub	sp, #8
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
    {
        assert(state[drawingBlock] == ALLOCATED);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	4a0d      	ldr	r2, [pc, #52]	; (800bff0 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv+0x40>)
 800bfbc:	589b      	ldr	r3, [r3, r2]
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	18d3      	adds	r3, r2, r3
 800bfc2:	791b      	ldrb	r3, [r3, #4]
 800bfc4:	b2db      	uxtb	r3, r3
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d005      	beq.n	800bfd6 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv+0x26>
 800bfca:	4b0a      	ldr	r3, [pc, #40]	; (800bff4 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv+0x44>)
 800bfcc:	4a0a      	ldr	r2, [pc, #40]	; (800bff8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv+0x48>)
 800bfce:	480b      	ldr	r0, [pc, #44]	; (800bffc <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv+0x4c>)
 800bfd0:	21b9      	movs	r1, #185	; 0xb9
 800bfd2:	f007 feff 	bl	8013dd4 <__assert_func>
        state[drawingBlock] = DRAWN;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	4a05      	ldr	r2, [pc, #20]	; (800bff0 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv+0x40>)
 800bfda:	589b      	ldr	r3, [r3, r2]
 800bfdc:	687a      	ldr	r2, [r7, #4]
 800bfde:	18d3      	adds	r3, r2, r3
 800bfe0:	2202      	movs	r2, #2
 800bfe2:	711a      	strb	r2, [r3, #4]
        FrameBufferAllocatorSignalBlockDrawn();
 800bfe4:	f7ff fe3a 	bl	800bc5c <_ZN8touchgfx36FrameBufferAllocatorSignalBlockDrawnEv>
    }
 800bfe8:	46c0      	nop			; (mov r8, r8)
 800bfea:	46bd      	mov	sp, r7
 800bfec:	b002      	add	sp, #8
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	000016a4 	.word	0x000016a4
 800bff4:	080159e4 	.word	0x080159e4
 800bff8:	08015a08 	.word	0x08015a08
 800bffc:	08015990 	.word	0x08015990

0800c000 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE24hasBlockReadyForTransferEv>:
    /**
     * Check if a block is ready for transfer to the LCD.
     *
     * @return True if a block is ready for transfer.
     */
    virtual bool hasBlockReadyForTransfer()
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
    {
        for (uint32_t i = 0; i < blocks; i++)
 800c008:	2300      	movs	r3, #0
 800c00a:	60fb      	str	r3, [r7, #12]
 800c00c:	e010      	b.n	800c030 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE24hasBlockReadyForTransferEv+0x30>
        {
            if (state[i] == DRAWN)
 800c00e:	687a      	ldr	r2, [r7, #4]
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	18d3      	adds	r3, r2, r3
 800c014:	3304      	adds	r3, #4
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	b2db      	uxtb	r3, r3
 800c01a:	3b02      	subs	r3, #2
 800c01c:	425a      	negs	r2, r3
 800c01e:	4153      	adcs	r3, r2
 800c020:	b2db      	uxtb	r3, r3
 800c022:	2b00      	cmp	r3, #0
 800c024:	d001      	beq.n	800c02a <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE24hasBlockReadyForTransferEv+0x2a>
            {
                return true;
 800c026:	2301      	movs	r3, #1
 800c028:	e006      	b.n	800c038 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE24hasBlockReadyForTransferEv+0x38>
        for (uint32_t i = 0; i < blocks; i++)
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	3301      	adds	r3, #1
 800c02e:	60fb      	str	r3, [r7, #12]
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2b02      	cmp	r3, #2
 800c034:	d9eb      	bls.n	800c00e <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE24hasBlockReadyForTransferEv+0xe>
            }
        }
        return false;
 800c036:	2300      	movs	r3, #0
    }
 800c038:	0018      	movs	r0, r3
 800c03a:	46bd      	mov	sp, r7
 800c03c:	b004      	add	sp, #16
 800c03e:	bd80      	pop	{r7, pc}

0800c040 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE>:
     *
     * @param [in,out] rect Reference to rect to write block x, y, width, and height.
     *
     * @return Returns the address of the block ready for transfer.
     */
    virtual const uint8_t* getBlockForTransfer(Rect& rect)
 800c040:	b580      	push	{r7, lr}
 800c042:	b082      	sub	sp, #8
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	6039      	str	r1, [r7, #0]
    {
        sendingBlock++;
 800c04a:	687a      	ldr	r2, [r7, #4]
 800c04c:	23b5      	movs	r3, #181	; 0xb5
 800c04e:	015b      	lsls	r3, r3, #5
 800c050:	58d3      	ldr	r3, [r2, r3]
 800c052:	1c59      	adds	r1, r3, #1
 800c054:	687a      	ldr	r2, [r7, #4]
 800c056:	23b5      	movs	r3, #181	; 0xb5
 800c058:	015b      	lsls	r3, r3, #5
 800c05a:	50d1      	str	r1, [r2, r3]
        if (sendingBlock == blocks)
 800c05c:	687a      	ldr	r2, [r7, #4]
 800c05e:	23b5      	movs	r3, #181	; 0xb5
 800c060:	015b      	lsls	r3, r3, #5
 800c062:	58d3      	ldr	r3, [r2, r3]
 800c064:	2b03      	cmp	r3, #3
 800c066:	d104      	bne.n	800c072 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0x32>
        {
            sendingBlock = 0;
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	23b5      	movs	r3, #181	; 0xb5
 800c06c:	015b      	lsls	r3, r3, #5
 800c06e:	2100      	movs	r1, #0
 800c070:	50d1      	str	r1, [r2, r3]
        }
        assert(state[sendingBlock] == DRAWN);
 800c072:	687a      	ldr	r2, [r7, #4]
 800c074:	23b5      	movs	r3, #181	; 0xb5
 800c076:	015b      	lsls	r3, r3, #5
 800c078:	58d3      	ldr	r3, [r2, r3]
 800c07a:	687a      	ldr	r2, [r7, #4]
 800c07c:	18d3      	adds	r3, r2, r3
 800c07e:	791b      	ldrb	r3, [r3, #4]
 800c080:	b2db      	uxtb	r3, r3
 800c082:	2b02      	cmp	r3, #2
 800c084:	d005      	beq.n	800c092 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0x52>
 800c086:	4b16      	ldr	r3, [pc, #88]	; (800c0e0 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0xa0>)
 800c088:	4a16      	ldr	r2, [pc, #88]	; (800c0e4 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0xa4>)
 800c08a:	4817      	ldr	r0, [pc, #92]	; (800c0e8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0xa8>)
 800c08c:	21dd      	movs	r1, #221	; 0xdd
 800c08e:	f007 fea1 	bl	8013dd4 <__assert_func>
        rect = blockRect[sendingBlock];
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	23b5      	movs	r3, #181	; 0xb5
 800c096:	015b      	lsls	r3, r3, #5
 800c098:	58d3      	ldr	r3, [r2, r3]
 800c09a:	6839      	ldr	r1, [r7, #0]
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	4813      	ldr	r0, [pc, #76]	; (800c0ec <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0xac>)
 800c0a0:	4684      	mov	ip, r0
 800c0a2:	4463      	add	r3, ip
 800c0a4:	00db      	lsls	r3, r3, #3
 800c0a6:	0008      	movs	r0, r1
 800c0a8:	18d3      	adds	r3, r2, r3
 800c0aa:	2208      	movs	r2, #8
 800c0ac:	0019      	movs	r1, r3
 800c0ae:	f008 f97e 	bl	80143ae <memcpy>
        state[sendingBlock] = SENDING;
 800c0b2:	687a      	ldr	r2, [r7, #4]
 800c0b4:	23b5      	movs	r3, #181	; 0xb5
 800c0b6:	015b      	lsls	r3, r3, #5
 800c0b8:	58d3      	ldr	r3, [r2, r3]
 800c0ba:	687a      	ldr	r2, [r7, #4]
 800c0bc:	18d3      	adds	r3, r2, r3
 800c0be:	2203      	movs	r2, #3
 800c0c0:	711a      	strb	r2, [r3, #4]
        return (const uint8_t*)&memory[sendingBlock][0];
 800c0c2:	687a      	ldr	r2, [r7, #4]
 800c0c4:	23b5      	movs	r3, #181	; 0xb5
 800c0c6:	015b      	lsls	r3, r3, #5
 800c0c8:	58d2      	ldr	r2, [r2, r3]
 800c0ca:	0013      	movs	r3, r2
 800c0cc:	011b      	lsls	r3, r3, #4
 800c0ce:	1a9b      	subs	r3, r3, r2
 800c0d0:	01db      	lsls	r3, r3, #7
 800c0d2:	3308      	adds	r3, #8
 800c0d4:	687a      	ldr	r2, [r7, #4]
 800c0d6:	18d3      	adds	r3, r2, r3
    }
 800c0d8:	0018      	movs	r0, r3
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	b002      	add	sp, #8
 800c0de:	bd80      	pop	{r7, pc}
 800c0e0:	08015adc 	.word	0x08015adc
 800c0e4:	08015afc 	.word	0x08015afc
 800c0e8:	08015990 	.word	0x08015990
 800c0ec:	000002d1 	.word	0x000002d1

0800c0f0 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv>:

    virtual const Rect& peekBlockForTransfer()
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
    {
        int nextSendingBlock = sendingBlock + 1;
 800c0f8:	687a      	ldr	r2, [r7, #4]
 800c0fa:	23b5      	movs	r3, #181	; 0xb5
 800c0fc:	015b      	lsls	r3, r3, #5
 800c0fe:	58d3      	ldr	r3, [r2, r3]
 800c100:	3301      	adds	r3, #1
 800c102:	60fb      	str	r3, [r7, #12]
        if (nextSendingBlock == blocks)
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	2b03      	cmp	r3, #3
 800c108:	d101      	bne.n	800c10e <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x1e>
        {
            nextSendingBlock = 0;
 800c10a:	2300      	movs	r3, #0
 800c10c:	60fb      	str	r3, [r7, #12]
        }
        assert(state[nextSendingBlock] == DRAWN);
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	18d3      	adds	r3, r2, r3
 800c114:	3304      	adds	r3, #4
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	b2db      	uxtb	r3, r3
 800c11a:	2b02      	cmp	r3, #2
 800c11c:	d005      	beq.n	800c12a <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x3a>
 800c11e:	4b08      	ldr	r3, [pc, #32]	; (800c140 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x50>)
 800c120:	4a08      	ldr	r2, [pc, #32]	; (800c144 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x54>)
 800c122:	4809      	ldr	r0, [pc, #36]	; (800c148 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x58>)
 800c124:	21ea      	movs	r1, #234	; 0xea
 800c126:	f007 fe55 	bl	8013dd4 <__assert_func>
        return blockRect[nextSendingBlock];
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	4a07      	ldr	r2, [pc, #28]	; (800c14c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x5c>)
 800c12e:	4694      	mov	ip, r2
 800c130:	4463      	add	r3, ip
 800c132:	00db      	lsls	r3, r3, #3
 800c134:	687a      	ldr	r2, [r7, #4]
 800c136:	18d3      	adds	r3, r2, r3
    }
 800c138:	0018      	movs	r0, r3
 800c13a:	46bd      	mov	sp, r7
 800c13c:	b004      	add	sp, #16
 800c13e:	bd80      	pop	{r7, pc}
 800c140:	08015bfc 	.word	0x08015bfc
 800c144:	08015c20 	.word	0x08015c20
 800c148:	08015990 	.word	0x08015990
 800c14c:	000002d1 	.word	0x000002d1

0800c150 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13hasEmptyBlockEv>:

    virtual bool hasEmptyBlock()
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
    {
        int nextDrawingBlock = drawingBlock + 1;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	4a0b      	ldr	r2, [pc, #44]	; (800c188 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13hasEmptyBlockEv+0x38>)
 800c15c:	589b      	ldr	r3, [r3, r2]
 800c15e:	3301      	adds	r3, #1
 800c160:	60fb      	str	r3, [r7, #12]
        if (nextDrawingBlock == blocks)
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2b03      	cmp	r3, #3
 800c166:	d101      	bne.n	800c16c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13hasEmptyBlockEv+0x1c>
        {
            nextDrawingBlock = 0;
 800c168:	2300      	movs	r3, #0
 800c16a:	60fb      	str	r3, [r7, #12]
        }
        return (state[nextDrawingBlock] == EMPTY);
 800c16c:	687a      	ldr	r2, [r7, #4]
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	18d3      	adds	r3, r2, r3
 800c172:	3304      	adds	r3, #4
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	b2db      	uxtb	r3, r3
 800c178:	425a      	negs	r2, r3
 800c17a:	4153      	adcs	r3, r2
 800c17c:	b2db      	uxtb	r3, r3
    }
 800c17e:	0018      	movs	r0, r3
 800c180:	46bd      	mov	sp, r7
 800c182:	b004      	add	sp, #16
 800c184:	bd80      	pop	{r7, pc}
 800c186:	46c0      	nop			; (mov r8, r8)
 800c188:	000016a4 	.word	0x000016a4

0800c18c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE22freeBlockAfterTransferEv>:
    /**
     * Free a block after transfer to the LCD.
     *
     * Marks a previously allocated block as transferred and ready to reuse.
     */
    virtual void freeBlockAfterTransfer()
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b082      	sub	sp, #8
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
    {
        assert(state[sendingBlock] == SENDING);
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	23b5      	movs	r3, #181	; 0xb5
 800c198:	015b      	lsls	r3, r3, #5
 800c19a:	58d3      	ldr	r3, [r2, r3]
 800c19c:	687a      	ldr	r2, [r7, #4]
 800c19e:	18d3      	adds	r3, r2, r3
 800c1a0:	791b      	ldrb	r3, [r3, #4]
 800c1a2:	b2db      	uxtb	r3, r3
 800c1a4:	2b03      	cmp	r3, #3
 800c1a6:	d005      	beq.n	800c1b4 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE22freeBlockAfterTransferEv+0x28>
 800c1a8:	4b08      	ldr	r3, [pc, #32]	; (800c1cc <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE22freeBlockAfterTransferEv+0x40>)
 800c1aa:	4a09      	ldr	r2, [pc, #36]	; (800c1d0 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE22freeBlockAfterTransferEv+0x44>)
 800c1ac:	4809      	ldr	r0, [pc, #36]	; (800c1d4 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE22freeBlockAfterTransferEv+0x48>)
 800c1ae:	21ff      	movs	r1, #255	; 0xff
 800c1b0:	f007 fe10 	bl	8013dd4 <__assert_func>
        state[sendingBlock] = EMPTY;
 800c1b4:	687a      	ldr	r2, [r7, #4]
 800c1b6:	23b5      	movs	r3, #181	; 0xb5
 800c1b8:	015b      	lsls	r3, r3, #5
 800c1ba:	58d3      	ldr	r3, [r2, r3]
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	18d3      	adds	r3, r2, r3
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	711a      	strb	r2, [r3, #4]
    }
 800c1c4:	46c0      	nop			; (mov r8, r8)
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	b002      	add	sp, #8
 800c1ca:	bd80      	pop	{r7, pc}
 800c1cc:	08015d00 	.word	0x08015d00
 800c1d0:	08015d20 	.word	0x08015d20
 800c1d4:	08015990 	.word	0x08015990

0800c1d8 <_GLOBAL__sub_I__ZN8touchgfx5paint12setL8PaletteEPKh>:
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	af00      	add	r7, sp, #0
 800c1dc:	4b03      	ldr	r3, [pc, #12]	; (800c1ec <_GLOBAL__sub_I__ZN8touchgfx5paint12setL8PaletteEPKh+0x14>)
 800c1de:	0019      	movs	r1, r3
 800c1e0:	2001      	movs	r0, #1
 800c1e2:	f7ff fe07 	bl	800bdf4 <_Z41__static_initialization_and_destruction_0ii>
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	46c0      	nop			; (mov r8, r8)
 800c1ec:	0000ffff 	.word	0x0000ffff

0800c1f0 <_GLOBAL__sub_D__ZN8touchgfx5paint12setL8PaletteEPKh>:
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	4b03      	ldr	r3, [pc, #12]	; (800c204 <_GLOBAL__sub_D__ZN8touchgfx5paint12setL8PaletteEPKh+0x14>)
 800c1f6:	0019      	movs	r1, r3
 800c1f8:	2000      	movs	r0, #0
 800c1fa:	f7ff fdfb 	bl	800bdf4 <_Z41__static_initialization_and_destruction_0ii>
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
 800c202:	46c0      	nop			; (mov r8, r8)
 800c204:	0000ffff 	.word	0x0000ffff

0800c208 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800c208:	8880      	ldrh	r0, [r0, #4]
 800c20a:	4770      	bx	lr

0800c20c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800c20c:	b570      	push	{r4, r5, r6, lr}
 800c20e:	6803      	ldr	r3, [r0, #0]
 800c210:	0005      	movs	r5, r0
 800c212:	000c      	movs	r4, r1
 800c214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c216:	2100      	movs	r1, #0
 800c218:	4798      	blx	r3
 800c21a:	682b      	ldr	r3, [r5, #0]
 800c21c:	0006      	movs	r6, r0
 800c21e:	6a1b      	ldr	r3, [r3, #32]
 800c220:	0028      	movs	r0, r5
 800c222:	4798      	blx	r3
 800c224:	1ba4      	subs	r4, r4, r6
 800c226:	0001      	movs	r1, r0
 800c228:	b2a0      	uxth	r0, r4
 800c22a:	f7f3 ff89 	bl	8000140 <__udivsi3>
 800c22e:	b280      	uxth	r0, r0
 800c230:	bd70      	pop	{r4, r5, r6, pc}

0800c232 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800c232:	2300      	movs	r3, #0
 800c234:	8083      	strh	r3, [r0, #4]
 800c236:	4770      	bx	lr

0800c238 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800c238:	b510      	push	{r4, lr}
 800c23a:	0004      	movs	r4, r0
 800c23c:	6803      	ldr	r3, [r0, #0]
 800c23e:	8881      	ldrh	r1, [r0, #4]
 800c240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c242:	4798      	blx	r3
 800c244:	88a3      	ldrh	r3, [r4, #4]
 800c246:	3301      	adds	r3, #1
 800c248:	80a3      	strh	r3, [r4, #4]
 800c24a:	bd10      	pop	{r4, pc}

0800c24c <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800c24c:	b510      	push	{r4, lr}
 800c24e:	6803      	ldr	r3, [r0, #0]
 800c250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c252:	4798      	blx	r3
 800c254:	bd10      	pop	{r4, pc}

0800c256 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800c256:	4770      	bx	lr

0800c258 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800c258:	4b02      	ldr	r3, [pc, #8]	; (800c264 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800c25a:	3308      	adds	r3, #8
 800c25c:	6003      	str	r3, [r0, #0]
 800c25e:	2300      	movs	r3, #0
 800c260:	8083      	strh	r3, [r0, #4]
 800c262:	4770      	bx	lr
 800c264:	080167a4 	.word	0x080167a4

0800c268 <_ZN8touchgfx9Container13getFirstChildEv>:
 800c268:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800c26a:	4770      	bx	lr

0800c26c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800c26c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c26e:	2000      	movs	r0, #0
 800c270:	2b00      	cmp	r3, #0
 800c272:	d007      	beq.n	800c284 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x18>
 800c274:	2800      	cmp	r0, #0
 800c276:	d105      	bne.n	800c284 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x18>
 800c278:	1a58      	subs	r0, r3, r1
 800c27a:	4242      	negs	r2, r0
 800c27c:	4150      	adcs	r0, r2
 800c27e:	699b      	ldr	r3, [r3, #24]
 800c280:	b2c0      	uxtb	r0, r0
 800c282:	e7f5      	b.n	800c270 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800c284:	4770      	bx	lr

0800c286 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800c286:	2300      	movs	r3, #0
 800c288:	6148      	str	r0, [r1, #20]
 800c28a:	618b      	str	r3, [r1, #24]
 800c28c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d102      	bne.n	800c298 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 800c292:	6281      	str	r1, [r0, #40]	; 0x28
 800c294:	4770      	bx	lr
 800c296:	0013      	movs	r3, r2
 800c298:	699a      	ldr	r2, [r3, #24]
 800c29a:	2a00      	cmp	r2, #0
 800c29c:	d1fb      	bne.n	800c296 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800c29e:	6199      	str	r1, [r3, #24]
 800c2a0:	e7f8      	b.n	800c294 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>

0800c2a2 <_ZN8touchgfx9Container9removeAllEv>:
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d004      	beq.n	800c2b4 <_ZN8touchgfx9Container9removeAllEv+0x12>
 800c2aa:	6999      	ldr	r1, [r3, #24]
 800c2ac:	6281      	str	r1, [r0, #40]	; 0x28
 800c2ae:	615a      	str	r2, [r3, #20]
 800c2b0:	619a      	str	r2, [r3, #24]
 800c2b2:	e7f7      	b.n	800c2a4 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800c2b4:	4770      	bx	lr

0800c2b6 <_ZN8touchgfx9Container6unlinkEv>:
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	6283      	str	r3, [r0, #40]	; 0x28
 800c2ba:	4770      	bx	lr

0800c2bc <_ZNK8touchgfx9Container12getSolidRectEv>:
 800c2bc:	2300      	movs	r3, #0
 800c2be:	8003      	strh	r3, [r0, #0]
 800c2c0:	8043      	strh	r3, [r0, #2]
 800c2c2:	8083      	strh	r3, [r0, #4]
 800c2c4:	80c3      	strh	r3, [r0, #6]
 800c2c6:	4770      	bx	lr

0800c2c8 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800c2c8:	b570      	push	{r4, r5, r6, lr}
 800c2ca:	000d      	movs	r5, r1
 800c2cc:	0016      	movs	r6, r2
 800c2ce:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c2d0:	2c00      	cmp	r4, #0
 800c2d2:	d007      	beq.n	800c2e4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1c>
 800c2d4:	6823      	ldr	r3, [r4, #0]
 800c2d6:	0020      	movs	r0, r4
 800c2d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2da:	0032      	movs	r2, r6
 800c2dc:	0029      	movs	r1, r5
 800c2de:	4798      	blx	r3
 800c2e0:	69a4      	ldr	r4, [r4, #24]
 800c2e2:	e7f5      	b.n	800c2d0 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800c2e4:	bd70      	pop	{r4, r5, r6, pc}

0800c2e6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800c2e6:	b570      	push	{r4, r5, r6, lr}
 800c2e8:	000d      	movs	r5, r1
 800c2ea:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c2ec:	2c00      	cmp	r4, #0
 800c2ee:	d006      	beq.n	800c2fe <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x18>
 800c2f0:	682b      	ldr	r3, [r5, #0]
 800c2f2:	0021      	movs	r1, r4
 800c2f4:	689b      	ldr	r3, [r3, #8]
 800c2f6:	0028      	movs	r0, r5
 800c2f8:	4798      	blx	r3
 800c2fa:	69a4      	ldr	r4, [r4, #24]
 800c2fc:	e7f6      	b.n	800c2ec <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800c2fe:	bd70      	pop	{r4, r5, r6, pc}

0800c300 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800c300:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c302:	2b00      	cmp	r3, #0
 800c304:	d007      	beq.n	800c316 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x16>
 800c306:	428b      	cmp	r3, r1
 800c308:	d10a      	bne.n	800c320 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x20>
 800c30a:	2100      	movs	r1, #0
 800c30c:	699a      	ldr	r2, [r3, #24]
 800c30e:	6159      	str	r1, [r3, #20]
 800c310:	6282      	str	r2, [r0, #40]	; 0x28
 800c312:	428a      	cmp	r2, r1
 800c314:	d100      	bne.n	800c318 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800c316:	4770      	bx	lr
 800c318:	6199      	str	r1, [r3, #24]
 800c31a:	e7fc      	b.n	800c316 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x16>
 800c31c:	1e13      	subs	r3, r2, #0
 800c31e:	d0fa      	beq.n	800c316 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x16>
 800c320:	699a      	ldr	r2, [r3, #24]
 800c322:	428a      	cmp	r2, r1
 800c324:	d1fa      	bne.n	800c31c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800c326:	698a      	ldr	r2, [r1, #24]
 800c328:	619a      	str	r2, [r3, #24]
 800c32a:	2300      	movs	r3, #0
 800c32c:	614b      	str	r3, [r1, #20]
 800c32e:	618b      	str	r3, [r1, #24]
 800c330:	e7f1      	b.n	800c316 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x16>

0800c332 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800c332:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c334:	b510      	push	{r4, lr}
 800c336:	2b00      	cmp	r3, #0
 800c338:	d104      	bne.n	800c344 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x12>
 800c33a:	6803      	ldr	r3, [r0, #0]
 800c33c:	0011      	movs	r1, r2
 800c33e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c340:	4798      	blx	r3
 800c342:	bd10      	pop	{r4, pc}
 800c344:	2900      	cmp	r1, #0
 800c346:	d105      	bne.n	800c354 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800c348:	6193      	str	r3, [r2, #24]
 800c34a:	6282      	str	r2, [r0, #40]	; 0x28
 800c34c:	6150      	str	r0, [r2, #20]
 800c34e:	e7f8      	b.n	800c342 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x10>
 800c350:	1e23      	subs	r3, r4, #0
 800c352:	d0f6      	beq.n	800c342 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x10>
 800c354:	699c      	ldr	r4, [r3, #24]
 800c356:	4299      	cmp	r1, r3
 800c358:	d1fa      	bne.n	800c350 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1e>
 800c35a:	6194      	str	r4, [r2, #24]
 800c35c:	618a      	str	r2, [r1, #24]
 800c35e:	e7f5      	b.n	800c34c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800c360 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800c360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c362:	9301      	str	r3, [sp, #4]
 800c364:	1d43      	adds	r3, r0, #5
 800c366:	7fdb      	ldrb	r3, [r3, #31]
 800c368:	000f      	movs	r7, r1
 800c36a:	0015      	movs	r5, r2
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d001      	beq.n	800c374 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800c370:	9b01      	ldr	r3, [sp, #4]
 800c372:	6018      	str	r0, [r3, #0]
 800c374:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c376:	2c00      	cmp	r4, #0
 800c378:	d023      	beq.n	800c3c2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x62>
 800c37a:	1da3      	adds	r3, r4, #6
 800c37c:	7fdb      	ldrb	r3, [r3, #31]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d01d      	beq.n	800c3be <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5e>
 800c382:	2304      	movs	r3, #4
 800c384:	5ee1      	ldrsh	r1, [r4, r3]
 800c386:	428f      	cmp	r7, r1
 800c388:	db19      	blt.n	800c3be <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5e>
 800c38a:	8923      	ldrh	r3, [r4, #8]
 800c38c:	b289      	uxth	r1, r1
 800c38e:	18cb      	adds	r3, r1, r3
 800c390:	b21b      	sxth	r3, r3
 800c392:	429f      	cmp	r7, r3
 800c394:	da13      	bge.n	800c3be <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5e>
 800c396:	2306      	movs	r3, #6
 800c398:	5ee2      	ldrsh	r2, [r4, r3]
 800c39a:	4295      	cmp	r5, r2
 800c39c:	db0f      	blt.n	800c3be <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5e>
 800c39e:	8963      	ldrh	r3, [r4, #10]
 800c3a0:	b292      	uxth	r2, r2
 800c3a2:	18d3      	adds	r3, r2, r3
 800c3a4:	b21b      	sxth	r3, r3
 800c3a6:	429d      	cmp	r5, r3
 800c3a8:	da09      	bge.n	800c3be <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5e>
 800c3aa:	6823      	ldr	r3, [r4, #0]
 800c3ac:	1aaa      	subs	r2, r5, r2
 800c3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3b0:	1a79      	subs	r1, r7, r1
 800c3b2:	001e      	movs	r6, r3
 800c3b4:	b212      	sxth	r2, r2
 800c3b6:	b209      	sxth	r1, r1
 800c3b8:	9b01      	ldr	r3, [sp, #4]
 800c3ba:	0020      	movs	r0, r4
 800c3bc:	47b0      	blx	r6
 800c3be:	69a4      	ldr	r4, [r4, #24]
 800c3c0:	e7d9      	b.n	800c376 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x16>
 800c3c2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

0800c3c4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800c3c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3c6:	001f      	movs	r7, r3
 800c3c8:	4b6b      	ldr	r3, [pc, #428]	; (800c578 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b4>)
 800c3ca:	b0a5      	sub	sp, #148	; 0x94
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	9203      	str	r2, [sp, #12]
 800c3d0:	3349      	adds	r3, #73	; 0x49
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800c3d6:	9300      	str	r3, [sp, #0]
 800c3d8:	2300      	movs	r3, #0
 800c3da:	8013      	strh	r3, [r2, #0]
 800c3dc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800c3de:	0004      	movs	r4, r0
 800c3e0:	8013      	strh	r3, [r2, #0]
 800c3e2:	603b      	str	r3, [r7, #0]
 800c3e4:	9a03      	ldr	r2, [sp, #12]
 800c3e6:	003b      	movs	r3, r7
 800c3e8:	9102      	str	r1, [sp, #8]
 800c3ea:	f7ff ffb9 	bl	800c360 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800c3ee:	9b00      	ldr	r3, [sp, #0]
 800c3f0:	2b03      	cmp	r3, #3
 800c3f2:	dc00      	bgt.n	800c3f6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x32>
 800c3f4:	e0ba      	b.n	800c56c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1a8>
 800c3f6:	ad10      	add	r5, sp, #64	; 0x40
 800c3f8:	0021      	movs	r1, r4
 800c3fa:	0028      	movs	r0, r5
 800c3fc:	f003 fe67 	bl	80100ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800c400:	2200      	movs	r2, #0
 800c402:	5eab      	ldrsh	r3, [r5, r2]
 800c404:	683e      	ldr	r6, [r7, #0]
 800c406:	9308      	str	r3, [sp, #32]
 800c408:	2202      	movs	r2, #2
 800c40a:	5eab      	ldrsh	r3, [r5, r2]
 800c40c:	930a      	str	r3, [sp, #40]	; 0x28
 800c40e:	2e00      	cmp	r6, #0
 800c410:	d100      	bne.n	800c414 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x50>
 800c412:	e0ad      	b.n	800c570 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1ac>
 800c414:	ad14      	add	r5, sp, #80	; 0x50
 800c416:	0028      	movs	r0, r5
 800c418:	0031      	movs	r1, r6
 800c41a:	f003 fe58 	bl	80100ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800c41e:	9b02      	ldr	r3, [sp, #8]
 800c420:	9a08      	ldr	r2, [sp, #32]
 800c422:	189a      	adds	r2, r3, r2
 800c424:	2104      	movs	r1, #4
 800c426:	5e6b      	ldrsh	r3, [r5, r1]
 800c428:	0fd9      	lsrs	r1, r3, #31
 800c42a:	18c9      	adds	r1, r1, r3
 800c42c:	2000      	movs	r0, #0
 800c42e:	5e2b      	ldrsh	r3, [r5, r0]
 800c430:	1049      	asrs	r1, r1, #1
 800c432:	18c9      	adds	r1, r1, r3
 800c434:	1a51      	subs	r1, r2, r1
 800c436:	9b03      	ldr	r3, [sp, #12]
 800c438:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c43a:	4349      	muls	r1, r1
 800c43c:	189a      	adds	r2, r3, r2
 800c43e:	2306      	movs	r3, #6
 800c440:	5ee8      	ldrsh	r0, [r5, r3]
 800c442:	0fc3      	lsrs	r3, r0, #31
 800c444:	181b      	adds	r3, r3, r0
 800c446:	2002      	movs	r0, #2
 800c448:	5e28      	ldrsh	r0, [r5, r0]
 800c44a:	105b      	asrs	r3, r3, #1
 800c44c:	181b      	adds	r3, r3, r0
 800c44e:	1ad3      	subs	r3, r2, r3
 800c450:	435b      	muls	r3, r3
 800c452:	18cb      	adds	r3, r1, r3
 800c454:	2240      	movs	r2, #64	; 0x40
 800c456:	4949      	ldr	r1, [pc, #292]	; (800c57c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>)
 800c458:	a814      	add	r0, sp, #80	; 0x50
 800c45a:	9304      	str	r3, [sp, #16]
 800c45c:	f007 ffa7 	bl	80143ae <memcpy>
 800c460:	2303      	movs	r3, #3
 800c462:	9305      	str	r3, [sp, #20]
 800c464:	9b00      	ldr	r3, [sp, #0]
 800c466:	2b0c      	cmp	r3, #12
 800c468:	dc04      	bgt.n	800c474 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xb0>
 800c46a:	1e58      	subs	r0, r3, #1
 800c46c:	2103      	movs	r1, #3
 800c46e:	f7f3 fef1 	bl	8000254 <__divsi3>
 800c472:	9005      	str	r0, [sp, #20]
 800c474:	2500      	movs	r5, #0
 800c476:	9b00      	ldr	r3, [sp, #0]
 800c478:	9306      	str	r3, [sp, #24]
 800c47a:	1c6b      	adds	r3, r5, #1
 800c47c:	9905      	ldr	r1, [sp, #20]
 800c47e:	9806      	ldr	r0, [sp, #24]
 800c480:	930b      	str	r3, [sp, #44]	; 0x2c
 800c482:	f7f3 fee7 	bl	8000254 <__divsi3>
 800c486:	2301      	movs	r3, #1
 800c488:	401d      	ands	r5, r3
 800c48a:	016b      	lsls	r3, r5, #5
 800c48c:	aa24      	add	r2, sp, #144	; 0x90
 800c48e:	18d5      	adds	r5, r2, r3
 800c490:	aa1d      	add	r2, sp, #116	; 0x74
 800c492:	18d3      	adds	r3, r2, r3
 800c494:	900c      	str	r0, [sp, #48]	; 0x30
 800c496:	3d3c      	subs	r5, #60	; 0x3c
 800c498:	930d      	str	r3, [sp, #52]	; 0x34
 800c49a:	466b      	mov	r3, sp
 800c49c:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800c49e:	1f2b      	subs	r3, r5, #4
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	9902      	ldr	r1, [sp, #8]
 800c4a4:	4353      	muls	r3, r2
 800c4a6:	b29b      	uxth	r3, r3
 800c4a8:	1859      	adds	r1, r3, r1
 800c4aa:	9307      	str	r3, [sp, #28]
 800c4ac:	2304      	movs	r3, #4
 800c4ae:	5ee0      	ldrsh	r0, [r4, r3]
 800c4b0:	b209      	sxth	r1, r1
 800c4b2:	4281      	cmp	r1, r0
 800c4b4:	db4d      	blt.n	800c552 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x18e>
 800c4b6:	8923      	ldrh	r3, [r4, #8]
 800c4b8:	181b      	adds	r3, r3, r0
 800c4ba:	b21b      	sxth	r3, r3
 800c4bc:	4299      	cmp	r1, r3
 800c4be:	da48      	bge.n	800c552 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x18e>
 800c4c0:	682b      	ldr	r3, [r5, #0]
 800c4c2:	435a      	muls	r2, r3
 800c4c4:	b293      	uxth	r3, r2
 800c4c6:	9a03      	ldr	r2, [sp, #12]
 800c4c8:	9309      	str	r3, [sp, #36]	; 0x24
 800c4ca:	189a      	adds	r2, r3, r2
 800c4cc:	2306      	movs	r3, #6
 800c4ce:	5ee0      	ldrsh	r0, [r4, r3]
 800c4d0:	b212      	sxth	r2, r2
 800c4d2:	4282      	cmp	r2, r0
 800c4d4:	db3d      	blt.n	800c552 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x18e>
 800c4d6:	8963      	ldrh	r3, [r4, #10]
 800c4d8:	181b      	adds	r3, r3, r0
 800c4da:	b21b      	sxth	r3, r3
 800c4dc:	429a      	cmp	r2, r3
 800c4de:	da38      	bge.n	800c552 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x18e>
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	0020      	movs	r0, r4
 800c4e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c4e6:	ab0f      	add	r3, sp, #60	; 0x3c
 800c4e8:	f7ff ff3a 	bl	800c360 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800c4ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c4ee:	9301      	str	r3, [sp, #4]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d02e      	beq.n	800c552 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x18e>
 800c4f4:	42b3      	cmp	r3, r6
 800c4f6:	d02c      	beq.n	800c552 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x18e>
 800c4f8:	ae12      	add	r6, sp, #72	; 0x48
 800c4fa:	0019      	movs	r1, r3
 800c4fc:	0030      	movs	r0, r6
 800c4fe:	f003 fde6 	bl	80100ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800c502:	9a08      	ldr	r2, [sp, #32]
 800c504:	9b02      	ldr	r3, [sp, #8]
 800c506:	189b      	adds	r3, r3, r2
 800c508:	2104      	movs	r1, #4
 800c50a:	5e72      	ldrsh	r2, [r6, r1]
 800c50c:	0fd1      	lsrs	r1, r2, #31
 800c50e:	1889      	adds	r1, r1, r2
 800c510:	2000      	movs	r0, #0
 800c512:	5e32      	ldrsh	r2, [r6, r0]
 800c514:	1049      	asrs	r1, r1, #1
 800c516:	1889      	adds	r1, r1, r2
 800c518:	1a59      	subs	r1, r3, r1
 800c51a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c51c:	9b03      	ldr	r3, [sp, #12]
 800c51e:	4349      	muls	r1, r1
 800c520:	189a      	adds	r2, r3, r2
 800c522:	2306      	movs	r3, #6
 800c524:	5ef0      	ldrsh	r0, [r6, r3]
 800c526:	0fc3      	lsrs	r3, r0, #31
 800c528:	181b      	adds	r3, r3, r0
 800c52a:	2002      	movs	r0, #2
 800c52c:	5e30      	ldrsh	r0, [r6, r0]
 800c52e:	105b      	asrs	r3, r3, #1
 800c530:	181b      	adds	r3, r3, r0
 800c532:	1ad3      	subs	r3, r2, r3
 800c534:	435b      	muls	r3, r3
 800c536:	9a04      	ldr	r2, [sp, #16]
 800c538:	18cb      	adds	r3, r1, r3
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d208      	bcs.n	800c550 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x18c>
 800c53e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c540:	9907      	ldr	r1, [sp, #28]
 800c542:	603a      	str	r2, [r7, #0]
 800c544:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800c546:	9304      	str	r3, [sp, #16]
 800c548:	8011      	strh	r1, [r2, #0]
 800c54a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800c54c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c54e:	8011      	strh	r1, [r2, #0]
 800c550:	9e01      	ldr	r6, [sp, #4]
 800c552:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c554:	3508      	adds	r5, #8
 800c556:	42ab      	cmp	r3, r5
 800c558:	d19f      	bne.n	800c49a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xd6>
 800c55a:	9a00      	ldr	r2, [sp, #0]
 800c55c:	9b06      	ldr	r3, [sp, #24]
 800c55e:	4694      	mov	ip, r2
 800c560:	4463      	add	r3, ip
 800c562:	9306      	str	r3, [sp, #24]
 800c564:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c566:	9b05      	ldr	r3, [sp, #20]
 800c568:	429d      	cmp	r5, r3
 800c56a:	d186      	bne.n	800c47a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xb6>
 800c56c:	b025      	add	sp, #148	; 0x94
 800c56e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c570:	2301      	movs	r3, #1
 800c572:	425b      	negs	r3, r3
 800c574:	e76e      	b.n	800c454 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x90>
 800c576:	46c0      	nop			; (mov r8, r8)
 800c578:	200026c8 	.word	0x200026c8
 800c57c:	08015df0 	.word	0x08015df0

0800c580 <_ZN8touchgfx4RectaNERKS0_>:
 800c580:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c582:	2300      	movs	r3, #0
 800c584:	5ec7      	ldrsh	r7, [r0, r3]
 800c586:	2300      	movs	r3, #0
 800c588:	5ece      	ldrsh	r6, [r1, r3]
 800c58a:	888b      	ldrh	r3, [r1, #4]
 800c58c:	b085      	sub	sp, #20
 800c58e:	199b      	adds	r3, r3, r6
 800c590:	b29b      	uxth	r3, r3
 800c592:	9300      	str	r3, [sp, #0]
 800c594:	466b      	mov	r3, sp
 800c596:	2200      	movs	r2, #0
 800c598:	5e9b      	ldrsh	r3, [r3, r2]
 800c59a:	9301      	str	r3, [sp, #4]
 800c59c:	429f      	cmp	r7, r3
 800c59e:	da39      	bge.n	800c614 <_ZN8touchgfx4RectaNERKS0_+0x94>
 800c5a0:	8883      	ldrh	r3, [r0, #4]
 800c5a2:	19db      	adds	r3, r3, r7
 800c5a4:	b29b      	uxth	r3, r3
 800c5a6:	469c      	mov	ip, r3
 800c5a8:	b21b      	sxth	r3, r3
 800c5aa:	9302      	str	r3, [sp, #8]
 800c5ac:	429e      	cmp	r6, r3
 800c5ae:	da31      	bge.n	800c614 <_ZN8touchgfx4RectaNERKS0_+0x94>
 800c5b0:	2302      	movs	r3, #2
 800c5b2:	5ecc      	ldrsh	r4, [r1, r3]
 800c5b4:	2302      	movs	r3, #2
 800c5b6:	5ec5      	ldrsh	r5, [r0, r3]
 800c5b8:	88cb      	ldrh	r3, [r1, #6]
 800c5ba:	191b      	adds	r3, r3, r4
 800c5bc:	b21b      	sxth	r3, r3
 800c5be:	429d      	cmp	r5, r3
 800c5c0:	da28      	bge.n	800c614 <_ZN8touchgfx4RectaNERKS0_+0x94>
 800c5c2:	88c3      	ldrh	r3, [r0, #6]
 800c5c4:	195b      	adds	r3, r3, r5
 800c5c6:	b29b      	uxth	r3, r3
 800c5c8:	b21a      	sxth	r2, r3
 800c5ca:	9203      	str	r2, [sp, #12]
 800c5cc:	4294      	cmp	r4, r2
 800c5ce:	da21      	bge.n	800c614 <_ZN8touchgfx4RectaNERKS0_+0x94>
 800c5d0:	1c3a      	adds	r2, r7, #0
 800c5d2:	42b7      	cmp	r7, r6
 800c5d4:	da00      	bge.n	800c5d8 <_ZN8touchgfx4RectaNERKS0_+0x58>
 800c5d6:	1c32      	adds	r2, r6, #0
 800c5d8:	b212      	sxth	r2, r2
 800c5da:	1c2e      	adds	r6, r5, #0
 800c5dc:	42a5      	cmp	r5, r4
 800c5de:	da00      	bge.n	800c5e2 <_ZN8touchgfx4RectaNERKS0_+0x62>
 800c5e0:	1c26      	adds	r6, r4, #0
 800c5e2:	9c01      	ldr	r4, [sp, #4]
 800c5e4:	9d02      	ldr	r5, [sp, #8]
 800c5e6:	b236      	sxth	r6, r6
 800c5e8:	42ac      	cmp	r4, r5
 800c5ea:	dc01      	bgt.n	800c5f0 <_ZN8touchgfx4RectaNERKS0_+0x70>
 800c5ec:	9c00      	ldr	r4, [sp, #0]
 800c5ee:	46a4      	mov	ip, r4
 800c5f0:	4664      	mov	r4, ip
 800c5f2:	1aa4      	subs	r4, r4, r2
 800c5f4:	8084      	strh	r4, [r0, #4]
 800c5f6:	884c      	ldrh	r4, [r1, #2]
 800c5f8:	88c9      	ldrh	r1, [r1, #6]
 800c5fa:	9d03      	ldr	r5, [sp, #12]
 800c5fc:	1861      	adds	r1, r4, r1
 800c5fe:	b289      	uxth	r1, r1
 800c600:	b20c      	sxth	r4, r1
 800c602:	42a5      	cmp	r5, r4
 800c604:	db00      	blt.n	800c608 <_ZN8touchgfx4RectaNERKS0_+0x88>
 800c606:	000b      	movs	r3, r1
 800c608:	1b9b      	subs	r3, r3, r6
 800c60a:	80c3      	strh	r3, [r0, #6]
 800c60c:	8002      	strh	r2, [r0, #0]
 800c60e:	8046      	strh	r6, [r0, #2]
 800c610:	b005      	add	sp, #20
 800c612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c614:	2300      	movs	r3, #0
 800c616:	8003      	strh	r3, [r0, #0]
 800c618:	8043      	strh	r3, [r0, #2]
 800c61a:	8083      	strh	r3, [r0, #4]
 800c61c:	80c3      	strh	r3, [r0, #6]
 800c61e:	e7f7      	b.n	800c610 <_ZN8touchgfx4RectaNERKS0_+0x90>

0800c620 <_ZNK8touchgfx4Rect7isEmptyEv>:
 800c620:	2104      	movs	r1, #4
 800c622:	5e42      	ldrsh	r2, [r0, r1]
 800c624:	0003      	movs	r3, r0
 800c626:	2001      	movs	r0, #1
 800c628:	2a00      	cmp	r2, #0
 800c62a:	dd04      	ble.n	800c636 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800c62c:	2006      	movs	r0, #6
 800c62e:	5e18      	ldrsh	r0, [r3, r0]
 800c630:	1e43      	subs	r3, r0, #1
 800c632:	4318      	orrs	r0, r3
 800c634:	0fc0      	lsrs	r0, r0, #31
 800c636:	4770      	bx	lr

0800c638 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800c638:	2300      	movs	r3, #0
 800c63a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c63c:	0004      	movs	r4, r0
 800c63e:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800c640:	b085      	sub	sp, #20
 800c642:	8003      	strh	r3, [r0, #0]
 800c644:	8043      	strh	r3, [r0, #2]
 800c646:	8083      	strh	r3, [r0, #4]
 800c648:	80c3      	strh	r3, [r0, #6]
 800c64a:	2d00      	cmp	r5, #0
 800c64c:	d048      	beq.n	800c6e0 <_ZNK8touchgfx9Container16getContainedAreaEv+0xa8>
 800c64e:	1d28      	adds	r0, r5, #4
 800c650:	f7ff ffe6 	bl	800c620 <_ZNK8touchgfx4Rect7isEmptyEv>
 800c654:	2800      	cmp	r0, #0
 800c656:	d111      	bne.n	800c67c <_ZNK8touchgfx9Container16getContainedAreaEv+0x44>
 800c658:	0020      	movs	r0, r4
 800c65a:	f7ff ffe1 	bl	800c620 <_ZNK8touchgfx4Rect7isEmptyEv>
 800c65e:	2304      	movs	r3, #4
 800c660:	5eee      	ldrsh	r6, [r5, r3]
 800c662:	2206      	movs	r2, #6
 800c664:	5eab      	ldrsh	r3, [r5, r2]
 800c666:	2108      	movs	r1, #8
 800c668:	5e6a      	ldrsh	r2, [r5, r1]
 800c66a:	270a      	movs	r7, #10
 800c66c:	5fe9      	ldrsh	r1, [r5, r7]
 800c66e:	9101      	str	r1, [sp, #4]
 800c670:	2800      	cmp	r0, #0
 800c672:	d005      	beq.n	800c680 <_ZNK8touchgfx9Container16getContainedAreaEv+0x48>
 800c674:	8026      	strh	r6, [r4, #0]
 800c676:	8063      	strh	r3, [r4, #2]
 800c678:	80a2      	strh	r2, [r4, #4]
 800c67a:	80e1      	strh	r1, [r4, #6]
 800c67c:	69ad      	ldr	r5, [r5, #24]
 800c67e:	e7e4      	b.n	800c64a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800c680:	2000      	movs	r0, #0
 800c682:	5e21      	ldrsh	r1, [r4, r0]
 800c684:	1c08      	adds	r0, r1, #0
 800c686:	42b1      	cmp	r1, r6
 800c688:	dd00      	ble.n	800c68c <_ZNK8touchgfx9Container16getContainedAreaEv+0x54>
 800c68a:	1c30      	adds	r0, r6, #0
 800c68c:	b200      	sxth	r0, r0
 800c68e:	9002      	str	r0, [sp, #8]
 800c690:	2002      	movs	r0, #2
 800c692:	5e27      	ldrsh	r7, [r4, r0]
 800c694:	1c38      	adds	r0, r7, #0
 800c696:	429f      	cmp	r7, r3
 800c698:	dd00      	ble.n	800c69c <_ZNK8touchgfx9Container16getContainedAreaEv+0x64>
 800c69a:	1c18      	adds	r0, r3, #0
 800c69c:	b200      	sxth	r0, r0
 800c69e:	9003      	str	r0, [sp, #12]
 800c6a0:	88a0      	ldrh	r0, [r4, #4]
 800c6a2:	18b6      	adds	r6, r6, r2
 800c6a4:	4684      	mov	ip, r0
 800c6a6:	4461      	add	r1, ip
 800c6a8:	1c0a      	adds	r2, r1, #0
 800c6aa:	b230      	sxth	r0, r6
 800c6ac:	b209      	sxth	r1, r1
 800c6ae:	4281      	cmp	r1, r0
 800c6b0:	da00      	bge.n	800c6b4 <_ZNK8touchgfx9Container16getContainedAreaEv+0x7c>
 800c6b2:	1c32      	adds	r2, r6, #0
 800c6b4:	88e1      	ldrh	r1, [r4, #6]
 800c6b6:	b212      	sxth	r2, r2
 800c6b8:	19cf      	adds	r7, r1, r7
 800c6ba:	9901      	ldr	r1, [sp, #4]
 800c6bc:	185b      	adds	r3, r3, r1
 800c6be:	b21e      	sxth	r6, r3
 800c6c0:	1c39      	adds	r1, r7, #0
 800c6c2:	b23f      	sxth	r7, r7
 800c6c4:	42b7      	cmp	r7, r6
 800c6c6:	da00      	bge.n	800c6ca <_ZNK8touchgfx9Container16getContainedAreaEv+0x92>
 800c6c8:	1c19      	adds	r1, r3, #0
 800c6ca:	9b02      	ldr	r3, [sp, #8]
 800c6cc:	8023      	strh	r3, [r4, #0]
 800c6ce:	9b03      	ldr	r3, [sp, #12]
 800c6d0:	8063      	strh	r3, [r4, #2]
 800c6d2:	9b02      	ldr	r3, [sp, #8]
 800c6d4:	1ad2      	subs	r2, r2, r3
 800c6d6:	9b03      	ldr	r3, [sp, #12]
 800c6d8:	80a2      	strh	r2, [r4, #4]
 800c6da:	1ac8      	subs	r0, r1, r3
 800c6dc:	80e0      	strh	r0, [r4, #6]
 800c6de:	e7cd      	b.n	800c67c <_ZNK8touchgfx9Container16getContainedAreaEv+0x44>
 800c6e0:	0020      	movs	r0, r4
 800c6e2:	b005      	add	sp, #20
 800c6e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c6e6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800c6e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6e8:	1d83      	adds	r3, r0, #6
 800c6ea:	7fdb      	ldrb	r3, [r3, #31]
 800c6ec:	b085      	sub	sp, #20
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d031      	beq.n	800c756 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x70>
 800c6f2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c6f4:	2c00      	cmp	r4, #0
 800c6f6:	d02e      	beq.n	800c756 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x70>
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	5e8b      	ldrsh	r3, [r1, r2]
 800c6fc:	9301      	str	r3, [sp, #4]
 800c6fe:	2302      	movs	r3, #2
 800c700:	5ecd      	ldrsh	r5, [r1, r3]
 800c702:	2304      	movs	r3, #4
 800c704:	5ece      	ldrsh	r6, [r1, r3]
 800c706:	2306      	movs	r3, #6
 800c708:	5ecf      	ldrsh	r7, [r1, r3]
 800c70a:	1da3      	adds	r3, r4, #6
 800c70c:	7fdb      	ldrb	r3, [r3, #31]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d01e      	beq.n	800c750 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6a>
 800c712:	9a01      	ldr	r2, [sp, #4]
 800c714:	ab02      	add	r3, sp, #8
 800c716:	0018      	movs	r0, r3
 800c718:	801a      	strh	r2, [r3, #0]
 800c71a:	805d      	strh	r5, [r3, #2]
 800c71c:	809e      	strh	r6, [r3, #4]
 800c71e:	80df      	strh	r7, [r3, #6]
 800c720:	1d21      	adds	r1, r4, #4
 800c722:	f7ff ff2d 	bl	800c580 <_ZN8touchgfx4RectaNERKS0_>
 800c726:	a802      	add	r0, sp, #8
 800c728:	f7ff ff7a 	bl	800c620 <_ZNK8touchgfx4Rect7isEmptyEv>
 800c72c:	2800      	cmp	r0, #0
 800c72e:	d10f      	bne.n	800c750 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6a>
 800c730:	ab02      	add	r3, sp, #8
 800c732:	881b      	ldrh	r3, [r3, #0]
 800c734:	88a2      	ldrh	r2, [r4, #4]
 800c736:	0020      	movs	r0, r4
 800c738:	1a9b      	subs	r3, r3, r2
 800c73a:	aa02      	add	r2, sp, #8
 800c73c:	8013      	strh	r3, [r2, #0]
 800c73e:	8853      	ldrh	r3, [r2, #2]
 800c740:	88e2      	ldrh	r2, [r4, #6]
 800c742:	1a9b      	subs	r3, r3, r2
 800c744:	aa02      	add	r2, sp, #8
 800c746:	8053      	strh	r3, [r2, #2]
 800c748:	6823      	ldr	r3, [r4, #0]
 800c74a:	0011      	movs	r1, r2
 800c74c:	689b      	ldr	r3, [r3, #8]
 800c74e:	4798      	blx	r3
 800c750:	69a4      	ldr	r4, [r4, #24]
 800c752:	2c00      	cmp	r4, #0
 800c754:	d1d9      	bne.n	800c70a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x24>
 800c756:	b005      	add	sp, #20
 800c758:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c75a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800c75a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c75c:	1d83      	adds	r3, r0, #6
 800c75e:	7fdb      	ldrb	r3, [r3, #31]
 800c760:	000d      	movs	r5, r1
 800c762:	0016      	movs	r6, r2
 800c764:	2b00      	cmp	r3, #0
 800c766:	d027      	beq.n	800c7b8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x5e>
 800c768:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c76a:	2c00      	cmp	r4, #0
 800c76c:	d024      	beq.n	800c7b8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x5e>
 800c76e:	1da3      	adds	r3, r4, #6
 800c770:	7fdb      	ldrb	r3, [r3, #31]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d01e      	beq.n	800c7b4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x5a>
 800c776:	2208      	movs	r2, #8
 800c778:	0029      	movs	r1, r5
 800c77a:	4668      	mov	r0, sp
 800c77c:	f007 fe17 	bl	80143ae <memcpy>
 800c780:	4668      	mov	r0, sp
 800c782:	1d21      	adds	r1, r4, #4
 800c784:	f7ff fefc 	bl	800c580 <_ZN8touchgfx4RectaNERKS0_>
 800c788:	4668      	mov	r0, sp
 800c78a:	f7ff ff49 	bl	800c620 <_ZNK8touchgfx4Rect7isEmptyEv>
 800c78e:	2800      	cmp	r0, #0
 800c790:	d110      	bne.n	800c7b4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x5a>
 800c792:	466b      	mov	r3, sp
 800c794:	88a2      	ldrh	r2, [r4, #4]
 800c796:	881b      	ldrh	r3, [r3, #0]
 800c798:	4669      	mov	r1, sp
 800c79a:	1a9b      	subs	r3, r3, r2
 800c79c:	466a      	mov	r2, sp
 800c79e:	8013      	strh	r3, [r2, #0]
 800c7a0:	8853      	ldrh	r3, [r2, #2]
 800c7a2:	88e2      	ldrh	r2, [r4, #6]
 800c7a4:	0020      	movs	r0, r4
 800c7a6:	1a9b      	subs	r3, r3, r2
 800c7a8:	466a      	mov	r2, sp
 800c7aa:	8053      	strh	r3, [r2, #2]
 800c7ac:	6823      	ldr	r3, [r4, #0]
 800c7ae:	0032      	movs	r2, r6
 800c7b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7b2:	4798      	blx	r3
 800c7b4:	69a4      	ldr	r4, [r4, #24]
 800c7b6:	e7d8      	b.n	800c76a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x10>
 800c7b8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
	...

0800c7bc <_ZN8touchgfx25PartialFrameBufferManager23transmitRemainingBlocksEv>:
 800c7bc:	b530      	push	{r4, r5, lr}
 800c7be:	4b20      	ldr	r3, [pc, #128]	; (800c840 <_ZN8touchgfx25PartialFrameBufferManager23transmitRemainingBlocksEv+0x84>)
 800c7c0:	b085      	sub	sp, #20
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	699c      	ldr	r4, [r3, #24]
 800c7c6:	f7ff fa4e 	bl	800bc66 <_ZN8touchgfx14transmitActiveEv>
 800c7ca:	2800      	cmp	r0, #0
 800c7cc:	d002      	beq.n	800c7d4 <_ZN8touchgfx25PartialFrameBufferManager23transmitRemainingBlocksEv+0x18>
 800c7ce:	f7fe fa17 	bl	800ac00 <_ZN8touchgfx10OSWrappers9taskYieldEv>
 800c7d2:	e7f8      	b.n	800c7c6 <_ZN8touchgfx25PartialFrameBufferManager23transmitRemainingBlocksEv+0xa>
 800c7d4:	6823      	ldr	r3, [r4, #0]
 800c7d6:	0020      	movs	r0, r4
 800c7d8:	689b      	ldr	r3, [r3, #8]
 800c7da:	4798      	blx	r3
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	d02d      	beq.n	800c83c <_ZN8touchgfx25PartialFrameBufferManager23transmitRemainingBlocksEv+0x80>
 800c7e0:	6823      	ldr	r3, [r4, #0]
 800c7e2:	0020      	movs	r0, r4
 800c7e4:	691b      	ldr	r3, [r3, #16]
 800c7e6:	4798      	blx	r3
 800c7e8:	ad02      	add	r5, sp, #8
 800c7ea:	0001      	movs	r1, r0
 800c7ec:	2208      	movs	r2, #8
 800c7ee:	0028      	movs	r0, r5
 800c7f0:	f007 fddd 	bl	80143ae <memcpy>
 800c7f4:	8868      	ldrh	r0, [r5, #2]
 800c7f6:	88eb      	ldrh	r3, [r5, #6]
 800c7f8:	18c0      	adds	r0, r0, r3
 800c7fa:	b280      	uxth	r0, r0
 800c7fc:	f7ff fa3b 	bl	800bc76 <_ZN8touchgfx19shouldTransferBlockEt>
 800c800:	2800      	cmp	r0, #0
 800c802:	d102      	bne.n	800c80a <_ZN8touchgfx25PartialFrameBufferManager23transmitRemainingBlocksEv+0x4e>
 800c804:	f7fe f9fc 	bl	800ac00 <_ZN8touchgfx10OSWrappers9taskYieldEv>
 800c808:	e7f4      	b.n	800c7f4 <_ZN8touchgfx25PartialFrameBufferManager23transmitRemainingBlocksEv+0x38>
 800c80a:	6823      	ldr	r3, [r4, #0]
 800c80c:	0029      	movs	r1, r5
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	0020      	movs	r0, r4
 800c812:	4798      	blx	r3
 800c814:	88ab      	ldrh	r3, [r5, #4]
 800c816:	886a      	ldrh	r2, [r5, #2]
 800c818:	8829      	ldrh	r1, [r5, #0]
 800c81a:	88ed      	ldrh	r5, [r5, #6]
 800c81c:	9500      	str	r5, [sp, #0]
 800c81e:	f7ff fa3a 	bl	800bc96 <_ZN8touchgfx13transmitBlockEPKhtttt>
 800c822:	6823      	ldr	r3, [r4, #0]
 800c824:	0020      	movs	r0, r4
 800c826:	689b      	ldr	r3, [r3, #8]
 800c828:	4798      	blx	r3
 800c82a:	2800      	cmp	r0, #0
 800c82c:	d0d2      	beq.n	800c7d4 <_ZN8touchgfx25PartialFrameBufferManager23transmitRemainingBlocksEv+0x18>
 800c82e:	f7ff fa1a 	bl	800bc66 <_ZN8touchgfx14transmitActiveEv>
 800c832:	2800      	cmp	r0, #0
 800c834:	d0ce      	beq.n	800c7d4 <_ZN8touchgfx25PartialFrameBufferManager23transmitRemainingBlocksEv+0x18>
 800c836:	f7fe f9e3 	bl	800ac00 <_ZN8touchgfx10OSWrappers9taskYieldEv>
 800c83a:	e7f8      	b.n	800c82e <_ZN8touchgfx25PartialFrameBufferManager23transmitRemainingBlocksEv+0x72>
 800c83c:	b005      	add	sp, #20
 800c83e:	bd30      	pop	{r4, r5, pc}
 800c840:	200026c8 	.word	0x200026c8

0800c844 <_ZN8touchgfx25PartialFrameBufferManager16tryTransmitBlockEv>:
 800c844:	b530      	push	{r4, r5, lr}
 800c846:	4b22      	ldr	r3, [pc, #136]	; (800c8d0 <_ZN8touchgfx25PartialFrameBufferManager16tryTransmitBlockEv+0x8c>)
 800c848:	b085      	sub	sp, #20
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	699d      	ldr	r5, [r3, #24]
 800c84e:	682b      	ldr	r3, [r5, #0]
 800c850:	0028      	movs	r0, r5
 800c852:	685b      	ldr	r3, [r3, #4]
 800c854:	4798      	blx	r3
 800c856:	f7ff fa06 	bl	800bc66 <_ZN8touchgfx14transmitActiveEv>
 800c85a:	2800      	cmp	r0, #0
 800c85c:	d123      	bne.n	800c8a6 <_ZN8touchgfx25PartialFrameBufferManager16tryTransmitBlockEv+0x62>
 800c85e:	682b      	ldr	r3, [r5, #0]
 800c860:	0028      	movs	r0, r5
 800c862:	689b      	ldr	r3, [r3, #8]
 800c864:	4798      	blx	r3
 800c866:	2800      	cmp	r0, #0
 800c868:	d01d      	beq.n	800c8a6 <_ZN8touchgfx25PartialFrameBufferManager16tryTransmitBlockEv+0x62>
 800c86a:	682b      	ldr	r3, [r5, #0]
 800c86c:	0028      	movs	r0, r5
 800c86e:	691b      	ldr	r3, [r3, #16]
 800c870:	4798      	blx	r3
 800c872:	ac02      	add	r4, sp, #8
 800c874:	0001      	movs	r1, r0
 800c876:	2208      	movs	r2, #8
 800c878:	0020      	movs	r0, r4
 800c87a:	f007 fd98 	bl	80143ae <memcpy>
 800c87e:	8863      	ldrh	r3, [r4, #2]
 800c880:	88e0      	ldrh	r0, [r4, #6]
 800c882:	18c0      	adds	r0, r0, r3
 800c884:	b280      	uxth	r0, r0
 800c886:	f7ff f9f6 	bl	800bc76 <_ZN8touchgfx19shouldTransferBlockEt>
 800c88a:	682b      	ldr	r3, [r5, #0]
 800c88c:	2800      	cmp	r0, #0
 800c88e:	d00c      	beq.n	800c8aa <_ZN8touchgfx25PartialFrameBufferManager16tryTransmitBlockEv+0x66>
 800c890:	0021      	movs	r1, r4
 800c892:	68db      	ldr	r3, [r3, #12]
 800c894:	0028      	movs	r0, r5
 800c896:	4798      	blx	r3
 800c898:	88a3      	ldrh	r3, [r4, #4]
 800c89a:	8862      	ldrh	r2, [r4, #2]
 800c89c:	8821      	ldrh	r1, [r4, #0]
 800c89e:	88e4      	ldrh	r4, [r4, #6]
 800c8a0:	9400      	str	r4, [sp, #0]
 800c8a2:	f7ff f9f8 	bl	800bc96 <_ZN8touchgfx13transmitBlockEPKhtttt>
 800c8a6:	b005      	add	sp, #20
 800c8a8:	bd30      	pop	{r4, r5, pc}
 800c8aa:	695b      	ldr	r3, [r3, #20]
 800c8ac:	0028      	movs	r0, r5
 800c8ae:	4798      	blx	r3
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	d1f8      	bne.n	800c8a6 <_ZN8touchgfx25PartialFrameBufferManager16tryTransmitBlockEv+0x62>
 800c8b4:	8860      	ldrh	r0, [r4, #2]
 800c8b6:	88e3      	ldrh	r3, [r4, #6]
 800c8b8:	18c0      	adds	r0, r0, r3
 800c8ba:	b280      	uxth	r0, r0
 800c8bc:	f7ff f9db 	bl	800bc76 <_ZN8touchgfx19shouldTransferBlockEt>
 800c8c0:	2800      	cmp	r0, #0
 800c8c2:	d102      	bne.n	800c8ca <_ZN8touchgfx25PartialFrameBufferManager16tryTransmitBlockEv+0x86>
 800c8c4:	f7fe f99c 	bl	800ac00 <_ZN8touchgfx10OSWrappers9taskYieldEv>
 800c8c8:	e7f4      	b.n	800c8b4 <_ZN8touchgfx25PartialFrameBufferManager16tryTransmitBlockEv+0x70>
 800c8ca:	682b      	ldr	r3, [r5, #0]
 800c8cc:	e7e0      	b.n	800c890 <_ZN8touchgfx25PartialFrameBufferManager16tryTransmitBlockEv+0x4c>
 800c8ce:	46c0      	nop			; (mov r8, r8)
 800c8d0:	200026c8 	.word	0x200026c8

0800c8d4 <_ZN8touchgfx25PartialFrameBufferManager23tryTransmitBlockFromIRQEv>:
 800c8d4:	b530      	push	{r4, r5, lr}
 800c8d6:	4b17      	ldr	r3, [pc, #92]	; (800c934 <_ZN8touchgfx25PartialFrameBufferManager23tryTransmitBlockFromIRQEv+0x60>)
 800c8d8:	b085      	sub	sp, #20
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	699d      	ldr	r5, [r3, #24]
 800c8de:	682b      	ldr	r3, [r5, #0]
 800c8e0:	0028      	movs	r0, r5
 800c8e2:	699b      	ldr	r3, [r3, #24]
 800c8e4:	4798      	blx	r3
 800c8e6:	682b      	ldr	r3, [r5, #0]
 800c8e8:	0028      	movs	r0, r5
 800c8ea:	689b      	ldr	r3, [r3, #8]
 800c8ec:	4798      	blx	r3
 800c8ee:	2800      	cmp	r0, #0
 800c8f0:	d01d      	beq.n	800c92e <_ZN8touchgfx25PartialFrameBufferManager23tryTransmitBlockFromIRQEv+0x5a>
 800c8f2:	682b      	ldr	r3, [r5, #0]
 800c8f4:	0028      	movs	r0, r5
 800c8f6:	691b      	ldr	r3, [r3, #16]
 800c8f8:	4798      	blx	r3
 800c8fa:	ac02      	add	r4, sp, #8
 800c8fc:	0001      	movs	r1, r0
 800c8fe:	2208      	movs	r2, #8
 800c900:	0020      	movs	r0, r4
 800c902:	f007 fd54 	bl	80143ae <memcpy>
 800c906:	8860      	ldrh	r0, [r4, #2]
 800c908:	88e3      	ldrh	r3, [r4, #6]
 800c90a:	18c0      	adds	r0, r0, r3
 800c90c:	b280      	uxth	r0, r0
 800c90e:	f7ff f9b2 	bl	800bc76 <_ZN8touchgfx19shouldTransferBlockEt>
 800c912:	2800      	cmp	r0, #0
 800c914:	d00b      	beq.n	800c92e <_ZN8touchgfx25PartialFrameBufferManager23tryTransmitBlockFromIRQEv+0x5a>
 800c916:	682b      	ldr	r3, [r5, #0]
 800c918:	0021      	movs	r1, r4
 800c91a:	68db      	ldr	r3, [r3, #12]
 800c91c:	0028      	movs	r0, r5
 800c91e:	4798      	blx	r3
 800c920:	88a3      	ldrh	r3, [r4, #4]
 800c922:	8862      	ldrh	r2, [r4, #2]
 800c924:	8821      	ldrh	r1, [r4, #0]
 800c926:	88e4      	ldrh	r4, [r4, #6]
 800c928:	9400      	str	r4, [sp, #0]
 800c92a:	f7ff f9b4 	bl	800bc96 <_ZN8touchgfx13transmitBlockEPKhtttt>
 800c92e:	b005      	add	sp, #20
 800c930:	bd30      	pop	{r4, r5, pc}
 800c932:	46c0      	nop			; (mov r8, r8)
 800c934:	200026c8 	.word	0x200026c8

0800c938 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800c938:	b513      	push	{r0, r1, r4, lr}
 800c93a:	6803      	ldr	r3, [r0, #0]
 800c93c:	33a8      	adds	r3, #168	; 0xa8
 800c93e:	681c      	ldr	r4, [r3, #0]
 800c940:	2300      	movs	r3, #0
 800c942:	9300      	str	r3, [sp, #0]
 800c944:	9301      	str	r3, [sp, #4]
 800c946:	466b      	mov	r3, sp
 800c948:	47a0      	blx	r4
 800c94a:	bd13      	pop	{r0, r1, r4, pc}

0800c94c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800c94c:	0002      	movs	r2, r0
 800c94e:	2301      	movs	r3, #1
 800c950:	324b      	adds	r2, #75	; 0x4b
 800c952:	306d      	adds	r0, #109	; 0x6d
 800c954:	7013      	strb	r3, [r2, #0]
 800c956:	7003      	strb	r3, [r0, #0]
 800c958:	4770      	bx	lr

0800c95a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800c95a:	0002      	movs	r2, r0
 800c95c:	2301      	movs	r3, #1
 800c95e:	324b      	adds	r2, #75	; 0x4b
 800c960:	306d      	adds	r0, #109	; 0x6d
 800c962:	7013      	strb	r3, [r2, #0]
 800c964:	7003      	strb	r3, [r0, #0]
 800c966:	4770      	bx	lr

0800c968 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800c968:	2301      	movs	r3, #1
 800c96a:	b510      	push	{r4, lr}
 800c96c:	6842      	ldr	r2, [r0, #4]
 800c96e:	7253      	strb	r3, [r2, #9]
 800c970:	6840      	ldr	r0, [r0, #4]
 800c972:	6803      	ldr	r3, [r0, #0]
 800c974:	691b      	ldr	r3, [r3, #16]
 800c976:	4798      	blx	r3
 800c978:	bd10      	pop	{r4, pc}

0800c97a <_ZN8touchgfx3HAL8flushDMAEv>:
 800c97a:	b510      	push	{r4, lr}
 800c97c:	6840      	ldr	r0, [r0, #4]
 800c97e:	6803      	ldr	r3, [r0, #0]
 800c980:	689b      	ldr	r3, [r3, #8]
 800c982:	4798      	blx	r3
 800c984:	bd10      	pop	{r4, pc}

0800c986 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800c986:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c988:	b08f      	sub	sp, #60	; 0x3c
 800c98a:	9300      	str	r3, [sp, #0]
 800c98c:	ac14      	add	r4, sp, #80	; 0x50
 800c98e:	8824      	ldrh	r4, [r4, #0]
 800c990:	ab04      	add	r3, sp, #16
 800c992:	46a4      	mov	ip, r4
 800c994:	ac15      	add	r4, sp, #84	; 0x54
 800c996:	8824      	ldrh	r4, [r4, #0]
 800c998:	940a      	str	r4, [sp, #40]	; 0x28
 800c99a:	ac16      	add	r4, sp, #88	; 0x58
 800c99c:	8824      	ldrh	r4, [r4, #0]
 800c99e:	940b      	str	r4, [sp, #44]	; 0x2c
 800c9a0:	ac17      	add	r4, sp, #92	; 0x5c
 800c9a2:	7824      	ldrb	r4, [r4, #0]
 800c9a4:	940c      	str	r4, [sp, #48]	; 0x30
 800c9a6:	ac18      	add	r4, sp, #96	; 0x60
 800c9a8:	7824      	ldrb	r4, [r4, #0]
 800c9aa:	940d      	str	r4, [sp, #52]	; 0x34
 800c9ac:	ac19      	add	r4, sp, #100	; 0x64
 800c9ae:	8825      	ldrh	r5, [r4, #0]
 800c9b0:	ac1a      	add	r4, sp, #104	; 0x68
 800c9b2:	7826      	ldrb	r6, [r4, #0]
 800c9b4:	ac1b      	add	r4, sp, #108	; 0x6c
 800c9b6:	7827      	ldrb	r7, [r4, #0]
 800c9b8:	2441      	movs	r4, #65	; 0x41
 800c9ba:	18e4      	adds	r4, r4, r3
 800c9bc:	7fe4      	ldrb	r4, [r4, #31]
 800c9be:	6803      	ldr	r3, [r0, #0]
 800c9c0:	9409      	str	r4, [sp, #36]	; 0x24
 800c9c2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800c9c4:	9708      	str	r7, [sp, #32]
 800c9c6:	9405      	str	r4, [sp, #20]
 800c9c8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c9ca:	9607      	str	r6, [sp, #28]
 800c9cc:	9404      	str	r4, [sp, #16]
 800c9ce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800c9d0:	9506      	str	r5, [sp, #24]
 800c9d2:	9403      	str	r4, [sp, #12]
 800c9d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c9d6:	9402      	str	r4, [sp, #8]
 800c9d8:	4664      	mov	r4, ip
 800c9da:	9401      	str	r4, [sp, #4]
 800c9dc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800c9de:	0013      	movs	r3, r2
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	47a0      	blx	r4
 800c9e4:	b00f      	add	sp, #60	; 0x3c
 800c9e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c9e8 <_ZN8touchgfx3HAL10beginFrameEv>:
 800c9e8:	4b04      	ldr	r3, [pc, #16]	; (800c9fc <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800c9ea:	781a      	ldrb	r2, [r3, #0]
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	2a00      	cmp	r2, #0
 800c9f0:	d002      	beq.n	800c9f8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800c9f2:	306e      	adds	r0, #110	; 0x6e
 800c9f4:	7802      	ldrb	r2, [r0, #0]
 800c9f6:	4053      	eors	r3, r2
 800c9f8:	0018      	movs	r0, r3
 800c9fa:	4770      	bx	lr
 800c9fc:	200026c6 	.word	0x200026c6

0800ca00 <_ZN8touchgfx3HAL8endFrameEv>:
 800ca00:	b510      	push	{r4, lr}
 800ca02:	0004      	movs	r4, r0
 800ca04:	6840      	ldr	r0, [r0, #4]
 800ca06:	6803      	ldr	r3, [r0, #0]
 800ca08:	689b      	ldr	r3, [r3, #8]
 800ca0a:	4798      	blx	r3
 800ca0c:	0023      	movs	r3, r4
 800ca0e:	336d      	adds	r3, #109	; 0x6d
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d002      	beq.n	800ca1c <_ZN8touchgfx3HAL8endFrameEv+0x1c>
 800ca16:	2301      	movs	r3, #1
 800ca18:	346e      	adds	r4, #110	; 0x6e
 800ca1a:	7023      	strb	r3, [r4, #0]
 800ca1c:	bd10      	pop	{r4, pc}

0800ca1e <_ZN8touchgfx3HAL10initializeEv>:
 800ca1e:	b510      	push	{r4, lr}
 800ca20:	0004      	movs	r4, r0
 800ca22:	f7fe f873 	bl	800ab0c <_ZN8touchgfx10OSWrappers10initializeEv>
 800ca26:	f7fd fd15 	bl	800a454 <_ZN8touchgfx4GPIO4initEv>
 800ca2a:	6860      	ldr	r0, [r4, #4]
 800ca2c:	6803      	ldr	r3, [r0, #0]
 800ca2e:	68db      	ldr	r3, [r3, #12]
 800ca30:	4798      	blx	r3
 800ca32:	68e0      	ldr	r0, [r4, #12]
 800ca34:	6803      	ldr	r3, [r0, #0]
 800ca36:	689b      	ldr	r3, [r3, #8]
 800ca38:	4798      	blx	r3
 800ca3a:	6823      	ldr	r3, [r4, #0]
 800ca3c:	0020      	movs	r0, r4
 800ca3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca40:	4798      	blx	r3
 800ca42:	bd10      	pop	{r4, pc}

0800ca44 <_ZN8touchgfx3HAL9taskEntryEv>:
 800ca44:	b510      	push	{r4, lr}
 800ca46:	0004      	movs	r4, r0
 800ca48:	6803      	ldr	r3, [r0, #0]
 800ca4a:	3304      	adds	r3, #4
 800ca4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca4e:	4798      	blx	r3
 800ca50:	6823      	ldr	r3, [r4, #0]
 800ca52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca54:	0020      	movs	r0, r4
 800ca56:	4798      	blx	r3
 800ca58:	f7fe f8b8 	bl	800abcc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 800ca5c:	6823      	ldr	r3, [r4, #0]
 800ca5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca60:	e7f8      	b.n	800ca54 <_ZN8touchgfx3HAL9taskEntryEv+0x10>
	...

0800ca64 <_ZN8touchgfx3HAL4tickEv>:
 800ca64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca66:	6803      	ldr	r3, [r0, #0]
 800ca68:	b085      	sub	sp, #20
 800ca6a:	33b0      	adds	r3, #176	; 0xb0
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	0004      	movs	r4, r0
 800ca70:	4798      	blx	r3
 800ca72:	2800      	cmp	r0, #0
 800ca74:	d100      	bne.n	800ca78 <_ZN8touchgfx3HAL4tickEv+0x14>
 800ca76:	e0a4      	b.n	800cbc2 <_ZN8touchgfx3HAL4tickEv+0x15e>
 800ca78:	2001      	movs	r0, #1
 800ca7a:	f7fd fcf0 	bl	800a45e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800ca7e:	0023      	movs	r3, r4
 800ca80:	0025      	movs	r5, r4
 800ca82:	2600      	movs	r6, #0
 800ca84:	0027      	movs	r7, r4
 800ca86:	336a      	adds	r3, #106	; 0x6a
 800ca88:	781a      	ldrb	r2, [r3, #0]
 800ca8a:	356b      	adds	r5, #107	; 0x6b
 800ca8c:	702a      	strb	r2, [r5, #0]
 800ca8e:	3b1f      	subs	r3, #31
 800ca90:	77de      	strb	r6, [r3, #31]
 800ca92:	3779      	adds	r7, #121	; 0x79
 800ca94:	701e      	strb	r6, [r3, #0]
 800ca96:	783b      	ldrb	r3, [r7, #0]
 800ca98:	42b3      	cmp	r3, r6
 800ca9a:	d005      	beq.n	800caa8 <_ZN8touchgfx3HAL4tickEv+0x44>
 800ca9c:	6823      	ldr	r3, [r4, #0]
 800ca9e:	0020      	movs	r0, r4
 800caa0:	33c4      	adds	r3, #196	; 0xc4
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	4798      	blx	r3
 800caa6:	703e      	strb	r6, [r7, #0]
 800caa8:	0023      	movs	r3, r4
 800caaa:	2601      	movs	r6, #1
 800caac:	334a      	adds	r3, #74	; 0x4a
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	6862      	ldr	r2, [r4, #4]
 800cab2:	4073      	eors	r3, r6
 800cab4:	7253      	strb	r3, [r2, #9]
 800cab6:	4b4e      	ldr	r3, [pc, #312]	; (800cbf0 <_ZN8touchgfx3HAL4tickEv+0x18c>)
 800cab8:	701e      	strb	r6, [r3, #0]
 800caba:	f002 f941 	bl	800ed40 <_ZN8touchgfx11Application11getInstanceEv>
 800cabe:	6803      	ldr	r3, [r0, #0]
 800cac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cac2:	4798      	blx	r3
 800cac4:	782b      	ldrb	r3, [r5, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d100      	bne.n	800cacc <_ZN8touchgfx3HAL4tickEv+0x68>
 800caca:	702e      	strb	r6, [r5, #0]
 800cacc:	f002 f938 	bl	800ed40 <_ZN8touchgfx11Application11getInstanceEv>
 800cad0:	6803      	ldr	r3, [r0, #0]
 800cad2:	695b      	ldr	r3, [r3, #20]
 800cad4:	4798      	blx	r3
 800cad6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800cad8:	6803      	ldr	r3, [r0, #0]
 800cada:	691b      	ldr	r3, [r3, #16]
 800cadc:	4798      	blx	r3
 800cade:	0022      	movs	r2, r4
 800cae0:	782b      	ldrb	r3, [r5, #0]
 800cae2:	326c      	adds	r2, #108	; 0x6c
 800cae4:	3b01      	subs	r3, #1
 800cae6:	b2db      	uxtb	r3, r3
 800cae8:	702b      	strb	r3, [r5, #0]
 800caea:	7812      	ldrb	r2, [r2, #0]
 800caec:	2a00      	cmp	r2, #0
 800caee:	d001      	beq.n	800caf4 <_ZN8touchgfx3HAL4tickEv+0x90>
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d1eb      	bne.n	800cacc <_ZN8touchgfx3HAL4tickEv+0x68>
 800caf4:	0021      	movs	r1, r4
 800caf6:	4a3f      	ldr	r2, [pc, #252]	; (800cbf4 <_ZN8touchgfx3HAL4tickEv+0x190>)
 800caf8:	3168      	adds	r1, #104	; 0x68
 800cafa:	7813      	ldrb	r3, [r2, #0]
 800cafc:	3301      	adds	r3, #1
 800cafe:	b25b      	sxtb	r3, r3
 800cb00:	7013      	strb	r3, [r2, #0]
 800cb02:	7809      	ldrb	r1, [r1, #0]
 800cb04:	b249      	sxtb	r1, r1
 800cb06:	4299      	cmp	r1, r3
 800cb08:	dc10      	bgt.n	800cb2c <_ZN8touchgfx3HAL4tickEv+0xc8>
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	68e0      	ldr	r0, [r4, #12]
 800cb0e:	7013      	strb	r3, [r2, #0]
 800cb10:	6803      	ldr	r3, [r0, #0]
 800cb12:	aa03      	add	r2, sp, #12
 800cb14:	68db      	ldr	r3, [r3, #12]
 800cb16:	a902      	add	r1, sp, #8
 800cb18:	4798      	blx	r3
 800cb1a:	6823      	ldr	r3, [r4, #0]
 800cb1c:	2800      	cmp	r0, #0
 800cb1e:	d05d      	beq.n	800cbdc <_ZN8touchgfx3HAL4tickEv+0x178>
 800cb20:	33bc      	adds	r3, #188	; 0xbc
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	9a03      	ldr	r2, [sp, #12]
 800cb26:	9902      	ldr	r1, [sp, #8]
 800cb28:	0020      	movs	r0, r4
 800cb2a:	4798      	blx	r3
 800cb2c:	466b      	mov	r3, sp
 800cb2e:	1ddd      	adds	r5, r3, #7
 800cb30:	2300      	movs	r3, #0
 800cb32:	6960      	ldr	r0, [r4, #20]
 800cb34:	702b      	strb	r3, [r5, #0]
 800cb36:	4298      	cmp	r0, r3
 800cb38:	d00a      	beq.n	800cb50 <_ZN8touchgfx3HAL4tickEv+0xec>
 800cb3a:	6803      	ldr	r3, [r0, #0]
 800cb3c:	0029      	movs	r1, r5
 800cb3e:	68db      	ldr	r3, [r3, #12]
 800cb40:	4798      	blx	r3
 800cb42:	2800      	cmp	r0, #0
 800cb44:	d004      	beq.n	800cb50 <_ZN8touchgfx3HAL4tickEv+0xec>
 800cb46:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800cb48:	7829      	ldrb	r1, [r5, #0]
 800cb4a:	6803      	ldr	r3, [r0, #0]
 800cb4c:	68db      	ldr	r3, [r3, #12]
 800cb4e:	4798      	blx	r3
 800cb50:	0020      	movs	r0, r4
 800cb52:	301c      	adds	r0, #28
 800cb54:	f007 f870 	bl	8013c38 <_ZN8touchgfx8Gestures4tickEv>
 800cb58:	0023      	movs	r3, r4
 800cb5a:	3370      	adds	r3, #112	; 0x70
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d02a      	beq.n	800cbb8 <_ZN8touchgfx3HAL4tickEv+0x154>
 800cb62:	6920      	ldr	r0, [r4, #16]
 800cb64:	6803      	ldr	r3, [r0, #0]
 800cb66:	691b      	ldr	r3, [r3, #16]
 800cb68:	4798      	blx	r3
 800cb6a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800cb6c:	0005      	movs	r5, r0
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d100      	bne.n	800cb74 <_ZN8touchgfx3HAL4tickEv+0x110>
 800cb72:	6760      	str	r0, [r4, #116]	; 0x74
 800cb74:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800cb76:	4a20      	ldr	r2, [pc, #128]	; (800cbf8 <_ZN8touchgfx3HAL4tickEv+0x194>)
 800cb78:	1aeb      	subs	r3, r5, r3
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d91c      	bls.n	800cbb8 <_ZN8touchgfx3HAL4tickEv+0x154>
 800cb7e:	6920      	ldr	r0, [r4, #16]
 800cb80:	6803      	ldr	r3, [r0, #0]
 800cb82:	699b      	ldr	r3, [r3, #24]
 800cb84:	4798      	blx	r3
 800cb86:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800cb88:	0006      	movs	r6, r0
 800cb8a:	2164      	movs	r1, #100	; 0x64
 800cb8c:	1ae8      	subs	r0, r5, r3
 800cb8e:	f7f3 fad7 	bl	8000140 <__udivsi3>
 800cb92:	0001      	movs	r1, r0
 800cb94:	0030      	movs	r0, r6
 800cb96:	f7f3 fad3 	bl	8000140 <__udivsi3>
 800cb9a:	0023      	movs	r3, r4
 800cb9c:	2264      	movs	r2, #100	; 0x64
 800cb9e:	3369      	adds	r3, #105	; 0x69
 800cba0:	2800      	cmp	r0, #0
 800cba2:	dd02      	ble.n	800cbaa <_ZN8touchgfx3HAL4tickEv+0x146>
 800cba4:	2863      	cmp	r0, #99	; 0x63
 800cba6:	dd1e      	ble.n	800cbe6 <_ZN8touchgfx3HAL4tickEv+0x182>
 800cba8:	2200      	movs	r2, #0
 800cbaa:	701a      	strb	r2, [r3, #0]
 800cbac:	6920      	ldr	r0, [r4, #16]
 800cbae:	2100      	movs	r1, #0
 800cbb0:	6803      	ldr	r3, [r0, #0]
 800cbb2:	69db      	ldr	r3, [r3, #28]
 800cbb4:	4798      	blx	r3
 800cbb6:	6765      	str	r5, [r4, #116]	; 0x74
 800cbb8:	f002 f8c2 	bl	800ed40 <_ZN8touchgfx11Application11getInstanceEv>
 800cbbc:	6803      	ldr	r3, [r0, #0]
 800cbbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbc0:	4798      	blx	r3
 800cbc2:	6823      	ldr	r3, [r4, #0]
 800cbc4:	0020      	movs	r0, r4
 800cbc6:	33b4      	adds	r3, #180	; 0xb4
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	4798      	blx	r3
 800cbcc:	2001      	movs	r0, #1
 800cbce:	f7fd fc5c 	bl	800a48a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	4a06      	ldr	r2, [pc, #24]	; (800cbf0 <_ZN8touchgfx3HAL4tickEv+0x18c>)
 800cbd6:	7013      	strb	r3, [r2, #0]
 800cbd8:	b005      	add	sp, #20
 800cbda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbdc:	33c0      	adds	r3, #192	; 0xc0
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	0020      	movs	r0, r4
 800cbe2:	4798      	blx	r3
 800cbe4:	e7a2      	b.n	800cb2c <_ZN8touchgfx3HAL4tickEv+0xc8>
 800cbe6:	2264      	movs	r2, #100	; 0x64
 800cbe8:	1a10      	subs	r0, r2, r0
 800cbea:	7018      	strb	r0, [r3, #0]
 800cbec:	e7de      	b.n	800cbac <_ZN8touchgfx3HAL4tickEv+0x148>
 800cbee:	46c0      	nop			; (mov r8, r8)
 800cbf0:	200026cc 	.word	0x200026cc
 800cbf4:	200026cd 	.word	0x200026cd
 800cbf8:	05f5e100 	.word	0x05f5e100

0800cbfc <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800cbfc:	b510      	push	{r4, lr}
 800cbfe:	0004      	movs	r4, r0
 800cc00:	f7fd ffa6 	bl	800ab50 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 800cc04:	2200      	movs	r2, #0
 800cc06:	6863      	ldr	r3, [r4, #4]
 800cc08:	729a      	strb	r2, [r3, #10]
 800cc0a:	bd10      	pop	{r4, pc}

0800cc0c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800cc0c:	b510      	push	{r4, lr}
 800cc0e:	301c      	adds	r0, #28
 800cc10:	6401      	str	r1, [r0, #64]	; 0x40
 800cc12:	f007 f80f 	bl	8013c34 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>
 800cc16:	bd10      	pop	{r4, pc}

0800cc18 <_ZN8touchgfx3HAL5touchEll>:
 800cc18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc1a:	0004      	movs	r4, r0
 800cc1c:	250e      	movs	r5, #14
 800cc1e:	b087      	sub	sp, #28
 800cc20:	a804      	add	r0, sp, #16
 800cc22:	9104      	str	r1, [sp, #16]
 800cc24:	9205      	str	r2, [sp, #20]
 800cc26:	f001 fe6f 	bl	800e908 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800cc2a:	9b04      	ldr	r3, [sp, #16]
 800cc2c:	ae03      	add	r6, sp, #12
 800cc2e:	0027      	movs	r7, r4
 800cc30:	446d      	add	r5, sp
 800cc32:	8033      	strh	r3, [r6, #0]
 800cc34:	9b05      	ldr	r3, [sp, #20]
 800cc36:	0029      	movs	r1, r5
 800cc38:	0030      	movs	r0, r6
 800cc3a:	802b      	strh	r3, [r5, #0]
 800cc3c:	f001 feb6 	bl	800e9ac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800cc40:	0020      	movs	r0, r4
 800cc42:	376f      	adds	r7, #111	; 0x6f
 800cc44:	8833      	ldrh	r3, [r6, #0]
 800cc46:	7839      	ldrb	r1, [r7, #0]
 800cc48:	469c      	mov	ip, r3
 800cc4a:	301c      	adds	r0, #28
 800cc4c:	882b      	ldrh	r3, [r5, #0]
 800cc4e:	2900      	cmp	r1, #0
 800cc50:	d011      	beq.n	800cc76 <_ZN8touchgfx3HAL5touchEll+0x5e>
 800cc52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc54:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800cc56:	9300      	str	r3, [sp, #0]
 800cc58:	b292      	uxth	r2, r2
 800cc5a:	b289      	uxth	r1, r1
 800cc5c:	4663      	mov	r3, ip
 800cc5e:	f006 fff9 	bl	8013c54 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800cc62:	2800      	cmp	r0, #0
 800cc64:	d005      	beq.n	800cc72 <_ZN8touchgfx3HAL5touchEll+0x5a>
 800cc66:	2200      	movs	r2, #0
 800cc68:	5eb3      	ldrsh	r3, [r6, r2]
 800cc6a:	6623      	str	r3, [r4, #96]	; 0x60
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	5eab      	ldrsh	r3, [r5, r2]
 800cc70:	6663      	str	r3, [r4, #100]	; 0x64
 800cc72:	b007      	add	sp, #28
 800cc74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc76:	4662      	mov	r2, ip
 800cc78:	f007 f828 	bl	8013ccc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	703b      	strb	r3, [r7, #0]
 800cc80:	e7f1      	b.n	800cc66 <_ZN8touchgfx3HAL5touchEll+0x4e>

0800cc82 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800cc82:	b510      	push	{r4, lr}
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d042      	beq.n	800cd0e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8c>
 800cc88:	0008      	movs	r0, r1
 800cc8a:	2401      	movs	r4, #1
 800cc8c:	4050      	eors	r0, r2
 800cc8e:	4220      	tst	r0, r4
 800cc90:	d007      	beq.n	800cca2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800cc92:	18cb      	adds	r3, r1, r3
 800cc94:	428b      	cmp	r3, r1
 800cc96:	d93a      	bls.n	800cd0e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8c>
 800cc98:	7810      	ldrb	r0, [r2, #0]
 800cc9a:	3201      	adds	r2, #1
 800cc9c:	7008      	strb	r0, [r1, #0]
 800cc9e:	3101      	adds	r1, #1
 800cca0:	e7f8      	b.n	800cc94 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800cca2:	4222      	tst	r2, r4
 800cca4:	d004      	beq.n	800ccb0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x2e>
 800cca6:	7810      	ldrb	r0, [r2, #0]
 800cca8:	3b01      	subs	r3, #1
 800ccaa:	7008      	strb	r0, [r1, #0]
 800ccac:	3201      	adds	r2, #1
 800ccae:	3101      	adds	r1, #1
 800ccb0:	2b01      	cmp	r3, #1
 800ccb2:	d911      	bls.n	800ccd8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x56>
 800ccb4:	0008      	movs	r0, r1
 800ccb6:	2403      	movs	r4, #3
 800ccb8:	4050      	eors	r0, r2
 800ccba:	4220      	tst	r0, r4
 800ccbc:	d01f      	beq.n	800ccfe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x7c>
 800ccbe:	2001      	movs	r0, #1
 800ccc0:	001c      	movs	r4, r3
 800ccc2:	4384      	bics	r4, r0
 800ccc4:	1908      	adds	r0, r1, r4
 800ccc6:	4288      	cmp	r0, r1
 800ccc8:	d904      	bls.n	800ccd4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x52>
 800ccca:	8814      	ldrh	r4, [r2, #0]
 800cccc:	3202      	adds	r2, #2
 800ccce:	800c      	strh	r4, [r1, #0]
 800ccd0:	3102      	adds	r1, #2
 800ccd2:	e7f8      	b.n	800ccc6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800ccd4:	2001      	movs	r0, #1
 800ccd6:	4003      	ands	r3, r0
 800ccd8:	2003      	movs	r0, #3
 800ccda:	001c      	movs	r4, r3
 800ccdc:	4384      	bics	r4, r0
 800ccde:	1908      	adds	r0, r1, r4
 800cce0:	4288      	cmp	r0, r1
 800cce2:	d902      	bls.n	800ccea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x68>
 800cce4:	ca10      	ldmia	r2!, {r4}
 800cce6:	c110      	stmia	r1!, {r4}
 800cce8:	e7fa      	b.n	800cce0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800ccea:	2003      	movs	r0, #3
 800ccec:	4003      	ands	r3, r0
 800ccee:	18cb      	adds	r3, r1, r3
 800ccf0:	428b      	cmp	r3, r1
 800ccf2:	d90c      	bls.n	800cd0e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8c>
 800ccf4:	7810      	ldrb	r0, [r2, #0]
 800ccf6:	3201      	adds	r2, #1
 800ccf8:	7008      	strb	r0, [r1, #0]
 800ccfa:	3101      	adds	r1, #1
 800ccfc:	e7f8      	b.n	800ccf0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800ccfe:	4222      	tst	r2, r4
 800cd00:	d0ea      	beq.n	800ccd8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x56>
 800cd02:	8810      	ldrh	r0, [r2, #0]
 800cd04:	3b02      	subs	r3, #2
 800cd06:	8008      	strh	r0, [r1, #0]
 800cd08:	3202      	adds	r2, #2
 800cd0a:	3102      	adds	r1, #2
 800cd0c:	e7e4      	b.n	800ccd8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x56>
 800cd0e:	2001      	movs	r0, #1
 800cd10:	bd10      	pop	{r4, pc}

0800cd12 <_ZN8touchgfx3HAL7noTouchEv>:
 800cd12:	b510      	push	{r4, lr}
 800cd14:	0004      	movs	r4, r0
 800cd16:	346f      	adds	r4, #111	; 0x6f
 800cd18:	7823      	ldrb	r3, [r4, #0]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d009      	beq.n	800cd32 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800cd1e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800cd20:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800cd22:	b29b      	uxth	r3, r3
 800cd24:	b292      	uxth	r2, r2
 800cd26:	301c      	adds	r0, #28
 800cd28:	2101      	movs	r1, #1
 800cd2a:	f006 ffcf 	bl	8013ccc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800cd2e:	2300      	movs	r3, #0
 800cd30:	7023      	strb	r3, [r4, #0]
 800cd32:	bd10      	pop	{r4, pc}

0800cd34 <_ZN8touchgfx3HAL3lcdEv>:
 800cd34:	4b05      	ldr	r3, [pc, #20]	; (800cd4c <_ZN8touchgfx3HAL3lcdEv+0x18>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	001a      	movs	r2, r3
 800cd3a:	3258      	adds	r2, #88	; 0x58
 800cd3c:	7812      	ldrb	r2, [r2, #0]
 800cd3e:	2a00      	cmp	r2, #0
 800cd40:	d002      	beq.n	800cd48 <_ZN8touchgfx3HAL3lcdEv+0x14>
 800cd42:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cd44:	2800      	cmp	r0, #0
 800cd46:	d100      	bne.n	800cd4a <_ZN8touchgfx3HAL3lcdEv+0x16>
 800cd48:	6898      	ldr	r0, [r3, #8]
 800cd4a:	4770      	bx	lr
 800cd4c:	200026c8 	.word	0x200026c8

0800cd50 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800cd50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd52:	b087      	sub	sp, #28
 800cd54:	9302      	str	r3, [sp, #8]
 800cd56:	ab0c      	add	r3, sp, #48	; 0x30
 800cd58:	0014      	movs	r4, r2
 800cd5a:	881a      	ldrh	r2, [r3, #0]
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	000f      	movs	r7, r1
 800cd60:	0005      	movs	r5, r0
 800cd62:	6980      	ldr	r0, [r0, #24]
 800cd64:	9305      	str	r3, [sp, #20]
 800cd66:	6803      	ldr	r3, [r0, #0]
 800cd68:	a905      	add	r1, sp, #20
 800cd6a:	9101      	str	r1, [sp, #4]
 800cd6c:	9200      	str	r2, [sp, #0]
 800cd6e:	681e      	ldr	r6, [r3, #0]
 800cd70:	0022      	movs	r2, r4
 800cd72:	9b02      	ldr	r3, [sp, #8]
 800cd74:	0039      	movs	r1, r7
 800cd76:	47b0      	blx	r6
 800cd78:	9b02      	ldr	r3, [sp, #8]
 800cd7a:	4e0e      	ldr	r6, [pc, #56]	; (800cdb4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x64>)
 800cd7c:	9003      	str	r0, [sp, #12]
 800cd7e:	8033      	strh	r3, [r6, #0]
 800cd80:	f7ff ffd8 	bl	800cd34 <_ZN8touchgfx3HAL3lcdEv>
 800cd84:	6803      	ldr	r3, [r0, #0]
 800cd86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd88:	4798      	blx	r3
 800cd8a:	2800      	cmp	r0, #0
 800cd8c:	d004      	beq.n	800cd98 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x48>
 800cd8e:	2801      	cmp	r0, #1
 800cd90:	d00a      	beq.n	800cda8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x58>
 800cd92:	9803      	ldr	r0, [sp, #12]
 800cd94:	b007      	add	sp, #28
 800cd96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd98:	8833      	ldrh	r3, [r6, #0]
 800cd9a:	435c      	muls	r4, r3
 800cd9c:	19e4      	adds	r4, r4, r7
 800cd9e:	0064      	lsls	r4, r4, #1
 800cda0:	9b05      	ldr	r3, [sp, #20]
 800cda2:	1b1c      	subs	r4, r3, r4
 800cda4:	63ec      	str	r4, [r5, #60]	; 0x3c
 800cda6:	e7f4      	b.n	800cd92 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x42>
 800cda8:	8833      	ldrh	r3, [r6, #0]
 800cdaa:	435c      	muls	r4, r3
 800cdac:	2303      	movs	r3, #3
 800cdae:	19e4      	adds	r4, r4, r7
 800cdb0:	435c      	muls	r4, r3
 800cdb2:	e7f5      	b.n	800cda0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x50>
 800cdb4:	200026c2 	.word	0x200026c2

0800cdb8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800cdb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdba:	b091      	sub	sp, #68	; 0x44
 800cdbc:	930b      	str	r3, [sp, #44]	; 0x2c
 800cdbe:	ab16      	add	r3, sp, #88	; 0x58
 800cdc0:	881b      	ldrh	r3, [r3, #0]
 800cdc2:	0015      	movs	r5, r2
 800cdc4:	930c      	str	r3, [sp, #48]	; 0x30
 800cdc6:	ab17      	add	r3, sp, #92	; 0x5c
 800cdc8:	881b      	ldrh	r3, [r3, #0]
 800cdca:	0004      	movs	r4, r0
 800cdcc:	930d      	str	r3, [sp, #52]	; 0x34
 800cdce:	ab18      	add	r3, sp, #96	; 0x60
 800cdd0:	881b      	ldrh	r3, [r3, #0]
 800cdd2:	910a      	str	r1, [sp, #40]	; 0x28
 800cdd4:	930e      	str	r3, [sp, #56]	; 0x38
 800cdd6:	ab19      	add	r3, sp, #100	; 0x64
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	930f      	str	r3, [sp, #60]	; 0x3c
 800cddc:	ab1a      	add	r3, sp, #104	; 0x68
 800cdde:	781e      	ldrb	r6, [r3, #0]
 800cde0:	ab1b      	add	r3, sp, #108	; 0x6c
 800cde2:	781f      	ldrb	r7, [r3, #0]
 800cde4:	f7ff ffa6 	bl	800cd34 <_ZN8touchgfx3HAL3lcdEv>
 800cde8:	6803      	ldr	r3, [r0, #0]
 800cdea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdec:	4798      	blx	r3
 800cdee:	4a0d      	ldr	r2, [pc, #52]	; (800ce24 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x6c>)
 800cdf0:	9008      	str	r0, [sp, #32]
 800cdf2:	9007      	str	r0, [sp, #28]
 800cdf4:	9709      	str	r7, [sp, #36]	; 0x24
 800cdf6:	8812      	ldrh	r2, [r2, #0]
 800cdf8:	6823      	ldr	r3, [r4, #0]
 800cdfa:	9206      	str	r2, [sp, #24]
 800cdfc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cdfe:	9605      	str	r6, [sp, #20]
 800ce00:	9204      	str	r2, [sp, #16]
 800ce02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce04:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ce06:	9203      	str	r2, [sp, #12]
 800ce08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ce0a:	0020      	movs	r0, r4
 800ce0c:	9202      	str	r2, [sp, #8]
 800ce0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ce10:	9201      	str	r2, [sp, #4]
 800ce12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce14:	9200      	str	r2, [sp, #0]
 800ce16:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 800ce18:	2200      	movs	r2, #0
 800ce1a:	002b      	movs	r3, r5
 800ce1c:	47b0      	blx	r6
 800ce1e:	b011      	add	sp, #68	; 0x44
 800ce20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce22:	46c0      	nop			; (mov r8, r8)
 800ce24:	200026c2 	.word	0x200026c2

0800ce28 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800ce28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce2a:	b093      	sub	sp, #76	; 0x4c
 800ce2c:	930d      	str	r3, [sp, #52]	; 0x34
 800ce2e:	ab18      	add	r3, sp, #96	; 0x60
 800ce30:	881b      	ldrh	r3, [r3, #0]
 800ce32:	0015      	movs	r5, r2
 800ce34:	930e      	str	r3, [sp, #56]	; 0x38
 800ce36:	ab19      	add	r3, sp, #100	; 0x64
 800ce38:	881b      	ldrh	r3, [r3, #0]
 800ce3a:	910c      	str	r1, [sp, #48]	; 0x30
 800ce3c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce3e:	ab1a      	add	r3, sp, #104	; 0x68
 800ce40:	881b      	ldrh	r3, [r3, #0]
 800ce42:	0004      	movs	r4, r0
 800ce44:	9310      	str	r3, [sp, #64]	; 0x40
 800ce46:	ab1b      	add	r3, sp, #108	; 0x6c
 800ce48:	781b      	ldrb	r3, [r3, #0]
 800ce4a:	9311      	str	r3, [sp, #68]	; 0x44
 800ce4c:	ab1c      	add	r3, sp, #112	; 0x70
 800ce4e:	781f      	ldrb	r7, [r3, #0]
 800ce50:	6803      	ldr	r3, [r0, #0]
 800ce52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce54:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce56:	4b10      	ldr	r3, [pc, #64]	; (800ce98 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x70>)
 800ce58:	881e      	ldrh	r6, [r3, #0]
 800ce5a:	f7ff ff6b 	bl	800cd34 <_ZN8touchgfx3HAL3lcdEv>
 800ce5e:	6803      	ldr	r3, [r0, #0]
 800ce60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce62:	4798      	blx	r3
 800ce64:	2302      	movs	r3, #2
 800ce66:	9307      	str	r3, [sp, #28]
 800ce68:	3b01      	subs	r3, #1
 800ce6a:	9305      	str	r3, [sp, #20]
 800ce6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ce6e:	9008      	str	r0, [sp, #32]
 800ce70:	9304      	str	r3, [sp, #16]
 800ce72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce74:	0020      	movs	r0, r4
 800ce76:	9303      	str	r3, [sp, #12]
 800ce78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce7a:	9709      	str	r7, [sp, #36]	; 0x24
 800ce7c:	9302      	str	r3, [sp, #8]
 800ce7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce80:	9606      	str	r6, [sp, #24]
 800ce82:	9301      	str	r3, [sp, #4]
 800ce84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce86:	2200      	movs	r2, #0
 800ce88:	9300      	str	r3, [sp, #0]
 800ce8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ce8c:	002b      	movs	r3, r5
 800ce8e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ce90:	47a0      	blx	r4
 800ce92:	b013      	add	sp, #76	; 0x4c
 800ce94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce96:	46c0      	nop			; (mov r8, r8)
 800ce98:	200026c2 	.word	0x200026c2

0800ce9c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800ce9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce9e:	b08d      	sub	sp, #52	; 0x34
 800cea0:	9309      	str	r3, [sp, #36]	; 0x24
 800cea2:	ab12      	add	r3, sp, #72	; 0x48
 800cea4:	881b      	ldrh	r3, [r3, #0]
 800cea6:	9107      	str	r1, [sp, #28]
 800cea8:	930a      	str	r3, [sp, #40]	; 0x28
 800ceaa:	ab13      	add	r3, sp, #76	; 0x4c
 800ceac:	881b      	ldrh	r3, [r3, #0]
 800ceae:	9208      	str	r2, [sp, #32]
 800ceb0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ceb2:	ab14      	add	r3, sp, #80	; 0x50
 800ceb4:	781d      	ldrb	r5, [r3, #0]
 800ceb6:	ab15      	add	r3, sp, #84	; 0x54
 800ceb8:	781f      	ldrb	r7, [r3, #0]
 800ceba:	6803      	ldr	r3, [r0, #0]
 800cebc:	0004      	movs	r4, r0
 800cebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cec0:	9306      	str	r3, [sp, #24]
 800cec2:	4b0b      	ldr	r3, [pc, #44]	; (800cef0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x54>)
 800cec4:	881e      	ldrh	r6, [r3, #0]
 800cec6:	f7ff ff35 	bl	800cd34 <_ZN8touchgfx3HAL3lcdEv>
 800ceca:	6803      	ldr	r3, [r0, #0]
 800cecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cece:	4798      	blx	r3
 800ced0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ced2:	9004      	str	r0, [sp, #16]
 800ced4:	9301      	str	r3, [sp, #4]
 800ced6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ced8:	0020      	movs	r0, r4
 800ceda:	9300      	str	r3, [sp, #0]
 800cedc:	9705      	str	r7, [sp, #20]
 800cede:	9603      	str	r6, [sp, #12]
 800cee0:	9502      	str	r5, [sp, #8]
 800cee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cee4:	9a08      	ldr	r2, [sp, #32]
 800cee6:	9907      	ldr	r1, [sp, #28]
 800cee8:	9c06      	ldr	r4, [sp, #24]
 800ceea:	47a0      	blx	r4
 800ceec:	b00d      	add	sp, #52	; 0x34
 800ceee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cef0:	200026c2 	.word	0x200026c2

0800cef4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800cef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cef6:	0004      	movs	r4, r0
 800cef8:	b093      	sub	sp, #76	; 0x4c
 800cefa:	0010      	movs	r0, r2
 800cefc:	000f      	movs	r7, r1
 800cefe:	9200      	str	r2, [sp, #0]
 800cf00:	9301      	str	r3, [sp, #4]
 800cf02:	f004 fc57 	bl	80117b4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800cf06:	2800      	cmp	r0, #0
 800cf08:	d100      	bne.n	800cf0c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x18>
 800cf0a:	e09d      	b.n	800d048 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800cf0c:	6823      	ldr	r3, [r4, #0]
 800cf0e:	0020      	movs	r0, r4
 800cf10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf12:	4798      	blx	r3
 800cf14:	6823      	ldr	r3, [r4, #0]
 800cf16:	0020      	movs	r0, r4
 800cf18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf1a:	4798      	blx	r3
 800cf1c:	9b00      	ldr	r3, [sp, #0]
 800cf1e:	ae0b      	add	r6, sp, #44	; 0x2c
 800cf20:	8033      	strh	r3, [r6, #0]
 800cf22:	4b5c      	ldr	r3, [pc, #368]	; (800d094 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a0>)
 800cf24:	4d5c      	ldr	r5, [pc, #368]	; (800d098 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 800cf26:	881b      	ldrh	r3, [r3, #0]
 800cf28:	0030      	movs	r0, r6
 800cf2a:	9302      	str	r3, [sp, #8]
 800cf2c:	4b5b      	ldr	r3, [pc, #364]	; (800d09c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800cf2e:	881b      	ldrh	r3, [r3, #0]
 800cf30:	9303      	str	r3, [sp, #12]
 800cf32:	882b      	ldrh	r3, [r5, #0]
 800cf34:	9304      	str	r3, [sp, #16]
 800cf36:	4b5a      	ldr	r3, [pc, #360]	; (800d0a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800cf38:	881b      	ldrh	r3, [r3, #0]
 800cf3a:	9305      	str	r3, [sp, #20]
 800cf3c:	f004 fcd2 	bl	80118e4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800cf40:	8028      	strh	r0, [r5, #0]
 800cf42:	0030      	movs	r0, r6
 800cf44:	f004 fd06 	bl	8011954 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800cf48:	4b55      	ldr	r3, [pc, #340]	; (800d0a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800cf4a:	b280      	uxth	r0, r0
 800cf4c:	8018      	strh	r0, [r3, #0]
 800cf4e:	4b55      	ldr	r3, [pc, #340]	; (800d0a4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800cf50:	781a      	ldrb	r2, [r3, #0]
 800cf52:	882b      	ldrh	r3, [r5, #0]
 800cf54:	2a00      	cmp	r2, #0
 800cf56:	d000      	beq.n	800cf5a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x66>
 800cf58:	e078      	b.n	800d04c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 800cf5a:	4a4e      	ldr	r2, [pc, #312]	; (800d094 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a0>)
 800cf5c:	8013      	strh	r3, [r2, #0]
 800cf5e:	4b4f      	ldr	r3, [pc, #316]	; (800d09c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800cf60:	8018      	strh	r0, [r3, #0]
 800cf62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cf64:	9800      	ldr	r0, [sp, #0]
 800cf66:	9306      	str	r3, [sp, #24]
 800cf68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf6a:	9307      	str	r3, [sp, #28]
 800cf6c:	f004 fc22 	bl	80117b4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800cf70:	6420      	str	r0, [r4, #64]	; 0x40
 800cf72:	63e0      	str	r0, [r4, #60]	; 0x3c
 800cf74:	2204      	movs	r2, #4
 800cf76:	5ebb      	ldrsh	r3, [r7, r2]
 800cf78:	0038      	movs	r0, r7
 800cf7a:	9300      	str	r3, [sp, #0]
 800cf7c:	2206      	movs	r2, #6
 800cf7e:	5ebb      	ldrsh	r3, [r7, r2]
 800cf80:	2200      	movs	r2, #0
 800cf82:	0011      	movs	r1, r2
 800cf84:	9308      	str	r3, [sp, #32]
 800cf86:	f7fc f98b 	bl	80092a0 <_ZN8touchgfx8Drawable5setXYEss>
 800cf8a:	1dbb      	adds	r3, r7, #6
 800cf8c:	7fda      	ldrb	r2, [r3, #31]
 800cf8e:	1d39      	adds	r1, r7, #4
 800cf90:	9209      	str	r2, [sp, #36]	; 0x24
 800cf92:	2201      	movs	r2, #1
 800cf94:	77da      	strb	r2, [r3, #31]
 800cf96:	9b01      	ldr	r3, [sp, #4]
 800cf98:	2204      	movs	r2, #4
 800cf9a:	5e9b      	ldrsh	r3, [r3, r2]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	dd5a      	ble.n	800d056 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x162>
 800cfa0:	9b01      	ldr	r3, [sp, #4]
 800cfa2:	2206      	movs	r2, #6
 800cfa4:	5e9b      	ldrsh	r3, [r3, r2]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	dd55      	ble.n	800d056 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x162>
 800cfaa:	2208      	movs	r2, #8
 800cfac:	a80e      	add	r0, sp, #56	; 0x38
 800cfae:	f007 f9fe 	bl	80143ae <memcpy>
 800cfb2:	9901      	ldr	r1, [sp, #4]
 800cfb4:	a80e      	add	r0, sp, #56	; 0x38
 800cfb6:	f7ff fae3 	bl	800c580 <_ZN8touchgfx4RectaNERKS0_>
 800cfba:	4b37      	ldr	r3, [pc, #220]	; (800d098 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 800cfbc:	ad10      	add	r5, sp, #64	; 0x40
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	5e9a      	ldrsh	r2, [r3, r2]
 800cfc2:	4b37      	ldr	r3, [pc, #220]	; (800d0a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800cfc4:	80aa      	strh	r2, [r5, #4]
 800cfc6:	2100      	movs	r1, #0
 800cfc8:	5e5b      	ldrsh	r3, [r3, r1]
 800cfca:	2100      	movs	r1, #0
 800cfcc:	2208      	movs	r2, #8
 800cfce:	9110      	str	r1, [sp, #64]	; 0x40
 800cfd0:	a80c      	add	r0, sp, #48	; 0x30
 800cfd2:	a90e      	add	r1, sp, #56	; 0x38
 800cfd4:	80eb      	strh	r3, [r5, #6]
 800cfd6:	f007 f9ea 	bl	80143ae <memcpy>
 800cfda:	0029      	movs	r1, r5
 800cfdc:	a80c      	add	r0, sp, #48	; 0x30
 800cfde:	f7ff facf 	bl	800c580 <_ZN8touchgfx4RectaNERKS0_>
 800cfe2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d13b      	bne.n	800d060 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x16c>
 800cfe8:	2000      	movs	r0, #0
 800cfea:	0025      	movs	r5, r4
 800cfec:	2600      	movs	r6, #0
 800cfee:	3558      	adds	r5, #88	; 0x58
 800cff0:	7028      	strb	r0, [r5, #0]
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	617e      	str	r6, [r7, #20]
 800cff6:	9301      	str	r3, [sp, #4]
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	a90c      	add	r1, sp, #48	; 0x30
 800cffc:	689b      	ldr	r3, [r3, #8]
 800cffe:	0038      	movs	r0, r7
 800d000:	4798      	blx	r3
 800d002:	9b01      	ldr	r3, [sp, #4]
 800d004:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d006:	617b      	str	r3, [r7, #20]
 800d008:	1dbb      	adds	r3, r7, #6
 800d00a:	702e      	strb	r6, [r5, #0]
 800d00c:	9900      	ldr	r1, [sp, #0]
 800d00e:	77da      	strb	r2, [r3, #31]
 800d010:	0038      	movs	r0, r7
 800d012:	9a08      	ldr	r2, [sp, #32]
 800d014:	f7fc f944 	bl	80092a0 <_ZN8touchgfx8Drawable5setXYEss>
 800d018:	9b06      	ldr	r3, [sp, #24]
 800d01a:	9a02      	ldr	r2, [sp, #8]
 800d01c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800d01e:	9b07      	ldr	r3, [sp, #28]
 800d020:	0020      	movs	r0, r4
 800d022:	6423      	str	r3, [r4, #64]	; 0x40
 800d024:	4b1b      	ldr	r3, [pc, #108]	; (800d094 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a0>)
 800d026:	801a      	strh	r2, [r3, #0]
 800d028:	4b1c      	ldr	r3, [pc, #112]	; (800d09c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800d02a:	9a03      	ldr	r2, [sp, #12]
 800d02c:	801a      	strh	r2, [r3, #0]
 800d02e:	4b1a      	ldr	r3, [pc, #104]	; (800d098 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 800d030:	9a04      	ldr	r2, [sp, #16]
 800d032:	801a      	strh	r2, [r3, #0]
 800d034:	4b1a      	ldr	r3, [pc, #104]	; (800d0a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800d036:	9a05      	ldr	r2, [sp, #20]
 800d038:	801a      	strh	r2, [r3, #0]
 800d03a:	6823      	ldr	r3, [r4, #0]
 800d03c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d03e:	4798      	blx	r3
 800d040:	6823      	ldr	r3, [r4, #0]
 800d042:	0020      	movs	r0, r4
 800d044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d046:	4798      	blx	r3
 800d048:	b013      	add	sp, #76	; 0x4c
 800d04a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d04c:	4a11      	ldr	r2, [pc, #68]	; (800d094 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a0>)
 800d04e:	8010      	strh	r0, [r2, #0]
 800d050:	4a12      	ldr	r2, [pc, #72]	; (800d09c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800d052:	8013      	strh	r3, [r2, #0]
 800d054:	e785      	b.n	800cf62 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x6e>
 800d056:	2208      	movs	r2, #8
 800d058:	a80e      	add	r0, sp, #56	; 0x38
 800d05a:	f007 f9a8 	bl	80143ae <memcpy>
 800d05e:	e7ac      	b.n	800cfba <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 800d060:	a80b      	add	r0, sp, #44	; 0x2c
 800d062:	f004 fdbd 	bl	8011be0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800d066:	0005      	movs	r5, r0
 800d068:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800d06a:	6803      	ldr	r3, [r0, #0]
 800d06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d06e:	4798      	blx	r3
 800d070:	4285      	cmp	r5, r0
 800d072:	d1b9      	bne.n	800cfe8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf4>
 800d074:	f7ff fe5e 	bl	800cd34 <_ZN8touchgfx3HAL3lcdEv>
 800d078:	6803      	ldr	r3, [r0, #0]
 800d07a:	0005      	movs	r5, r0
 800d07c:	a80b      	add	r0, sp, #44	; 0x2c
 800d07e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800d080:	f004 fdae 	bl	8011be0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800d084:	0001      	movs	r1, r0
 800d086:	0028      	movs	r0, r5
 800d088:	47b0      	blx	r6
 800d08a:	2301      	movs	r3, #1
 800d08c:	4058      	eors	r0, r3
 800d08e:	b2c0      	uxtb	r0, r0
 800d090:	e7ab      	b.n	800cfea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf6>
 800d092:	46c0      	nop			; (mov r8, r8)
 800d094:	200026c2 	.word	0x200026c2
 800d098:	200026bc 	.word	0x200026bc
 800d09c:	200026c4 	.word	0x200026c4
 800d0a0:	200026be 	.word	0x200026be
 800d0a4:	200026c0 	.word	0x200026c0

0800d0a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800d0a8:	b510      	push	{r4, lr}
 800d0aa:	4b07      	ldr	r3, [pc, #28]	; (800d0c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800d0ac:	0004      	movs	r4, r0
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d007      	beq.n	800d0c4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1c>
 800d0b4:	6803      	ldr	r3, [r0, #0]
 800d0b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0b8:	4798      	blx	r3
 800d0ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d0bc:	4298      	cmp	r0, r3
 800d0be:	d101      	bne.n	800d0c4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1c>
 800d0c0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800d0c2:	bd10      	pop	{r4, pc}
 800d0c4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800d0c6:	e7fc      	b.n	800d0c2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800d0c8:	200026c6 	.word	0x200026c6

0800d0cc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800d0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0ce:	b08f      	sub	sp, #60	; 0x3c
 800d0d0:	9302      	str	r3, [sp, #8]
 800d0d2:	ab14      	add	r3, sp, #80	; 0x50
 800d0d4:	0006      	movs	r6, r0
 800d0d6:	8818      	ldrh	r0, [r3, #0]
 800d0d8:	ab15      	add	r3, sp, #84	; 0x54
 800d0da:	9201      	str	r2, [sp, #4]
 800d0dc:	881a      	ldrh	r2, [r3, #0]
 800d0de:	ab16      	add	r3, sp, #88	; 0x58
 800d0e0:	881b      	ldrh	r3, [r3, #0]
 800d0e2:	2500      	movs	r5, #0
 800d0e4:	9303      	str	r3, [sp, #12]
 800d0e6:	2380      	movs	r3, #128	; 0x80
 800d0e8:	ac17      	add	r4, sp, #92	; 0x5c
 800d0ea:	00db      	lsls	r3, r3, #3
 800d0ec:	8827      	ldrh	r7, [r4, #0]
 800d0ee:	9305      	str	r3, [sp, #20]
 800d0f0:	ac05      	add	r4, sp, #20
 800d0f2:	9b03      	ldr	r3, [sp, #12]
 800d0f4:	82a0      	strh	r0, [r4, #20]
 800d0f6:	0030      	movs	r0, r6
 800d0f8:	9106      	str	r1, [sp, #24]
 800d0fa:	82e2      	strh	r2, [r4, #22]
 800d0fc:	8323      	strh	r3, [r4, #24]
 800d0fe:	9508      	str	r5, [sp, #32]
 800d100:	7725      	strb	r5, [r4, #28]
 800d102:	f7ff ffd1 	bl	800d0a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d106:	9b02      	ldr	r3, [sp, #8]
 800d108:	9a01      	ldr	r2, [sp, #4]
 800d10a:	437b      	muls	r3, r7
 800d10c:	189b      	adds	r3, r3, r2
 800d10e:	005b      	lsls	r3, r3, #1
 800d110:	18c3      	adds	r3, r0, r3
 800d112:	6123      	str	r3, [r4, #16]
 800d114:	ab04      	add	r3, sp, #16
 800d116:	6870      	ldr	r0, [r6, #4]
 800d118:	3305      	adds	r3, #5
 800d11a:	8367      	strh	r7, [r4, #26]
 800d11c:	77a5      	strb	r5, [r4, #30]
 800d11e:	7765      	strb	r5, [r4, #29]
 800d120:	77e5      	strb	r5, [r4, #31]
 800d122:	77dd      	strb	r5, [r3, #31]
 800d124:	6803      	ldr	r3, [r0, #0]
 800d126:	0021      	movs	r1, r4
 800d128:	685b      	ldr	r3, [r3, #4]
 800d12a:	4798      	blx	r3
 800d12c:	b00f      	add	sp, #60	; 0x3c
 800d12e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d130 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800d130:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d132:	b091      	sub	sp, #68	; 0x44
 800d134:	9303      	str	r3, [sp, #12]
 800d136:	ab16      	add	r3, sp, #88	; 0x58
 800d138:	881b      	ldrh	r3, [r3, #0]
 800d13a:	2500      	movs	r5, #0
 800d13c:	9304      	str	r3, [sp, #16]
 800d13e:	ab17      	add	r3, sp, #92	; 0x5c
 800d140:	881b      	ldrh	r3, [r3, #0]
 800d142:	0006      	movs	r6, r0
 800d144:	9305      	str	r3, [sp, #20]
 800d146:	ab18      	add	r3, sp, #96	; 0x60
 800d148:	881f      	ldrh	r7, [r3, #0]
 800d14a:	2380      	movs	r3, #128	; 0x80
 800d14c:	011b      	lsls	r3, r3, #4
 800d14e:	9101      	str	r1, [sp, #4]
 800d150:	9202      	str	r2, [sp, #8]
 800d152:	9307      	str	r3, [sp, #28]
 800d154:	950a      	str	r5, [sp, #40]	; 0x28
 800d156:	9508      	str	r5, [sp, #32]
 800d158:	f7ff ffa6 	bl	800d0a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d15c:	9b03      	ldr	r3, [sp, #12]
 800d15e:	9a02      	ldr	r2, [sp, #8]
 800d160:	437b      	muls	r3, r7
 800d162:	189b      	adds	r3, r3, r2
 800d164:	005b      	lsls	r3, r3, #1
 800d166:	ac07      	add	r4, sp, #28
 800d168:	18c3      	adds	r3, r0, r3
 800d16a:	6123      	str	r3, [r4, #16]
 800d16c:	9b04      	ldr	r3, [sp, #16]
 800d16e:	6870      	ldr	r0, [r6, #4]
 800d170:	82a3      	strh	r3, [r4, #20]
 800d172:	9b05      	ldr	r3, [sp, #20]
 800d174:	8325      	strh	r5, [r4, #24]
 800d176:	82e3      	strh	r3, [r4, #22]
 800d178:	9b01      	ldr	r3, [sp, #4]
 800d17a:	8367      	strh	r7, [r4, #26]
 800d17c:	930a      	str	r3, [sp, #40]	; 0x28
 800d17e:	ab06      	add	r3, sp, #24
 800d180:	3305      	adds	r3, #5
 800d182:	83a5      	strh	r5, [r4, #28]
 800d184:	77a5      	strb	r5, [r4, #30]
 800d186:	77e5      	strb	r5, [r4, #31]
 800d188:	77dd      	strb	r5, [r3, #31]
 800d18a:	6803      	ldr	r3, [r0, #0]
 800d18c:	0021      	movs	r1, r4
 800d18e:	685b      	ldr	r3, [r3, #4]
 800d190:	4798      	blx	r3
 800d192:	b011      	add	sp, #68	; 0x44
 800d194:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800d198 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800d198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d19a:	b093      	sub	sp, #76	; 0x4c
 800d19c:	0007      	movs	r7, r0
 800d19e:	a81d      	add	r0, sp, #116	; 0x74
 800d1a0:	7804      	ldrb	r4, [r0, #0]
 800d1a2:	a81e      	add	r0, sp, #120	; 0x78
 800d1a4:	8800      	ldrh	r0, [r0, #0]
 800d1a6:	9201      	str	r2, [sp, #4]
 800d1a8:	9002      	str	r0, [sp, #8]
 800d1aa:	a81f      	add	r0, sp, #124	; 0x7c
 800d1ac:	7806      	ldrb	r6, [r0, #0]
 800d1ae:	2041      	movs	r0, #65	; 0x41
 800d1b0:	aa08      	add	r2, sp, #32
 800d1b2:	1880      	adds	r0, r0, r2
 800d1b4:	7fc5      	ldrb	r5, [r0, #31]
 800d1b6:	2045      	movs	r0, #69	; 0x45
 800d1b8:	1880      	adds	r0, r0, r2
 800d1ba:	7fc0      	ldrb	r0, [r0, #31]
 800d1bc:	9303      	str	r3, [sp, #12]
 800d1be:	9007      	str	r0, [sp, #28]
 800d1c0:	2000      	movs	r0, #0
 800d1c2:	ab18      	add	r3, sp, #96	; 0x60
 800d1c4:	881b      	ldrh	r3, [r3, #0]
 800d1c6:	900c      	str	r0, [sp, #48]	; 0x30
 800d1c8:	9304      	str	r3, [sp, #16]
 800d1ca:	ab19      	add	r3, sp, #100	; 0x64
 800d1cc:	881b      	ldrh	r3, [r3, #0]
 800d1ce:	3080      	adds	r0, #128	; 0x80
 800d1d0:	469c      	mov	ip, r3
 800d1d2:	ab1a      	add	r3, sp, #104	; 0x68
 800d1d4:	881b      	ldrh	r3, [r3, #0]
 800d1d6:	9305      	str	r3, [sp, #20]
 800d1d8:	ab1b      	add	r3, sp, #108	; 0x6c
 800d1da:	881b      	ldrh	r3, [r3, #0]
 800d1dc:	9306      	str	r3, [sp, #24]
 800d1de:	ab1c      	add	r3, sp, #112	; 0x70
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	2e0b      	cmp	r6, #11
 800d1e4:	d007      	beq.n	800d1f6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x5e>
 800d1e6:	2e02      	cmp	r6, #2
 800d1e8:	d133      	bne.n	800d252 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xba>
 800d1ea:	2040      	movs	r0, #64	; 0x40
 800d1ec:	2bff      	cmp	r3, #255	; 0xff
 800d1ee:	d102      	bne.n	800d1f6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x5e>
 800d1f0:	2c00      	cmp	r4, #0
 800d1f2:	d100      	bne.n	800d1f6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x5e>
 800d1f4:	3820      	subs	r0, #32
 800d1f6:	9a01      	ldr	r2, [sp, #4]
 800d1f8:	ac09      	add	r4, sp, #36	; 0x24
 800d1fa:	60a2      	str	r2, [r4, #8]
 800d1fc:	4662      	mov	r2, ip
 800d1fe:	82a2      	strh	r2, [r4, #20]
 800d200:	9a05      	ldr	r2, [sp, #20]
 800d202:	9009      	str	r0, [sp, #36]	; 0x24
 800d204:	82e2      	strh	r2, [r4, #22]
 800d206:	9a06      	ldr	r2, [sp, #24]
 800d208:	0038      	movs	r0, r7
 800d20a:	7723      	strb	r3, [r4, #28]
 800d20c:	6061      	str	r1, [r4, #4]
 800d20e:	8322      	strh	r2, [r4, #24]
 800d210:	f7ff ff4a 	bl	800d0a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d214:	2300      	movs	r3, #0
 800d216:	2d0b      	cmp	r5, #11
 800d218:	d801      	bhi.n	800d21e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x86>
 800d21a:	4b11      	ldr	r3, [pc, #68]	; (800d260 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc8>)
 800d21c:	5d5b      	ldrb	r3, [r3, r5]
 800d21e:	9902      	ldr	r1, [sp, #8]
 800d220:	9a04      	ldr	r2, [sp, #16]
 800d222:	10db      	asrs	r3, r3, #3
 800d224:	434a      	muls	r2, r1
 800d226:	9903      	ldr	r1, [sp, #12]
 800d228:	7766      	strb	r6, [r4, #29]
 800d22a:	1852      	adds	r2, r2, r1
 800d22c:	4353      	muls	r3, r2
 800d22e:	2200      	movs	r2, #0
 800d230:	18c3      	adds	r3, r0, r3
 800d232:	6123      	str	r3, [r4, #16]
 800d234:	9b02      	ldr	r3, [sp, #8]
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	8363      	strh	r3, [r4, #26]
 800d23a:	9b07      	ldr	r3, [sp, #28]
 800d23c:	77a5      	strb	r5, [r4, #30]
 800d23e:	77e3      	strb	r3, [r4, #31]
 800d240:	ab08      	add	r3, sp, #32
 800d242:	3305      	adds	r3, #5
 800d244:	77da      	strb	r2, [r3, #31]
 800d246:	6803      	ldr	r3, [r0, #0]
 800d248:	0021      	movs	r1, r4
 800d24a:	685b      	ldr	r3, [r3, #4]
 800d24c:	4798      	blx	r3
 800d24e:	b013      	add	sp, #76	; 0x4c
 800d250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d252:	2004      	movs	r0, #4
 800d254:	2bff      	cmp	r3, #255	; 0xff
 800d256:	d1ce      	bne.n	800d1f6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x5e>
 800d258:	2c00      	cmp	r4, #0
 800d25a:	d1cc      	bne.n	800d1f6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x5e>
 800d25c:	3803      	subs	r0, #3
 800d25e:	e7ca      	b.n	800d1f6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x5e>
 800d260:	08016868 	.word	0x08016868

0800d264 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800d264:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d266:	b091      	sub	sp, #68	; 0x44
 800d268:	9302      	str	r3, [sp, #8]
 800d26a:	ab16      	add	r3, sp, #88	; 0x58
 800d26c:	881b      	ldrh	r3, [r3, #0]
 800d26e:	9201      	str	r2, [sp, #4]
 800d270:	9303      	str	r3, [sp, #12]
 800d272:	ab17      	add	r3, sp, #92	; 0x5c
 800d274:	881b      	ldrh	r3, [r3, #0]
 800d276:	0005      	movs	r5, r0
 800d278:	9304      	str	r3, [sp, #16]
 800d27a:	ab18      	add	r3, sp, #96	; 0x60
 800d27c:	781e      	ldrb	r6, [r3, #0]
 800d27e:	ab19      	add	r3, sp, #100	; 0x64
 800d280:	881f      	ldrh	r7, [r3, #0]
 800d282:	ab1a      	add	r3, sp, #104	; 0x68
 800d284:	781c      	ldrb	r4, [r3, #0]
 800d286:	ab1b      	add	r3, sp, #108	; 0x6c
 800d288:	781b      	ldrb	r3, [r3, #0]
 800d28a:	9100      	str	r1, [sp, #0]
 800d28c:	9305      	str	r3, [sp, #20]
 800d28e:	2300      	movs	r3, #0
 800d290:	2208      	movs	r2, #8
 800d292:	930a      	str	r3, [sp, #40]	; 0x28
 800d294:	2eff      	cmp	r6, #255	; 0xff
 800d296:	d100      	bne.n	800d29a <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x36>
 800d298:	3a06      	subs	r2, #6
 800d29a:	0028      	movs	r0, r5
 800d29c:	9308      	str	r3, [sp, #32]
 800d29e:	9207      	str	r2, [sp, #28]
 800d2a0:	f7ff ff02 	bl	800d0a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	4684      	mov	ip, r0
 800d2a8:	2c0b      	cmp	r4, #11
 800d2aa:	d801      	bhi.n	800d2b0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x4c>
 800d2ac:	4b10      	ldr	r3, [pc, #64]	; (800d2f0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800d2ae:	5d1b      	ldrb	r3, [r3, r4]
 800d2b0:	9a02      	ldr	r2, [sp, #8]
 800d2b2:	9801      	ldr	r0, [sp, #4]
 800d2b4:	437a      	muls	r2, r7
 800d2b6:	10db      	asrs	r3, r3, #3
 800d2b8:	1812      	adds	r2, r2, r0
 800d2ba:	4353      	muls	r3, r2
 800d2bc:	a907      	add	r1, sp, #28
 800d2be:	4463      	add	r3, ip
 800d2c0:	610b      	str	r3, [r1, #16]
 800d2c2:	9b03      	ldr	r3, [sp, #12]
 800d2c4:	9a00      	ldr	r2, [sp, #0]
 800d2c6:	828b      	strh	r3, [r1, #20]
 800d2c8:	9b04      	ldr	r3, [sp, #16]
 800d2ca:	60ca      	str	r2, [r1, #12]
 800d2cc:	82cb      	strh	r3, [r1, #22]
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	9a05      	ldr	r2, [sp, #20]
 800d2d2:	6868      	ldr	r0, [r5, #4]
 800d2d4:	77ca      	strb	r2, [r1, #31]
 800d2d6:	aa06      	add	r2, sp, #24
 800d2d8:	3205      	adds	r2, #5
 800d2da:	830b      	strh	r3, [r1, #24]
 800d2dc:	834f      	strh	r7, [r1, #26]
 800d2de:	770e      	strb	r6, [r1, #28]
 800d2e0:	77d3      	strb	r3, [r2, #31]
 800d2e2:	774c      	strb	r4, [r1, #29]
 800d2e4:	778c      	strb	r4, [r1, #30]
 800d2e6:	6803      	ldr	r3, [r0, #0]
 800d2e8:	685b      	ldr	r3, [r3, #4]
 800d2ea:	4798      	blx	r3
 800d2ec:	b011      	add	sp, #68	; 0x44
 800d2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2f0:	08016868 	.word	0x08016868

0800d2f4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800d2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2f6:	001d      	movs	r5, r3
 800d2f8:	4b0a      	ldr	r3, [pc, #40]	; (800d324 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800d2fa:	000e      	movs	r6, r1
 800d2fc:	881f      	ldrh	r7, [r3, #0]
 800d2fe:	0014      	movs	r4, r2
 800d300:	f7ff fd18 	bl	800cd34 <_ZN8touchgfx3HAL3lcdEv>
 800d304:	6803      	ldr	r3, [r0, #0]
 800d306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d308:	4798      	blx	r3
 800d30a:	2300      	movs	r3, #0
 800d30c:	280b      	cmp	r0, #11
 800d30e:	d801      	bhi.n	800d314 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x20>
 800d310:	4b05      	ldr	r3, [pc, #20]	; (800d328 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800d312:	5c1b      	ldrb	r3, [r3, r0]
 800d314:	0020      	movs	r0, r4
 800d316:	4378      	muls	r0, r7
 800d318:	10db      	asrs	r3, r3, #3
 800d31a:	1980      	adds	r0, r0, r6
 800d31c:	4358      	muls	r0, r3
 800d31e:	1828      	adds	r0, r5, r0
 800d320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d322:	46c0      	nop			; (mov r8, r8)
 800d324:	200026c2 	.word	0x200026c2
 800d328:	08016868 	.word	0x08016868

0800d32c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800d32c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d32e:	b08f      	sub	sp, #60	; 0x3c
 800d330:	ac18      	add	r4, sp, #96	; 0x60
 800d332:	7824      	ldrb	r4, [r4, #0]
 800d334:	001f      	movs	r7, r3
 800d336:	9402      	str	r4, [sp, #8]
 800d338:	ac19      	add	r4, sp, #100	; 0x64
 800d33a:	8824      	ldrh	r4, [r4, #0]
 800d33c:	ab14      	add	r3, sp, #80	; 0x50
 800d33e:	46a4      	mov	ip, r4
 800d340:	0005      	movs	r5, r0
 800d342:	8818      	ldrh	r0, [r3, #0]
 800d344:	ab15      	add	r3, sp, #84	; 0x54
 800d346:	9200      	str	r2, [sp, #0]
 800d348:	881a      	ldrh	r2, [r3, #0]
 800d34a:	ab16      	add	r3, sp, #88	; 0x58
 800d34c:	881b      	ldrh	r3, [r3, #0]
 800d34e:	2600      	movs	r6, #0
 800d350:	9301      	str	r3, [sp, #4]
 800d352:	4663      	mov	r3, ip
 800d354:	ac1a      	add	r4, sp, #104	; 0x68
 800d356:	7824      	ldrb	r4, [r4, #0]
 800d358:	9305      	str	r3, [sp, #20]
 800d35a:	9b01      	ldr	r3, [sp, #4]
 800d35c:	9403      	str	r4, [sp, #12]
 800d35e:	ac05      	add	r4, sp, #20
 800d360:	8323      	strh	r3, [r4, #24]
 800d362:	9b02      	ldr	r3, [sp, #8]
 800d364:	82a0      	strh	r0, [r4, #20]
 800d366:	0028      	movs	r0, r5
 800d368:	9106      	str	r1, [sp, #24]
 800d36a:	82e2      	strh	r2, [r4, #22]
 800d36c:	7723      	strb	r3, [r4, #28]
 800d36e:	9608      	str	r6, [sp, #32]
 800d370:	f7ff fe9a 	bl	800d0a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d374:	003a      	movs	r2, r7
 800d376:	9900      	ldr	r1, [sp, #0]
 800d378:	0003      	movs	r3, r0
 800d37a:	0028      	movs	r0, r5
 800d37c:	f7ff ffba 	bl	800d2f4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800d380:	4b0c      	ldr	r3, [pc, #48]	; (800d3b4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x88>)
 800d382:	6120      	str	r0, [r4, #16]
 800d384:	881b      	ldrh	r3, [r3, #0]
 800d386:	8363      	strh	r3, [r4, #26]
 800d388:	f7ff fcd4 	bl	800cd34 <_ZN8touchgfx3HAL3lcdEv>
 800d38c:	6803      	ldr	r3, [r0, #0]
 800d38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d390:	4798      	blx	r3
 800d392:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d394:	77a0      	strb	r0, [r4, #30]
 800d396:	60e3      	str	r3, [r4, #12]
 800d398:	9b03      	ldr	r3, [sp, #12]
 800d39a:	7760      	strb	r0, [r4, #29]
 800d39c:	77e3      	strb	r3, [r4, #31]
 800d39e:	ab04      	add	r3, sp, #16
 800d3a0:	6868      	ldr	r0, [r5, #4]
 800d3a2:	3305      	adds	r3, #5
 800d3a4:	77de      	strb	r6, [r3, #31]
 800d3a6:	6803      	ldr	r3, [r0, #0]
 800d3a8:	0021      	movs	r1, r4
 800d3aa:	685b      	ldr	r3, [r3, #4]
 800d3ac:	4798      	blx	r3
 800d3ae:	b00f      	add	sp, #60	; 0x3c
 800d3b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3b2:	46c0      	nop			; (mov r8, r8)
 800d3b4:	200026c2 	.word	0x200026c2

0800d3b8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800d3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3ba:	b08f      	sub	sp, #60	; 0x3c
 800d3bc:	2601      	movs	r6, #1
 800d3be:	9203      	str	r2, [sp, #12]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	b28b      	uxth	r3, r1
 800d3c4:	9301      	str	r3, [sp, #4]
 800d3c6:	6803      	ldr	r3, [r0, #0]
 800d3c8:	000f      	movs	r7, r1
 800d3ca:	9102      	str	r1, [sp, #8]
 800d3cc:	9208      	str	r2, [sp, #32]
 800d3ce:	9605      	str	r6, [sp, #20]
 800d3d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3d2:	0005      	movs	r5, r0
 800d3d4:	4798      	blx	r3
 800d3d6:	0c3f      	lsrs	r7, r7, #16
 800d3d8:	003a      	movs	r2, r7
 800d3da:	9901      	ldr	r1, [sp, #4]
 800d3dc:	0003      	movs	r3, r0
 800d3de:	0028      	movs	r0, r5
 800d3e0:	f7ff ff88 	bl	800d2f4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800d3e4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800d3e6:	ac05      	add	r4, sp, #20
 800d3e8:	6123      	str	r3, [r4, #16]
 800d3ea:	6060      	str	r0, [r4, #4]
 800d3ec:	ab02      	add	r3, sp, #8
 800d3ee:	889b      	ldrh	r3, [r3, #4]
 800d3f0:	82a3      	strh	r3, [r4, #20]
 800d3f2:	ab02      	add	r3, sp, #8
 800d3f4:	88db      	ldrh	r3, [r3, #6]
 800d3f6:	82e3      	strh	r3, [r4, #22]
 800d3f8:	4b0c      	ldr	r3, [pc, #48]	; (800d42c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x74>)
 800d3fa:	881b      	ldrh	r3, [r3, #0]
 800d3fc:	8323      	strh	r3, [r4, #24]
 800d3fe:	8363      	strh	r3, [r4, #26]
 800d400:	f7ff fc98 	bl	800cd34 <_ZN8touchgfx3HAL3lcdEv>
 800d404:	6803      	ldr	r3, [r0, #0]
 800d406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d408:	4798      	blx	r3
 800d40a:	23ff      	movs	r3, #255	; 0xff
 800d40c:	aa02      	add	r2, sp, #8
 800d40e:	7723      	strb	r3, [r4, #28]
 800d410:	3bf2      	subs	r3, #242	; 0xf2
 800d412:	7760      	strb	r0, [r4, #29]
 800d414:	77a0      	strb	r0, [r4, #30]
 800d416:	189b      	adds	r3, r3, r2
 800d418:	6868      	ldr	r0, [r5, #4]
 800d41a:	77e6      	strb	r6, [r4, #31]
 800d41c:	77de      	strb	r6, [r3, #31]
 800d41e:	6803      	ldr	r3, [r0, #0]
 800d420:	0021      	movs	r1, r4
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	4798      	blx	r3
 800d426:	6c68      	ldr	r0, [r5, #68]	; 0x44
 800d428:	b00f      	add	sp, #60	; 0x3c
 800d42a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d42c:	200026c2 	.word	0x200026c2

0800d430 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800d430:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d432:	001f      	movs	r7, r3
 800d434:	2300      	movs	r3, #0
 800d436:	0005      	movs	r5, r0
 800d438:	0008      	movs	r0, r1
 800d43a:	2601      	movs	r6, #1
 800d43c:	b08f      	sub	sp, #60	; 0x3c
 800d43e:	9308      	str	r3, [sp, #32]
 800d440:	b28b      	uxth	r3, r1
 800d442:	9300      	str	r3, [sp, #0]
 800d444:	0c03      	lsrs	r3, r0, #16
 800d446:	9301      	str	r3, [sp, #4]
 800d448:	682b      	ldr	r3, [r5, #0]
 800d44a:	9102      	str	r1, [sp, #8]
 800d44c:	9203      	str	r2, [sp, #12]
 800d44e:	9605      	str	r6, [sp, #20]
 800d450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d452:	0028      	movs	r0, r5
 800d454:	4798      	blx	r3
 800d456:	9a01      	ldr	r2, [sp, #4]
 800d458:	9900      	ldr	r1, [sp, #0]
 800d45a:	0003      	movs	r3, r0
 800d45c:	0028      	movs	r0, r5
 800d45e:	f7ff ff49 	bl	800d2f4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800d462:	ac05      	add	r4, sp, #20
 800d464:	6060      	str	r0, [r4, #4]
 800d466:	6127      	str	r7, [r4, #16]
 800d468:	ab02      	add	r3, sp, #8
 800d46a:	889b      	ldrh	r3, [r3, #4]
 800d46c:	82a3      	strh	r3, [r4, #20]
 800d46e:	ab02      	add	r3, sp, #8
 800d470:	88db      	ldrh	r3, [r3, #6]
 800d472:	82e3      	strh	r3, [r4, #22]
 800d474:	4b0d      	ldr	r3, [pc, #52]	; (800d4ac <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 800d476:	881b      	ldrh	r3, [r3, #0]
 800d478:	8323      	strh	r3, [r4, #24]
 800d47a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d47c:	8363      	strh	r3, [r4, #26]
 800d47e:	f7ff fc59 	bl	800cd34 <_ZN8touchgfx3HAL3lcdEv>
 800d482:	6803      	ldr	r3, [r0, #0]
 800d484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d486:	4798      	blx	r3
 800d488:	23ff      	movs	r3, #255	; 0xff
 800d48a:	aa02      	add	r2, sp, #8
 800d48c:	7723      	strb	r3, [r4, #28]
 800d48e:	3bf2      	subs	r3, #242	; 0xf2
 800d490:	7760      	strb	r0, [r4, #29]
 800d492:	77a0      	strb	r0, [r4, #30]
 800d494:	189b      	adds	r3, r3, r2
 800d496:	6868      	ldr	r0, [r5, #4]
 800d498:	77e6      	strb	r6, [r4, #31]
 800d49a:	77de      	strb	r6, [r3, #31]
 800d49c:	6803      	ldr	r3, [r0, #0]
 800d49e:	0021      	movs	r1, r4
 800d4a0:	685b      	ldr	r3, [r3, #4]
 800d4a2:	4798      	blx	r3
 800d4a4:	0038      	movs	r0, r7
 800d4a6:	b00f      	add	sp, #60	; 0x3c
 800d4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4aa:	46c0      	nop			; (mov r8, r8)
 800d4ac:	200026c2 	.word	0x200026c2

0800d4b0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800d4b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d4b2:	000e      	movs	r6, r1
 800d4b4:	0004      	movs	r4, r0
 800d4b6:	9102      	str	r1, [sp, #8]
 800d4b8:	9203      	str	r2, [sp, #12]
 800d4ba:	b28d      	uxth	r5, r1
 800d4bc:	f7ff fdf4 	bl	800d0a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d4c0:	0c36      	lsrs	r6, r6, #16
 800d4c2:	0003      	movs	r3, r0
 800d4c4:	0032      	movs	r2, r6
 800d4c6:	0029      	movs	r1, r5
 800d4c8:	0020      	movs	r0, r4
 800d4ca:	f7ff ff13 	bl	800d2f4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800d4ce:	4906      	ldr	r1, [pc, #24]	; (800d4e8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x38>)
 800d4d0:	6822      	ldr	r2, [r4, #0]
 800d4d2:	8809      	ldrh	r1, [r1, #0]
 800d4d4:	0003      	movs	r3, r0
 800d4d6:	9100      	str	r1, [sp, #0]
 800d4d8:	6ed5      	ldr	r5, [r2, #108]	; 0x6c
 800d4da:	9902      	ldr	r1, [sp, #8]
 800d4dc:	9a03      	ldr	r2, [sp, #12]
 800d4de:	0020      	movs	r0, r4
 800d4e0:	47a8      	blx	r5
 800d4e2:	b004      	add	sp, #16
 800d4e4:	bd70      	pop	{r4, r5, r6, pc}
 800d4e6:	46c0      	nop			; (mov r8, r8)
 800d4e8:	200026c2 	.word	0x200026c2

0800d4ec <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800d4ec:	b570      	push	{r4, r5, r6, lr}
 800d4ee:	0005      	movs	r5, r0
 800d4f0:	356e      	adds	r5, #110	; 0x6e
 800d4f2:	782b      	ldrb	r3, [r5, #0]
 800d4f4:	0004      	movs	r4, r0
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d010      	beq.n	800d51c <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x30>
 800d4fa:	2002      	movs	r0, #2
 800d4fc:	f7fc ffdb 	bl	800a4b6 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800d500:	0022      	movs	r2, r4
 800d502:	2300      	movs	r3, #0
 800d504:	326d      	adds	r2, #109	; 0x6d
 800d506:	702b      	strb	r3, [r5, #0]
 800d508:	7013      	strb	r3, [r2, #0]
 800d50a:	6823      	ldr	r3, [r4, #0]
 800d50c:	0020      	movs	r0, r4
 800d50e:	33b8      	adds	r3, #184	; 0xb8
 800d510:	681d      	ldr	r5, [r3, #0]
 800d512:	f7ff fdc9 	bl	800d0a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d516:	0001      	movs	r1, r0
 800d518:	0020      	movs	r0, r4
 800d51a:	47a8      	blx	r5
 800d51c:	bd70      	pop	{r4, r5, r6, pc}

0800d51e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800d51e:	b570      	push	{r4, r5, r6, lr}
 800d520:	0005      	movs	r5, r0
 800d522:	357b      	adds	r5, #123	; 0x7b
 800d524:	782b      	ldrb	r3, [r5, #0]
 800d526:	000c      	movs	r4, r1
 800d528:	428b      	cmp	r3, r1
 800d52a:	d006      	beq.n	800d53a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800d52c:	6803      	ldr	r3, [r0, #0]
 800d52e:	2900      	cmp	r1, #0
 800d530:	d104      	bne.n	800d53c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800d532:	33c8      	adds	r3, #200	; 0xc8
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	4798      	blx	r3
 800d538:	702c      	strb	r4, [r5, #0]
 800d53a:	bd70      	pop	{r4, r5, r6, pc}
 800d53c:	33cc      	adds	r3, #204	; 0xcc
 800d53e:	e7f9      	b.n	800d534 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800d540 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800d540:	b510      	push	{r4, lr}
 800d542:	4b0e      	ldr	r3, [pc, #56]	; (800d57c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x3c>)
 800d544:	0004      	movs	r4, r0
 800d546:	781b      	ldrb	r3, [r3, #0]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d10d      	bne.n	800d568 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x28>
 800d54c:	0003      	movs	r3, r0
 800d54e:	3348      	adds	r3, #72	; 0x48
 800d550:	781b      	ldrb	r3, [r3, #0]
 800d552:	2b02      	cmp	r3, #2
 800d554:	d008      	beq.n	800d568 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x28>
 800d556:	6840      	ldr	r0, [r0, #4]
 800d558:	f000 f912 	bl	800d780 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800d55c:	2800      	cmp	r0, #0
 800d55e:	d003      	beq.n	800d568 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x28>
 800d560:	6862      	ldr	r2, [r4, #4]
 800d562:	7a53      	ldrb	r3, [r2, #9]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d0fc      	beq.n	800d562 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800d568:	f7fd fae0 	bl	800ab2c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800d56c:	2100      	movs	r1, #0
 800d56e:	0020      	movs	r0, r4
 800d570:	f7ff ffd5 	bl	800d51e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800d574:	0020      	movs	r0, r4
 800d576:	f7ff fd97 	bl	800d0a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d57a:	bd10      	pop	{r4, pc}
 800d57c:	200026c6 	.word	0x200026c6

0800d580 <_ZN8touchgfx13DMA_Interface5flushEv>:
 800d580:	b510      	push	{r4, lr}
 800d582:	6803      	ldr	r3, [r0, #0]
 800d584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d586:	4798      	blx	r3
 800d588:	bd10      	pop	{r4, pc}

0800d58a <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800d58a:	68c3      	ldr	r3, [r0, #12]
 800d58c:	6900      	ldr	r0, [r0, #16]
 800d58e:	1a18      	subs	r0, r3, r0
 800d590:	4243      	negs	r3, r0
 800d592:	4158      	adcs	r0, r3
 800d594:	b2c0      	uxtb	r0, r0
 800d596:	4770      	bx	lr

0800d598 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800d598:	6903      	ldr	r3, [r0, #16]
 800d59a:	68c2      	ldr	r2, [r0, #12]
 800d59c:	1a9b      	subs	r3, r3, r2
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	dc01      	bgt.n	800d5a6 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv+0xe>
 800d5a2:	6882      	ldr	r2, [r0, #8]
 800d5a4:	189b      	adds	r3, r3, r2
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	2100      	movs	r1, #0
 800d5aa:	0fd8      	lsrs	r0, r3, #31
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	4148      	adcs	r0, r1
 800d5b0:	b2c0      	uxtb	r0, r0
 800d5b2:	4770      	bx	lr

0800d5b4 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800d5b4:	2324      	movs	r3, #36	; 0x24
 800d5b6:	6902      	ldr	r2, [r0, #16]
 800d5b8:	6840      	ldr	r0, [r0, #4]
 800d5ba:	4353      	muls	r3, r2
 800d5bc:	18c0      	adds	r0, r0, r3
 800d5be:	4770      	bx	lr

0800d5c0 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800d5c0:	b510      	push	{r4, lr}
 800d5c2:	6803      	ldr	r3, [r0, #0]
 800d5c4:	691b      	ldr	r3, [r3, #16]
 800d5c6:	4798      	blx	r3
 800d5c8:	bd10      	pop	{r4, pc}

0800d5ca <_ZN8touchgfx13DMA_Interface7executeEv>:
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	b570      	push	{r4, r5, r6, lr}
 800d5ce:	7203      	strb	r3, [r0, #8]
 800d5d0:	0004      	movs	r4, r0
 800d5d2:	6840      	ldr	r0, [r0, #4]
 800d5d4:	6803      	ldr	r3, [r0, #0]
 800d5d6:	699b      	ldr	r3, [r3, #24]
 800d5d8:	4798      	blx	r3
 800d5da:	6803      	ldr	r3, [r0, #0]
 800d5dc:	0005      	movs	r5, r0
 800d5de:	2b40      	cmp	r3, #64	; 0x40
 800d5e0:	d00c      	beq.n	800d5fc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800d5e2:	d810      	bhi.n	800d606 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800d5e4:	2b04      	cmp	r3, #4
 800d5e6:	d027      	beq.n	800d638 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 800d5e8:	d804      	bhi.n	800d5f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800d5ea:	2b01      	cmp	r3, #1
 800d5ec:	d006      	beq.n	800d5fc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800d5ee:	2b02      	cmp	r3, #2
 800d5f0:	d01d      	beq.n	800d62e <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800d5f2:	bd70      	pop	{r4, r5, r6, pc}
 800d5f4:	2b08      	cmp	r3, #8
 800d5f6:	d027      	beq.n	800d648 <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 800d5f8:	2b20      	cmp	r3, #32
 800d5fa:	d1fa      	bne.n	800d5f2 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800d5fc:	6823      	ldr	r3, [r4, #0]
 800d5fe:	0020      	movs	r0, r4
 800d600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d602:	4798      	blx	r3
 800d604:	e01d      	b.n	800d642 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800d606:	2280      	movs	r2, #128	; 0x80
 800d608:	0092      	lsls	r2, r2, #2
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d0f6      	beq.n	800d5fc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800d60e:	d806      	bhi.n	800d61e <_ZN8touchgfx13DMA_Interface7executeEv+0x54>
 800d610:	2b80      	cmp	r3, #128	; 0x80
 800d612:	d0f3      	beq.n	800d5fc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800d614:	3a01      	subs	r2, #1
 800d616:	3aff      	subs	r2, #255	; 0xff
 800d618:	4293      	cmp	r3, r2
 800d61a:	d1ea      	bne.n	800d5f2 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800d61c:	e7ee      	b.n	800d5fc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800d61e:	2280      	movs	r2, #128	; 0x80
 800d620:	00d2      	lsls	r2, r2, #3
 800d622:	4293      	cmp	r3, r2
 800d624:	d0ea      	beq.n	800d5fc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800d626:	2280      	movs	r2, #128	; 0x80
 800d628:	0112      	lsls	r2, r2, #4
 800d62a:	4293      	cmp	r3, r2
 800d62c:	d1e1      	bne.n	800d5f2 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800d62e:	6823      	ldr	r3, [r4, #0]
 800d630:	0020      	movs	r0, r4
 800d632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d634:	4798      	blx	r3
 800d636:	e00c      	b.n	800d652 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>
 800d638:	6823      	ldr	r3, [r4, #0]
 800d63a:	7f01      	ldrb	r1, [r0, #28]
 800d63c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d63e:	0020      	movs	r0, r4
 800d640:	4798      	blx	r3
 800d642:	6823      	ldr	r3, [r4, #0]
 800d644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d646:	e006      	b.n	800d656 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800d648:	6823      	ldr	r3, [r4, #0]
 800d64a:	7f01      	ldrb	r1, [r0, #28]
 800d64c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d64e:	0020      	movs	r0, r4
 800d650:	4798      	blx	r3
 800d652:	6823      	ldr	r3, [r4, #0]
 800d654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d656:	0029      	movs	r1, r5
 800d658:	0020      	movs	r0, r4
 800d65a:	4798      	blx	r3
 800d65c:	e7c9      	b.n	800d5f2 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>

0800d65e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800d65e:	4770      	bx	lr

0800d660 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800d660:	4770      	bx	lr

0800d662 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800d662:	b510      	push	{r4, lr}
 800d664:	68c2      	ldr	r2, [r0, #12]
 800d666:	6903      	ldr	r3, [r0, #16]
 800d668:	0004      	movs	r4, r0
 800d66a:	1a9b      	subs	r3, r3, r2
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	dc01      	bgt.n	800d674 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x12>
 800d670:	6880      	ldr	r0, [r0, #8]
 800d672:	181b      	adds	r3, r3, r0
 800d674:	2b01      	cmp	r3, #1
 800d676:	dd0f      	ble.n	800d698 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x36>
 800d678:	2024      	movs	r0, #36	; 0x24
 800d67a:	4350      	muls	r0, r2
 800d67c:	6863      	ldr	r3, [r4, #4]
 800d67e:	2221      	movs	r2, #33	; 0x21
 800d680:	1818      	adds	r0, r3, r0
 800d682:	f006 fe94 	bl	80143ae <memcpy>
 800d686:	68e3      	ldr	r3, [r4, #12]
 800d688:	68a2      	ldr	r2, [r4, #8]
 800d68a:	3301      	adds	r3, #1
 800d68c:	429a      	cmp	r2, r3
 800d68e:	dc00      	bgt.n	800d692 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x30>
 800d690:	1a9b      	subs	r3, r3, r2
 800d692:	f3bf 8f5b 	dmb	ish
 800d696:	60e3      	str	r3, [r4, #12]
 800d698:	bd10      	pop	{r4, pc}

0800d69a <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800d69a:	6903      	ldr	r3, [r0, #16]
 800d69c:	6882      	ldr	r2, [r0, #8]
 800d69e:	3301      	adds	r3, #1
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	dc00      	bgt.n	800d6a6 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0xc>
 800d6a4:	1a9b      	subs	r3, r3, r2
 800d6a6:	f3bf 8f5b 	dmb	ish
 800d6aa:	6103      	str	r3, [r0, #16]
 800d6ac:	4770      	bx	lr
	...

0800d6b0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800d6b0:	b570      	push	{r4, r5, r6, lr}
 800d6b2:	0004      	movs	r4, r0
 800d6b4:	000e      	movs	r6, r1
 800d6b6:	6860      	ldr	r0, [r4, #4]
 800d6b8:	6803      	ldr	r3, [r0, #0]
 800d6ba:	685b      	ldr	r3, [r3, #4]
 800d6bc:	4798      	blx	r3
 800d6be:	2800      	cmp	r0, #0
 800d6c0:	d1f9      	bne.n	800d6b6 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800d6c2:	4d0c      	ldr	r5, [pc, #48]	; (800d6f4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x44>)
 800d6c4:	6828      	ldr	r0, [r5, #0]
 800d6c6:	6803      	ldr	r3, [r0, #0]
 800d6c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6ca:	4798      	blx	r3
 800d6cc:	f7fd fa4a 	bl	800ab64 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800d6d0:	6828      	ldr	r0, [r5, #0]
 800d6d2:	2101      	movs	r1, #1
 800d6d4:	f7ff ff23 	bl	800d51e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800d6d8:	6860      	ldr	r0, [r4, #4]
 800d6da:	0031      	movs	r1, r6
 800d6dc:	6803      	ldr	r3, [r0, #0]
 800d6de:	689b      	ldr	r3, [r3, #8]
 800d6e0:	4798      	blx	r3
 800d6e2:	6823      	ldr	r3, [r4, #0]
 800d6e4:	0020      	movs	r0, r4
 800d6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6e8:	4798      	blx	r3
 800d6ea:	6828      	ldr	r0, [r5, #0]
 800d6ec:	6803      	ldr	r3, [r0, #0]
 800d6ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d6f0:	4798      	blx	r3
 800d6f2:	bd70      	pop	{r4, r5, r6, pc}
 800d6f4:	200026c8 	.word	0x200026c8

0800d6f8 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800d6f8:	b510      	push	{r4, lr}
 800d6fa:	f7fd fa17 	bl	800ab2c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800d6fe:	f7fd fa27 	bl	800ab50 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 800d702:	bd10      	pop	{r4, pc}

0800d704 <_ZN8touchgfx13DMA_Interface5startEv>:
 800d704:	b510      	push	{r4, lr}
 800d706:	0004      	movs	r4, r0
 800d708:	6840      	ldr	r0, [r0, #4]
 800d70a:	6803      	ldr	r3, [r0, #0]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	4798      	blx	r3
 800d710:	2800      	cmp	r0, #0
 800d712:	d109      	bne.n	800d728 <_ZN8touchgfx13DMA_Interface5startEv+0x24>
 800d714:	7a63      	ldrb	r3, [r4, #9]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d006      	beq.n	800d728 <_ZN8touchgfx13DMA_Interface5startEv+0x24>
 800d71a:	7a23      	ldrb	r3, [r4, #8]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d103      	bne.n	800d728 <_ZN8touchgfx13DMA_Interface5startEv+0x24>
 800d720:	6823      	ldr	r3, [r4, #0]
 800d722:	0020      	movs	r0, r4
 800d724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d726:	4798      	blx	r3
 800d728:	bd10      	pop	{r4, pc}

0800d72a <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800d72a:	b570      	push	{r4, r5, r6, lr}
 800d72c:	0004      	movs	r4, r0
 800d72e:	6840      	ldr	r0, [r0, #4]
 800d730:	6803      	ldr	r3, [r0, #0]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	4798      	blx	r3
 800d736:	1e05      	subs	r5, r0, #0
 800d738:	d107      	bne.n	800d74a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x20>
 800d73a:	7a23      	ldrb	r3, [r4, #8]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d004      	beq.n	800d74a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x20>
 800d740:	6860      	ldr	r0, [r4, #4]
 800d742:	6803      	ldr	r3, [r0, #0]
 800d744:	695b      	ldr	r3, [r3, #20]
 800d746:	4798      	blx	r3
 800d748:	7225      	strb	r5, [r4, #8]
 800d74a:	6860      	ldr	r0, [r4, #4]
 800d74c:	6803      	ldr	r3, [r0, #0]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	4798      	blx	r3
 800d752:	2800      	cmp	r0, #0
 800d754:	d104      	bne.n	800d760 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x36>
 800d756:	6823      	ldr	r3, [r4, #0]
 800d758:	0020      	movs	r0, r4
 800d75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d75c:	4798      	blx	r3
 800d75e:	bd70      	pop	{r4, r5, r6, pc}
 800d760:	f7fd fa0a 	bl	800ab78 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
 800d764:	e7fb      	b.n	800d75e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
	...

0800d768 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800d768:	4b04      	ldr	r3, [pc, #16]	; (800d77c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800d76a:	6041      	str	r1, [r0, #4]
 800d76c:	3308      	adds	r3, #8
 800d76e:	6003      	str	r3, [r0, #0]
 800d770:	2300      	movs	r3, #0
 800d772:	6082      	str	r2, [r0, #8]
 800d774:	60c3      	str	r3, [r0, #12]
 800d776:	6103      	str	r3, [r0, #16]
 800d778:	4770      	bx	lr
 800d77a:	46c0      	nop			; (mov r8, r8)
 800d77c:	0801699c 	.word	0x0801699c

0800d780 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800d780:	b510      	push	{r4, lr}
 800d782:	6840      	ldr	r0, [r0, #4]
 800d784:	6803      	ldr	r3, [r0, #0]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	4798      	blx	r3
 800d78a:	bd10      	pop	{r4, pc}

0800d78c <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 800d78c:	302c      	adds	r0, #44	; 0x2c
 800d78e:	7800      	ldrb	r0, [r0, #0]
 800d790:	4770      	bx	lr

0800d792 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 800d792:	b510      	push	{r4, lr}
 800d794:	0004      	movs	r4, r0
 800d796:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800d798:	2800      	cmp	r0, #0
 800d79a:	d009      	beq.n	800d7b0 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800d79c:	6803      	ldr	r3, [r0, #0]
 800d79e:	68db      	ldr	r3, [r3, #12]
 800d7a0:	4798      	blx	r3
 800d7a2:	2800      	cmp	r0, #0
 800d7a4:	d004      	beq.n	800d7b0 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800d7a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800d7a8:	0021      	movs	r1, r4
 800d7aa:	6803      	ldr	r3, [r0, #0]
 800d7ac:	689b      	ldr	r3, [r3, #8]
 800d7ae:	4798      	blx	r3
 800d7b0:	bd10      	pop	{r4, pc}

0800d7b2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 800d7b2:	b570      	push	{r4, r5, r6, lr}
 800d7b4:	790b      	ldrb	r3, [r1, #4]
 800d7b6:	0002      	movs	r2, r0
 800d7b8:	0004      	movs	r4, r0
 800d7ba:	000e      	movs	r6, r1
 800d7bc:	4259      	negs	r1, r3
 800d7be:	4159      	adcs	r1, r3
 800d7c0:	322c      	adds	r2, #44	; 0x2c
 800d7c2:	7815      	ldrb	r5, [r2, #0]
 800d7c4:	7011      	strb	r1, [r2, #0]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d109      	bne.n	800d7de <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2c>
 800d7ca:	2d00      	cmp	r5, #0
 800d7cc:	d009      	beq.n	800d7e2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 800d7ce:	7933      	ldrb	r3, [r6, #4]
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	d10c      	bne.n	800d7ee <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 800d7d4:	6823      	ldr	r3, [r4, #0]
 800d7d6:	0020      	movs	r0, r4
 800d7d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7da:	4798      	blx	r3
 800d7dc:	e007      	b.n	800d7ee <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 800d7de:	2d00      	cmp	r5, #0
 800d7e0:	d005      	beq.n	800d7ee <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 800d7e2:	6823      	ldr	r3, [r4, #0]
 800d7e4:	0020      	movs	r0, r4
 800d7e6:	695b      	ldr	r3, [r3, #20]
 800d7e8:	4798      	blx	r3
 800d7ea:	2d00      	cmp	r5, #0
 800d7ec:	d1ef      	bne.n	800d7ce <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 800d7ee:	bd70      	pop	{r4, r5, r6, pc}

0800d7f0 <_ZNK8touchgfx3Box12getSolidRectEv>:
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	8003      	strh	r3, [r0, #0]
 800d7f4:	8043      	strh	r3, [r0, #2]
 800d7f6:	8083      	strh	r3, [r0, #4]
 800d7f8:	80c3      	strh	r3, [r0, #6]
 800d7fa:	1dcb      	adds	r3, r1, #7
 800d7fc:	7fdb      	ldrb	r3, [r3, #31]
 800d7fe:	2bff      	cmp	r3, #255	; 0xff
 800d800:	d103      	bne.n	800d80a <_ZNK8touchgfx3Box12getSolidRectEv+0x1a>
 800d802:	890b      	ldrh	r3, [r1, #8]
 800d804:	8083      	strh	r3, [r0, #4]
 800d806:	894b      	ldrh	r3, [r1, #10]
 800d808:	80c3      	strh	r3, [r0, #6]
 800d80a:	4770      	bx	lr

0800d80c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800d80c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d80e:	0004      	movs	r4, r0
 800d810:	2208      	movs	r2, #8
 800d812:	4668      	mov	r0, sp
 800d814:	f006 fdcb 	bl	80143ae <memcpy>
 800d818:	6823      	ldr	r3, [r4, #0]
 800d81a:	4669      	mov	r1, sp
 800d81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d81e:	0020      	movs	r0, r4
 800d820:	4798      	blx	r3
 800d822:	4b09      	ldr	r3, [pc, #36]	; (800d848 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x3c>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	001a      	movs	r2, r3
 800d828:	3258      	adds	r2, #88	; 0x58
 800d82a:	7812      	ldrb	r2, [r2, #0]
 800d82c:	2a00      	cmp	r2, #0
 800d82e:	d002      	beq.n	800d836 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x2a>
 800d830:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d832:	2800      	cmp	r0, #0
 800d834:	d100      	bne.n	800d838 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x2c>
 800d836:	6898      	ldr	r0, [r3, #8]
 800d838:	6802      	ldr	r2, [r0, #0]
 800d83a:	1de3      	adds	r3, r4, #7
 800d83c:	6a15      	ldr	r5, [r2, #32]
 800d83e:	7fdb      	ldrb	r3, [r3, #31]
 800d840:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800d842:	4669      	mov	r1, sp
 800d844:	47a8      	blx	r5
 800d846:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800d848:	200026c8 	.word	0x200026c8

0800d84c <_ZNK8touchgfx3Box17invalidateContentEv>:
 800d84c:	b510      	push	{r4, lr}
 800d84e:	1dc3      	adds	r3, r0, #7
 800d850:	7fdb      	ldrb	r3, [r3, #31]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d006      	beq.n	800d864 <_ZNK8touchgfx3Box17invalidateContentEv+0x18>
 800d856:	1d83      	adds	r3, r0, #6
 800d858:	7fdb      	ldrb	r3, [r3, #31]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d002      	beq.n	800d864 <_ZNK8touchgfx3Box17invalidateContentEv+0x18>
 800d85e:	6803      	ldr	r3, [r0, #0]
 800d860:	695b      	ldr	r3, [r3, #20]
 800d862:	4798      	blx	r3
 800d864:	bd10      	pop	{r4, pc}

0800d866 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 800d866:	b570      	push	{r4, r5, r6, lr}
 800d868:	0005      	movs	r5, r0
 800d86a:	880b      	ldrh	r3, [r1, #0]
 800d86c:	3530      	adds	r5, #48	; 0x30
 800d86e:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800d870:	8813      	ldrh	r3, [r2, #0]
 800d872:	0004      	movs	r4, r0
 800d874:	8603      	strh	r3, [r0, #48]	; 0x30
 800d876:	0028      	movs	r0, r5
 800d878:	f004 f834 	bl	80118e4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d87c:	0006      	movs	r6, r0
 800d87e:	0028      	movs	r0, r5
 800d880:	f004 f868 	bl	8011954 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d884:	0005      	movs	r5, r0
 800d886:	6823      	ldr	r3, [r4, #0]
 800d888:	0031      	movs	r1, r6
 800d88a:	0020      	movs	r0, r4
 800d88c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d88e:	4798      	blx	r3
 800d890:	6823      	ldr	r3, [r4, #0]
 800d892:	0029      	movs	r1, r5
 800d894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d896:	0020      	movs	r0, r4
 800d898:	4798      	blx	r3
 800d89a:	bd70      	pop	{r4, r5, r6, pc}

0800d89c <_ZNK8touchgfx6Button12getSolidRectEv>:
 800d89c:	000b      	movs	r3, r1
 800d89e:	b510      	push	{r4, lr}
 800d8a0:	3332      	adds	r3, #50	; 0x32
 800d8a2:	781b      	ldrb	r3, [r3, #0]
 800d8a4:	0004      	movs	r4, r0
 800d8a6:	2bff      	cmp	r3, #255	; 0xff
 800d8a8:	d006      	beq.n	800d8b8 <_ZNK8touchgfx6Button12getSolidRectEv+0x1c>
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	8003      	strh	r3, [r0, #0]
 800d8ae:	8043      	strh	r3, [r0, #2]
 800d8b0:	8083      	strh	r3, [r0, #4]
 800d8b2:	80c3      	strh	r3, [r0, #6]
 800d8b4:	0020      	movs	r0, r4
 800d8b6:	bd10      	pop	{r4, pc}
 800d8b8:	000b      	movs	r3, r1
 800d8ba:	332c      	adds	r3, #44	; 0x2c
 800d8bc:	781b      	ldrb	r3, [r3, #0]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d004      	beq.n	800d8cc <_ZNK8touchgfx6Button12getSolidRectEv+0x30>
 800d8c2:	3130      	adds	r1, #48	; 0x30
 800d8c4:	0020      	movs	r0, r4
 800d8c6:	f004 f87d 	bl	80119c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800d8ca:	e7f3      	b.n	800d8b4 <_ZNK8touchgfx6Button12getSolidRectEv+0x18>
 800d8cc:	312e      	adds	r1, #46	; 0x2e
 800d8ce:	e7f9      	b.n	800d8c4 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>

0800d8d0 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 800d8d0:	0003      	movs	r3, r0
 800d8d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8d4:	332c      	adds	r3, #44	; 0x2c
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	b08d      	sub	sp, #52	; 0x34
 800d8da:	0004      	movs	r4, r0
 800d8dc:	000f      	movs	r7, r1
 800d8de:	ad07      	add	r5, sp, #28
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d100      	bne.n	800d8e6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x16>
 800d8e4:	e06e      	b.n	800d9c4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xf4>
 800d8e6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800d8e8:	0028      	movs	r0, r5
 800d8ea:	802b      	strh	r3, [r5, #0]
 800d8ec:	f003 fffa 	bl	80118e4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d8f0:	0006      	movs	r6, r0
 800d8f2:	0028      	movs	r0, r5
 800d8f4:	f004 f82e 	bl	8011954 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	9308      	str	r3, [sp, #32]
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	5ef9      	ldrsh	r1, [r7, r3]
 800d900:	88bb      	ldrh	r3, [r7, #4]
 800d902:	185b      	adds	r3, r3, r1
 800d904:	b29b      	uxth	r3, r3
 800d906:	469c      	mov	ip, r3
 800d908:	b21b      	sxth	r3, r3
 800d90a:	9304      	str	r3, [sp, #16]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	dd5b      	ble.n	800d9c8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xf8>
 800d910:	428e      	cmp	r6, r1
 800d912:	dd59      	ble.n	800d9c8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xf8>
 800d914:	2302      	movs	r3, #2
 800d916:	5efa      	ldrsh	r2, [r7, r3]
 800d918:	88fb      	ldrh	r3, [r7, #6]
 800d91a:	189b      	adds	r3, r3, r2
 800d91c:	b29b      	uxth	r3, r3
 800d91e:	b21f      	sxth	r7, r3
 800d920:	9705      	str	r7, [sp, #20]
 800d922:	2f00      	cmp	r7, #0
 800d924:	dd50      	ble.n	800d9c8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xf8>
 800d926:	4290      	cmp	r0, r2
 800d928:	dd4e      	ble.n	800d9c8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xf8>
 800d92a:	1c0f      	adds	r7, r1, #0
 800d92c:	2900      	cmp	r1, #0
 800d92e:	da00      	bge.n	800d932 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x62>
 800d930:	2700      	movs	r7, #0
 800d932:	b23f      	sxth	r7, r7
 800d934:	1c11      	adds	r1, r2, #0
 800d936:	2a00      	cmp	r2, #0
 800d938:	da00      	bge.n	800d93c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x6c>
 800d93a:	2100      	movs	r1, #0
 800d93c:	b20a      	sxth	r2, r1
 800d93e:	9904      	ldr	r1, [sp, #16]
 800d940:	428e      	cmp	r6, r1
 800d942:	da01      	bge.n	800d948 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x78>
 800d944:	b2b1      	uxth	r1, r6
 800d946:	468c      	mov	ip, r1
 800d948:	4666      	mov	r6, ip
 800d94a:	a908      	add	r1, sp, #32
 800d94c:	1bf6      	subs	r6, r6, r7
 800d94e:	808e      	strh	r6, [r1, #4]
 800d950:	9e05      	ldr	r6, [sp, #20]
 800d952:	42b0      	cmp	r0, r6
 800d954:	da00      	bge.n	800d958 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x88>
 800d956:	b283      	uxth	r3, r0
 800d958:	1a9b      	subs	r3, r3, r2
 800d95a:	80cb      	strh	r3, [r1, #6]
 800d95c:	800f      	strh	r7, [r1, #0]
 800d95e:	804a      	strh	r2, [r1, #2]
 800d960:	882a      	ldrh	r2, [r5, #0]
 800d962:	4b1b      	ldr	r3, [pc, #108]	; (800d9d0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>)
 800d964:	429a      	cmp	r2, r3
 800d966:	d02b      	beq.n	800d9c0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xf0>
 800d968:	ab08      	add	r3, sp, #32
 800d96a:	2104      	movs	r1, #4
 800d96c:	5e5a      	ldrsh	r2, [r3, r1]
 800d96e:	2a00      	cmp	r2, #0
 800d970:	dd26      	ble.n	800d9c0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xf0>
 800d972:	2206      	movs	r2, #6
 800d974:	5e9b      	ldrsh	r3, [r3, r2]
 800d976:	2b00      	cmp	r3, #0
 800d978:	dd22      	ble.n	800d9c0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xf0>
 800d97a:	2300      	movs	r3, #0
 800d97c:	930a      	str	r3, [sp, #40]	; 0x28
 800d97e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d980:	6823      	ldr	r3, [r4, #0]
 800d982:	ae0a      	add	r6, sp, #40	; 0x28
 800d984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d986:	0031      	movs	r1, r6
 800d988:	0020      	movs	r0, r4
 800d98a:	4798      	blx	r3
 800d98c:	4b11      	ldr	r3, [pc, #68]	; (800d9d4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x104>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	001a      	movs	r2, r3
 800d992:	3258      	adds	r2, #88	; 0x58
 800d994:	7812      	ldrb	r2, [r2, #0]
 800d996:	2a00      	cmp	r2, #0
 800d998:	d002      	beq.n	800d9a0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xd0>
 800d99a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d99c:	2800      	cmp	r0, #0
 800d99e:	d100      	bne.n	800d9a2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xd2>
 800d9a0:	6898      	ldr	r0, [r3, #8]
 800d9a2:	2202      	movs	r2, #2
 800d9a4:	5eb3      	ldrsh	r3, [r6, r2]
 800d9a6:	2100      	movs	r1, #0
 800d9a8:	5e72      	ldrsh	r2, [r6, r1]
 800d9aa:	2601      	movs	r6, #1
 800d9ac:	6801      	ldr	r1, [r0, #0]
 800d9ae:	3432      	adds	r4, #50	; 0x32
 800d9b0:	9602      	str	r6, [sp, #8]
 800d9b2:	7824      	ldrb	r4, [r4, #0]
 800d9b4:	9401      	str	r4, [sp, #4]
 800d9b6:	ac08      	add	r4, sp, #32
 800d9b8:	9400      	str	r4, [sp, #0]
 800d9ba:	688c      	ldr	r4, [r1, #8]
 800d9bc:	0029      	movs	r1, r5
 800d9be:	47a0      	blx	r4
 800d9c0:	b00d      	add	sp, #52	; 0x34
 800d9c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9c4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800d9c6:	e78f      	b.n	800d8e8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x18>
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	9309      	str	r3, [sp, #36]	; 0x24
 800d9cc:	e7c8      	b.n	800d960 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x90>
 800d9ce:	46c0      	nop			; (mov r8, r8)
 800d9d0:	0000ffff 	.word	0x0000ffff
 800d9d4:	200026c8 	.word	0x200026c8

0800d9d8 <_ZNK8touchgfx6Button17invalidateContentEv>:
 800d9d8:	0003      	movs	r3, r0
 800d9da:	b510      	push	{r4, lr}
 800d9dc:	3332      	adds	r3, #50	; 0x32
 800d9de:	781b      	ldrb	r3, [r3, #0]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d006      	beq.n	800d9f2 <_ZNK8touchgfx6Button17invalidateContentEv+0x1a>
 800d9e4:	1d83      	adds	r3, r0, #6
 800d9e6:	7fdb      	ldrb	r3, [r3, #31]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d002      	beq.n	800d9f2 <_ZNK8touchgfx6Button17invalidateContentEv+0x1a>
 800d9ec:	6803      	ldr	r3, [r0, #0]
 800d9ee:	695b      	ldr	r3, [r3, #20]
 800d9f0:	4798      	blx	r3
 800d9f2:	bd10      	pop	{r4, pc}

0800d9f4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800d9f4:	b570      	push	{r4, r5, r6, lr}
 800d9f6:	880b      	ldrh	r3, [r1, #0]
 800d9f8:	0004      	movs	r4, r0
 800d9fa:	84c3      	strh	r3, [r0, #38]	; 0x26
 800d9fc:	0008      	movs	r0, r1
 800d9fe:	000d      	movs	r5, r1
 800da00:	f003 ff70 	bl	80118e4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800da04:	0006      	movs	r6, r0
 800da06:	0028      	movs	r0, r5
 800da08:	f003 ffa4 	bl	8011954 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800da0c:	0005      	movs	r5, r0
 800da0e:	6823      	ldr	r3, [r4, #0]
 800da10:	0031      	movs	r1, r6
 800da12:	0020      	movs	r0, r4
 800da14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da16:	4798      	blx	r3
 800da18:	6823      	ldr	r3, [r4, #0]
 800da1a:	0029      	movs	r1, r5
 800da1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da1e:	0020      	movs	r0, r4
 800da20:	4798      	blx	r3
 800da22:	bd70      	pop	{r4, r5, r6, pc}

0800da24 <_ZNK8touchgfx5Image12getSolidRectEv>:
 800da24:	000b      	movs	r3, r1
 800da26:	b510      	push	{r4, lr}
 800da28:	3328      	adds	r3, #40	; 0x28
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	0004      	movs	r4, r0
 800da2e:	2bff      	cmp	r3, #255	; 0xff
 800da30:	d006      	beq.n	800da40 <_ZNK8touchgfx5Image12getSolidRectEv+0x1c>
 800da32:	2300      	movs	r3, #0
 800da34:	8003      	strh	r3, [r0, #0]
 800da36:	8043      	strh	r3, [r0, #2]
 800da38:	8083      	strh	r3, [r0, #4]
 800da3a:	80c3      	strh	r3, [r0, #6]
 800da3c:	0020      	movs	r0, r4
 800da3e:	bd10      	pop	{r4, pc}
 800da40:	3126      	adds	r1, #38	; 0x26
 800da42:	f003 ffbf 	bl	80119c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800da46:	e7f9      	b.n	800da3c <_ZNK8touchgfx5Image12getSolidRectEv+0x18>

0800da48 <_ZNK8touchgfx5Image17invalidateContentEv>:
 800da48:	0003      	movs	r3, r0
 800da4a:	b510      	push	{r4, lr}
 800da4c:	3328      	adds	r3, #40	; 0x28
 800da4e:	781b      	ldrb	r3, [r3, #0]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d006      	beq.n	800da62 <_ZNK8touchgfx5Image17invalidateContentEv+0x1a>
 800da54:	1d83      	adds	r3, r0, #6
 800da56:	7fdb      	ldrb	r3, [r3, #31]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d002      	beq.n	800da62 <_ZNK8touchgfx5Image17invalidateContentEv+0x1a>
 800da5c:	6803      	ldr	r3, [r0, #0]
 800da5e:	695b      	ldr	r3, [r3, #20]
 800da60:	4798      	blx	r3
 800da62:	bd10      	pop	{r4, pc}

0800da64 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800da64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da66:	0005      	movs	r5, r0
 800da68:	2400      	movs	r4, #0
 800da6a:	002e      	movs	r6, r5
 800da6c:	b08b      	sub	sp, #44	; 0x2c
 800da6e:	6803      	ldr	r3, [r0, #0]
 800da70:	af06      	add	r7, sp, #24
 800da72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da74:	9104      	str	r1, [sp, #16]
 800da76:	9406      	str	r4, [sp, #24]
 800da78:	0039      	movs	r1, r7
 800da7a:	9407      	str	r4, [sp, #28]
 800da7c:	3626      	adds	r6, #38	; 0x26
 800da7e:	4798      	blx	r3
 800da80:	0030      	movs	r0, r6
 800da82:	f003 ff2f 	bl	80118e4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800da86:	9005      	str	r0, [sp, #20]
 800da88:	0030      	movs	r0, r6
 800da8a:	f003 ff63 	bl	8011954 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800da8e:	9b05      	ldr	r3, [sp, #20]
 800da90:	9408      	str	r4, [sp, #32]
 800da92:	ac08      	add	r4, sp, #32
 800da94:	80a3      	strh	r3, [r4, #4]
 800da96:	80e0      	strh	r0, [r4, #6]
 800da98:	9904      	ldr	r1, [sp, #16]
 800da9a:	0020      	movs	r0, r4
 800da9c:	f7fe fd70 	bl	800c580 <_ZN8touchgfx4RectaNERKS0_>
 800daa0:	2204      	movs	r2, #4
 800daa2:	5ea3      	ldrsh	r3, [r4, r2]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	dd1c      	ble.n	800dae2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7e>
 800daa8:	2206      	movs	r2, #6
 800daaa:	5ea3      	ldrsh	r3, [r4, r2]
 800daac:	2b00      	cmp	r3, #0
 800daae:	dd18      	ble.n	800dae2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7e>
 800dab0:	4b0d      	ldr	r3, [pc, #52]	; (800dae8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x84>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	001a      	movs	r2, r3
 800dab6:	3258      	adds	r2, #88	; 0x58
 800dab8:	7812      	ldrb	r2, [r2, #0]
 800daba:	2a00      	cmp	r2, #0
 800dabc:	d002      	beq.n	800dac4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x60>
 800dabe:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dac0:	2800      	cmp	r0, #0
 800dac2:	d100      	bne.n	800dac6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x62>
 800dac4:	6898      	ldr	r0, [r3, #8]
 800dac6:	2202      	movs	r2, #2
 800dac8:	5ebb      	ldrsh	r3, [r7, r2]
 800daca:	2100      	movs	r1, #0
 800dacc:	5e7a      	ldrsh	r2, [r7, r1]
 800dace:	2701      	movs	r7, #1
 800dad0:	6801      	ldr	r1, [r0, #0]
 800dad2:	3528      	adds	r5, #40	; 0x28
 800dad4:	9702      	str	r7, [sp, #8]
 800dad6:	782d      	ldrb	r5, [r5, #0]
 800dad8:	9400      	str	r4, [sp, #0]
 800dada:	9501      	str	r5, [sp, #4]
 800dadc:	688c      	ldr	r4, [r1, #8]
 800dade:	0031      	movs	r1, r6
 800dae0:	47a0      	blx	r4
 800dae2:	b00b      	add	sp, #44	; 0x2c
 800dae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dae6:	46c0      	nop			; (mov r8, r8)
 800dae8:	200026c8 	.word	0x200026c8

0800daec <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800daec:	b510      	push	{r4, lr}
 800daee:	6803      	ldr	r3, [r0, #0]
 800daf0:	000c      	movs	r4, r1
 800daf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daf4:	4798      	blx	r3
 800daf6:	1b00      	subs	r0, r0, r4
 800daf8:	4243      	negs	r3, r0
 800dafa:	4158      	adcs	r0, r3
 800dafc:	b2c0      	uxtb	r0, r0
 800dafe:	bd10      	pop	{r4, pc}

0800db00 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800db00:	4b01      	ldr	r3, [pc, #4]	; (800db08 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800db02:	6019      	str	r1, [r3, #0]
 800db04:	4770      	bx	lr
 800db06:	46c0      	nop			; (mov r8, r8)
 800db08:	200026d0 	.word	0x200026d0

0800db0c <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800db0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db0e:	b09d      	sub	sp, #116	; 0x74
 800db10:	9308      	str	r3, [sp, #32]
 800db12:	ab24      	add	r3, sp, #144	; 0x90
 800db14:	881b      	ldrh	r3, [r3, #0]
 800db16:	ad0d      	add	r5, sp, #52	; 0x34
 800db18:	9309      	str	r3, [sp, #36]	; 0x24
 800db1a:	ab25      	add	r3, sp, #148	; 0x94
 800db1c:	781b      	ldrb	r3, [r3, #0]
 800db1e:	0006      	movs	r6, r0
 800db20:	930a      	str	r3, [sp, #40]	; 0x28
 800db22:	ab26      	add	r3, sp, #152	; 0x98
 800db24:	881b      	ldrh	r3, [r3, #0]
 800db26:	9107      	str	r1, [sp, #28]
 800db28:	930b      	str	r3, [sp, #44]	; 0x2c
 800db2a:	002b      	movs	r3, r5
 800db2c:	0014      	movs	r4, r2
 800db2e:	ca83      	ldmia	r2!, {r0, r1, r7}
 800db30:	c383      	stmia	r3!, {r0, r1, r7}
 800db32:	ca03      	ldmia	r2!, {r0, r1}
 800db34:	c303      	stmia	r3!, {r0, r1}
 800db36:	ab12      	add	r3, sp, #72	; 0x48
 800db38:	ca83      	ldmia	r2!, {r0, r1, r7}
 800db3a:	c383      	stmia	r3!, {r0, r1, r7}
 800db3c:	ca03      	ldmia	r2!, {r0, r1}
 800db3e:	c303      	stmia	r3!, {r0, r1}
 800db40:	ab17      	add	r3, sp, #92	; 0x5c
 800db42:	ca83      	ldmia	r2!, {r0, r1, r7}
 800db44:	c383      	stmia	r3!, {r0, r1, r7}
 800db46:	ca03      	ldmia	r2!, {r0, r1}
 800db48:	c303      	stmia	r3!, {r0, r1}
 800db4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800db4c:	6833      	ldr	r3, [r6, #0]
 800db4e:	9204      	str	r2, [sp, #16]
 800db50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db52:	9907      	ldr	r1, [sp, #28]
 800db54:	9203      	str	r2, [sp, #12]
 800db56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db58:	0030      	movs	r0, r6
 800db5a:	9202      	str	r2, [sp, #8]
 800db5c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800db5e:	9201      	str	r2, [sp, #4]
 800db60:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800db62:	9200      	str	r2, [sp, #0]
 800db64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db66:	002a      	movs	r2, r5
 800db68:	001f      	movs	r7, r3
 800db6a:	9b08      	ldr	r3, [sp, #32]
 800db6c:	47b8      	blx	r7
 800db6e:	002b      	movs	r3, r5
 800db70:	0022      	movs	r2, r4
 800db72:	ca83      	ldmia	r2!, {r0, r1, r7}
 800db74:	c383      	stmia	r3!, {r0, r1, r7}
 800db76:	ca03      	ldmia	r2!, {r0, r1}
 800db78:	c303      	stmia	r3!, {r0, r1}
 800db7a:	ab12      	add	r3, sp, #72	; 0x48
 800db7c:	3214      	adds	r2, #20
 800db7e:	ca83      	ldmia	r2!, {r0, r1, r7}
 800db80:	c383      	stmia	r3!, {r0, r1, r7}
 800db82:	ca03      	ldmia	r2!, {r0, r1}
 800db84:	c303      	stmia	r3!, {r0, r1}
 800db86:	343c      	adds	r4, #60	; 0x3c
 800db88:	ab17      	add	r3, sp, #92	; 0x5c
 800db8a:	cc07      	ldmia	r4!, {r0, r1, r2}
 800db8c:	c307      	stmia	r3!, {r0, r1, r2}
 800db8e:	cc06      	ldmia	r4!, {r1, r2}
 800db90:	c306      	stmia	r3!, {r1, r2}
 800db92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800db94:	6833      	ldr	r3, [r6, #0]
 800db96:	9204      	str	r2, [sp, #16]
 800db98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db9a:	9907      	ldr	r1, [sp, #28]
 800db9c:	9203      	str	r2, [sp, #12]
 800db9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dba0:	0030      	movs	r0, r6
 800dba2:	9202      	str	r2, [sp, #8]
 800dba4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800dba6:	9201      	str	r2, [sp, #4]
 800dba8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800dbaa:	9200      	str	r2, [sp, #0]
 800dbac:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800dbae:	002a      	movs	r2, r5
 800dbb0:	9b08      	ldr	r3, [sp, #32]
 800dbb2:	47a0      	blx	r4
 800dbb4:	b01d      	add	sp, #116	; 0x74
 800dbb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dbb8 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800dbb8:	2000      	movs	r0, #0
 800dbba:	4770      	bx	lr

0800dbbc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800dbbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbbe:	b0ad      	sub	sp, #180	; 0xb4
 800dbc0:	931d      	str	r3, [sp, #116]	; 0x74
 800dbc2:	ab37      	add	r3, sp, #220	; 0xdc
 800dbc4:	781b      	ldrb	r3, [r3, #0]
 800dbc6:	0015      	movs	r5, r2
 800dbc8:	932b      	str	r3, [sp, #172]	; 0xac
 800dbca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dbcc:	9029      	str	r0, [sp, #164]	; 0xa4
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	912a      	str	r1, [sp, #168]	; 0xa8
 800dbd2:	9318      	str	r3, [sp, #96]	; 0x60
 800dbd4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800dbd6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	1a9b      	subs	r3, r3, r2
 800dbdc:	9317      	str	r3, [sp, #92]	; 0x5c
 800dbde:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	5e9b      	ldrsh	r3, [r3, r2]
 800dbe4:	9323      	str	r3, [sp, #140]	; 0x8c
 800dbe6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800dbe8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dbea:	4694      	mov	ip, r2
 800dbec:	4463      	add	r3, ip
 800dbee:	9324      	str	r3, [sp, #144]	; 0x90
 800dbf0:	ab38      	add	r3, sp, #224	; 0xe0
 800dbf2:	881f      	ldrh	r7, [r3, #0]
 800dbf4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dbf6:	429f      	cmp	r7, r3
 800dbf8:	dd00      	ble.n	800dbfc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x40>
 800dbfa:	001f      	movs	r7, r3
 800dbfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dbfe:	0038      	movs	r0, r7
 800dc00:	69db      	ldr	r3, [r3, #28]
 800dc02:	931c      	str	r3, [sp, #112]	; 0x70
 800dc04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dc06:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 800dc08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc0a:	931f      	str	r3, [sp, #124]	; 0x7c
 800dc0c:	f7f3 fbac 	bl	8001368 <__aeabi_i2f>
 800dc10:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800dc12:	1c04      	adds	r4, r0, #0
 800dc14:	f7f3 f89a 	bl	8000d4c <__aeabi_fmul>
 800dc18:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800dc1a:	9020      	str	r0, [sp, #128]	; 0x80
 800dc1c:	1c20      	adds	r0, r4, #0
 800dc1e:	f7f3 f895 	bl	8000d4c <__aeabi_fmul>
 800dc22:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800dc24:	9021      	str	r0, [sp, #132]	; 0x84
 800dc26:	1c20      	adds	r0, r4, #0
 800dc28:	f7f3 f890 	bl	8000d4c <__aeabi_fmul>
 800dc2c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800dc2e:	9022      	str	r0, [sp, #136]	; 0x88
 800dc30:	981c      	ldr	r0, [sp, #112]	; 0x70
 800dc32:	f7f2 fd21 	bl	8000678 <__aeabi_fadd>
 800dc36:	9921      	ldr	r1, [sp, #132]	; 0x84
 800dc38:	9019      	str	r0, [sp, #100]	; 0x64
 800dc3a:	1c30      	adds	r0, r6, #0
 800dc3c:	f7f2 fd1c 	bl	8000678 <__aeabi_fadd>
 800dc40:	9922      	ldr	r1, [sp, #136]	; 0x88
 800dc42:	901a      	str	r0, [sp, #104]	; 0x68
 800dc44:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800dc46:	f7f2 fd17 	bl	8000678 <__aeabi_fadd>
 800dc4a:	901b      	str	r0, [sp, #108]	; 0x6c
 800dc4c:	20fe      	movs	r0, #254	; 0xfe
 800dc4e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800dc50:	0580      	lsls	r0, r0, #22
 800dc52:	f7f2 feb1 	bl	80009b8 <__aeabi_fdiv>
 800dc56:	1c01      	adds	r1, r0, #0
 800dc58:	1c04      	adds	r4, r0, #0
 800dc5a:	1c30      	adds	r0, r6, #0
 800dc5c:	f7f3 f876 	bl	8000d4c <__aeabi_fmul>
 800dc60:	1c21      	adds	r1, r4, #0
 800dc62:	901e      	str	r0, [sp, #120]	; 0x78
 800dc64:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800dc66:	f7f3 f871 	bl	8000d4c <__aeabi_fmul>
 800dc6a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800dc6c:	901f      	str	r0, [sp, #124]	; 0x7c
 800dc6e:	2600      	movs	r6, #0
 800dc70:	5f9e      	ldrsh	r6, [r3, r6]
 800dc72:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800dc74:	429e      	cmp	r6, r3
 800dc76:	dc00      	bgt.n	800dc7a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xbe>
 800dc78:	e0f5      	b.n	800de66 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2aa>
 800dc7a:	1af0      	subs	r0, r6, r3
 800dc7c:	0039      	movs	r1, r7
 800dc7e:	f7f2 fbcf 	bl	8000420 <__aeabi_idivmod>
 800dc82:	911c      	str	r1, [sp, #112]	; 0x70
 800dc84:	0005      	movs	r5, r0
 800dc86:	9025      	str	r0, [sp, #148]	; 0x94
 800dc88:	f7f3 fb6e 	bl	8001368 <__aeabi_i2f>
 800dc8c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800dc8e:	1c04      	adds	r4, r0, #0
 800dc90:	f7f3 f85c 	bl	8000d4c <__aeabi_fmul>
 800dc94:	1c01      	adds	r1, r0, #0
 800dc96:	9819      	ldr	r0, [sp, #100]	; 0x64
 800dc98:	f7f2 fcee 	bl	8000678 <__aeabi_fadd>
 800dc9c:	9921      	ldr	r1, [sp, #132]	; 0x84
 800dc9e:	9019      	str	r0, [sp, #100]	; 0x64
 800dca0:	1c20      	adds	r0, r4, #0
 800dca2:	f7f3 f853 	bl	8000d4c <__aeabi_fmul>
 800dca6:	1c01      	adds	r1, r0, #0
 800dca8:	981a      	ldr	r0, [sp, #104]	; 0x68
 800dcaa:	f7f2 fce5 	bl	8000678 <__aeabi_fadd>
 800dcae:	9922      	ldr	r1, [sp, #136]	; 0x88
 800dcb0:	901a      	str	r0, [sp, #104]	; 0x68
 800dcb2:	1c20      	adds	r0, r4, #0
 800dcb4:	f7f3 f84a 	bl	8000d4c <__aeabi_fmul>
 800dcb8:	1c01      	adds	r1, r0, #0
 800dcba:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800dcbc:	f7f2 fcdc 	bl	8000678 <__aeabi_fadd>
 800dcc0:	901b      	str	r0, [sp, #108]	; 0x6c
 800dcc2:	2d00      	cmp	r5, #0
 800dcc4:	dd20      	ble.n	800dd08 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x14c>
 800dcc6:	9920      	ldr	r1, [sp, #128]	; 0x80
 800dcc8:	9819      	ldr	r0, [sp, #100]	; 0x64
 800dcca:	f7f3 f98d 	bl	8000fe8 <__aeabi_fsub>
 800dcce:	2100      	movs	r1, #0
 800dcd0:	1c04      	adds	r4, r0, #0
 800dcd2:	f7f2 fbb7 	bl	8000444 <__aeabi_fcmpeq>
 800dcd6:	2800      	cmp	r0, #0
 800dcd8:	d000      	beq.n	800dcdc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 800dcda:	e0c1      	b.n	800de60 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a4>
 800dcdc:	20fe      	movs	r0, #254	; 0xfe
 800dcde:	1c21      	adds	r1, r4, #0
 800dce0:	0580      	lsls	r0, r0, #22
 800dce2:	f7f2 fe69 	bl	80009b8 <__aeabi_fdiv>
 800dce6:	1c04      	adds	r4, r0, #0
 800dce8:	9921      	ldr	r1, [sp, #132]	; 0x84
 800dcea:	981a      	ldr	r0, [sp, #104]	; 0x68
 800dcec:	f7f3 f97c 	bl	8000fe8 <__aeabi_fsub>
 800dcf0:	1c21      	adds	r1, r4, #0
 800dcf2:	f7f3 f82b 	bl	8000d4c <__aeabi_fmul>
 800dcf6:	9922      	ldr	r1, [sp, #136]	; 0x88
 800dcf8:	901e      	str	r0, [sp, #120]	; 0x78
 800dcfa:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800dcfc:	f7f3 f974 	bl	8000fe8 <__aeabi_fsub>
 800dd00:	1c21      	adds	r1, r4, #0
 800dd02:	f7f3 f823 	bl	8000d4c <__aeabi_fmul>
 800dd06:	901f      	str	r0, [sp, #124]	; 0x7c
 800dd08:	437d      	muls	r5, r7
 800dd0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dd0c:	1b5b      	subs	r3, r3, r5
 800dd0e:	9317      	str	r3, [sp, #92]	; 0x5c
 800dd10:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dd12:	195b      	adds	r3, r3, r5
 800dd14:	9318      	str	r3, [sp, #96]	; 0x60
 800dd16:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800dd18:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800dd1a:	889b      	ldrh	r3, [r3, #4]
 800dd1c:	199e      	adds	r6, r3, r6
 800dd1e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dd20:	b236      	sxth	r6, r6
 800dd22:	189b      	adds	r3, r3, r2
 800dd24:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dd26:	189b      	adds	r3, r3, r2
 800dd28:	42b3      	cmp	r3, r6
 800dd2a:	dd04      	ble.n	800dd36 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x17a>
 800dd2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dd2e:	1af6      	subs	r6, r6, r3
 800dd30:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dd32:	1af3      	subs	r3, r6, r3
 800dd34:	9317      	str	r3, [sp, #92]	; 0x5c
 800dd36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	dc00      	bgt.n	800dd3e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x182>
 800dd3c:	e08e      	b.n	800de5c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a0>
 800dd3e:	0039      	movs	r1, r7
 800dd40:	0018      	movs	r0, r3
 800dd42:	f7f2 fb6d 	bl	8000420 <__aeabi_idivmod>
 800dd46:	0006      	movs	r6, r0
 800dd48:	1e0d      	subs	r5, r1, #0
 800dd4a:	d101      	bne.n	800dd50 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x194>
 800dd4c:	003d      	movs	r5, r7
 800dd4e:	3e01      	subs	r6, #1
 800dd50:	20fe      	movs	r0, #254	; 0xfe
 800dd52:	9919      	ldr	r1, [sp, #100]	; 0x64
 800dd54:	0580      	lsls	r0, r0, #22
 800dd56:	f7f2 fe2f 	bl	80009b8 <__aeabi_fdiv>
 800dd5a:	1c01      	adds	r1, r0, #0
 800dd5c:	1c04      	adds	r4, r0, #0
 800dd5e:	981a      	ldr	r0, [sp, #104]	; 0x68
 800dd60:	f7f2 fff4 	bl	8000d4c <__aeabi_fmul>
 800dd64:	1c21      	adds	r1, r4, #0
 800dd66:	9018      	str	r0, [sp, #96]	; 0x60
 800dd68:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800dd6a:	f7f2 ffef 	bl	8000d4c <__aeabi_fmul>
 800dd6e:	218f      	movs	r1, #143	; 0x8f
 800dd70:	9023      	str	r0, [sp, #140]	; 0x8c
 800dd72:	05c9      	lsls	r1, r1, #23
 800dd74:	981e      	ldr	r0, [sp, #120]	; 0x78
 800dd76:	f7f2 ffe9 	bl	8000d4c <__aeabi_fmul>
 800dd7a:	f7f3 fad5 	bl	8001328 <__aeabi_f2iz>
 800dd7e:	218f      	movs	r1, #143	; 0x8f
 800dd80:	9028      	str	r0, [sp, #160]	; 0xa0
 800dd82:	05c9      	lsls	r1, r1, #23
 800dd84:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800dd86:	f7f2 ffe1 	bl	8000d4c <__aeabi_fmul>
 800dd8a:	f7f3 facd 	bl	8001328 <__aeabi_f2iz>
 800dd8e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800dd90:	9027      	str	r0, [sp, #156]	; 0x9c
 800dd92:	9818      	ldr	r0, [sp, #96]	; 0x60
 800dd94:	f7f3 f928 	bl	8000fe8 <__aeabi_fsub>
 800dd98:	218f      	movs	r1, #143	; 0x8f
 800dd9a:	05c9      	lsls	r1, r1, #23
 800dd9c:	f7f2 ffd6 	bl	8000d4c <__aeabi_fmul>
 800dda0:	f7f3 fac2 	bl	8001328 <__aeabi_f2iz>
 800dda4:	0039      	movs	r1, r7
 800dda6:	f7f2 fa55 	bl	8000254 <__divsi3>
 800ddaa:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800ddac:	9026      	str	r0, [sp, #152]	; 0x98
 800ddae:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800ddb0:	f7f3 f91a 	bl	8000fe8 <__aeabi_fsub>
 800ddb4:	218f      	movs	r1, #143	; 0x8f
 800ddb6:	05c9      	lsls	r1, r1, #23
 800ddb8:	f7f2 ffc8 	bl	8000d4c <__aeabi_fmul>
 800ddbc:	f7f3 fab4 	bl	8001328 <__aeabi_f2iz>
 800ddc0:	0039      	movs	r1, r7
 800ddc2:	f7f2 fa47 	bl	8000254 <__divsi3>
 800ddc6:	003b      	movs	r3, r7
 800ddc8:	2e00      	cmp	r6, #0
 800ddca:	dc00      	bgt.n	800ddce <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x212>
 800ddcc:	002b      	movs	r3, r5
 800ddce:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800ddd0:	6852      	ldr	r2, [r2, #4]
 800ddd2:	9217      	str	r2, [sp, #92]	; 0x5c
 800ddd4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ddd6:	1a9b      	subs	r3, r3, r2
 800ddd8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ddda:	6812      	ldr	r2, [r2, #0]
 800dddc:	9229      	str	r2, [sp, #164]	; 0xa4
 800ddde:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800dde0:	9214      	str	r2, [sp, #80]	; 0x50
 800dde2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dde4:	9213      	str	r2, [sp, #76]	; 0x4c
 800dde6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dde8:	9212      	str	r2, [sp, #72]	; 0x48
 800ddea:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800ddec:	9211      	str	r2, [sp, #68]	; 0x44
 800ddee:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 800ddf0:	9210      	str	r2, [sp, #64]	; 0x40
 800ddf2:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 800ddf4:	2102      	movs	r1, #2
 800ddf6:	5e52      	ldrsh	r2, [r2, r1]
 800ddf8:	991d      	ldr	r1, [sp, #116]	; 0x74
 800ddfa:	6949      	ldr	r1, [r1, #20]
 800ddfc:	940c      	str	r4, [sp, #48]	; 0x30
 800ddfe:	1852      	adds	r2, r2, r1
 800de00:	991c      	ldr	r1, [sp, #112]	; 0x70
 800de02:	920f      	str	r2, [sp, #60]	; 0x3c
 800de04:	468c      	mov	ip, r1
 800de06:	9925      	ldr	r1, [sp, #148]	; 0x94
 800de08:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800de0a:	4379      	muls	r1, r7
 800de0c:	4462      	add	r2, ip
 800de0e:	1852      	adds	r2, r2, r1
 800de10:	920e      	str	r2, [sp, #56]	; 0x38
 800de12:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800de14:	0031      	movs	r1, r6
 800de16:	920d      	str	r2, [sp, #52]	; 0x34
 800de18:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800de1a:	920b      	str	r2, [sp, #44]	; 0x2c
 800de1c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800de1e:	920a      	str	r2, [sp, #40]	; 0x28
 800de20:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800de22:	9007      	str	r0, [sp, #28]
 800de24:	9209      	str	r2, [sp, #36]	; 0x24
 800de26:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800de28:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800de2a:	9208      	str	r2, [sp, #32]
 800de2c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800de2e:	9700      	str	r7, [sp, #0]
 800de30:	9206      	str	r2, [sp, #24]
 800de32:	4662      	mov	r2, ip
 800de34:	4350      	muls	r0, r2
 800de36:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800de38:	1880      	adds	r0, r0, r2
 800de3a:	4662      	mov	r2, ip
 800de3c:	4354      	muls	r4, r2
 800de3e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800de40:	9005      	str	r0, [sp, #20]
 800de42:	18a4      	adds	r4, r4, r2
 800de44:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800de46:	9404      	str	r4, [sp, #16]
 800de48:	9203      	str	r2, [sp, #12]
 800de4a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800de4c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800de4e:	9202      	str	r2, [sp, #8]
 800de50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800de52:	9201      	str	r2, [sp, #4]
 800de54:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800de56:	6894      	ldr	r4, [r2, #8]
 800de58:	002a      	movs	r2, r5
 800de5a:	47a0      	blx	r4
 800de5c:	b02d      	add	sp, #180	; 0xb4
 800de5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de60:	24fe      	movs	r4, #254	; 0xfe
 800de62:	05a4      	lsls	r4, r4, #22
 800de64:	e740      	b.n	800dce8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x12c>
 800de66:	2300      	movs	r3, #0
 800de68:	9325      	str	r3, [sp, #148]	; 0x94
 800de6a:	931c      	str	r3, [sp, #112]	; 0x70
 800de6c:	e753      	b.n	800dd16 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x15a>
	...

0800de70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800de70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de72:	001d      	movs	r5, r3
 800de74:	b0eb      	sub	sp, #428	; 0x1ac
 800de76:	ab72      	add	r3, sp, #456	; 0x1c8
 800de78:	881b      	ldrh	r3, [r3, #0]
 800de7a:	9111      	str	r1, [sp, #68]	; 0x44
 800de7c:	9312      	str	r3, [sp, #72]	; 0x48
 800de7e:	ab73      	add	r3, sp, #460	; 0x1cc
 800de80:	781b      	ldrb	r3, [r3, #0]
 800de82:	900b      	str	r0, [sp, #44]	; 0x2c
 800de84:	9313      	str	r3, [sp, #76]	; 0x4c
 800de86:	ab74      	add	r3, sp, #464	; 0x1d0
 800de88:	881b      	ldrh	r3, [r3, #0]
 800de8a:	0014      	movs	r4, r2
 800de8c:	9318      	str	r3, [sp, #96]	; 0x60
 800de8e:	6803      	ldr	r3, [r0, #0]
 800de90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800de92:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 800de94:	0029      	movs	r1, r5
 800de96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800de98:	47b0      	blx	r6
 800de9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de9c:	6058      	str	r0, [r3, #4]
 800de9e:	2800      	cmp	r0, #0
 800dea0:	d101      	bne.n	800dea6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36>
 800dea2:	f000 fc18 	bl	800e6d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x866>
 800dea6:	682b      	ldr	r3, [r5, #0]
 800dea8:	9324      	str	r3, [sp, #144]	; 0x90
 800deaa:	686b      	ldr	r3, [r5, #4]
 800deac:	9325      	str	r3, [sp, #148]	; 0x94
 800deae:	4bbd      	ldr	r3, [pc, #756]	; (800e1a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x334>)
 800deb0:	7819      	ldrb	r1, [r3, #0]
 800deb2:	68ab      	ldr	r3, [r5, #8]
 800deb4:	001a      	movs	r2, r3
 800deb6:	2900      	cmp	r1, #0
 800deb8:	d000      	beq.n	800debc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4c>
 800deba:	68ea      	ldr	r2, [r5, #12]
 800debc:	9226      	str	r2, [sp, #152]	; 0x98
 800debe:	001a      	movs	r2, r3
 800dec0:	2900      	cmp	r1, #0
 800dec2:	d100      	bne.n	800dec6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x56>
 800dec4:	68ea      	ldr	r2, [r5, #12]
 800dec6:	49b8      	ldr	r1, [pc, #736]	; (800e1a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x338>)
 800dec8:	68a0      	ldr	r0, [r4, #8]
 800deca:	9227      	str	r2, [sp, #156]	; 0x9c
 800decc:	9328      	str	r3, [sp, #160]	; 0xa0
 800dece:	f7f2 fac9 	bl	8000464 <__aeabi_fcmple>
 800ded2:	2800      	cmp	r0, #0
 800ded4:	d001      	beq.n	800deda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6a>
 800ded6:	f000 fbfe 	bl	800e6d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x866>
 800deda:	49b3      	ldr	r1, [pc, #716]	; (800e1a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x338>)
 800dedc:	69e0      	ldr	r0, [r4, #28]
 800dede:	f7f2 fac1 	bl	8000464 <__aeabi_fcmple>
 800dee2:	2800      	cmp	r0, #0
 800dee4:	d000      	beq.n	800dee8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x78>
 800dee6:	e3f6      	b.n	800e6d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x866>
 800dee8:	49af      	ldr	r1, [pc, #700]	; (800e1a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x338>)
 800deea:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800deec:	f7f2 faba 	bl	8000464 <__aeabi_fcmple>
 800def0:	2800      	cmp	r0, #0
 800def2:	d000      	beq.n	800def6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x86>
 800def4:	e3ef      	b.n	800e6d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x866>
 800def6:	6823      	ldr	r3, [r4, #0]
 800def8:	4aac      	ldr	r2, [pc, #688]	; (800e1ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>)
 800defa:	4293      	cmp	r3, r2
 800defc:	da00      	bge.n	800df00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x90>
 800defe:	e3ea      	b.n	800e6d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x866>
 800df00:	49ab      	ldr	r1, [pc, #684]	; (800e1b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x340>)
 800df02:	6962      	ldr	r2, [r4, #20]
 800df04:	428b      	cmp	r3, r1
 800df06:	dd00      	ble.n	800df0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x9a>
 800df08:	e3e5      	b.n	800e6d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x866>
 800df0a:	4eaa      	ldr	r6, [pc, #680]	; (800e1b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x344>)
 800df0c:	4baa      	ldr	r3, [pc, #680]	; (800e1b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x348>)
 800df0e:	1992      	adds	r2, r2, r6
 800df10:	429a      	cmp	r2, r3
 800df12:	d900      	bls.n	800df16 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xa6>
 800df14:	e3df      	b.n	800e6d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x866>
 800df16:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800df18:	48a8      	ldr	r0, [pc, #672]	; (800e1bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34c>)
 800df1a:	1992      	adds	r2, r2, r6
 800df1c:	4282      	cmp	r2, r0
 800df1e:	d900      	bls.n	800df22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xb2>
 800df20:	e3d9      	b.n	800e6d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x866>
 800df22:	6862      	ldr	r2, [r4, #4]
 800df24:	1991      	adds	r1, r2, r6
 800df26:	4299      	cmp	r1, r3
 800df28:	d900      	bls.n	800df2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xbc>
 800df2a:	e3d4      	b.n	800e6d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x866>
 800df2c:	69a1      	ldr	r1, [r4, #24]
 800df2e:	198d      	adds	r5, r1, r6
 800df30:	429d      	cmp	r5, r3
 800df32:	d900      	bls.n	800df36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xc6>
 800df34:	e3cf      	b.n	800e6d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x866>
 800df36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800df38:	199d      	adds	r5, r3, r6
 800df3a:	4285      	cmp	r5, r0
 800df3c:	d900      	bls.n	800df40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd0>
 800df3e:	e3ca      	b.n	800e6d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x866>
 800df40:	428a      	cmp	r2, r1
 800df42:	db00      	blt.n	800df46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd6>
 800df44:	e108      	b.n	800e158 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2e8>
 800df46:	429a      	cmp	r2, r3
 800df48:	dd00      	ble.n	800df4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xdc>
 800df4a:	e110      	b.n	800e16e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2fe>
 800df4c:	4299      	cmp	r1, r3
 800df4e:	db00      	blt.n	800df52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xe2>
 800df50:	e113      	b.n	800e17a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30a>
 800df52:	2502      	movs	r5, #2
 800df54:	2601      	movs	r6, #1
 800df56:	2700      	movs	r7, #0
 800df58:	950a      	str	r5, [sp, #40]	; 0x28
 800df5a:	9609      	str	r6, [sp, #36]	; 0x24
 800df5c:	0021      	movs	r1, r4
 800df5e:	a859      	add	r0, sp, #356	; 0x164
 800df60:	f003 f976 	bl	8011250 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800df64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df66:	0022      	movs	r2, r4
 800df68:	9300      	str	r3, [sp, #0]
 800df6a:	a959      	add	r1, sp, #356	; 0x164
 800df6c:	003b      	movs	r3, r7
 800df6e:	a829      	add	r0, sp, #164	; 0xa4
 800df70:	f003 fb16 	bl	80115a0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800df74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df76:	0022      	movs	r2, r4
 800df78:	9300      	str	r3, [sp, #0]
 800df7a:	a959      	add	r1, sp, #356	; 0x164
 800df7c:	003b      	movs	r3, r7
 800df7e:	a839      	add	r0, sp, #228	; 0xe4
 800df80:	f003 fb0e 	bl	80115a0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800df84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df86:	0022      	movs	r2, r4
 800df88:	9300      	str	r3, [sp, #0]
 800df8a:	a959      	add	r1, sp, #356	; 0x164
 800df8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df8e:	a849      	add	r0, sp, #292	; 0x124
 800df90:	f003 fb06 	bl	80115a0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800df94:	42ae      	cmp	r6, r5
 800df96:	db00      	blt.n	800df9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x12a>
 800df98:	e0fb      	b.n	800e192 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800df9a:	2300      	movs	r3, #0
 800df9c:	ad39      	add	r5, sp, #228	; 0xe4
 800df9e:	9316      	str	r3, [sp, #88]	; 0x58
 800dfa0:	ac29      	add	r4, sp, #164	; 0xa4
 800dfa2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800dfa4:	ab22      	add	r3, sp, #136	; 0x88
 800dfa6:	ca03      	ldmia	r2!, {r0, r1}
 800dfa8:	c303      	stmia	r3!, {r0, r1}
 800dfaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	9309      	str	r3, [sp, #36]	; 0x24
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d105      	bne.n	800dfc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x150>
 800dfb4:	4b82      	ldr	r3, [pc, #520]	; (800e1c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x350>)
 800dfb6:	6818      	ldr	r0, [r3, #0]
 800dfb8:	6803      	ldr	r3, [r0, #0]
 800dfba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfbc:	4798      	blx	r3
 800dfbe:	9022      	str	r0, [sp, #136]	; 0x88
 800dfc0:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 800dfc2:	930a      	str	r3, [sp, #40]	; 0x28
 800dfc4:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 800dfc6:	2202      	movs	r2, #2
 800dfc8:	5e9b      	ldrsh	r3, [r3, r2]
 800dfca:	6962      	ldr	r2, [r4, #20]
 800dfcc:	9314      	str	r3, [sp, #80]	; 0x50
 800dfce:	189b      	adds	r3, r3, r2
 800dfd0:	9a71      	ldr	r2, [sp, #452]	; 0x1c4
 800dfd2:	2102      	movs	r1, #2
 800dfd4:	5e52      	ldrsh	r2, [r2, r1]
 800dfd6:	9971      	ldr	r1, [sp, #452]	; 0x1c4
 800dfd8:	88c9      	ldrh	r1, [r1, #6]
 800dfda:	1889      	adds	r1, r1, r2
 800dfdc:	b209      	sxth	r1, r1
 800dfde:	9115      	str	r1, [sp, #84]	; 0x54
 800dfe0:	428b      	cmp	r3, r1
 800dfe2:	db00      	blt.n	800dfe6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x176>
 800dfe4:	e0da      	b.n	800e19c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800dfe6:	4293      	cmp	r3, r2
 800dfe8:	da0c      	bge.n	800e004 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x194>
 800dfea:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dfec:	2900      	cmp	r1, #0
 800dfee:	dd09      	ble.n	800e004 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x194>
 800dff0:	1ad3      	subs	r3, r2, r3
 800dff2:	9309      	str	r3, [sp, #36]	; 0x24
 800dff4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dff6:	4291      	cmp	r1, r2
 800dff8:	da00      	bge.n	800dffc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x18c>
 800dffa:	e0e3      	b.n	800e1c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>
 800dffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dffe:	2b00      	cmp	r3, #0
 800e000:	dd00      	ble.n	800e004 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x194>
 800e002:	e0e1      	b.n	800e1c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>
 800e004:	6962      	ldr	r2, [r4, #20]
 800e006:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e008:	4694      	mov	ip, r2
 800e00a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e00c:	4463      	add	r3, ip
 800e00e:	1ad3      	subs	r3, r2, r3
 800e010:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e012:	9309      	str	r3, [sp, #36]	; 0x24
 800e014:	4293      	cmp	r3, r2
 800e016:	dd01      	ble.n	800e01c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1ac>
 800e018:	0013      	movs	r3, r2
 800e01a:	9309      	str	r3, [sp, #36]	; 0x24
 800e01c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e01e:	2b00      	cmp	r3, #0
 800e020:	dc00      	bgt.n	800e024 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1b4>
 800e022:	e1a3      	b.n	800e36c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4fc>
 800e024:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 800e026:	6829      	ldr	r1, [r5, #0]
 800e028:	2200      	movs	r2, #0
 800e02a:	5e9a      	ldrsh	r2, [r3, r2]
 800e02c:	9b71      	ldr	r3, [sp, #452]	; 0x1c4
 800e02e:	1851      	adds	r1, r2, r1
 800e030:	2000      	movs	r0, #0
 800e032:	5e18      	ldrsh	r0, [r3, r0]
 800e034:	6823      	ldr	r3, [r4, #0]
 800e036:	4281      	cmp	r1, r0
 800e038:	dd1b      	ble.n	800e072 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x202>
 800e03a:	18d2      	adds	r2, r2, r3
 800e03c:	9b71      	ldr	r3, [sp, #452]	; 0x1c4
 800e03e:	889b      	ldrh	r3, [r3, #4]
 800e040:	181b      	adds	r3, r3, r0
 800e042:	b21b      	sxth	r3, r3
 800e044:	429a      	cmp	r2, r3
 800e046:	dc14      	bgt.n	800e072 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x202>
 800e048:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e04a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e04c:	a922      	add	r1, sp, #136	; 0x88
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	9206      	str	r2, [sp, #24]
 800e052:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e054:	9500      	str	r5, [sp, #0]
 800e056:	9205      	str	r2, [sp, #20]
 800e058:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e05a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e05c:	9204      	str	r2, [sp, #16]
 800e05e:	9a71      	ldr	r2, [sp, #452]	; 0x1c4
 800e060:	9203      	str	r2, [sp, #12]
 800e062:	9a70      	ldr	r2, [sp, #448]	; 0x1c0
 800e064:	9202      	str	r2, [sp, #8]
 800e066:	aa24      	add	r2, sp, #144	; 0x90
 800e068:	9201      	str	r2, [sp, #4]
 800e06a:	6c9e      	ldr	r6, [r3, #72]	; 0x48
 800e06c:	aa59      	add	r2, sp, #356	; 0x164
 800e06e:	0023      	movs	r3, r4
 800e070:	47b0      	blx	r6
 800e072:	6862      	ldr	r2, [r4, #4]
 800e074:	6823      	ldr	r3, [r4, #0]
 800e076:	4694      	mov	ip, r2
 800e078:	4463      	add	r3, ip
 800e07a:	930a      	str	r3, [sp, #40]	; 0x28
 800e07c:	6023      	str	r3, [r4, #0]
 800e07e:	6963      	ldr	r3, [r4, #20]
 800e080:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e082:	3301      	adds	r3, #1
 800e084:	6163      	str	r3, [r4, #20]
 800e086:	69a3      	ldr	r3, [r4, #24]
 800e088:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e08a:	3b01      	subs	r3, #1
 800e08c:	61a3      	str	r3, [r4, #24]
 800e08e:	f7f2 faf3 	bl	8000678 <__aeabi_fadd>
 800e092:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e094:	62a0      	str	r0, [r4, #40]	; 0x28
 800e096:	1c07      	adds	r7, r0, #0
 800e098:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800e09a:	f7f2 faed 	bl	8000678 <__aeabi_fadd>
 800e09e:	6a21      	ldr	r1, [r4, #32]
 800e0a0:	6360      	str	r0, [r4, #52]	; 0x34
 800e0a2:	1c06      	adds	r6, r0, #0
 800e0a4:	69e0      	ldr	r0, [r4, #28]
 800e0a6:	f7f2 fae7 	bl	8000678 <__aeabi_fadd>
 800e0aa:	6923      	ldr	r3, [r4, #16]
 800e0ac:	68a2      	ldr	r2, [r4, #8]
 800e0ae:	1c01      	adds	r1, r0, #0
 800e0b0:	61e0      	str	r0, [r4, #28]
 800e0b2:	68e0      	ldr	r0, [r4, #12]
 800e0b4:	189b      	adds	r3, r3, r2
 800e0b6:	6123      	str	r3, [r4, #16]
 800e0b8:	4283      	cmp	r3, r0
 800e0ba:	db12      	blt.n	800e0e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x272>
 800e0bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e0be:	1a1b      	subs	r3, r3, r0
 800e0c0:	3201      	adds	r2, #1
 800e0c2:	6022      	str	r2, [r4, #0]
 800e0c4:	6123      	str	r3, [r4, #16]
 800e0c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e0c8:	f7f2 fad6 	bl	8000678 <__aeabi_fadd>
 800e0cc:	1c39      	adds	r1, r7, #0
 800e0ce:	61e0      	str	r0, [r4, #28]
 800e0d0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e0d2:	f7f2 fad1 	bl	8000678 <__aeabi_fadd>
 800e0d6:	1c31      	adds	r1, r6, #0
 800e0d8:	62a0      	str	r0, [r4, #40]	; 0x28
 800e0da:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800e0dc:	f7f2 facc 	bl	8000678 <__aeabi_fadd>
 800e0e0:	6360      	str	r0, [r4, #52]	; 0x34
 800e0e2:	686a      	ldr	r2, [r5, #4]
 800e0e4:	682b      	ldr	r3, [r5, #0]
 800e0e6:	4694      	mov	ip, r2
 800e0e8:	4463      	add	r3, ip
 800e0ea:	930a      	str	r3, [sp, #40]	; 0x28
 800e0ec:	602b      	str	r3, [r5, #0]
 800e0ee:	696b      	ldr	r3, [r5, #20]
 800e0f0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800e0f2:	3301      	adds	r3, #1
 800e0f4:	616b      	str	r3, [r5, #20]
 800e0f6:	69ab      	ldr	r3, [r5, #24]
 800e0f8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800e0fa:	3b01      	subs	r3, #1
 800e0fc:	61ab      	str	r3, [r5, #24]
 800e0fe:	f7f2 fabb 	bl	8000678 <__aeabi_fadd>
 800e102:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800e104:	62a8      	str	r0, [r5, #40]	; 0x28
 800e106:	1c07      	adds	r7, r0, #0
 800e108:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800e10a:	f7f2 fab5 	bl	8000678 <__aeabi_fadd>
 800e10e:	6a29      	ldr	r1, [r5, #32]
 800e110:	6368      	str	r0, [r5, #52]	; 0x34
 800e112:	1c06      	adds	r6, r0, #0
 800e114:	69e8      	ldr	r0, [r5, #28]
 800e116:	f7f2 faaf 	bl	8000678 <__aeabi_fadd>
 800e11a:	692b      	ldr	r3, [r5, #16]
 800e11c:	68aa      	ldr	r2, [r5, #8]
 800e11e:	1c01      	adds	r1, r0, #0
 800e120:	61e8      	str	r0, [r5, #28]
 800e122:	68e8      	ldr	r0, [r5, #12]
 800e124:	189b      	adds	r3, r3, r2
 800e126:	612b      	str	r3, [r5, #16]
 800e128:	4283      	cmp	r3, r0
 800e12a:	db12      	blt.n	800e152 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2e2>
 800e12c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e12e:	1a1b      	subs	r3, r3, r0
 800e130:	3201      	adds	r2, #1
 800e132:	602a      	str	r2, [r5, #0]
 800e134:	612b      	str	r3, [r5, #16]
 800e136:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800e138:	f7f2 fa9e 	bl	8000678 <__aeabi_fadd>
 800e13c:	1c39      	adds	r1, r7, #0
 800e13e:	61e8      	str	r0, [r5, #28]
 800e140:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800e142:	f7f2 fa99 	bl	8000678 <__aeabi_fadd>
 800e146:	1c31      	adds	r1, r6, #0
 800e148:	62a8      	str	r0, [r5, #40]	; 0x28
 800e14a:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800e14c:	f7f2 fa94 	bl	8000678 <__aeabi_fadd>
 800e150:	6368      	str	r0, [r5, #52]	; 0x34
 800e152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e154:	3b01      	subs	r3, #1
 800e156:	e760      	b.n	800e01a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800e158:	4299      	cmp	r1, r3
 800e15a:	dc11      	bgt.n	800e180 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800e15c:	429a      	cmp	r2, r3
 800e15e:	da12      	bge.n	800e186 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x316>
 800e160:	2502      	movs	r5, #2
 800e162:	2300      	movs	r3, #0
 800e164:	2603      	movs	r6, #3
 800e166:	950a      	str	r5, [sp, #40]	; 0x28
 800e168:	9309      	str	r3, [sp, #36]	; 0x24
 800e16a:	2701      	movs	r7, #1
 800e16c:	e6f6      	b.n	800df5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xec>
 800e16e:	2501      	movs	r5, #1
 800e170:	2600      	movs	r6, #0
 800e172:	950a      	str	r5, [sp, #40]	; 0x28
 800e174:	9609      	str	r6, [sp, #36]	; 0x24
 800e176:	2702      	movs	r7, #2
 800e178:	e6f0      	b.n	800df5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xec>
 800e17a:	2501      	movs	r5, #1
 800e17c:	2602      	movs	r6, #2
 800e17e:	e6ea      	b.n	800df56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xe6>
 800e180:	2500      	movs	r5, #0
 800e182:	2601      	movs	r6, #1
 800e184:	e7f5      	b.n	800e172 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x302>
 800e186:	2602      	movs	r6, #2
 800e188:	2300      	movs	r3, #0
 800e18a:	2503      	movs	r5, #3
 800e18c:	930a      	str	r3, [sp, #40]	; 0x28
 800e18e:	9609      	str	r6, [sp, #36]	; 0x24
 800e190:	e7eb      	b.n	800e16a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2fa>
 800e192:	2301      	movs	r3, #1
 800e194:	ad29      	add	r5, sp, #164	; 0xa4
 800e196:	9316      	str	r3, [sp, #88]	; 0x58
 800e198:	ac39      	add	r4, sp, #228	; 0xe4
 800e19a:	e702      	b.n	800dfa2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x132>
 800e19c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e19e:	9309      	str	r3, [sp, #36]	; 0x24
 800e1a0:	e72c      	b.n	800dffc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x18c>
 800e1a2:	46c0      	nop			; (mov r8, r8)
 800e1a4:	200026c0 	.word	0x200026c0
 800e1a8:	41200000 	.word	0x41200000
 800e1ac:	fffd8f01 	.word	0xfffd8f01
 800e1b0:	00027100 	.word	0x00027100
 800e1b4:	000270ff 	.word	0x000270ff
 800e1b8:	0004e1ff 	.word	0x0004e1ff
 800e1bc:	0004e1fe 	.word	0x0004e1fe
 800e1c0:	200026c8 	.word	0x200026c8
 800e1c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1c6:	9309      	str	r3, [sp, #36]	; 0x24
 800e1c8:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800e1ca:	9f40      	ldr	r7, [sp, #256]	; 0x100
 800e1cc:	9319      	str	r3, [sp, #100]	; 0x64
 800e1ce:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800e1d0:	9e3d      	ldr	r6, [sp, #244]	; 0xf4
 800e1d2:	930c      	str	r3, [sp, #48]	; 0x30
 800e1d4:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800e1d6:	9321      	str	r3, [sp, #132]	; 0x84
 800e1d8:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800e1da:	931a      	str	r3, [sp, #104]	; 0x68
 800e1dc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e1de:	930d      	str	r3, [sp, #52]	; 0x34
 800e1e0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e1e2:	931b      	str	r3, [sp, #108]	; 0x6c
 800e1e4:	9b46      	ldr	r3, [sp, #280]	; 0x118
 800e1e6:	930e      	str	r3, [sp, #56]	; 0x38
 800e1e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e1ea:	931c      	str	r3, [sp, #112]	; 0x70
 800e1ec:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800e1ee:	931d      	str	r3, [sp, #116]	; 0x74
 800e1f0:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800e1f2:	9317      	str	r3, [sp, #92]	; 0x5c
 800e1f4:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800e1f6:	931e      	str	r3, [sp, #120]	; 0x78
 800e1f8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e1fa:	931f      	str	r3, [sp, #124]	; 0x7c
 800e1fc:	9b48      	ldr	r3, [sp, #288]	; 0x120
 800e1fe:	9320      	str	r3, [sp, #128]	; 0x80
 800e200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e202:	930f      	str	r3, [sp, #60]	; 0x3c
 800e204:	9310      	str	r3, [sp, #64]	; 0x40
 800e206:	2300      	movs	r3, #0
 800e208:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e20a:	2a00      	cmp	r2, #0
 800e20c:	d165      	bne.n	800e2da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x46a>
 800e20e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e210:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e212:	4684      	mov	ip, r0
 800e214:	4462      	add	r2, ip
 800e216:	0011      	movs	r1, r2
 800e218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e21a:	1a12      	subs	r2, r2, r0
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d009      	beq.n	800e234 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3c4>
 800e220:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e222:	913e      	str	r1, [sp, #248]	; 0xf8
 800e224:	9339      	str	r3, [sp, #228]	; 0xe4
 800e226:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e228:	923f      	str	r2, [sp, #252]	; 0xfc
 800e22a:	9343      	str	r3, [sp, #268]	; 0x10c
 800e22c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e22e:	9740      	str	r7, [sp, #256]	; 0x100
 800e230:	9346      	str	r3, [sp, #280]	; 0x118
 800e232:	963d      	str	r6, [sp, #244]	; 0xf4
 800e234:	2100      	movs	r1, #0
 800e236:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800e238:	9f36      	ldr	r7, [sp, #216]	; 0xd8
 800e23a:	9317      	str	r3, [sp, #92]	; 0x5c
 800e23c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800e23e:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
 800e240:	930c      	str	r3, [sp, #48]	; 0x30
 800e242:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e244:	9320      	str	r3, [sp, #128]	; 0x80
 800e246:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800e248:	9321      	str	r3, [sp, #132]	; 0x84
 800e24a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800e24c:	9319      	str	r3, [sp, #100]	; 0x64
 800e24e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800e250:	930d      	str	r3, [sp, #52]	; 0x34
 800e252:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800e254:	931a      	str	r3, [sp, #104]	; 0x68
 800e256:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800e258:	931b      	str	r3, [sp, #108]	; 0x6c
 800e25a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800e25c:	930e      	str	r3, [sp, #56]	; 0x38
 800e25e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800e260:	931c      	str	r3, [sp, #112]	; 0x70
 800e262:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800e264:	9310      	str	r3, [sp, #64]	; 0x40
 800e266:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800e268:	931d      	str	r3, [sp, #116]	; 0x74
 800e26a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800e26c:	931e      	str	r3, [sp, #120]	; 0x78
 800e26e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800e270:	931f      	str	r3, [sp, #124]	; 0x7c
 800e272:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e274:	2b00      	cmp	r3, #0
 800e276:	d061      	beq.n	800e33c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4cc>
 800e278:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e27a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e27c:	4694      	mov	ip, r2
 800e27e:	9919      	ldr	r1, [sp, #100]	; 0x64
 800e280:	4463      	add	r3, ip
 800e282:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e284:	930c      	str	r3, [sp, #48]	; 0x30
 800e286:	f7f2 f9f7 	bl	8000678 <__aeabi_fadd>
 800e28a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e28c:	900d      	str	r0, [sp, #52]	; 0x34
 800e28e:	1c38      	adds	r0, r7, #0
 800e290:	f7f2 f9f2 	bl	8000678 <__aeabi_fadd>
 800e294:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e296:	1c07      	adds	r7, r0, #0
 800e298:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e29a:	f7f2 f9ed 	bl	8000678 <__aeabi_fadd>
 800e29e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e2a0:	900e      	str	r0, [sp, #56]	; 0x38
 800e2a2:	18f6      	adds	r6, r6, r3
 800e2a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e2a6:	429e      	cmp	r6, r3
 800e2a8:	db12      	blt.n	800e2d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x460>
 800e2aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e2ac:	991d      	ldr	r1, [sp, #116]	; 0x74
 800e2ae:	3301      	adds	r3, #1
 800e2b0:	930c      	str	r3, [sp, #48]	; 0x30
 800e2b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e2b4:	1af6      	subs	r6, r6, r3
 800e2b6:	f7f2 f9df 	bl	8000678 <__aeabi_fadd>
 800e2ba:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e2bc:	900e      	str	r0, [sp, #56]	; 0x38
 800e2be:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e2c0:	f7f2 f9da 	bl	8000678 <__aeabi_fadd>
 800e2c4:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800e2c6:	900d      	str	r0, [sp, #52]	; 0x34
 800e2c8:	1c38      	adds	r0, r7, #0
 800e2ca:	f7f2 f9d5 	bl	8000678 <__aeabi_fadd>
 800e2ce:	1c07      	adds	r7, r0, #0
 800e2d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e2d2:	2101      	movs	r1, #1
 800e2d4:	3b01      	subs	r3, #1
 800e2d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e2d8:	e7cb      	b.n	800e272 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x402>
 800e2da:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e2dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e2de:	4694      	mov	ip, r2
 800e2e0:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e2e2:	4463      	add	r3, ip
 800e2e4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e2e6:	930c      	str	r3, [sp, #48]	; 0x30
 800e2e8:	f7f2 f9c6 	bl	8000678 <__aeabi_fadd>
 800e2ec:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e2ee:	900d      	str	r0, [sp, #52]	; 0x34
 800e2f0:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e2f2:	f7f2 f9c1 	bl	8000678 <__aeabi_fadd>
 800e2f6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e2f8:	900e      	str	r0, [sp, #56]	; 0x38
 800e2fa:	1c38      	adds	r0, r7, #0
 800e2fc:	f7f2 f9bc 	bl	8000678 <__aeabi_fadd>
 800e300:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e302:	1c07      	adds	r7, r0, #0
 800e304:	18f6      	adds	r6, r6, r3
 800e306:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e308:	429e      	cmp	r6, r3
 800e30a:	db12      	blt.n	800e332 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4c2>
 800e30c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e30e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e310:	3301      	adds	r3, #1
 800e312:	930c      	str	r3, [sp, #48]	; 0x30
 800e314:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e316:	1af6      	subs	r6, r6, r3
 800e318:	f7f2 f9ae 	bl	8000678 <__aeabi_fadd>
 800e31c:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800e31e:	1c07      	adds	r7, r0, #0
 800e320:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e322:	f7f2 f9a9 	bl	8000678 <__aeabi_fadd>
 800e326:	9920      	ldr	r1, [sp, #128]	; 0x80
 800e328:	900d      	str	r0, [sp, #52]	; 0x34
 800e32a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e32c:	f7f2 f9a4 	bl	8000678 <__aeabi_fadd>
 800e330:	900e      	str	r0, [sp, #56]	; 0x38
 800e332:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e334:	3b01      	subs	r3, #1
 800e336:	9310      	str	r3, [sp, #64]	; 0x40
 800e338:	2301      	movs	r3, #1
 800e33a:	e765      	b.n	800e208 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x398>
 800e33c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e33e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e340:	4684      	mov	ip, r0
 800e342:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e344:	1a9b      	subs	r3, r3, r2
 800e346:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e348:	4462      	add	r2, ip
 800e34a:	2900      	cmp	r1, #0
 800e34c:	d009      	beq.n	800e362 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4f2>
 800e34e:	932f      	str	r3, [sp, #188]	; 0xbc
 800e350:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e352:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e354:	9333      	str	r3, [sp, #204]	; 0xcc
 800e356:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e358:	9129      	str	r1, [sp, #164]	; 0xa4
 800e35a:	922e      	str	r2, [sp, #184]	; 0xb8
 800e35c:	9736      	str	r7, [sp, #216]	; 0xd8
 800e35e:	9330      	str	r3, [sp, #192]	; 0xc0
 800e360:	962d      	str	r6, [sp, #180]	; 0xb4
 800e362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e364:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e366:	1a9b      	subs	r3, r3, r2
 800e368:	930a      	str	r3, [sp, #40]	; 0x28
 800e36a:	e64b      	b.n	800e004 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x194>
 800e36c:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800e36e:	930a      	str	r3, [sp, #40]	; 0x28
 800e370:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e372:	2b00      	cmp	r3, #0
 800e374:	d100      	bne.n	800e378 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x508>
 800e376:	e0cb      	b.n	800e510 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6a0>
 800e378:	ad29      	add	r5, sp, #164	; 0xa4
 800e37a:	ac49      	add	r4, sp, #292	; 0x124
 800e37c:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 800e37e:	2202      	movs	r2, #2
 800e380:	5e9b      	ldrsh	r3, [r3, r2]
 800e382:	6962      	ldr	r2, [r4, #20]
 800e384:	9314      	str	r3, [sp, #80]	; 0x50
 800e386:	189b      	adds	r3, r3, r2
 800e388:	9a71      	ldr	r2, [sp, #452]	; 0x1c4
 800e38a:	2102      	movs	r1, #2
 800e38c:	5e52      	ldrsh	r2, [r2, r1]
 800e38e:	9971      	ldr	r1, [sp, #452]	; 0x1c4
 800e390:	88c9      	ldrh	r1, [r1, #6]
 800e392:	1889      	adds	r1, r1, r2
 800e394:	b209      	sxth	r1, r1
 800e396:	9115      	str	r1, [sp, #84]	; 0x54
 800e398:	428b      	cmp	r3, r1
 800e39a:	db00      	blt.n	800e39e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x52e>
 800e39c:	e0bb      	b.n	800e516 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6a6>
 800e39e:	4293      	cmp	r3, r2
 800e3a0:	da0c      	bge.n	800e3bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x54c>
 800e3a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e3a4:	2900      	cmp	r1, #0
 800e3a6:	dd09      	ble.n	800e3bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x54c>
 800e3a8:	1ad3      	subs	r3, r2, r3
 800e3aa:	9309      	str	r3, [sp, #36]	; 0x24
 800e3ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3ae:	4291      	cmp	r1, r2
 800e3b0:	da00      	bge.n	800e3b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x544>
 800e3b2:	e0b3      	b.n	800e51c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6ac>
 800e3b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	dd00      	ble.n	800e3bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x54c>
 800e3ba:	e0b1      	b.n	800e520 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6b0>
 800e3bc:	6962      	ldr	r2, [r4, #20]
 800e3be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e3c0:	4694      	mov	ip, r2
 800e3c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e3c4:	4463      	add	r3, ip
 800e3c6:	1ad3      	subs	r3, r2, r3
 800e3c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e3ca:	9309      	str	r3, [sp, #36]	; 0x24
 800e3cc:	4293      	cmp	r3, r2
 800e3ce:	dd01      	ble.n	800e3d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x564>
 800e3d0:	0013      	movs	r3, r2
 800e3d2:	9309      	str	r3, [sp, #36]	; 0x24
 800e3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	dc00      	bgt.n	800e3dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x56c>
 800e3da:	e173      	b.n	800e6c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x854>
 800e3dc:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 800e3de:	6829      	ldr	r1, [r5, #0]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	5e9a      	ldrsh	r2, [r3, r2]
 800e3e4:	9b71      	ldr	r3, [sp, #452]	; 0x1c4
 800e3e6:	1851      	adds	r1, r2, r1
 800e3e8:	2000      	movs	r0, #0
 800e3ea:	5e18      	ldrsh	r0, [r3, r0]
 800e3ec:	6823      	ldr	r3, [r4, #0]
 800e3ee:	4281      	cmp	r1, r0
 800e3f0:	dd1b      	ble.n	800e42a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5ba>
 800e3f2:	18d2      	adds	r2, r2, r3
 800e3f4:	9b71      	ldr	r3, [sp, #452]	; 0x1c4
 800e3f6:	889b      	ldrh	r3, [r3, #4]
 800e3f8:	181b      	adds	r3, r3, r0
 800e3fa:	b21b      	sxth	r3, r3
 800e3fc:	429a      	cmp	r2, r3
 800e3fe:	dc14      	bgt.n	800e42a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5ba>
 800e400:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e404:	a922      	add	r1, sp, #136	; 0x88
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	9206      	str	r2, [sp, #24]
 800e40a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e40c:	9500      	str	r5, [sp, #0]
 800e40e:	9205      	str	r2, [sp, #20]
 800e410:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e412:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e414:	9204      	str	r2, [sp, #16]
 800e416:	9a71      	ldr	r2, [sp, #452]	; 0x1c4
 800e418:	9203      	str	r2, [sp, #12]
 800e41a:	9a70      	ldr	r2, [sp, #448]	; 0x1c0
 800e41c:	9202      	str	r2, [sp, #8]
 800e41e:	aa24      	add	r2, sp, #144	; 0x90
 800e420:	9201      	str	r2, [sp, #4]
 800e422:	6c9e      	ldr	r6, [r3, #72]	; 0x48
 800e424:	aa59      	add	r2, sp, #356	; 0x164
 800e426:	0023      	movs	r3, r4
 800e428:	47b0      	blx	r6
 800e42a:	6862      	ldr	r2, [r4, #4]
 800e42c:	6823      	ldr	r3, [r4, #0]
 800e42e:	4694      	mov	ip, r2
 800e430:	4463      	add	r3, ip
 800e432:	930a      	str	r3, [sp, #40]	; 0x28
 800e434:	6023      	str	r3, [r4, #0]
 800e436:	6963      	ldr	r3, [r4, #20]
 800e438:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e43a:	3301      	adds	r3, #1
 800e43c:	6163      	str	r3, [r4, #20]
 800e43e:	69a3      	ldr	r3, [r4, #24]
 800e440:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e442:	3b01      	subs	r3, #1
 800e444:	61a3      	str	r3, [r4, #24]
 800e446:	f7f2 f917 	bl	8000678 <__aeabi_fadd>
 800e44a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e44c:	62a0      	str	r0, [r4, #40]	; 0x28
 800e44e:	1c07      	adds	r7, r0, #0
 800e450:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800e452:	f7f2 f911 	bl	8000678 <__aeabi_fadd>
 800e456:	6a21      	ldr	r1, [r4, #32]
 800e458:	6360      	str	r0, [r4, #52]	; 0x34
 800e45a:	1c06      	adds	r6, r0, #0
 800e45c:	69e0      	ldr	r0, [r4, #28]
 800e45e:	f7f2 f90b 	bl	8000678 <__aeabi_fadd>
 800e462:	6923      	ldr	r3, [r4, #16]
 800e464:	68a2      	ldr	r2, [r4, #8]
 800e466:	1c01      	adds	r1, r0, #0
 800e468:	61e0      	str	r0, [r4, #28]
 800e46a:	68e0      	ldr	r0, [r4, #12]
 800e46c:	189b      	adds	r3, r3, r2
 800e46e:	6123      	str	r3, [r4, #16]
 800e470:	4283      	cmp	r3, r0
 800e472:	db12      	blt.n	800e49a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x62a>
 800e474:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e476:	1a1b      	subs	r3, r3, r0
 800e478:	3201      	adds	r2, #1
 800e47a:	6022      	str	r2, [r4, #0]
 800e47c:	6123      	str	r3, [r4, #16]
 800e47e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e480:	f7f2 f8fa 	bl	8000678 <__aeabi_fadd>
 800e484:	1c39      	adds	r1, r7, #0
 800e486:	61e0      	str	r0, [r4, #28]
 800e488:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e48a:	f7f2 f8f5 	bl	8000678 <__aeabi_fadd>
 800e48e:	1c31      	adds	r1, r6, #0
 800e490:	62a0      	str	r0, [r4, #40]	; 0x28
 800e492:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800e494:	f7f2 f8f0 	bl	8000678 <__aeabi_fadd>
 800e498:	6360      	str	r0, [r4, #52]	; 0x34
 800e49a:	686a      	ldr	r2, [r5, #4]
 800e49c:	682b      	ldr	r3, [r5, #0]
 800e49e:	4694      	mov	ip, r2
 800e4a0:	4463      	add	r3, ip
 800e4a2:	930a      	str	r3, [sp, #40]	; 0x28
 800e4a4:	602b      	str	r3, [r5, #0]
 800e4a6:	696b      	ldr	r3, [r5, #20]
 800e4a8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	616b      	str	r3, [r5, #20]
 800e4ae:	69ab      	ldr	r3, [r5, #24]
 800e4b0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800e4b2:	3b01      	subs	r3, #1
 800e4b4:	61ab      	str	r3, [r5, #24]
 800e4b6:	f7f2 f8df 	bl	8000678 <__aeabi_fadd>
 800e4ba:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800e4bc:	62a8      	str	r0, [r5, #40]	; 0x28
 800e4be:	1c07      	adds	r7, r0, #0
 800e4c0:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800e4c2:	f7f2 f8d9 	bl	8000678 <__aeabi_fadd>
 800e4c6:	6a29      	ldr	r1, [r5, #32]
 800e4c8:	6368      	str	r0, [r5, #52]	; 0x34
 800e4ca:	1c06      	adds	r6, r0, #0
 800e4cc:	69e8      	ldr	r0, [r5, #28]
 800e4ce:	f7f2 f8d3 	bl	8000678 <__aeabi_fadd>
 800e4d2:	692b      	ldr	r3, [r5, #16]
 800e4d4:	68aa      	ldr	r2, [r5, #8]
 800e4d6:	1c01      	adds	r1, r0, #0
 800e4d8:	61e8      	str	r0, [r5, #28]
 800e4da:	68e8      	ldr	r0, [r5, #12]
 800e4dc:	189b      	adds	r3, r3, r2
 800e4de:	612b      	str	r3, [r5, #16]
 800e4e0:	4283      	cmp	r3, r0
 800e4e2:	db12      	blt.n	800e50a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x69a>
 800e4e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e4e6:	1a1b      	subs	r3, r3, r0
 800e4e8:	3201      	adds	r2, #1
 800e4ea:	602a      	str	r2, [r5, #0]
 800e4ec:	612b      	str	r3, [r5, #16]
 800e4ee:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800e4f0:	f7f2 f8c2 	bl	8000678 <__aeabi_fadd>
 800e4f4:	1c39      	adds	r1, r7, #0
 800e4f6:	61e8      	str	r0, [r5, #28]
 800e4f8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800e4fa:	f7f2 f8bd 	bl	8000678 <__aeabi_fadd>
 800e4fe:	1c31      	adds	r1, r6, #0
 800e500:	62a8      	str	r0, [r5, #40]	; 0x28
 800e502:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800e504:	f7f2 f8b8 	bl	8000678 <__aeabi_fadd>
 800e508:	6368      	str	r0, [r5, #52]	; 0x34
 800e50a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e50c:	3b01      	subs	r3, #1
 800e50e:	e760      	b.n	800e3d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x562>
 800e510:	ad49      	add	r5, sp, #292	; 0x124
 800e512:	ac29      	add	r4, sp, #164	; 0xa4
 800e514:	e732      	b.n	800e37c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x50c>
 800e516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e518:	9309      	str	r3, [sp, #36]	; 0x24
 800e51a:	e74b      	b.n	800e3b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x544>
 800e51c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e51e:	9309      	str	r3, [sp, #36]	; 0x24
 800e520:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800e522:	9f50      	ldr	r7, [sp, #320]	; 0x140
 800e524:	930c      	str	r3, [sp, #48]	; 0x30
 800e526:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 800e528:	9e4d      	ldr	r6, [sp, #308]	; 0x134
 800e52a:	9317      	str	r3, [sp, #92]	; 0x5c
 800e52c:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 800e52e:	9320      	str	r3, [sp, #128]	; 0x80
 800e530:	9b53      	ldr	r3, [sp, #332]	; 0x14c
 800e532:	930e      	str	r3, [sp, #56]	; 0x38
 800e534:	9b54      	ldr	r3, [sp, #336]	; 0x150
 800e536:	9319      	str	r3, [sp, #100]	; 0x64
 800e538:	9b56      	ldr	r3, [sp, #344]	; 0x158
 800e53a:	930d      	str	r3, [sp, #52]	; 0x34
 800e53c:	9b57      	ldr	r3, [sp, #348]	; 0x15c
 800e53e:	931a      	str	r3, [sp, #104]	; 0x68
 800e540:	9b51      	ldr	r3, [sp, #324]	; 0x144
 800e542:	931b      	str	r3, [sp, #108]	; 0x6c
 800e544:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 800e546:	931c      	str	r3, [sp, #112]	; 0x70
 800e548:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 800e54a:	9316      	str	r3, [sp, #88]	; 0x58
 800e54c:	9b52      	ldr	r3, [sp, #328]	; 0x148
 800e54e:	931d      	str	r3, [sp, #116]	; 0x74
 800e550:	9b55      	ldr	r3, [sp, #340]	; 0x154
 800e552:	931e      	str	r3, [sp, #120]	; 0x78
 800e554:	9b58      	ldr	r3, [sp, #352]	; 0x160
 800e556:	931f      	str	r3, [sp, #124]	; 0x7c
 800e558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e55a:	9310      	str	r3, [sp, #64]	; 0x40
 800e55c:	930f      	str	r3, [sp, #60]	; 0x3c
 800e55e:	2300      	movs	r3, #0
 800e560:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e562:	2a00      	cmp	r2, #0
 800e564:	d165      	bne.n	800e632 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x7c2>
 800e566:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e568:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e56a:	4684      	mov	ip, r0
 800e56c:	4462      	add	r2, ip
 800e56e:	0011      	movs	r1, r2
 800e570:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e572:	1a12      	subs	r2, r2, r0
 800e574:	2b00      	cmp	r3, #0
 800e576:	d009      	beq.n	800e58c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71c>
 800e578:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e57a:	964d      	str	r6, [sp, #308]	; 0x134
 800e57c:	9349      	str	r3, [sp, #292]	; 0x124
 800e57e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e580:	9750      	str	r7, [sp, #320]	; 0x140
 800e582:	9353      	str	r3, [sp, #332]	; 0x14c
 800e584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e586:	914e      	str	r1, [sp, #312]	; 0x138
 800e588:	9356      	str	r3, [sp, #344]	; 0x158
 800e58a:	924f      	str	r2, [sp, #316]	; 0x13c
 800e58c:	2100      	movs	r1, #0
 800e58e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800e590:	9f36      	ldr	r7, [sp, #216]	; 0xd8
 800e592:	9316      	str	r3, [sp, #88]	; 0x58
 800e594:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800e596:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
 800e598:	930c      	str	r3, [sp, #48]	; 0x30
 800e59a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e59c:	931f      	str	r3, [sp, #124]	; 0x7c
 800e59e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800e5a0:	9320      	str	r3, [sp, #128]	; 0x80
 800e5a2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800e5a4:	9317      	str	r3, [sp, #92]	; 0x5c
 800e5a6:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800e5a8:	930d      	str	r3, [sp, #52]	; 0x34
 800e5aa:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800e5ac:	9319      	str	r3, [sp, #100]	; 0x64
 800e5ae:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800e5b0:	931a      	str	r3, [sp, #104]	; 0x68
 800e5b2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800e5b4:	930e      	str	r3, [sp, #56]	; 0x38
 800e5b6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800e5b8:	931b      	str	r3, [sp, #108]	; 0x6c
 800e5ba:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800e5bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800e5be:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800e5c0:	931c      	str	r3, [sp, #112]	; 0x70
 800e5c2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800e5c4:	931d      	str	r3, [sp, #116]	; 0x74
 800e5c6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800e5c8:	931e      	str	r3, [sp, #120]	; 0x78
 800e5ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d061      	beq.n	800e694 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x824>
 800e5d0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e5d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e5d4:	4694      	mov	ip, r2
 800e5d6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800e5d8:	4463      	add	r3, ip
 800e5da:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e5dc:	930c      	str	r3, [sp, #48]	; 0x30
 800e5de:	f7f2 f84b 	bl	8000678 <__aeabi_fadd>
 800e5e2:	9919      	ldr	r1, [sp, #100]	; 0x64
 800e5e4:	900d      	str	r0, [sp, #52]	; 0x34
 800e5e6:	1c38      	adds	r0, r7, #0
 800e5e8:	f7f2 f846 	bl	8000678 <__aeabi_fadd>
 800e5ec:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e5ee:	1c07      	adds	r7, r0, #0
 800e5f0:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e5f2:	f7f2 f841 	bl	8000678 <__aeabi_fadd>
 800e5f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e5f8:	900e      	str	r0, [sp, #56]	; 0x38
 800e5fa:	18f6      	adds	r6, r6, r3
 800e5fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e5fe:	429e      	cmp	r6, r3
 800e600:	db12      	blt.n	800e628 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x7b8>
 800e602:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e604:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e606:	3301      	adds	r3, #1
 800e608:	930c      	str	r3, [sp, #48]	; 0x30
 800e60a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e60c:	1af6      	subs	r6, r6, r3
 800e60e:	f7f2 f833 	bl	8000678 <__aeabi_fadd>
 800e612:	991d      	ldr	r1, [sp, #116]	; 0x74
 800e614:	900e      	str	r0, [sp, #56]	; 0x38
 800e616:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e618:	f7f2 f82e 	bl	8000678 <__aeabi_fadd>
 800e61c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e61e:	900d      	str	r0, [sp, #52]	; 0x34
 800e620:	1c38      	adds	r0, r7, #0
 800e622:	f7f2 f829 	bl	8000678 <__aeabi_fadd>
 800e626:	1c07      	adds	r7, r0, #0
 800e628:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e62a:	2101      	movs	r1, #1
 800e62c:	3b01      	subs	r3, #1
 800e62e:	9310      	str	r3, [sp, #64]	; 0x40
 800e630:	e7cb      	b.n	800e5ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x75a>
 800e632:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e634:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e636:	4694      	mov	ip, r2
 800e638:	9919      	ldr	r1, [sp, #100]	; 0x64
 800e63a:	4463      	add	r3, ip
 800e63c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e63e:	930c      	str	r3, [sp, #48]	; 0x30
 800e640:	f7f2 f81a 	bl	8000678 <__aeabi_fadd>
 800e644:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e646:	900e      	str	r0, [sp, #56]	; 0x38
 800e648:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e64a:	f7f2 f815 	bl	8000678 <__aeabi_fadd>
 800e64e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e650:	900d      	str	r0, [sp, #52]	; 0x34
 800e652:	1c38      	adds	r0, r7, #0
 800e654:	f7f2 f810 	bl	8000678 <__aeabi_fadd>
 800e658:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e65a:	1c07      	adds	r7, r0, #0
 800e65c:	18f6      	adds	r6, r6, r3
 800e65e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e660:	429e      	cmp	r6, r3
 800e662:	db12      	blt.n	800e68a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x81a>
 800e664:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e666:	991d      	ldr	r1, [sp, #116]	; 0x74
 800e668:	3301      	adds	r3, #1
 800e66a:	930c      	str	r3, [sp, #48]	; 0x30
 800e66c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e66e:	1af6      	subs	r6, r6, r3
 800e670:	f7f2 f802 	bl	8000678 <__aeabi_fadd>
 800e674:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e676:	1c07      	adds	r7, r0, #0
 800e678:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e67a:	f7f1 fffd 	bl	8000678 <__aeabi_fadd>
 800e67e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800e680:	900e      	str	r0, [sp, #56]	; 0x38
 800e682:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e684:	f7f1 fff8 	bl	8000678 <__aeabi_fadd>
 800e688:	900d      	str	r0, [sp, #52]	; 0x34
 800e68a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e68c:	3b01      	subs	r3, #1
 800e68e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e690:	2301      	movs	r3, #1
 800e692:	e765      	b.n	800e560 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6f0>
 800e694:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e696:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e698:	4684      	mov	ip, r0
 800e69a:	4463      	add	r3, ip
 800e69c:	001a      	movs	r2, r3
 800e69e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e6a0:	1a1b      	subs	r3, r3, r0
 800e6a2:	2900      	cmp	r1, #0
 800e6a4:	d009      	beq.n	800e6ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x84a>
 800e6a6:	932f      	str	r3, [sp, #188]	; 0xbc
 800e6a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e6aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e6ac:	9333      	str	r3, [sp, #204]	; 0xcc
 800e6ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e6b0:	9129      	str	r1, [sp, #164]	; 0xa4
 800e6b2:	922e      	str	r2, [sp, #184]	; 0xb8
 800e6b4:	9736      	str	r7, [sp, #216]	; 0xd8
 800e6b6:	9330      	str	r3, [sp, #192]	; 0xc0
 800e6b8:	962d      	str	r6, [sp, #180]	; 0xb4
 800e6ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e6be:	1a9b      	subs	r3, r3, r2
 800e6c0:	930a      	str	r3, [sp, #40]	; 0x28
 800e6c2:	e67b      	b.n	800e3bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x54c>
 800e6c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d104      	bne.n	800e6d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x866>
 800e6cc:	4b03      	ldr	r3, [pc, #12]	; (800e6dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x86c>)
 800e6ce:	6818      	ldr	r0, [r3, #0]
 800e6d0:	6803      	ldr	r3, [r0, #0]
 800e6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6d4:	4798      	blx	r3
 800e6d6:	b06b      	add	sp, #428	; 0x1ac
 800e6d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6da:	46c0      	nop			; (mov r8, r8)
 800e6dc:	200026c8 	.word	0x200026c8

0800e6e0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800e6e0:	b530      	push	{r4, r5, lr}
 800e6e2:	0005      	movs	r5, r0
 800e6e4:	2400      	movs	r4, #0
 800e6e6:	2b03      	cmp	r3, #3
 800e6e8:	d807      	bhi.n	800e6fa <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1a>
 800e6ea:	0018      	movs	r0, r3
 800e6ec:	f7f1 fd14 	bl	8000118 <__gnu_thumb1_case_uqi>
 800e6f0:	140e0702 	.word	0x140e0702
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	5eec      	ldrsh	r4, [r5, r3]
 800e6f8:	1864      	adds	r4, r4, r1
 800e6fa:	0020      	movs	r0, r4
 800e6fc:	bd30      	pop	{r4, r5, pc}
 800e6fe:	882c      	ldrh	r4, [r5, #0]
 800e700:	88a8      	ldrh	r0, [r5, #4]
 800e702:	1824      	adds	r4, r4, r0
 800e704:	b224      	sxth	r4, r4
 800e706:	1aa4      	subs	r4, r4, r2
 800e708:	3c01      	subs	r4, #1
 800e70a:	e7f6      	b.n	800e6fa <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1a>
 800e70c:	882c      	ldrh	r4, [r5, #0]
 800e70e:	88a8      	ldrh	r0, [r5, #4]
 800e710:	1824      	adds	r4, r4, r0
 800e712:	b224      	sxth	r4, r4
 800e714:	1a64      	subs	r4, r4, r1
 800e716:	e7f7      	b.n	800e708 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x28>
 800e718:	2300      	movs	r3, #0
 800e71a:	5eec      	ldrsh	r4, [r5, r3]
 800e71c:	18a4      	adds	r4, r4, r2
 800e71e:	e7ec      	b.n	800e6fa <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1a>

0800e720 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800e720:	b530      	push	{r4, r5, lr}
 800e722:	0005      	movs	r5, r0
 800e724:	2400      	movs	r4, #0
 800e726:	2b03      	cmp	r3, #3
 800e728:	d807      	bhi.n	800e73a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x1a>
 800e72a:	0018      	movs	r0, r3
 800e72c:	f7f1 fcf4 	bl	8000118 <__gnu_thumb1_case_uqi>
 800e730:	120b0702 	.word	0x120b0702
 800e734:	2302      	movs	r3, #2
 800e736:	5eec      	ldrsh	r4, [r5, r3]
 800e738:	18a4      	adds	r4, r4, r2
 800e73a:	0020      	movs	r0, r4
 800e73c:	bd30      	pop	{r4, r5, pc}
 800e73e:	2302      	movs	r3, #2
 800e740:	5eec      	ldrsh	r4, [r5, r3]
 800e742:	1864      	adds	r4, r4, r1
 800e744:	e7f9      	b.n	800e73a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x1a>
 800e746:	886c      	ldrh	r4, [r5, #2]
 800e748:	88e8      	ldrh	r0, [r5, #6]
 800e74a:	1824      	adds	r4, r4, r0
 800e74c:	b224      	sxth	r4, r4
 800e74e:	1aa4      	subs	r4, r4, r2
 800e750:	3c01      	subs	r4, #1
 800e752:	e7f2      	b.n	800e73a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x1a>
 800e754:	886c      	ldrh	r4, [r5, #2]
 800e756:	88e8      	ldrh	r0, [r5, #6]
 800e758:	1824      	adds	r4, r4, r0
 800e75a:	b224      	sxth	r4, r4
 800e75c:	1a64      	subs	r4, r4, r1
 800e75e:	e7f7      	b.n	800e750 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x30>

0800e760 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800e760:	2200      	movs	r2, #0
 800e762:	4b01      	ldr	r3, [pc, #4]	; (800e768 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800e764:	601a      	str	r2, [r3, #0]
 800e766:	4770      	bx	lr
 800e768:	200026d0 	.word	0x200026d0

0800e76c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800e76c:	0003      	movs	r3, r0
 800e76e:	2020      	movs	r0, #32
 800e770:	2b00      	cmp	r3, #0
 800e772:	d014      	beq.n	800e79e <_ZN8touchgfx16TouchCalibration4clzuEm+0x32>
 800e774:	2000      	movs	r0, #0
 800e776:	0c1a      	lsrs	r2, r3, #16
 800e778:	4282      	cmp	r2, r0
 800e77a:	d101      	bne.n	800e780 <_ZN8touchgfx16TouchCalibration4clzuEm+0x14>
 800e77c:	041b      	lsls	r3, r3, #16
 800e77e:	3010      	adds	r0, #16
 800e780:	0e1a      	lsrs	r2, r3, #24
 800e782:	d101      	bne.n	800e788 <_ZN8touchgfx16TouchCalibration4clzuEm+0x1c>
 800e784:	3008      	adds	r0, #8
 800e786:	021b      	lsls	r3, r3, #8
 800e788:	0f1a      	lsrs	r2, r3, #28
 800e78a:	d101      	bne.n	800e790 <_ZN8touchgfx16TouchCalibration4clzuEm+0x24>
 800e78c:	3004      	adds	r0, #4
 800e78e:	011b      	lsls	r3, r3, #4
 800e790:	0f9a      	lsrs	r2, r3, #30
 800e792:	d101      	bne.n	800e798 <_ZN8touchgfx16TouchCalibration4clzuEm+0x2c>
 800e794:	3002      	adds	r0, #2
 800e796:	009b      	lsls	r3, r3, #2
 800e798:	43db      	mvns	r3, r3
 800e79a:	0fdb      	lsrs	r3, r3, #31
 800e79c:	18c0      	adds	r0, r0, r3
 800e79e:	4770      	bx	lr

0800e7a0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800e7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7a2:	b089      	sub	sp, #36	; 0x24
 800e7a4:	0007      	movs	r7, r0
 800e7a6:	000c      	movs	r4, r1
 800e7a8:	0015      	movs	r5, r2
 800e7aa:	9302      	str	r3, [sp, #8]
 800e7ac:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800e7ae:	2800      	cmp	r0, #0
 800e7b0:	d005      	beq.n	800e7be <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800e7b2:	2a00      	cmp	r2, #0
 800e7b4:	d003      	beq.n	800e7be <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800e7b6:	291f      	cmp	r1, #31
 800e7b8:	d801      	bhi.n	800e7be <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800e7ba:	2b1f      	cmp	r3, #31
 800e7bc:	d903      	bls.n	800e7c6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x26>
 800e7be:	2000      	movs	r0, #0
 800e7c0:	6030      	str	r0, [r6, #0]
 800e7c2:	b009      	add	sp, #36	; 0x24
 800e7c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7c6:	2900      	cmp	r1, #0
 800e7c8:	d111      	bne.n	800e7ee <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4e>
 800e7ca:	9b02      	ldr	r3, [sp, #8]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d009      	beq.n	800e7e4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x44>
 800e7d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e7d2:	0002      	movs	r2, r0
 800e7d4:	9300      	str	r3, [sp, #0]
 800e7d6:	9601      	str	r6, [sp, #4]
 800e7d8:	000b      	movs	r3, r1
 800e7da:	0028      	movs	r0, r5
 800e7dc:	9902      	ldr	r1, [sp, #8]
 800e7de:	f7ff ffdf 	bl	800e7a0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800e7e2:	e7ee      	b.n	800e7c2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	425b      	negs	r3, r3
 800e7e8:	6033      	str	r3, [r6, #0]
 800e7ea:	4820      	ldr	r0, [pc, #128]	; (800e86c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0xcc>)
 800e7ec:	e7e9      	b.n	800e7c2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800e7ee:	0013      	movs	r3, r2
 800e7f0:	40cb      	lsrs	r3, r1
 800e7f2:	9303      	str	r3, [sp, #12]
 800e7f4:	d106      	bne.n	800e804 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x64>
 800e7f6:	0010      	movs	r0, r2
 800e7f8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e7fa:	4378      	muls	r0, r7
 800e7fc:	f7f1 fd26 	bl	800024c <__aeabi_uidivmod>
 800e800:	6031      	str	r1, [r6, #0]
 800e802:	e7de      	b.n	800e7c2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800e804:	4088      	lsls	r0, r1
 800e806:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e808:	f7f1 fd20 	bl	800024c <__aeabi_uidivmod>
 800e80c:	9b03      	ldr	r3, [sp, #12]
 800e80e:	9104      	str	r1, [sp, #16]
 800e810:	4343      	muls	r3, r0
 800e812:	2001      	movs	r0, #1
 800e814:	40a0      	lsls	r0, r4
 800e816:	3801      	subs	r0, #1
 800e818:	4005      	ands	r5, r0
 800e81a:	0028      	movs	r0, r5
 800e81c:	9305      	str	r3, [sp, #20]
 800e81e:	f7ff ffa5 	bl	800e76c <_ZN8touchgfx16TouchCalibration4clzuEm>
 800e822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e824:	0001      	movs	r1, r0
 800e826:	003a      	movs	r2, r7
 800e828:	9300      	str	r3, [sp, #0]
 800e82a:	0028      	movs	r0, r5
 800e82c:	0023      	movs	r3, r4
 800e82e:	9601      	str	r6, [sp, #4]
 800e830:	f7ff ffb6 	bl	800e7a0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800e834:	9b02      	ldr	r3, [sp, #8]
 800e836:	0005      	movs	r5, r0
 800e838:	9804      	ldr	r0, [sp, #16]
 800e83a:	18e4      	adds	r4, r4, r3
 800e83c:	f7ff ff96 	bl	800e76c <_ZN8touchgfx16TouchCalibration4clzuEm>
 800e840:	aa07      	add	r2, sp, #28
 800e842:	9201      	str	r2, [sp, #4]
 800e844:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e846:	0003      	movs	r3, r0
 800e848:	0021      	movs	r1, r4
 800e84a:	9200      	str	r2, [sp, #0]
 800e84c:	9803      	ldr	r0, [sp, #12]
 800e84e:	9a04      	ldr	r2, [sp, #16]
 800e850:	f7ff ffa6 	bl	800e7a0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800e854:	6833      	ldr	r3, [r6, #0]
 800e856:	9a07      	ldr	r2, [sp, #28]
 800e858:	0004      	movs	r4, r0
 800e85a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e85c:	1898      	adds	r0, r3, r2
 800e85e:	f7f1 fcf5 	bl	800024c <__aeabi_uidivmod>
 800e862:	9b05      	ldr	r3, [sp, #20]
 800e864:	18c0      	adds	r0, r0, r3
 800e866:	1940      	adds	r0, r0, r5
 800e868:	1820      	adds	r0, r4, r0
 800e86a:	e7c9      	b.n	800e800 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x60>
 800e86c:	7fffffff 	.word	0x7fffffff

0800e870 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800e870:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e872:	b089      	sub	sp, #36	; 0x24
 800e874:	9003      	str	r0, [sp, #12]
 800e876:	9105      	str	r1, [sp, #20]
 800e878:	0017      	movs	r7, r2
 800e87a:	001d      	movs	r5, r3
 800e87c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800e87e:	2601      	movs	r6, #1
 800e880:	2800      	cmp	r0, #0
 800e882:	da05      	bge.n	800e890 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x20>
 800e884:	4243      	negs	r3, r0
 800e886:	9303      	str	r3, [sp, #12]
 800e888:	6823      	ldr	r3, [r4, #0]
 800e88a:	3e02      	subs	r6, #2
 800e88c:	425b      	negs	r3, r3
 800e88e:	6023      	str	r3, [r4, #0]
 800e890:	2f00      	cmp	r7, #0
 800e892:	da04      	bge.n	800e89e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x2e>
 800e894:	6823      	ldr	r3, [r4, #0]
 800e896:	427f      	negs	r7, r7
 800e898:	425b      	negs	r3, r3
 800e89a:	4276      	negs	r6, r6
 800e89c:	6023      	str	r3, [r4, #0]
 800e89e:	2301      	movs	r3, #1
 800e8a0:	9304      	str	r3, [sp, #16]
 800e8a2:	2d00      	cmp	r5, #0
 800e8a4:	da02      	bge.n	800e8ac <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x3c>
 800e8a6:	3b02      	subs	r3, #2
 800e8a8:	426d      	negs	r5, r5
 800e8aa:	9304      	str	r3, [sp, #16]
 800e8ac:	0038      	movs	r0, r7
 800e8ae:	f7ff ff5d 	bl	800e76c <_ZN8touchgfx16TouchCalibration4clzuEm>
 800e8b2:	aa07      	add	r2, sp, #28
 800e8b4:	0003      	movs	r3, r0
 800e8b6:	9201      	str	r2, [sp, #4]
 800e8b8:	9905      	ldr	r1, [sp, #20]
 800e8ba:	003a      	movs	r2, r7
 800e8bc:	9500      	str	r5, [sp, #0]
 800e8be:	9803      	ldr	r0, [sp, #12]
 800e8c0:	f7ff ff6e 	bl	800e7a0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800e8c4:	6823      	ldr	r3, [r4, #0]
 800e8c6:	9a07      	ldr	r2, [sp, #28]
 800e8c8:	0007      	movs	r7, r0
 800e8ca:	0029      	movs	r1, r5
 800e8cc:	1898      	adds	r0, r3, r2
 800e8ce:	f7f1 fda7 	bl	8000420 <__aeabi_idivmod>
 800e8d2:	9b04      	ldr	r3, [sp, #16]
 800e8d4:	19c0      	adds	r0, r0, r7
 800e8d6:	6021      	str	r1, [r4, #0]
 800e8d8:	429e      	cmp	r6, r3
 800e8da:	d000      	beq.n	800e8de <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x6e>
 800e8dc:	4240      	negs	r0, r0
 800e8de:	1c73      	adds	r3, r6, #1
 800e8e0:	d105      	bne.n	800e8ee <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800e8e2:	424b      	negs	r3, r1
 800e8e4:	2900      	cmp	r1, #0
 800e8e6:	db0a      	blt.n	800e8fe <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8e>
 800e8e8:	6023      	str	r3, [r4, #0]
 800e8ea:	b009      	add	sp, #36	; 0x24
 800e8ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8ee:	2e01      	cmp	r6, #1
 800e8f0:	d1fb      	bne.n	800e8ea <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
 800e8f2:	2900      	cmp	r1, #0
 800e8f4:	daf9      	bge.n	800e8ea <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
 800e8f6:	1949      	adds	r1, r1, r5
 800e8f8:	3801      	subs	r0, #1
 800e8fa:	6021      	str	r1, [r4, #0]
 800e8fc:	e7f5      	b.n	800e8ea <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
 800e8fe:	1b5d      	subs	r5, r3, r5
 800e900:	3801      	subs	r0, #1
 800e902:	6025      	str	r5, [r4, #0]
 800e904:	e7f1      	b.n	800e8ea <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0800e908 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800e908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e90a:	4c1d      	ldr	r4, [pc, #116]	; (800e980 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800e90c:	b087      	sub	sp, #28
 800e90e:	69a3      	ldr	r3, [r4, #24]
 800e910:	0005      	movs	r5, r0
 800e912:	6806      	ldr	r6, [r0, #0]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d104      	bne.n	800e922 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800e918:	6840      	ldr	r0, [r0, #4]
 800e91a:	602e      	str	r6, [r5, #0]
 800e91c:	6068      	str	r0, [r5, #4]
 800e91e:	b007      	add	sp, #28
 800e920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e922:	0fda      	lsrs	r2, r3, #31
 800e924:	68a1      	ldr	r1, [r4, #8]
 800e926:	18d2      	adds	r2, r2, r3
 800e928:	af05      	add	r7, sp, #20
 800e92a:	1052      	asrs	r2, r2, #1
 800e92c:	188a      	adds	r2, r1, r2
 800e92e:	9700      	str	r7, [sp, #0]
 800e930:	9205      	str	r2, [sp, #20]
 800e932:	69e1      	ldr	r1, [r4, #28]
 800e934:	0032      	movs	r2, r6
 800e936:	6820      	ldr	r0, [r4, #0]
 800e938:	f7ff ff9a 	bl	800e870 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800e93c:	9700      	str	r7, [sp, #0]
 800e93e:	0006      	movs	r6, r0
 800e940:	69a3      	ldr	r3, [r4, #24]
 800e942:	686a      	ldr	r2, [r5, #4]
 800e944:	6a21      	ldr	r1, [r4, #32]
 800e946:	6860      	ldr	r0, [r4, #4]
 800e948:	f7ff ff92 	bl	800e870 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800e94c:	69a3      	ldr	r3, [r4, #24]
 800e94e:	6961      	ldr	r1, [r4, #20]
 800e950:	0fda      	lsrs	r2, r3, #31
 800e952:	18d2      	adds	r2, r2, r3
 800e954:	1052      	asrs	r2, r2, #1
 800e956:	188a      	adds	r2, r1, r2
 800e958:	9700      	str	r7, [sp, #0]
 800e95a:	9205      	str	r2, [sp, #20]
 800e95c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e95e:	682a      	ldr	r2, [r5, #0]
 800e960:	1836      	adds	r6, r6, r0
 800e962:	68e0      	ldr	r0, [r4, #12]
 800e964:	f7ff ff84 	bl	800e870 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800e968:	9700      	str	r7, [sp, #0]
 800e96a:	9003      	str	r0, [sp, #12]
 800e96c:	69a3      	ldr	r3, [r4, #24]
 800e96e:	686a      	ldr	r2, [r5, #4]
 800e970:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800e972:	6920      	ldr	r0, [r4, #16]
 800e974:	f7ff ff7c 	bl	800e870 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800e978:	9b03      	ldr	r3, [sp, #12]
 800e97a:	1818      	adds	r0, r3, r0
 800e97c:	e7cd      	b.n	800e91a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 800e97e:	46c0      	nop			; (mov r8, r8)
 800e980:	200026d4 	.word	0x200026d4

0800e984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800e984:	b510      	push	{r4, lr}
 800e986:	4b07      	ldr	r3, [pc, #28]	; (800e9a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800e988:	781b      	ldrb	r3, [r3, #0]
 800e98a:	2b01      	cmp	r3, #1
 800e98c:	d109      	bne.n	800e9a2 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1e>
 800e98e:	2300      	movs	r3, #0
 800e990:	5ec2      	ldrsh	r2, [r0, r3]
 800e992:	2400      	movs	r4, #0
 800e994:	5f0b      	ldrsh	r3, [r1, r4]
 800e996:	8003      	strh	r3, [r0, #0]
 800e998:	4b03      	ldr	r3, [pc, #12]	; (800e9a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800e99a:	881b      	ldrh	r3, [r3, #0]
 800e99c:	3b01      	subs	r3, #1
 800e99e:	1a9b      	subs	r3, r3, r2
 800e9a0:	800b      	strh	r3, [r1, #0]
 800e9a2:	bd10      	pop	{r4, pc}
 800e9a4:	200026c0 	.word	0x200026c0
 800e9a8:	200026bc 	.word	0x200026bc

0800e9ac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800e9ac:	b510      	push	{r4, lr}
 800e9ae:	4b07      	ldr	r3, [pc, #28]	; (800e9cc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	2b01      	cmp	r3, #1
 800e9b4:	d108      	bne.n	800e9c8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	5ec2      	ldrsh	r2, [r0, r3]
 800e9ba:	4b05      	ldr	r3, [pc, #20]	; (800e9d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800e9bc:	880c      	ldrh	r4, [r1, #0]
 800e9be:	881b      	ldrh	r3, [r3, #0]
 800e9c0:	3b01      	subs	r3, #1
 800e9c2:	1b1b      	subs	r3, r3, r4
 800e9c4:	8003      	strh	r3, [r0, #0]
 800e9c6:	800a      	strh	r2, [r1, #0]
 800e9c8:	bd10      	pop	{r4, pc}
 800e9ca:	46c0      	nop			; (mov r8, r8)
 800e9cc:	200026c0 	.word	0x200026c0
 800e9d0:	200026bc 	.word	0x200026bc

0800e9d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800e9d4:	b510      	push	{r4, lr}
 800e9d6:	4b0a      	ldr	r3, [pc, #40]	; (800ea00 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800e9d8:	781b      	ldrb	r3, [r3, #0]
 800e9da:	2b01      	cmp	r3, #1
 800e9dc:	d10e      	bne.n	800e9fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800e9de:	2306      	movs	r3, #6
 800e9e0:	5ec1      	ldrsh	r1, [r0, r3]
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	5ec4      	ldrsh	r4, [r0, r3]
 800e9e6:	4b07      	ldr	r3, [pc, #28]	; (800ea04 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800e9e8:	8842      	ldrh	r2, [r0, #2]
 800e9ea:	881b      	ldrh	r3, [r3, #0]
 800e9ec:	1852      	adds	r2, r2, r1
 800e9ee:	1a9b      	subs	r3, r3, r2
 800e9f0:	8003      	strh	r3, [r0, #0]
 800e9f2:	2204      	movs	r2, #4
 800e9f4:	5e83      	ldrsh	r3, [r0, r2]
 800e9f6:	8044      	strh	r4, [r0, #2]
 800e9f8:	8081      	strh	r1, [r0, #4]
 800e9fa:	80c3      	strh	r3, [r0, #6]
 800e9fc:	bd10      	pop	{r4, pc}
 800e9fe:	46c0      	nop			; (mov r8, r8)
 800ea00:	200026c0 	.word	0x200026c0
 800ea04:	200026bc 	.word	0x200026bc

0800ea08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800ea08:	4b08      	ldr	r3, [pc, #32]	; (800ea2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800ea0a:	781b      	ldrb	r3, [r3, #0]
 800ea0c:	2b01      	cmp	r3, #1
 800ea0e:	d10c      	bne.n	800ea2a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 800ea10:	2204      	movs	r2, #4
 800ea12:	5e81      	ldrsh	r1, [r0, r2]
 800ea14:	8803      	ldrh	r3, [r0, #0]
 800ea16:	8842      	ldrh	r2, [r0, #2]
 800ea18:	8002      	strh	r2, [r0, #0]
 800ea1a:	185a      	adds	r2, r3, r1
 800ea1c:	4b04      	ldr	r3, [pc, #16]	; (800ea30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800ea1e:	881b      	ldrh	r3, [r3, #0]
 800ea20:	1a9b      	subs	r3, r3, r2
 800ea22:	8043      	strh	r3, [r0, #2]
 800ea24:	88c3      	ldrh	r3, [r0, #6]
 800ea26:	80c1      	strh	r1, [r0, #6]
 800ea28:	8083      	strh	r3, [r0, #4]
 800ea2a:	4770      	bx	lr
 800ea2c:	200026c0 	.word	0x200026c0
 800ea30:	200026bc 	.word	0x200026bc

0800ea34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800ea34:	b530      	push	{r4, r5, lr}
 800ea36:	4b07      	ldr	r3, [pc, #28]	; (800ea54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800ea38:	781b      	ldrb	r3, [r3, #0]
 800ea3a:	2b01      	cmp	r3, #1
 800ea3c:	d108      	bne.n	800ea50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800ea3e:	2300      	movs	r3, #0
 800ea40:	5ec4      	ldrsh	r4, [r0, r3]
 800ea42:	2500      	movs	r5, #0
 800ea44:	5f4b      	ldrsh	r3, [r1, r5]
 800ea46:	8003      	strh	r3, [r0, #0]
 800ea48:	8893      	ldrh	r3, [r2, #4]
 800ea4a:	3b01      	subs	r3, #1
 800ea4c:	1b1b      	subs	r3, r3, r4
 800ea4e:	800b      	strh	r3, [r1, #0]
 800ea50:	bd30      	pop	{r4, r5, pc}
 800ea52:	46c0      	nop			; (mov r8, r8)
 800ea54:	200026c0 	.word	0x200026c0

0800ea58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800ea58:	b510      	push	{r4, lr}
 800ea5a:	4b0a      	ldr	r3, [pc, #40]	; (800ea84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800ea5c:	0004      	movs	r4, r0
 800ea5e:	781b      	ldrb	r3, [r3, #0]
 800ea60:	000a      	movs	r2, r1
 800ea62:	2b01      	cmp	r3, #1
 800ea64:	d10c      	bne.n	800ea80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800ea66:	8803      	ldrh	r3, [r0, #0]
 800ea68:	8881      	ldrh	r1, [r0, #4]
 800ea6a:	185b      	adds	r3, r3, r1
 800ea6c:	3b01      	subs	r3, #1
 800ea6e:	8003      	strh	r3, [r0, #0]
 800ea70:	1c81      	adds	r1, r0, #2
 800ea72:	f7ff ffdf 	bl	800ea34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800ea76:	2204      	movs	r2, #4
 800ea78:	5ea3      	ldrsh	r3, [r4, r2]
 800ea7a:	88e2      	ldrh	r2, [r4, #6]
 800ea7c:	80e3      	strh	r3, [r4, #6]
 800ea7e:	80a2      	strh	r2, [r4, #4]
 800ea80:	bd10      	pop	{r4, pc}
 800ea82:	46c0      	nop			; (mov r8, r8)
 800ea84:	200026c0 	.word	0x200026c0

0800ea88 <_ZN8touchgfx11Application13requestRedrawEv>:
 800ea88:	b510      	push	{r4, lr}
 800ea8a:	4b07      	ldr	r3, [pc, #28]	; (800eaa8 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800ea8c:	2400      	movs	r4, #0
 800ea8e:	2200      	movs	r2, #0
 800ea90:	5e9a      	ldrsh	r2, [r3, r2]
 800ea92:	4b06      	ldr	r3, [pc, #24]	; (800eaac <_ZN8touchgfx11Application13requestRedrawEv+0x24>)
 800ea94:	2100      	movs	r1, #0
 800ea96:	5e5b      	ldrsh	r3, [r3, r1]
 800ea98:	0001      	movs	r1, r0
 800ea9a:	30fe      	adds	r0, #254	; 0xfe
 800ea9c:	31fc      	adds	r1, #252	; 0xfc
 800ea9e:	634c      	str	r4, [r1, #52]	; 0x34
 800eaa0:	86c2      	strh	r2, [r0, #54]	; 0x36
 800eaa2:	8703      	strh	r3, [r0, #56]	; 0x38
 800eaa4:	bd10      	pop	{r4, pc}
 800eaa6:	46c0      	nop			; (mov r8, r8)
 800eaa8:	200026bc 	.word	0x200026bc
 800eaac:	200026be 	.word	0x200026be

0800eab0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800eab0:	b510      	push	{r4, lr}
 800eab2:	4b04      	ldr	r3, [pc, #16]	; (800eac4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x14>)
 800eab4:	6818      	ldr	r0, [r3, #0]
 800eab6:	2800      	cmp	r0, #0
 800eab8:	d002      	beq.n	800eac0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>
 800eaba:	6803      	ldr	r3, [r0, #0]
 800eabc:	699b      	ldr	r3, [r3, #24]
 800eabe:	4798      	blx	r3
 800eac0:	bd10      	pop	{r4, pc}
 800eac2:	46c0      	nop			; (mov r8, r8)
 800eac4:	20002704 	.word	0x20002704

0800eac8 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800eac8:	4770      	bx	lr
	...

0800eacc <_ZN8touchgfx11Application4drawEv>:
 800eacc:	b507      	push	{r0, r1, r2, lr}
 800eace:	4b07      	ldr	r3, [pc, #28]	; (800eaec <_ZN8touchgfx11Application4drawEv+0x20>)
 800ead0:	2200      	movs	r2, #0
 800ead2:	5e9a      	ldrsh	r2, [r3, r2]
 800ead4:	4b06      	ldr	r3, [pc, #24]	; (800eaf0 <_ZN8touchgfx11Application4drawEv+0x24>)
 800ead6:	2100      	movs	r1, #0
 800ead8:	5e5b      	ldrsh	r3, [r3, r1]
 800eada:	2100      	movs	r1, #0
 800eadc:	9100      	str	r1, [sp, #0]
 800eade:	4669      	mov	r1, sp
 800eae0:	80cb      	strh	r3, [r1, #6]
 800eae2:	6803      	ldr	r3, [r0, #0]
 800eae4:	808a      	strh	r2, [r1, #4]
 800eae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eae8:	4798      	blx	r3
 800eaea:	bd07      	pop	{r0, r1, r2, pc}
 800eaec:	200026bc 	.word	0x200026bc
 800eaf0:	200026be 	.word	0x200026be

0800eaf4 <_ZN8touchgfx11Application10invalidateEv>:
 800eaf4:	b513      	push	{r0, r1, r4, lr}
 800eaf6:	4b08      	ldr	r3, [pc, #32]	; (800eb18 <_ZN8touchgfx11Application10invalidateEv+0x24>)
 800eaf8:	466c      	mov	r4, sp
 800eafa:	2200      	movs	r2, #0
 800eafc:	5e9a      	ldrsh	r2, [r3, r2]
 800eafe:	4b07      	ldr	r3, [pc, #28]	; (800eb1c <_ZN8touchgfx11Application10invalidateEv+0x28>)
 800eb00:	80a2      	strh	r2, [r4, #4]
 800eb02:	2100      	movs	r1, #0
 800eb04:	5e5b      	ldrsh	r3, [r3, r1]
 800eb06:	2100      	movs	r1, #0
 800eb08:	80e3      	strh	r3, [r4, #6]
 800eb0a:	6803      	ldr	r3, [r0, #0]
 800eb0c:	9100      	str	r1, [sp, #0]
 800eb0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb10:	9a01      	ldr	r2, [sp, #4]
 800eb12:	4798      	blx	r3
 800eb14:	bd13      	pop	{r0, r1, r4, pc}
 800eb16:	46c0      	nop			; (mov r8, r8)
 800eb18:	200026bc 	.word	0x200026bc
 800eb1c:	200026be 	.word	0x200026be

0800eb20 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800eb20:	b510      	push	{r4, lr}
 800eb22:	4b04      	ldr	r3, [pc, #16]	; (800eb34 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x14>)
 800eb24:	6818      	ldr	r0, [r3, #0]
 800eb26:	2800      	cmp	r0, #0
 800eb28:	d002      	beq.n	800eb30 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>
 800eb2a:	6803      	ldr	r3, [r0, #0]
 800eb2c:	69db      	ldr	r3, [r3, #28]
 800eb2e:	4798      	blx	r3
 800eb30:	bd10      	pop	{r4, pc}
 800eb32:	46c0      	nop			; (mov r8, r8)
 800eb34:	20002704 	.word	0x20002704

0800eb38 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800eb38:	b510      	push	{r4, lr}
 800eb3a:	4b04      	ldr	r3, [pc, #16]	; (800eb4c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x14>)
 800eb3c:	6818      	ldr	r0, [r3, #0]
 800eb3e:	2800      	cmp	r0, #0
 800eb40:	d002      	beq.n	800eb48 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>
 800eb42:	6803      	ldr	r3, [r0, #0]
 800eb44:	6a1b      	ldr	r3, [r3, #32]
 800eb46:	4798      	blx	r3
 800eb48:	bd10      	pop	{r4, pc}
 800eb4a:	46c0      	nop			; (mov r8, r8)
 800eb4c:	20002704 	.word	0x20002704

0800eb50 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 800eb50:	2300      	movs	r3, #0
 800eb52:	30ec      	adds	r0, #236	; 0xec
 800eb54:	8003      	strh	r3, [r0, #0]
 800eb56:	4770      	bx	lr

0800eb58 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800eb58:	b510      	push	{r4, lr}
 800eb5a:	4b04      	ldr	r3, [pc, #16]	; (800eb6c <_ZN8touchgfx11Application14handleKeyEventEh+0x14>)
 800eb5c:	6818      	ldr	r0, [r3, #0]
 800eb5e:	2800      	cmp	r0, #0
 800eb60:	d002      	beq.n	800eb68 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>
 800eb62:	6803      	ldr	r3, [r0, #0]
 800eb64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb66:	4798      	blx	r3
 800eb68:	bd10      	pop	{r4, pc}
 800eb6a:	46c0      	nop			; (mov r8, r8)
 800eb6c:	20002704 	.word	0x20002704

0800eb70 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800eb70:	b570      	push	{r4, r5, r6, lr}
 800eb72:	888a      	ldrh	r2, [r1, #4]
 800eb74:	2300      	movs	r3, #0
 800eb76:	5ecd      	ldrsh	r5, [r1, r3]
 800eb78:	2300      	movs	r3, #0
 800eb7a:	5ec6      	ldrsh	r6, [r0, r3]
 800eb7c:	1952      	adds	r2, r2, r5
 800eb7e:	b212      	sxth	r2, r2
 800eb80:	0004      	movs	r4, r0
 800eb82:	2000      	movs	r0, #0
 800eb84:	4296      	cmp	r6, r2
 800eb86:	da15      	bge.n	800ebb4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x44>
 800eb88:	88a3      	ldrh	r3, [r4, #4]
 800eb8a:	199b      	adds	r3, r3, r6
 800eb8c:	b21b      	sxth	r3, r3
 800eb8e:	429d      	cmp	r5, r3
 800eb90:	da10      	bge.n	800ebb4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x44>
 800eb92:	2302      	movs	r3, #2
 800eb94:	5ecd      	ldrsh	r5, [r1, r3]
 800eb96:	88ca      	ldrh	r2, [r1, #6]
 800eb98:	2302      	movs	r3, #2
 800eb9a:	5ee6      	ldrsh	r6, [r4, r3]
 800eb9c:	1952      	adds	r2, r2, r5
 800eb9e:	b212      	sxth	r2, r2
 800eba0:	4296      	cmp	r6, r2
 800eba2:	da07      	bge.n	800ebb4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x44>
 800eba4:	88e3      	ldrh	r3, [r4, #6]
 800eba6:	2201      	movs	r2, #1
 800eba8:	199b      	adds	r3, r3, r6
 800ebaa:	b21b      	sxth	r3, r3
 800ebac:	429d      	cmp	r5, r3
 800ebae:	db00      	blt.n	800ebb2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x42>
 800ebb0:	1c02      	adds	r2, r0, #0
 800ebb2:	b2d0      	uxtb	r0, r2
 800ebb4:	bd70      	pop	{r4, r5, r6, pc}

0800ebb6 <_ZN8touchgfx4Rect10restrictToEss>:
 800ebb6:	b530      	push	{r4, r5, lr}
 800ebb8:	2300      	movs	r3, #0
 800ebba:	5ec4      	ldrsh	r4, [r0, r3]
 800ebbc:	2c00      	cmp	r4, #0
 800ebbe:	da04      	bge.n	800ebca <_ZN8touchgfx4Rect10restrictToEss+0x14>
 800ebc0:	8883      	ldrh	r3, [r0, #4]
 800ebc2:	191b      	adds	r3, r3, r4
 800ebc4:	8083      	strh	r3, [r0, #4]
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	8003      	strh	r3, [r0, #0]
 800ebca:	2300      	movs	r3, #0
 800ebcc:	5ec4      	ldrsh	r4, [r0, r3]
 800ebce:	2504      	movs	r5, #4
 800ebd0:	5f43      	ldrsh	r3, [r0, r5]
 800ebd2:	1b09      	subs	r1, r1, r4
 800ebd4:	428b      	cmp	r3, r1
 800ebd6:	dd00      	ble.n	800ebda <_ZN8touchgfx4Rect10restrictToEss+0x24>
 800ebd8:	8081      	strh	r1, [r0, #4]
 800ebda:	2302      	movs	r3, #2
 800ebdc:	5ec1      	ldrsh	r1, [r0, r3]
 800ebde:	2900      	cmp	r1, #0
 800ebe0:	da04      	bge.n	800ebec <_ZN8touchgfx4Rect10restrictToEss+0x36>
 800ebe2:	88c3      	ldrh	r3, [r0, #6]
 800ebe4:	185b      	adds	r3, r3, r1
 800ebe6:	80c3      	strh	r3, [r0, #6]
 800ebe8:	2300      	movs	r3, #0
 800ebea:	8043      	strh	r3, [r0, #2]
 800ebec:	2302      	movs	r3, #2
 800ebee:	5ec1      	ldrsh	r1, [r0, r3]
 800ebf0:	2406      	movs	r4, #6
 800ebf2:	5f03      	ldrsh	r3, [r0, r4]
 800ebf4:	1a52      	subs	r2, r2, r1
 800ebf6:	4293      	cmp	r3, r2
 800ebf8:	dd00      	ble.n	800ebfc <_ZN8touchgfx4Rect10restrictToEss+0x46>
 800ebfa:	80c2      	strh	r2, [r0, #6]
 800ebfc:	bd30      	pop	{r4, r5, pc}
	...

0800ec00 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800ec00:	b510      	push	{r4, lr}
 800ec02:	000c      	movs	r4, r1
 800ec04:	4b0f      	ldr	r3, [pc, #60]	; (800ec44 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 800ec06:	0020      	movs	r0, r4
 800ec08:	2200      	movs	r2, #0
 800ec0a:	5e9a      	ldrsh	r2, [r3, r2]
 800ec0c:	4b0e      	ldr	r3, [pc, #56]	; (800ec48 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 800ec0e:	2100      	movs	r1, #0
 800ec10:	5e59      	ldrsh	r1, [r3, r1]
 800ec12:	f7ff ffd0 	bl	800ebb6 <_ZN8touchgfx4Rect10restrictToEss>
 800ec16:	4b0d      	ldr	r3, [pc, #52]	; (800ec4c <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 800ec18:	6818      	ldr	r0, [r3, #0]
 800ec1a:	2800      	cmp	r0, #0
 800ec1c:	d011      	beq.n	800ec42 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 800ec1e:	6803      	ldr	r3, [r0, #0]
 800ec20:	0021      	movs	r1, r4
 800ec22:	689b      	ldr	r3, [r3, #8]
 800ec24:	4798      	blx	r3
 800ec26:	4b0a      	ldr	r3, [pc, #40]	; (800ec50 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 800ec28:	6818      	ldr	r0, [r3, #0]
 800ec2a:	2800      	cmp	r0, #0
 800ec2c:	d003      	beq.n	800ec36 <_ZN8touchgfx11Application4drawERNS_4RectE+0x36>
 800ec2e:	6803      	ldr	r3, [r0, #0]
 800ec30:	0021      	movs	r1, r4
 800ec32:	689b      	ldr	r3, [r3, #8]
 800ec34:	4798      	blx	r3
 800ec36:	4b07      	ldr	r3, [pc, #28]	; (800ec54 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 800ec38:	0021      	movs	r1, r4
 800ec3a:	6818      	ldr	r0, [r3, #0]
 800ec3c:	6803      	ldr	r3, [r0, #0]
 800ec3e:	69db      	ldr	r3, [r3, #28]
 800ec40:	4798      	blx	r3
 800ec42:	bd10      	pop	{r4, pc}
 800ec44:	200026be 	.word	0x200026be
 800ec48:	200026bc 	.word	0x200026bc
 800ec4c:	20002704 	.word	0x20002704
 800ec50:	20002700 	.word	0x20002700
 800ec54:	200026c8 	.word	0x200026c8

0800ec58 <_ZNK8touchgfx4Rect8includesERKS0_>:
 800ec58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec5a:	0004      	movs	r4, r0
 800ec5c:	0008      	movs	r0, r1
 800ec5e:	000d      	movs	r5, r1
 800ec60:	f7fd fcde 	bl	800c620 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ec64:	2800      	cmp	r0, #0
 800ec66:	d11e      	bne.n	800eca6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4e>
 800ec68:	2300      	movs	r3, #0
 800ec6a:	5ee9      	ldrsh	r1, [r5, r3]
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	5ee7      	ldrsh	r7, [r4, r3]
 800ec70:	42b9      	cmp	r1, r7
 800ec72:	db18      	blt.n	800eca6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4e>
 800ec74:	2302      	movs	r3, #2
 800ec76:	5eea      	ldrsh	r2, [r5, r3]
 800ec78:	2302      	movs	r3, #2
 800ec7a:	5ee6      	ldrsh	r6, [r4, r3]
 800ec7c:	42b2      	cmp	r2, r6
 800ec7e:	db12      	blt.n	800eca6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4e>
 800ec80:	88ab      	ldrh	r3, [r5, #4]
 800ec82:	185b      	adds	r3, r3, r1
 800ec84:	88a1      	ldrh	r1, [r4, #4]
 800ec86:	b21b      	sxth	r3, r3
 800ec88:	19c9      	adds	r1, r1, r7
 800ec8a:	b209      	sxth	r1, r1
 800ec8c:	428b      	cmp	r3, r1
 800ec8e:	dc0a      	bgt.n	800eca6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4e>
 800ec90:	88eb      	ldrh	r3, [r5, #6]
 800ec92:	189b      	adds	r3, r3, r2
 800ec94:	88e2      	ldrh	r2, [r4, #6]
 800ec96:	b21b      	sxth	r3, r3
 800ec98:	1992      	adds	r2, r2, r6
 800ec9a:	b212      	sxth	r2, r2
 800ec9c:	0fd8      	lsrs	r0, r3, #31
 800ec9e:	17d1      	asrs	r1, r2, #31
 800eca0:	429a      	cmp	r2, r3
 800eca2:	4148      	adcs	r0, r1
 800eca4:	b2c0      	uxtb	r0, r0
 800eca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800eca8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800eca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ecaa:	0004      	movs	r4, r0
 800ecac:	0008      	movs	r0, r1
 800ecae:	000d      	movs	r5, r1
 800ecb0:	f7fd fcb6 	bl	800c620 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ecb4:	2800      	cmp	r0, #0
 800ecb6:	d110      	bne.n	800ecda <_ZN8touchgfx4Rect11expandToFitERKS0_+0x32>
 800ecb8:	0020      	movs	r0, r4
 800ecba:	f7fd fcb1 	bl	800c620 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	5eea      	ldrsh	r2, [r5, r3]
 800ecc2:	2800      	cmp	r0, #0
 800ecc4:	d00a      	beq.n	800ecdc <_ZN8touchgfx4Rect11expandToFitERKS0_+0x34>
 800ecc6:	8022      	strh	r2, [r4, #0]
 800ecc8:	2202      	movs	r2, #2
 800ecca:	5eab      	ldrsh	r3, [r5, r2]
 800eccc:	8063      	strh	r3, [r4, #2]
 800ecce:	2204      	movs	r2, #4
 800ecd0:	5eab      	ldrsh	r3, [r5, r2]
 800ecd2:	80a3      	strh	r3, [r4, #4]
 800ecd4:	2206      	movs	r2, #6
 800ecd6:	5eab      	ldrsh	r3, [r5, r2]
 800ecd8:	80e3      	strh	r3, [r4, #6]
 800ecda:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ecdc:	2300      	movs	r3, #0
 800ecde:	5ee0      	ldrsh	r0, [r4, r3]
 800ece0:	1c01      	adds	r1, r0, #0
 800ece2:	4290      	cmp	r0, r2
 800ece4:	dd00      	ble.n	800ece8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x40>
 800ece6:	1c11      	adds	r1, r2, #0
 800ece8:	2302      	movs	r3, #2
 800ecea:	5ee6      	ldrsh	r6, [r4, r3]
 800ecec:	2302      	movs	r3, #2
 800ecee:	5eef      	ldrsh	r7, [r5, r3]
 800ecf0:	b209      	sxth	r1, r1
 800ecf2:	1c33      	adds	r3, r6, #0
 800ecf4:	42be      	cmp	r6, r7
 800ecf6:	dd00      	ble.n	800ecfa <_ZN8touchgfx4Rect11expandToFitERKS0_+0x52>
 800ecf8:	1c3b      	adds	r3, r7, #0
 800ecfa:	b21b      	sxth	r3, r3
 800ecfc:	469c      	mov	ip, r3
 800ecfe:	88ab      	ldrh	r3, [r5, #4]
 800ed00:	189a      	adds	r2, r3, r2
 800ed02:	88a3      	ldrh	r3, [r4, #4]
 800ed04:	1818      	adds	r0, r3, r0
 800ed06:	466b      	mov	r3, sp
 800ed08:	80da      	strh	r2, [r3, #6]
 800ed0a:	b213      	sxth	r3, r2
 800ed0c:	b202      	sxth	r2, r0
 800ed0e:	4293      	cmp	r3, r2
 800ed10:	da01      	bge.n	800ed16 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6e>
 800ed12:	466b      	mov	r3, sp
 800ed14:	80d8      	strh	r0, [r3, #6]
 800ed16:	466b      	mov	r3, sp
 800ed18:	88ea      	ldrh	r2, [r5, #6]
 800ed1a:	88db      	ldrh	r3, [r3, #6]
 800ed1c:	19d7      	adds	r7, r2, r7
 800ed1e:	88e2      	ldrh	r2, [r4, #6]
 800ed20:	b21b      	sxth	r3, r3
 800ed22:	1996      	adds	r6, r2, r6
 800ed24:	b230      	sxth	r0, r6
 800ed26:	1c3a      	adds	r2, r7, #0
 800ed28:	b23f      	sxth	r7, r7
 800ed2a:	4287      	cmp	r7, r0
 800ed2c:	da00      	bge.n	800ed30 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x88>
 800ed2e:	1c32      	adds	r2, r6, #0
 800ed30:	4660      	mov	r0, ip
 800ed32:	1a5b      	subs	r3, r3, r1
 800ed34:	1a12      	subs	r2, r2, r0
 800ed36:	8021      	strh	r1, [r4, #0]
 800ed38:	8060      	strh	r0, [r4, #2]
 800ed3a:	80a3      	strh	r3, [r4, #4]
 800ed3c:	80e2      	strh	r2, [r4, #6]
 800ed3e:	e7cc      	b.n	800ecda <_ZN8touchgfx4Rect11expandToFitERKS0_+0x32>

0800ed40 <_ZN8touchgfx11Application11getInstanceEv>:
 800ed40:	4b01      	ldr	r3, [pc, #4]	; (800ed48 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800ed42:	6818      	ldr	r0, [r3, #0]
 800ed44:	4770      	bx	lr
 800ed46:	46c0      	nop			; (mov r8, r8)
 800ed48:	20002714 	.word	0x20002714

0800ed4c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 800ed4c:	b570      	push	{r4, r5, r6, lr}
 800ed4e:	0005      	movs	r5, r0
 800ed50:	2300      	movs	r3, #0
 800ed52:	35a4      	adds	r5, #164	; 0xa4
 800ed54:	802b      	strh	r3, [r5, #0]
 800ed56:	0003      	movs	r3, r0
 800ed58:	0006      	movs	r6, r0
 800ed5a:	0004      	movs	r4, r0
 800ed5c:	3380      	adds	r3, #128	; 0x80
 800ed5e:	881b      	ldrh	r3, [r3, #0]
 800ed60:	36a6      	adds	r6, #166	; 0xa6
 800ed62:	8033      	strh	r3, [r6, #0]
 800ed64:	882b      	ldrh	r3, [r5, #0]
 800ed66:	8832      	ldrh	r2, [r6, #0]
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	d90d      	bls.n	800ed88 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 800ed6c:	18e2      	adds	r2, r4, r3
 800ed6e:	3284      	adds	r2, #132	; 0x84
 800ed70:	7812      	ldrb	r2, [r2, #0]
 800ed72:	2a00      	cmp	r2, #0
 800ed74:	d004      	beq.n	800ed80 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x34>
 800ed76:	009b      	lsls	r3, r3, #2
 800ed78:	5918      	ldr	r0, [r3, r4]
 800ed7a:	6803      	ldr	r3, [r0, #0]
 800ed7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed7e:	4798      	blx	r3
 800ed80:	882b      	ldrh	r3, [r5, #0]
 800ed82:	3301      	adds	r3, #1
 800ed84:	802b      	strh	r3, [r5, #0]
 800ed86:	e7ed      	b.n	800ed64 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x18>
 800ed88:	bd70      	pop	{r4, r5, r6, pc}

0800ed8a <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 800ed8a:	0003      	movs	r3, r0
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	3380      	adds	r3, #128	; 0x80
 800ed90:	801a      	strh	r2, [r3, #0]
 800ed92:	30a4      	adds	r0, #164	; 0xa4
 800ed94:	3304      	adds	r3, #4
 800ed96:	701a      	strb	r2, [r3, #0]
 800ed98:	3301      	adds	r3, #1
 800ed9a:	4283      	cmp	r3, r0
 800ed9c:	d1fb      	bne.n	800ed96 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 800ed9e:	4770      	bx	lr

0800eda0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800eda0:	b570      	push	{r4, r5, r6, lr}
 800eda2:	4e0b      	ldr	r6, [pc, #44]	; (800edd0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 800eda4:	0004      	movs	r4, r0
 800eda6:	6830      	ldr	r0, [r6, #0]
 800eda8:	000d      	movs	r5, r1
 800edaa:	2800      	cmp	r0, #0
 800edac:	d002      	beq.n	800edb4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 800edae:	6803      	ldr	r3, [r0, #0]
 800edb0:	695b      	ldr	r3, [r3, #20]
 800edb2:	4798      	blx	r3
 800edb4:	1d20      	adds	r0, r4, #4
 800edb6:	f7ff ffe8 	bl	800ed8a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800edba:	6035      	str	r5, [r6, #0]
 800edbc:	682b      	ldr	r3, [r5, #0]
 800edbe:	0028      	movs	r0, r5
 800edc0:	68db      	ldr	r3, [r3, #12]
 800edc2:	4798      	blx	r3
 800edc4:	6823      	ldr	r3, [r4, #0]
 800edc6:	0020      	movs	r0, r4
 800edc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edca:	4798      	blx	r3
 800edcc:	bd70      	pop	{r4, r5, r6, pc}
 800edce:	46c0      	nop			; (mov r8, r8)
 800edd0:	20002704 	.word	0x20002704

0800edd4 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 800edd4:	0003      	movs	r3, r0
 800edd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edd8:	3380      	adds	r3, #128	; 0x80
 800edda:	881b      	ldrh	r3, [r3, #0]
 800eddc:	b085      	sub	sp, #20
 800edde:	9302      	str	r3, [sp, #8]
 800ede0:	23a4      	movs	r3, #164	; 0xa4
 800ede2:	469c      	mov	ip, r3
 800ede4:	4484      	add	ip, r0
 800ede6:	4663      	mov	r3, ip
 800ede8:	881b      	ldrh	r3, [r3, #0]
 800edea:	0006      	movs	r6, r0
 800edec:	9301      	str	r3, [sp, #4]
 800edee:	2300      	movs	r3, #0
 800edf0:	001c      	movs	r4, r3
 800edf2:	001d      	movs	r5, r3
 800edf4:	001a      	movs	r2, r3
 800edf6:	36a6      	adds	r6, #166	; 0xa6
 800edf8:	9603      	str	r6, [sp, #12]
 800edfa:	9e02      	ldr	r6, [sp, #8]
 800edfc:	429e      	cmp	r6, r3
 800edfe:	dd1c      	ble.n	800ee3a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x66>
 800ee00:	001e      	movs	r6, r3
 800ee02:	3684      	adds	r6, #132	; 0x84
 800ee04:	5d87      	ldrb	r7, [r0, r6]
 800ee06:	2f00      	cmp	r7, #0
 800ee08:	d00d      	beq.n	800ee26 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x52>
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d008      	beq.n	800ee20 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 800ee0e:	009e      	lsls	r6, r3, #2
 800ee10:	5986      	ldr	r6, [r0, r6]
 800ee12:	0031      	movs	r1, r6
 800ee14:	b296      	uxth	r6, r2
 800ee16:	00b6      	lsls	r6, r6, #2
 800ee18:	5031      	str	r1, [r6, r0]
 800ee1a:	1886      	adds	r6, r0, r2
 800ee1c:	3684      	adds	r6, #132	; 0x84
 800ee1e:	7037      	strb	r7, [r6, #0]
 800ee20:	3201      	adds	r2, #1
 800ee22:	3301      	adds	r3, #1
 800ee24:	e7e9      	b.n	800edfa <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x26>
 800ee26:	9901      	ldr	r1, [sp, #4]
 800ee28:	4299      	cmp	r1, r3
 800ee2a:	db00      	blt.n	800ee2e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5a>
 800ee2c:	3501      	adds	r5, #1
 800ee2e:	9903      	ldr	r1, [sp, #12]
 800ee30:	880e      	ldrh	r6, [r1, #0]
 800ee32:	429e      	cmp	r6, r3
 800ee34:	ddf5      	ble.n	800ee22 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4e>
 800ee36:	3401      	adds	r4, #1
 800ee38:	e7f3      	b.n	800ee22 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4e>
 800ee3a:	9b01      	ldr	r3, [sp, #4]
 800ee3c:	1b59      	subs	r1, r3, r5
 800ee3e:	4663      	mov	r3, ip
 800ee40:	8019      	strh	r1, [r3, #0]
 800ee42:	0001      	movs	r1, r0
 800ee44:	31a6      	adds	r1, #166	; 0xa6
 800ee46:	880b      	ldrh	r3, [r1, #0]
 800ee48:	3080      	adds	r0, #128	; 0x80
 800ee4a:	1b1c      	subs	r4, r3, r4
 800ee4c:	800c      	strh	r4, [r1, #0]
 800ee4e:	8803      	ldrh	r3, [r0, #0]
 800ee50:	4293      	cmp	r3, r2
 800ee52:	dd02      	ble.n	800ee5a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x86>
 800ee54:	3b01      	subs	r3, #1
 800ee56:	8003      	strh	r3, [r0, #0]
 800ee58:	e7f9      	b.n	800ee4e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x7a>
 800ee5a:	b005      	add	sp, #20
 800ee5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800ee60 <_ZN8touchgfx11Application15handleTickEventEv>:
 800ee60:	239c      	movs	r3, #156	; 0x9c
 800ee62:	b570      	push	{r4, r5, r6, lr}
 800ee64:	4e18      	ldr	r6, [pc, #96]	; (800eec8 <_ZN8touchgfx11Application15handleTickEventEv+0x68>)
 800ee66:	0004      	movs	r4, r0
 800ee68:	6830      	ldr	r0, [r6, #0]
 800ee6a:	005b      	lsls	r3, r3, #1
 800ee6c:	2800      	cmp	r0, #0
 800ee6e:	d007      	beq.n	800ee80 <_ZN8touchgfx11Application15handleTickEventEv+0x20>
 800ee70:	7a02      	ldrb	r2, [r0, #8]
 800ee72:	2a00      	cmp	r2, #0
 800ee74:	d104      	bne.n	800ee80 <_ZN8touchgfx11Application15handleTickEventEv+0x20>
 800ee76:	54e2      	strb	r2, [r4, r3]
 800ee78:	6803      	ldr	r3, [r0, #0]
 800ee7a:	689b      	ldr	r3, [r3, #8]
 800ee7c:	4798      	blx	r3
 800ee7e:	bd70      	pop	{r4, r5, r6, pc}
 800ee80:	5ce3      	ldrb	r3, [r4, r3]
 800ee82:	4d12      	ldr	r5, [pc, #72]	; (800eecc <_ZN8touchgfx11Application15handleTickEventEv+0x6c>)
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d112      	bne.n	800eeae <_ZN8touchgfx11Application15handleTickEventEv+0x4e>
 800ee88:	2800      	cmp	r0, #0
 800ee8a:	d010      	beq.n	800eeae <_ZN8touchgfx11Application15handleTickEventEv+0x4e>
 800ee8c:	7a03      	ldrb	r3, [r0, #8]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d00d      	beq.n	800eeae <_ZN8touchgfx11Application15handleTickEventEv+0x4e>
 800ee92:	6828      	ldr	r0, [r5, #0]
 800ee94:	2800      	cmp	r0, #0
 800ee96:	d002      	beq.n	800ee9e <_ZN8touchgfx11Application15handleTickEventEv+0x3e>
 800ee98:	6803      	ldr	r3, [r0, #0]
 800ee9a:	691b      	ldr	r3, [r3, #16]
 800ee9c:	4798      	blx	r3
 800ee9e:	6830      	ldr	r0, [r6, #0]
 800eea0:	6803      	ldr	r3, [r0, #0]
 800eea2:	68db      	ldr	r3, [r3, #12]
 800eea4:	4798      	blx	r3
 800eea6:	239c      	movs	r3, #156	; 0x9c
 800eea8:	2201      	movs	r2, #1
 800eeaa:	005b      	lsls	r3, r3, #1
 800eeac:	54e2      	strb	r2, [r4, r3]
 800eeae:	3404      	adds	r4, #4
 800eeb0:	0020      	movs	r0, r4
 800eeb2:	f7ff ff4b 	bl	800ed4c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 800eeb6:	0020      	movs	r0, r4
 800eeb8:	f7ff ff8c 	bl	800edd4 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 800eebc:	6828      	ldr	r0, [r5, #0]
 800eebe:	2800      	cmp	r0, #0
 800eec0:	d0dd      	beq.n	800ee7e <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 800eec2:	6803      	ldr	r3, [r0, #0]
 800eec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eec6:	e7d9      	b.n	800ee7c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800eec8:	20002708 	.word	0x20002708
 800eecc:	20002704 	.word	0x20002704

0800eed0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800eed0:	0001      	movs	r1, r0
 800eed2:	0003      	movs	r3, r0
 800eed4:	2200      	movs	r2, #0
 800eed6:	3140      	adds	r1, #64	; 0x40
 800eed8:	801a      	strh	r2, [r3, #0]
 800eeda:	805a      	strh	r2, [r3, #2]
 800eedc:	809a      	strh	r2, [r3, #4]
 800eede:	80da      	strh	r2, [r3, #6]
 800eee0:	3308      	adds	r3, #8
 800eee2:	428b      	cmp	r3, r1
 800eee4:	d1f8      	bne.n	800eed8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800eee6:	1c83      	adds	r3, r0, #2
 800eee8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800eeea:	4770      	bx	lr

0800eeec <_ZN8touchgfx11ApplicationC1Ev>:
 800eeec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeee:	0006      	movs	r6, r0
 800eef0:	0004      	movs	r4, r0
 800eef2:	4b1e      	ldr	r3, [pc, #120]	; (800ef6c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800eef4:	22a8      	movs	r2, #168	; 0xa8
 800eef6:	3308      	adds	r3, #8
 800eef8:	c608      	stmia	r6!, {r3}
 800eefa:	2100      	movs	r1, #0
 800eefc:	0030      	movs	r0, r6
 800eefe:	f005 f977 	bl	80141f0 <memset>
 800ef02:	0023      	movs	r3, r4
 800ef04:	2500      	movs	r5, #0
 800ef06:	0020      	movs	r0, r4
 800ef08:	3384      	adds	r3, #132	; 0x84
 800ef0a:	801d      	strh	r5, [r3, #0]
 800ef0c:	30ac      	adds	r0, #172	; 0xac
 800ef0e:	f7ff ffdf 	bl	800eed0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800ef12:	0020      	movs	r0, r4
 800ef14:	30ee      	adds	r0, #238	; 0xee
 800ef16:	f7ff ffdb 	bl	800eed0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800ef1a:	2398      	movs	r3, #152	; 0x98
 800ef1c:	005b      	lsls	r3, r3, #1
 800ef1e:	52e5      	strh	r5, [r4, r3]
 800ef20:	0023      	movs	r3, r4
 800ef22:	3331      	adds	r3, #49	; 0x31
 800ef24:	33ff      	adds	r3, #255	; 0xff
 800ef26:	805d      	strh	r5, [r3, #2]
 800ef28:	809d      	strh	r5, [r3, #4]
 800ef2a:	80dd      	strh	r5, [r3, #6]
 800ef2c:	239c      	movs	r3, #156	; 0x9c
 800ef2e:	005b      	lsls	r3, r3, #1
 800ef30:	54e5      	strb	r5, [r4, r3]
 800ef32:	490f      	ldr	r1, [pc, #60]	; (800ef70 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 800ef34:	480f      	ldr	r0, [pc, #60]	; (800ef74 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 800ef36:	f004 fe23 	bl	8013b80 <CRC_Lock>
 800ef3a:	4b0f      	ldr	r3, [pc, #60]	; (800ef78 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 800ef3c:	4f0f      	ldr	r7, [pc, #60]	; (800ef7c <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 800ef3e:	42a8      	cmp	r0, r5
 800ef40:	d00b      	beq.n	800ef5a <_ZN8touchgfx11ApplicationC1Ev+0x6e>
 800ef42:	801d      	strh	r5, [r3, #0]
 800ef44:	2300      	movs	r3, #0
 800ef46:	4a0e      	ldr	r2, [pc, #56]	; (800ef80 <_ZN8touchgfx11ApplicationC1Ev+0x94>)
 800ef48:	0030      	movs	r0, r6
 800ef4a:	6013      	str	r3, [r2, #0]
 800ef4c:	4a0d      	ldr	r2, [pc, #52]	; (800ef84 <_ZN8touchgfx11ApplicationC1Ev+0x98>)
 800ef4e:	603b      	str	r3, [r7, #0]
 800ef50:	6013      	str	r3, [r2, #0]
 800ef52:	f7ff ff1a 	bl	800ed8a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800ef56:	0020      	movs	r0, r4
 800ef58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef5a:	2280      	movs	r2, #128	; 0x80
 800ef5c:	2002      	movs	r0, #2
 800ef5e:	00d2      	lsls	r2, r2, #3
 800ef60:	801a      	strh	r2, [r3, #0]
 800ef62:	6038      	str	r0, [r7, #0]
 800ef64:	f001 fb06 	bl	8010574 <_ZN8touchgfx6Screen4drawEv>
 800ef68:	e7ec      	b.n	800ef44 <_ZN8touchgfx11ApplicationC1Ev+0x58>
 800ef6a:	46c0      	nop			; (mov r8, r8)
 800ef6c:	08016bd0 	.word	0x08016bd0
 800ef70:	b5e8b5cd 	.word	0xb5e8b5cd
 800ef74:	f407a5c2 	.word	0xf407a5c2
 800ef78:	20000020 	.word	0x20000020
 800ef7c:	20002704 	.word	0x20002704
 800ef80:	20002714 	.word	0x20002714
 800ef84:	20002708 	.word	0x20002708

0800ef88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800ef88:	b510      	push	{r4, lr}
 800ef8a:	1c84      	adds	r4, r0, #2
 800ef8c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800ef8e:	3a01      	subs	r2, #1
 800ef90:	b293      	uxth	r3, r2
 800ef92:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800ef94:	428b      	cmp	r3, r1
 800ef96:	d907      	bls.n	800efa8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x20>
 800ef98:	00c9      	lsls	r1, r1, #3
 800ef9a:	1844      	adds	r4, r0, r1
 800ef9c:	00db      	lsls	r3, r3, #3
 800ef9e:	18c1      	adds	r1, r0, r3
 800efa0:	2208      	movs	r2, #8
 800efa2:	0020      	movs	r0, r4
 800efa4:	f005 fa03 	bl	80143ae <memcpy>
 800efa8:	bd10      	pop	{r4, pc}
	...

0800efac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800efac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efae:	4b99      	ldr	r3, [pc, #612]	; (800f214 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x268>)
 800efb0:	b095      	sub	sp, #84	; 0x54
 800efb2:	9211      	str	r2, [sp, #68]	; 0x44
 800efb4:	2200      	movs	r2, #0
 800efb6:	5e9a      	ldrsh	r2, [r3, r2]
 800efb8:	4b97      	ldr	r3, [pc, #604]	; (800f218 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>)
 800efba:	9000      	str	r0, [sp, #0]
 800efbc:	9110      	str	r1, [sp, #64]	; 0x40
 800efbe:	a810      	add	r0, sp, #64	; 0x40
 800efc0:	2100      	movs	r1, #0
 800efc2:	5e59      	ldrsh	r1, [r3, r1]
 800efc4:	f7ff fdf7 	bl	800ebb6 <_ZN8touchgfx4Rect10restrictToEss>
 800efc8:	a810      	add	r0, sp, #64	; 0x40
 800efca:	f7fd fb29 	bl	800c620 <_ZNK8touchgfx4Rect7isEmptyEv>
 800efce:	2800      	cmp	r0, #0
 800efd0:	d175      	bne.n	800f0be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 800efd2:	9d00      	ldr	r5, [sp, #0]
 800efd4:	35ec      	adds	r5, #236	; 0xec
 800efd6:	882c      	ldrh	r4, [r5, #0]
 800efd8:	9b00      	ldr	r3, [sp, #0]
 800efda:	33ac      	adds	r3, #172	; 0xac
 800efdc:	9301      	str	r3, [sp, #4]
 800efde:	2c00      	cmp	r4, #0
 800efe0:	d00e      	beq.n	800f000 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54>
 800efe2:	9900      	ldr	r1, [sp, #0]
 800efe4:	00e3      	lsls	r3, r4, #3
 800efe6:	31a4      	adds	r1, #164	; 0xa4
 800efe8:	18c9      	adds	r1, r1, r3
 800efea:	a810      	add	r0, sp, #64	; 0x40
 800efec:	f7ff fe34 	bl	800ec58 <_ZNK8touchgfx4Rect8includesERKS0_>
 800eff0:	3c01      	subs	r4, #1
 800eff2:	2800      	cmp	r0, #0
 800eff4:	d0f0      	beq.n	800efd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800eff6:	b2a1      	uxth	r1, r4
 800eff8:	9801      	ldr	r0, [sp, #4]
 800effa:	f7ff ffc5 	bl	800ef88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800effe:	e7eb      	b.n	800efd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800f000:	882b      	ldrh	r3, [r5, #0]
 800f002:	9304      	str	r3, [sp, #16]
 800f004:	3b01      	subs	r3, #1
 800f006:	9302      	str	r3, [sp, #8]
 800f008:	9b04      	ldr	r3, [sp, #16]
 800f00a:	00db      	lsls	r3, r3, #3
 800f00c:	001d      	movs	r5, r3
 800f00e:	9309      	str	r3, [sp, #36]	; 0x24
 800f010:	9b00      	ldr	r3, [sp, #0]
 800f012:	35a4      	adds	r5, #164	; 0xa4
 800f014:	195d      	adds	r5, r3, r5
 800f016:	2600      	movs	r6, #0
 800f018:	002c      	movs	r4, r5
 800f01a:	9b04      	ldr	r3, [sp, #16]
 800f01c:	9603      	str	r6, [sp, #12]
 800f01e:	9306      	str	r3, [sp, #24]
 800f020:	9b06      	ldr	r3, [sp, #24]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d100      	bne.n	800f028 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7c>
 800f026:	e07f      	b.n	800f128 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x17c>
 800f028:	a910      	add	r1, sp, #64	; 0x40
 800f02a:	0020      	movs	r0, r4
 800f02c:	f7ff fda0 	bl	800eb70 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800f030:	2800      	cmp	r0, #0
 800f032:	d032      	beq.n	800f09a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 800f034:	ab10      	add	r3, sp, #64	; 0x40
 800f036:	2200      	movs	r2, #0
 800f038:	5e9b      	ldrsh	r3, [r3, r2]
 800f03a:	9305      	str	r3, [sp, #20]
 800f03c:	2300      	movs	r3, #0
 800f03e:	5ee1      	ldrsh	r1, [r4, r3]
 800f040:	ab10      	add	r3, sp, #64	; 0x40
 800f042:	2702      	movs	r7, #2
 800f044:	5fdf      	ldrsh	r7, [r3, r7]
 800f046:	2202      	movs	r2, #2
 800f048:	5ea3      	ldrsh	r3, [r4, r2]
 800f04a:	469c      	mov	ip, r3
 800f04c:	9b05      	ldr	r3, [sp, #20]
 800f04e:	428b      	cmp	r3, r1
 800f050:	db37      	blt.n	800f0c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x116>
 800f052:	ab10      	add	r3, sp, #64	; 0x40
 800f054:	889a      	ldrh	r2, [r3, #4]
 800f056:	9b05      	ldr	r3, [sp, #20]
 800f058:	18d2      	adds	r2, r2, r3
 800f05a:	88a3      	ldrh	r3, [r4, #4]
 800f05c:	b212      	sxth	r2, r2
 800f05e:	185b      	adds	r3, r3, r1
 800f060:	b21b      	sxth	r3, r3
 800f062:	429a      	cmp	r2, r3
 800f064:	dc2d      	bgt.n	800f0c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x116>
 800f066:	ab10      	add	r3, sp, #64	; 0x40
 800f068:	88db      	ldrh	r3, [r3, #6]
 800f06a:	b2ba      	uxth	r2, r7
 800f06c:	9305      	str	r3, [sp, #20]
 800f06e:	4663      	mov	r3, ip
 800f070:	b29b      	uxth	r3, r3
 800f072:	9307      	str	r3, [sp, #28]
 800f074:	9907      	ldr	r1, [sp, #28]
 800f076:	88e3      	ldrh	r3, [r4, #6]
 800f078:	18cb      	adds	r3, r1, r3
 800f07a:	b29b      	uxth	r3, r3
 800f07c:	b219      	sxth	r1, r3
 800f07e:	9108      	str	r1, [sp, #32]
 800f080:	4567      	cmp	r7, ip
 800f082:	db0f      	blt.n	800f0a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf8>
 800f084:	1a9b      	subs	r3, r3, r2
 800f086:	9a05      	ldr	r2, [sp, #20]
 800f088:	1ad1      	subs	r1, r2, r3
 800f08a:	b209      	sxth	r1, r1
 800f08c:	ab10      	add	r3, sp, #64	; 0x40
 800f08e:	80d9      	strh	r1, [r3, #6]
 800f090:	2900      	cmp	r1, #0
 800f092:	dd14      	ble.n	800f0be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 800f094:	9a08      	ldr	r2, [sp, #32]
 800f096:	805a      	strh	r2, [r3, #2]
 800f098:	0006      	movs	r6, r0
 800f09a:	9b06      	ldr	r3, [sp, #24]
 800f09c:	3c08      	subs	r4, #8
 800f09e:	3b01      	subs	r3, #1
 800f0a0:	9306      	str	r3, [sp, #24]
 800f0a2:	e7bd      	b.n	800f020 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 800f0a4:	9b05      	ldr	r3, [sp, #20]
 800f0a6:	1899      	adds	r1, r3, r2
 800f0a8:	9b08      	ldr	r3, [sp, #32]
 800f0aa:	b209      	sxth	r1, r1
 800f0ac:	4299      	cmp	r1, r3
 800f0ae:	dc39      	bgt.n	800f124 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x178>
 800f0b0:	9b07      	ldr	r3, [sp, #28]
 800f0b2:	1a9a      	subs	r2, r3, r2
 800f0b4:	b212      	sxth	r2, r2
 800f0b6:	ab10      	add	r3, sp, #64	; 0x40
 800f0b8:	80da      	strh	r2, [r3, #6]
 800f0ba:	2a00      	cmp	r2, #0
 800f0bc:	dcec      	bgt.n	800f098 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 800f0be:	b015      	add	sp, #84	; 0x54
 800f0c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0c2:	4567      	cmp	r7, ip
 800f0c4:	db2e      	blt.n	800f124 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x178>
 800f0c6:	ab10      	add	r3, sp, #64	; 0x40
 800f0c8:	88e2      	ldrh	r2, [r4, #6]
 800f0ca:	88db      	ldrh	r3, [r3, #6]
 800f0cc:	4462      	add	r2, ip
 800f0ce:	19df      	adds	r7, r3, r7
 800f0d0:	b212      	sxth	r2, r2
 800f0d2:	b23f      	sxth	r7, r7
 800f0d4:	42ba      	cmp	r2, r7
 800f0d6:	db25      	blt.n	800f124 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x178>
 800f0d8:	ab10      	add	r3, sp, #64	; 0x40
 800f0da:	889b      	ldrh	r3, [r3, #4]
 800f0dc:	b28a      	uxth	r2, r1
 800f0de:	9307      	str	r3, [sp, #28]
 800f0e0:	466b      	mov	r3, sp
 800f0e2:	8a9f      	ldrh	r7, [r3, #20]
 800f0e4:	b28b      	uxth	r3, r1
 800f0e6:	9308      	str	r3, [sp, #32]
 800f0e8:	88a3      	ldrh	r3, [r4, #4]
 800f0ea:	18d3      	adds	r3, r2, r3
 800f0ec:	b29b      	uxth	r3, r3
 800f0ee:	b21a      	sxth	r2, r3
 800f0f0:	4694      	mov	ip, r2
 800f0f2:	9a05      	ldr	r2, [sp, #20]
 800f0f4:	428a      	cmp	r2, r1
 800f0f6:	db0a      	blt.n	800f10e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x162>
 800f0f8:	9a07      	ldr	r2, [sp, #28]
 800f0fa:	1bdb      	subs	r3, r3, r7
 800f0fc:	1ad1      	subs	r1, r2, r3
 800f0fe:	b209      	sxth	r1, r1
 800f100:	ab10      	add	r3, sp, #64	; 0x40
 800f102:	8099      	strh	r1, [r3, #4]
 800f104:	2900      	cmp	r1, #0
 800f106:	ddda      	ble.n	800f0be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 800f108:	4662      	mov	r2, ip
 800f10a:	801a      	strh	r2, [r3, #0]
 800f10c:	e7c4      	b.n	800f098 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 800f10e:	9b07      	ldr	r3, [sp, #28]
 800f110:	19d9      	adds	r1, r3, r7
 800f112:	b209      	sxth	r1, r1
 800f114:	4561      	cmp	r1, ip
 800f116:	dc05      	bgt.n	800f124 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x178>
 800f118:	9b08      	ldr	r3, [sp, #32]
 800f11a:	1bda      	subs	r2, r3, r7
 800f11c:	b212      	sxth	r2, r2
 800f11e:	ab10      	add	r3, sp, #64	; 0x40
 800f120:	809a      	strh	r2, [r3, #4]
 800f122:	e7ca      	b.n	800f0ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10e>
 800f124:	9003      	str	r0, [sp, #12]
 800f126:	e7b8      	b.n	800f09a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 800f128:	2e00      	cmp	r6, #0
 800f12a:	d000      	beq.n	800f12e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x182>
 800f12c:	e773      	b.n	800f016 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a>
 800f12e:	9b03      	ldr	r3, [sp, #12]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d100      	bne.n	800f136 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x18a>
 800f134:	e20c      	b.n	800f550 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a4>
 800f136:	ab10      	add	r3, sp, #64	; 0x40
 800f138:	2100      	movs	r1, #0
 800f13a:	5e5a      	ldrsh	r2, [r3, r1]
 800f13c:	9203      	str	r2, [sp, #12]
 800f13e:	466a      	mov	r2, sp
 800f140:	8992      	ldrh	r2, [r2, #12]
 800f142:	920a      	str	r2, [sp, #40]	; 0x28
 800f144:	889a      	ldrh	r2, [r3, #4]
 800f146:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f148:	188a      	adds	r2, r1, r2
 800f14a:	b292      	uxth	r2, r2
 800f14c:	9208      	str	r2, [sp, #32]
 800f14e:	466a      	mov	r2, sp
 800f150:	2720      	movs	r7, #32
 800f152:	5fd7      	ldrsh	r7, [r2, r7]
 800f154:	2102      	movs	r1, #2
 800f156:	5e5a      	ldrsh	r2, [r3, r1]
 800f158:	9205      	str	r2, [sp, #20]
 800f15a:	466a      	mov	r2, sp
 800f15c:	8a92      	ldrh	r2, [r2, #20]
 800f15e:	9207      	str	r2, [sp, #28]
 800f160:	88da      	ldrh	r2, [r3, #6]
 800f162:	9907      	ldr	r1, [sp, #28]
 800f164:	930c      	str	r3, [sp, #48]	; 0x30
 800f166:	188a      	adds	r2, r1, r2
 800f168:	b292      	uxth	r2, r2
 800f16a:	920b      	str	r2, [sp, #44]	; 0x2c
 800f16c:	466a      	mov	r2, sp
 800f16e:	242c      	movs	r4, #44	; 0x2c
 800f170:	5f14      	ldrsh	r4, [r2, r4]
 800f172:	9a04      	ldr	r2, [sp, #16]
 800f174:	9206      	str	r2, [sp, #24]
 800f176:	9b06      	ldr	r3, [sp, #24]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d04f      	beq.n	800f21c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x270>
 800f17c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f17e:	0028      	movs	r0, r5
 800f180:	f7ff fcf6 	bl	800eb70 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800f184:	2800      	cmp	r0, #0
 800f186:	d017      	beq.n	800f1b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x20c>
 800f188:	2300      	movs	r3, #0
 800f18a:	5ee9      	ldrsh	r1, [r5, r3]
 800f18c:	2202      	movs	r2, #2
 800f18e:	5eab      	ldrsh	r3, [r5, r2]
 800f190:	469c      	mov	ip, r3
 800f192:	9b03      	ldr	r3, [sp, #12]
 800f194:	428b      	cmp	r3, r1
 800f196:	dc1e      	bgt.n	800f1d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x22a>
 800f198:	88ab      	ldrh	r3, [r5, #4]
 800f19a:	185b      	adds	r3, r3, r1
 800f19c:	b21b      	sxth	r3, r3
 800f19e:	429f      	cmp	r7, r3
 800f1a0:	db19      	blt.n	800f1d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x22a>
 800f1a2:	4663      	mov	r3, ip
 800f1a4:	9905      	ldr	r1, [sp, #20]
 800f1a6:	b29a      	uxth	r2, r3
 800f1a8:	88eb      	ldrh	r3, [r5, #6]
 800f1aa:	4561      	cmp	r1, ip
 800f1ac:	dc0b      	bgt.n	800f1c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x21a>
 800f1ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f1b0:	806c      	strh	r4, [r5, #2]
 800f1b2:	1a8a      	subs	r2, r1, r2
 800f1b4:	1a9b      	subs	r3, r3, r2
 800f1b6:	80eb      	strh	r3, [r5, #6]
 800f1b8:	0030      	movs	r0, r6
 800f1ba:	9b06      	ldr	r3, [sp, #24]
 800f1bc:	3d08      	subs	r5, #8
 800f1be:	3b01      	subs	r3, #1
 800f1c0:	9306      	str	r3, [sp, #24]
 800f1c2:	0006      	movs	r6, r0
 800f1c4:	e7d7      	b.n	800f176 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1ca>
 800f1c6:	18d3      	adds	r3, r2, r3
 800f1c8:	b21b      	sxth	r3, r3
 800f1ca:	42a3      	cmp	r3, r4
 800f1cc:	dcf5      	bgt.n	800f1ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x20e>
 800f1ce:	9b07      	ldr	r3, [sp, #28]
 800f1d0:	1a9a      	subs	r2, r3, r2
 800f1d2:	80ea      	strh	r2, [r5, #6]
 800f1d4:	e7f0      	b.n	800f1b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x20c>
 800f1d6:	9b05      	ldr	r3, [sp, #20]
 800f1d8:	4563      	cmp	r3, ip
 800f1da:	dcee      	bgt.n	800f1ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x20e>
 800f1dc:	88eb      	ldrh	r3, [r5, #6]
 800f1de:	4463      	add	r3, ip
 800f1e0:	b21b      	sxth	r3, r3
 800f1e2:	429c      	cmp	r4, r3
 800f1e4:	dbe9      	blt.n	800f1ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x20e>
 800f1e6:	88ab      	ldrh	r3, [r5, #4]
 800f1e8:	b28a      	uxth	r2, r1
 800f1ea:	469c      	mov	ip, r3
 800f1ec:	9b03      	ldr	r3, [sp, #12]
 800f1ee:	428b      	cmp	r3, r1
 800f1f0:	dc06      	bgt.n	800f200 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x254>
 800f1f2:	9b08      	ldr	r3, [sp, #32]
 800f1f4:	802f      	strh	r7, [r5, #0]
 800f1f6:	1a9a      	subs	r2, r3, r2
 800f1f8:	4663      	mov	r3, ip
 800f1fa:	1a9b      	subs	r3, r3, r2
 800f1fc:	80ab      	strh	r3, [r5, #4]
 800f1fe:	e7db      	b.n	800f1b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x20c>
 800f200:	4663      	mov	r3, ip
 800f202:	18d3      	adds	r3, r2, r3
 800f204:	b21b      	sxth	r3, r3
 800f206:	429f      	cmp	r7, r3
 800f208:	dbd7      	blt.n	800f1ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x20e>
 800f20a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f20c:	1a9a      	subs	r2, r3, r2
 800f20e:	80aa      	strh	r2, [r5, #4]
 800f210:	e7d2      	b.n	800f1b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x20c>
 800f212:	46c0      	nop			; (mov r8, r8)
 800f214:	200026be 	.word	0x200026be
 800f218:	200026bc 	.word	0x200026bc
 800f21c:	2e00      	cmp	r6, #0
 800f21e:	d100      	bne.n	800f222 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x276>
 800f220:	e196      	b.n	800f550 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a4>
 800f222:	9b02      	ldr	r3, [sp, #8]
 800f224:	9a01      	ldr	r2, [sp, #4]
 800f226:	00db      	lsls	r3, r3, #3
 800f228:	18d3      	adds	r3, r2, r3
 800f22a:	9303      	str	r3, [sp, #12]
 800f22c:	9b04      	ldr	r3, [sp, #16]
 800f22e:	00db      	lsls	r3, r3, #3
 800f230:	425b      	negs	r3, r3
 800f232:	930f      	str	r3, [sp, #60]	; 0x3c
 800f234:	9b02      	ldr	r3, [sp, #8]
 800f236:	3301      	adds	r3, #1
 800f238:	d100      	bne.n	800f23c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x290>
 800f23a:	e189      	b.n	800f550 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a4>
 800f23c:	9903      	ldr	r1, [sp, #12]
 800f23e:	a810      	add	r0, sp, #64	; 0x40
 800f240:	f7ff fd0a 	bl	800ec58 <_ZNK8touchgfx4Rect8includesERKS0_>
 800f244:	2800      	cmp	r0, #0
 800f246:	d004      	beq.n	800f252 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2a6>
 800f248:	466b      	mov	r3, sp
 800f24a:	9801      	ldr	r0, [sp, #4]
 800f24c:	8919      	ldrh	r1, [r3, #8]
 800f24e:	f7ff fe9b 	bl	800ef88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800f252:	a910      	add	r1, sp, #64	; 0x40
 800f254:	9803      	ldr	r0, [sp, #12]
 800f256:	f7ff fc8b 	bl	800eb70 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800f25a:	2800      	cmp	r0, #0
 800f25c:	d100      	bne.n	800f260 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2b4>
 800f25e:	e0b4      	b.n	800f3ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x41e>
 800f260:	ab10      	add	r3, sp, #64	; 0x40
 800f262:	2200      	movs	r2, #0
 800f264:	5e9b      	ldrsh	r3, [r3, r2]
 800f266:	9a03      	ldr	r2, [sp, #12]
 800f268:	9306      	str	r3, [sp, #24]
 800f26a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f26c:	189e      	adds	r6, r3, r2
 800f26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f270:	5ef3      	ldrsh	r3, [r6, r3]
 800f272:	9308      	str	r3, [sp, #32]
 800f274:	ab10      	add	r3, sp, #64	; 0x40
 800f276:	2402      	movs	r4, #2
 800f278:	5f1c      	ldrsh	r4, [r3, r4]
 800f27a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f27c:	18f5      	adds	r5, r6, r3
 800f27e:	2202      	movs	r2, #2
 800f280:	5eab      	ldrsh	r3, [r5, r2]
 800f282:	2104      	movs	r1, #4
 800f284:	5e6a      	ldrsh	r2, [r5, r1]
 800f286:	469c      	mov	ip, r3
 800f288:	466b      	mov	r3, sp
 800f28a:	8c1b      	ldrh	r3, [r3, #32]
 800f28c:	920e      	str	r2, [sp, #56]	; 0x38
 800f28e:	1898      	adds	r0, r3, r2
 800f290:	466a      	mov	r2, sp
 800f292:	8b17      	ldrh	r7, [r2, #24]
 800f294:	aa10      	add	r2, sp, #64	; 0x40
 800f296:	8892      	ldrh	r2, [r2, #4]
 800f298:	b280      	uxth	r0, r0
 800f29a:	18b9      	adds	r1, r7, r2
 800f29c:	9204      	str	r2, [sp, #16]
 800f29e:	b28a      	uxth	r2, r1
 800f2a0:	920a      	str	r2, [sp, #40]	; 0x28
 800f2a2:	b212      	sxth	r2, r2
 800f2a4:	9205      	str	r2, [sp, #20]
 800f2a6:	9a00      	ldr	r2, [sp, #0]
 800f2a8:	32ec      	adds	r2, #236	; 0xec
 800f2aa:	8812      	ldrh	r2, [r2, #0]
 800f2ac:	9207      	str	r2, [sp, #28]
 800f2ae:	9a06      	ldr	r2, [sp, #24]
 800f2b0:	0011      	movs	r1, r2
 800f2b2:	9a08      	ldr	r2, [sp, #32]
 800f2b4:	4291      	cmp	r1, r2
 800f2b6:	dc00      	bgt.n	800f2ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 800f2b8:	e0b0      	b.n	800f41c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x470>
 800f2ba:	4669      	mov	r1, sp
 800f2bc:	1aff      	subs	r7, r7, r3
 800f2be:	b2bf      	uxth	r7, r7
 800f2c0:	970b      	str	r7, [sp, #44]	; 0x2c
 800f2c2:	272c      	movs	r7, #44	; 0x2c
 800f2c4:	5fcf      	ldrsh	r7, [r1, r7]
 800f2c6:	b202      	sxth	r2, r0
 800f2c8:	9706      	str	r7, [sp, #24]
 800f2ca:	4564      	cmp	r4, ip
 800f2cc:	dd29      	ble.n	800f322 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x376>
 800f2ce:	4661      	mov	r1, ip
 800f2d0:	b2a3      	uxth	r3, r4
 800f2d2:	b28c      	uxth	r4, r1
 800f2d4:	1b18      	subs	r0, r3, r4
 800f2d6:	b280      	uxth	r0, r0
 800f2d8:	b201      	sxth	r1, r0
 800f2da:	468c      	mov	ip, r1
 800f2dc:	a910      	add	r1, sp, #64	; 0x40
 800f2de:	88cd      	ldrh	r5, [r1, #6]
 800f2e0:	9902      	ldr	r1, [sp, #8]
 800f2e2:	9e00      	ldr	r6, [sp, #0]
 800f2e4:	00c9      	lsls	r1, r1, #3
 800f2e6:	1871      	adds	r1, r6, r1
 800f2e8:	9e05      	ldr	r6, [sp, #20]
 800f2ea:	195b      	adds	r3, r3, r5
 800f2ec:	1ab2      	subs	r2, r6, r2
 800f2ee:	4666      	mov	r6, ip
 800f2f0:	4372      	muls	r2, r6
 800f2f2:	000e      	movs	r6, r1
 800f2f4:	36b2      	adds	r6, #178	; 0xb2
 800f2f6:	8837      	ldrh	r7, [r6, #0]
 800f2f8:	b21b      	sxth	r3, r3
 800f2fa:	19e4      	adds	r4, r4, r7
 800f2fc:	b224      	sxth	r4, r4
 800f2fe:	1b1c      	subs	r4, r3, r4
 800f300:	9b06      	ldr	r3, [sp, #24]
 800f302:	435c      	muls	r4, r3
 800f304:	4663      	mov	r3, ip
 800f306:	42a2      	cmp	r2, r4
 800f308:	da2c      	bge.n	800f364 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b8>
 800f30a:	000b      	movs	r3, r1
 800f30c:	9a06      	ldr	r2, [sp, #24]
 800f30e:	33b0      	adds	r3, #176	; 0xb0
 800f310:	801a      	strh	r2, [r3, #0]
 800f312:	1940      	adds	r0, r0, r5
 800f314:	ab10      	add	r3, sp, #64	; 0x40
 800f316:	31ae      	adds	r1, #174	; 0xae
 800f318:	80d8      	strh	r0, [r3, #6]
 800f31a:	880b      	ldrh	r3, [r1, #0]
 800f31c:	aa10      	add	r2, sp, #64	; 0x40
 800f31e:	8053      	strh	r3, [r2, #2]
 800f320:	e657      	b.n	800efd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26>
 800f322:	9f05      	ldr	r7, [sp, #20]
 800f324:	42ba      	cmp	r2, r7
 800f326:	da31      	bge.n	800f38c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 800f328:	9b02      	ldr	r3, [sp, #8]
 800f32a:	4667      	mov	r7, ip
 800f32c:	00d9      	lsls	r1, r3, #3
 800f32e:	9b00      	ldr	r3, [sp, #0]
 800f330:	1859      	adds	r1, r3, r1
 800f332:	000e      	movs	r6, r1
 800f334:	ab10      	add	r3, sp, #64	; 0x40
 800f336:	88dd      	ldrh	r5, [r3, #6]
 800f338:	36b2      	adds	r6, #178	; 0xb2
 800f33a:	1928      	adds	r0, r5, r4
 800f33c:	b280      	uxth	r0, r0
 800f33e:	b203      	sxth	r3, r0
 800f340:	9301      	str	r3, [sp, #4]
 800f342:	8833      	ldrh	r3, [r6, #0]
 800f344:	1b3c      	subs	r4, r7, r4
 800f346:	9f06      	ldr	r7, [sp, #24]
 800f348:	4463      	add	r3, ip
 800f34a:	1a18      	subs	r0, r3, r0
 800f34c:	437c      	muls	r4, r7
 800f34e:	9f05      	ldr	r7, [sp, #20]
 800f350:	b280      	uxth	r0, r0
 800f352:	b203      	sxth	r3, r0
 800f354:	1aba      	subs	r2, r7, r2
 800f356:	435a      	muls	r2, r3
 800f358:	4294      	cmp	r4, r2
 800f35a:	dc10      	bgt.n	800f37e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d2>
 800f35c:	000a      	movs	r2, r1
 800f35e:	9801      	ldr	r0, [sp, #4]
 800f360:	32ae      	adds	r2, #174	; 0xae
 800f362:	8010      	strh	r0, [r2, #0]
 800f364:	8033      	strh	r3, [r6, #0]
 800f366:	31ac      	adds	r1, #172	; 0xac
 800f368:	880b      	ldrh	r3, [r1, #0]
 800f36a:	aa10      	add	r2, sp, #64	; 0x40
 800f36c:	8013      	strh	r3, [r2, #0]
 800f36e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f370:	9b04      	ldr	r3, [sp, #16]
 800f372:	4694      	mov	ip, r2
 800f374:	4463      	add	r3, ip
 800f376:	001f      	movs	r7, r3
 800f378:	ab10      	add	r3, sp, #64	; 0x40
 800f37a:	809f      	strh	r7, [r3, #4]
 800f37c:	e629      	b.n	800efd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26>
 800f37e:	9b06      	ldr	r3, [sp, #24]
 800f380:	31b0      	adds	r1, #176	; 0xb0
 800f382:	800b      	strh	r3, [r1, #0]
 800f384:	1940      	adds	r0, r0, r5
 800f386:	ab10      	add	r3, sp, #64	; 0x40
 800f388:	80d8      	strh	r0, [r3, #6]
 800f38a:	e622      	b.n	800efd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26>
 800f38c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f38e:	9907      	ldr	r1, [sp, #28]
 800f390:	1a80      	subs	r0, r0, r2
 800f392:	b280      	uxth	r0, r0
 800f394:	b202      	sxth	r2, r0
 800f396:	2906      	cmp	r1, #6
 800f398:	d81e      	bhi.n	800f3d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x42c>
 800f39a:	9b03      	ldr	r3, [sp, #12]
 800f39c:	9c05      	ldr	r4, [sp, #20]
 800f39e:	2100      	movs	r1, #0
 800f3a0:	5e59      	ldrsh	r1, [r3, r1]
 800f3a2:	2006      	movs	r0, #6
 800f3a4:	5e2b      	ldrsh	r3, [r5, r0]
 800f3a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f3a8:	5234      	strh	r4, [r6, r0]
 800f3aa:	80aa      	strh	r2, [r5, #4]
 800f3ac:	9a07      	ldr	r2, [sp, #28]
 800f3ae:	1c50      	adds	r0, r2, #1
 800f3b0:	9a00      	ldr	r2, [sp, #0]
 800f3b2:	32ae      	adds	r2, #174	; 0xae
 800f3b4:	87d0      	strh	r0, [r2, #62]	; 0x3e
 800f3b6:	9a07      	ldr	r2, [sp, #28]
 800f3b8:	9801      	ldr	r0, [sp, #4]
 800f3ba:	00d2      	lsls	r2, r2, #3
 800f3bc:	1882      	adds	r2, r0, r2
 800f3be:	8011      	strh	r1, [r2, #0]
 800f3c0:	4661      	mov	r1, ip
 800f3c2:	8051      	strh	r1, [r2, #2]
 800f3c4:	9906      	ldr	r1, [sp, #24]
 800f3c6:	80d3      	strh	r3, [r2, #6]
 800f3c8:	8091      	strh	r1, [r2, #4]
 800f3ca:	9b02      	ldr	r3, [sp, #8]
 800f3cc:	3b01      	subs	r3, #1
 800f3ce:	9302      	str	r3, [sp, #8]
 800f3d0:	9b03      	ldr	r3, [sp, #12]
 800f3d2:	3b08      	subs	r3, #8
 800f3d4:	9303      	str	r3, [sp, #12]
 800f3d6:	e72d      	b.n	800f234 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x288>
 800f3d8:	9902      	ldr	r1, [sp, #8]
 800f3da:	9c06      	ldr	r4, [sp, #24]
 800f3dc:	00c9      	lsls	r1, r1, #3
 800f3de:	42a2      	cmp	r2, r4
 800f3e0:	db12      	blt.n	800f408 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45c>
 800f3e2:	9c08      	ldr	r4, [sp, #32]
 800f3e4:	a810      	add	r0, sp, #64	; 0x40
 800f3e6:	8004      	strh	r4, [r0, #0]
 800f3e8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800f3ea:	9804      	ldr	r0, [sp, #16]
 800f3ec:	46a4      	mov	ip, r4
 800f3ee:	4460      	add	r0, ip
 800f3f0:	b287      	uxth	r7, r0
 800f3f2:	a810      	add	r0, sp, #64	; 0x40
 800f3f4:	8087      	strh	r7, [r0, #4]
 800f3f6:	9800      	ldr	r0, [sp, #0]
 800f3f8:	18fb      	adds	r3, r7, r3
 800f3fa:	1841      	adds	r1, r0, r1
 800f3fc:	0008      	movs	r0, r1
 800f3fe:	31b0      	adds	r1, #176	; 0xb0
 800f400:	30ac      	adds	r0, #172	; 0xac
 800f402:	8003      	strh	r3, [r0, #0]
 800f404:	800a      	strh	r2, [r1, #0]
 800f406:	e5e4      	b.n	800efd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26>
 800f408:	9b00      	ldr	r3, [sp, #0]
 800f40a:	33ac      	adds	r3, #172	; 0xac
 800f40c:	1859      	adds	r1, r3, r1
 800f40e:	9b06      	ldr	r3, [sp, #24]
 800f410:	808b      	strh	r3, [r1, #4]
 800f412:	9b04      	ldr	r3, [sp, #16]
 800f414:	18c0      	adds	r0, r0, r3
 800f416:	ab10      	add	r3, sp, #64	; 0x40
 800f418:	8098      	strh	r0, [r3, #4]
 800f41a:	e5da      	b.n	800efd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26>
 800f41c:	4662      	mov	r2, ip
 800f41e:	b292      	uxth	r2, r2
 800f420:	920c      	str	r2, [sp, #48]	; 0x30
 800f422:	aa10      	add	r2, sp, #64	; 0x40
 800f424:	88d7      	ldrh	r7, [r2, #6]
 800f426:	b2a3      	uxth	r3, r4
 800f428:	19de      	adds	r6, r3, r7
 800f42a:	b2b6      	uxth	r6, r6
 800f42c:	b232      	sxth	r2, r6
 800f42e:	920d      	str	r2, [sp, #52]	; 0x34
 800f430:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f432:	88ea      	ldrh	r2, [r5, #6]
 800f434:	188a      	adds	r2, r1, r2
 800f436:	b292      	uxth	r2, r2
 800f438:	4564      	cmp	r4, ip
 800f43a:	da26      	bge.n	800f48a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4de>
 800f43c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f43e:	1b92      	subs	r2, r2, r6
 800f440:	1ac0      	subs	r0, r0, r3
 800f442:	4663      	mov	r3, ip
 800f444:	9906      	ldr	r1, [sp, #24]
 800f446:	1b1c      	subs	r4, r3, r4
 800f448:	9b08      	ldr	r3, [sp, #32]
 800f44a:	b280      	uxth	r0, r0
 800f44c:	b292      	uxth	r2, r2
 800f44e:	1a5b      	subs	r3, r3, r1
 800f450:	b205      	sxth	r5, r0
 800f452:	b216      	sxth	r6, r2
 800f454:	436c      	muls	r4, r5
 800f456:	4373      	muls	r3, r6
 800f458:	9902      	ldr	r1, [sp, #8]
 800f45a:	00c9      	lsls	r1, r1, #3
 800f45c:	429c      	cmp	r4, r3
 800f45e:	dc08      	bgt.n	800f472 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c6>
 800f460:	9b00      	ldr	r3, [sp, #0]
 800f462:	1859      	adds	r1, r3, r1
 800f464:	000b      	movs	r3, r1
 800f466:	33b2      	adds	r3, #178	; 0xb2
 800f468:	801e      	strh	r6, [r3, #0]
 800f46a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f46c:	31ae      	adds	r1, #174	; 0xae
 800f46e:	800b      	strh	r3, [r1, #0]
 800f470:	e7cf      	b.n	800f412 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 800f472:	9b00      	ldr	r3, [sp, #0]
 800f474:	1859      	adds	r1, r3, r1
 800f476:	000b      	movs	r3, r1
 800f478:	33b0      	adds	r3, #176	; 0xb0
 800f47a:	801d      	strh	r5, [r3, #0]
 800f47c:	9b05      	ldr	r3, [sp, #20]
 800f47e:	31ac      	adds	r1, #172	; 0xac
 800f480:	800b      	strh	r3, [r1, #0]
 800f482:	19d2      	adds	r2, r2, r7
 800f484:	ab10      	add	r3, sp, #64	; 0x40
 800f486:	80da      	strh	r2, [r3, #6]
 800f488:	e5a3      	b.n	800efd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26>
 800f48a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f48c:	1a5b      	subs	r3, r3, r1
 800f48e:	b29b      	uxth	r3, r3
 800f490:	b201      	sxth	r1, r0
 800f492:	930b      	str	r3, [sp, #44]	; 0x2c
 800f494:	b21c      	sxth	r4, r3
 800f496:	000b      	movs	r3, r1
 800f498:	9905      	ldr	r1, [sp, #20]
 800f49a:	428b      	cmp	r3, r1
 800f49c:	dd23      	ble.n	800f4e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 800f49e:	9908      	ldr	r1, [sp, #32]
 800f4a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4a2:	9e06      	ldr	r6, [sp, #24]
 800f4a4:	1ac0      	subs	r0, r0, r3
 800f4a6:	1b8e      	subs	r6, r1, r6
 800f4a8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f4aa:	b280      	uxth	r0, r0
 800f4ac:	b212      	sxth	r2, r2
 800f4ae:	1a8a      	subs	r2, r1, r2
 800f4b0:	b205      	sxth	r5, r0
 800f4b2:	4366      	muls	r6, r4
 800f4b4:	436a      	muls	r2, r5
 800f4b6:	9902      	ldr	r1, [sp, #8]
 800f4b8:	00c9      	lsls	r1, r1, #3
 800f4ba:	4296      	cmp	r6, r2
 800f4bc:	db04      	blt.n	800f4c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51c>
 800f4be:	9b00      	ldr	r3, [sp, #0]
 800f4c0:	33ac      	adds	r3, #172	; 0xac
 800f4c2:	1859      	adds	r1, r3, r1
 800f4c4:	80cc      	strh	r4, [r1, #6]
 800f4c6:	e7a4      	b.n	800f412 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 800f4c8:	9a00      	ldr	r2, [sp, #0]
 800f4ca:	9805      	ldr	r0, [sp, #20]
 800f4cc:	1851      	adds	r1, r2, r1
 800f4ce:	000a      	movs	r2, r1
 800f4d0:	32ac      	adds	r2, #172	; 0xac
 800f4d2:	31ae      	adds	r1, #174	; 0xae
 800f4d4:	8010      	strh	r0, [r2, #0]
 800f4d6:	8095      	strh	r5, [r2, #4]
 800f4d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4da:	880a      	ldrh	r2, [r1, #0]
 800f4dc:	19db      	adds	r3, r3, r7
 800f4de:	a910      	add	r1, sp, #64	; 0x40
 800f4e0:	804a      	strh	r2, [r1, #2]
 800f4e2:	80cb      	strh	r3, [r1, #6]
 800f4e4:	e575      	b.n	800efd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26>
 800f4e6:	1b92      	subs	r2, r2, r6
 800f4e8:	9907      	ldr	r1, [sp, #28]
 800f4ea:	b292      	uxth	r2, r2
 800f4ec:	b210      	sxth	r0, r2
 800f4ee:	2906      	cmp	r1, #6
 800f4f0:	d814      	bhi.n	800f51c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x570>
 800f4f2:	9b03      	ldr	r3, [sp, #12]
 800f4f4:	3101      	adds	r1, #1
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	5e9b      	ldrsh	r3, [r3, r2]
 800f4fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f4fc:	80e8      	strh	r0, [r5, #6]
 800f4fe:	806a      	strh	r2, [r5, #2]
 800f500:	9a00      	ldr	r2, [sp, #0]
 800f502:	32ae      	adds	r2, #174	; 0xae
 800f504:	87d1      	strh	r1, [r2, #62]	; 0x3e
 800f506:	9a07      	ldr	r2, [sp, #28]
 800f508:	9901      	ldr	r1, [sp, #4]
 800f50a:	00d2      	lsls	r2, r2, #3
 800f50c:	188a      	adds	r2, r1, r2
 800f50e:	8013      	strh	r3, [r2, #0]
 800f510:	4663      	mov	r3, ip
 800f512:	8053      	strh	r3, [r2, #2]
 800f514:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f516:	80d4      	strh	r4, [r2, #6]
 800f518:	8093      	strh	r3, [r2, #4]
 800f51a:	e756      	b.n	800f3ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x41e>
 800f51c:	9902      	ldr	r1, [sp, #8]
 800f51e:	00c9      	lsls	r1, r1, #3
 800f520:	42a0      	cmp	r0, r4
 800f522:	db10      	blt.n	800f546 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59a>
 800f524:	4664      	mov	r4, ip
 800f526:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f528:	aa10      	add	r2, sp, #64	; 0x40
 800f52a:	19db      	adds	r3, r3, r7
 800f52c:	b29b      	uxth	r3, r3
 800f52e:	8054      	strh	r4, [r2, #2]
 800f530:	80d3      	strh	r3, [r2, #6]
 800f532:	9a00      	ldr	r2, [sp, #0]
 800f534:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800f536:	1851      	adds	r1, r2, r1
 800f538:	000a      	movs	r2, r1
 800f53a:	191b      	adds	r3, r3, r4
 800f53c:	32ae      	adds	r2, #174	; 0xae
 800f53e:	31b2      	adds	r1, #178	; 0xb2
 800f540:	8013      	strh	r3, [r2, #0]
 800f542:	8008      	strh	r0, [r1, #0]
 800f544:	e545      	b.n	800efd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26>
 800f546:	9b00      	ldr	r3, [sp, #0]
 800f548:	33ac      	adds	r3, #172	; 0xac
 800f54a:	1859      	adds	r1, r3, r1
 800f54c:	80cc      	strh	r4, [r1, #6]
 800f54e:	e798      	b.n	800f482 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 800f550:	9b00      	ldr	r3, [sp, #0]
 800f552:	33ec      	adds	r3, #236	; 0xec
 800f554:	881c      	ldrh	r4, [r3, #0]
 800f556:	9b00      	ldr	r3, [sp, #0]
 800f558:	1e65      	subs	r5, r4, #1
 800f55a:	00e4      	lsls	r4, r4, #3
 800f55c:	34a4      	adds	r4, #164	; 0xa4
 800f55e:	b2ad      	uxth	r5, r5
 800f560:	191c      	adds	r4, r3, r4
 800f562:	4b71      	ldr	r3, [pc, #452]	; (800f728 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x77c>)
 800f564:	429d      	cmp	r5, r3
 800f566:	d049      	beq.n	800f5fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x650>
 800f568:	ab10      	add	r3, sp, #64	; 0x40
 800f56a:	2202      	movs	r2, #2
 800f56c:	5e9b      	ldrsh	r3, [r3, r2]
 800f56e:	2202      	movs	r2, #2
 800f570:	5ea1      	ldrsh	r1, [r4, r2]
 800f572:	aa10      	add	r2, sp, #64	; 0x40
 800f574:	2000      	movs	r0, #0
 800f576:	5e12      	ldrsh	r2, [r2, r0]
 800f578:	2600      	movs	r6, #0
 800f57a:	5fa0      	ldrsh	r0, [r4, r6]
 800f57c:	428b      	cmp	r3, r1
 800f57e:	d121      	bne.n	800f5c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x618>
 800f580:	ae10      	add	r6, sp, #64	; 0x40
 800f582:	2706      	movs	r7, #6
 800f584:	5ff7      	ldrsh	r7, [r6, r7]
 800f586:	46bc      	mov	ip, r7
 800f588:	2706      	movs	r7, #6
 800f58a:	5fe6      	ldrsh	r6, [r4, r7]
 800f58c:	45b4      	cmp	ip, r6
 800f58e:	d119      	bne.n	800f5c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x618>
 800f590:	88a3      	ldrh	r3, [r4, #4]
 800f592:	a910      	add	r1, sp, #64	; 0x40
 800f594:	181e      	adds	r6, r3, r0
 800f596:	b236      	sxth	r6, r6
 800f598:	8889      	ldrh	r1, [r1, #4]
 800f59a:	4296      	cmp	r6, r2
 800f59c:	d10b      	bne.n	800f5b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x60a>
 800f59e:	aa10      	add	r2, sp, #64	; 0x40
 800f5a0:	8010      	strh	r0, [r2, #0]
 800f5a2:	185b      	adds	r3, r3, r1
 800f5a4:	8093      	strh	r3, [r2, #4]
 800f5a6:	0029      	movs	r1, r5
 800f5a8:	9801      	ldr	r0, [sp, #4]
 800f5aa:	f7ff fced 	bl	800ef88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800f5ae:	3d01      	subs	r5, #1
 800f5b0:	b2ad      	uxth	r5, r5
 800f5b2:	3c08      	subs	r4, #8
 800f5b4:	e7d5      	b.n	800f562 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b6>
 800f5b6:	188a      	adds	r2, r1, r2
 800f5b8:	b212      	sxth	r2, r2
 800f5ba:	4282      	cmp	r2, r0
 800f5bc:	d1f7      	bne.n	800f5ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
 800f5be:	185b      	adds	r3, r3, r1
 800f5c0:	aa10      	add	r2, sp, #64	; 0x40
 800f5c2:	e7ef      	b.n	800f5a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f8>
 800f5c4:	4282      	cmp	r2, r0
 800f5c6:	d1f2      	bne.n	800f5ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
 800f5c8:	aa10      	add	r2, sp, #64	; 0x40
 800f5ca:	2004      	movs	r0, #4
 800f5cc:	5e10      	ldrsh	r0, [r2, r0]
 800f5ce:	2604      	movs	r6, #4
 800f5d0:	5fa2      	ldrsh	r2, [r4, r6]
 800f5d2:	4290      	cmp	r0, r2
 800f5d4:	d1eb      	bne.n	800f5ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
 800f5d6:	88e2      	ldrh	r2, [r4, #6]
 800f5d8:	a810      	add	r0, sp, #64	; 0x40
 800f5da:	1856      	adds	r6, r2, r1
 800f5dc:	b236      	sxth	r6, r6
 800f5de:	88c0      	ldrh	r0, [r0, #6]
 800f5e0:	42b3      	cmp	r3, r6
 800f5e2:	d104      	bne.n	800f5ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x642>
 800f5e4:	ab10      	add	r3, sp, #64	; 0x40
 800f5e6:	8059      	strh	r1, [r3, #2]
 800f5e8:	1812      	adds	r2, r2, r0
 800f5ea:	80da      	strh	r2, [r3, #6]
 800f5ec:	e7db      	b.n	800f5a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 800f5ee:	18c3      	adds	r3, r0, r3
 800f5f0:	b21b      	sxth	r3, r3
 800f5f2:	4299      	cmp	r1, r3
 800f5f4:	d1db      	bne.n	800f5ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
 800f5f6:	1812      	adds	r2, r2, r0
 800f5f8:	ab10      	add	r3, sp, #64	; 0x40
 800f5fa:	e7f6      	b.n	800f5ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x63e>
 800f5fc:	9b00      	ldr	r3, [sp, #0]
 800f5fe:	33ec      	adds	r3, #236	; 0xec
 800f600:	881a      	ldrh	r2, [r3, #0]
 800f602:	00d3      	lsls	r3, r2, #3
 800f604:	2a07      	cmp	r2, #7
 800f606:	d816      	bhi.n	800f636 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68a>
 800f608:	a910      	add	r1, sp, #64	; 0x40
 800f60a:	2500      	movs	r5, #0
 800f60c:	5f4d      	ldrsh	r5, [r1, r5]
 800f60e:	a910      	add	r1, sp, #64	; 0x40
 800f610:	2402      	movs	r4, #2
 800f612:	5f0c      	ldrsh	r4, [r1, r4]
 800f614:	a910      	add	r1, sp, #64	; 0x40
 800f616:	2004      	movs	r0, #4
 800f618:	5e08      	ldrsh	r0, [r1, r0]
 800f61a:	a910      	add	r1, sp, #64	; 0x40
 800f61c:	2606      	movs	r6, #6
 800f61e:	5f89      	ldrsh	r1, [r1, r6]
 800f620:	9e00      	ldr	r6, [sp, #0]
 800f622:	3201      	adds	r2, #1
 800f624:	36ae      	adds	r6, #174	; 0xae
 800f626:	87f2      	strh	r2, [r6, #62]	; 0x3e
 800f628:	9a01      	ldr	r2, [sp, #4]
 800f62a:	18d3      	adds	r3, r2, r3
 800f62c:	801d      	strh	r5, [r3, #0]
 800f62e:	805c      	strh	r4, [r3, #2]
 800f630:	8098      	strh	r0, [r3, #4]
 800f632:	80d9      	strh	r1, [r3, #6]
 800f634:	e543      	b.n	800f0be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 800f636:	1e57      	subs	r7, r2, #1
 800f638:	9a00      	ldr	r2, [sp, #0]
 800f63a:	33a4      	adds	r3, #164	; 0xa4
 800f63c:	18d3      	adds	r3, r2, r3
 800f63e:	9302      	str	r3, [sp, #8]
 800f640:	4b3a      	ldr	r3, [pc, #232]	; (800f72c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x780>)
 800f642:	9305      	str	r3, [sp, #20]
 800f644:	2301      	movs	r3, #1
 800f646:	425b      	negs	r3, r3
 800f648:	9304      	str	r3, [sp, #16]
 800f64a:	2300      	movs	r3, #0
 800f64c:	9303      	str	r3, [sp, #12]
 800f64e:	9b02      	ldr	r3, [sp, #8]
 800f650:	2204      	movs	r2, #4
 800f652:	5e9b      	ldrsh	r3, [r3, r2]
 800f654:	9a02      	ldr	r2, [sp, #8]
 800f656:	2106      	movs	r1, #6
 800f658:	5e52      	ldrsh	r2, [r2, r1]
 800f65a:	435a      	muls	r2, r3
 800f65c:	1e7b      	subs	r3, r7, #1
 800f65e:	001e      	movs	r6, r3
 800f660:	9206      	str	r2, [sp, #24]
 800f662:	9307      	str	r3, [sp, #28]
 800f664:	ad10      	add	r5, sp, #64	; 0x40
 800f666:	1c73      	adds	r3, r6, #1
 800f668:	d003      	beq.n	800f672 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c6>
 800f66a:	9d00      	ldr	r5, [sp, #0]
 800f66c:	00f3      	lsls	r3, r6, #3
 800f66e:	35ac      	adds	r5, #172	; 0xac
 800f670:	18ed      	adds	r5, r5, r3
 800f672:	2204      	movs	r2, #4
 800f674:	5eab      	ldrsh	r3, [r5, r2]
 800f676:	2206      	movs	r2, #6
 800f678:	5eac      	ldrsh	r4, [r5, r2]
 800f67a:	9902      	ldr	r1, [sp, #8]
 800f67c:	435c      	muls	r4, r3
 800f67e:	9408      	str	r4, [sp, #32]
 800f680:	ac12      	add	r4, sp, #72	; 0x48
 800f682:	2208      	movs	r2, #8
 800f684:	0020      	movs	r0, r4
 800f686:	f004 fe92 	bl	80143ae <memcpy>
 800f68a:	0029      	movs	r1, r5
 800f68c:	0020      	movs	r0, r4
 800f68e:	f7ff fb0b 	bl	800eca8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800f692:	2304      	movs	r3, #4
 800f694:	5ee2      	ldrsh	r2, [r4, r3]
 800f696:	2106      	movs	r1, #6
 800f698:	5e63      	ldrsh	r3, [r4, r1]
 800f69a:	9906      	ldr	r1, [sp, #24]
 800f69c:	435a      	muls	r2, r3
 800f69e:	468c      	mov	ip, r1
 800f6a0:	2107      	movs	r1, #7
 800f6a2:	9b08      	ldr	r3, [sp, #32]
 800f6a4:	4463      	add	r3, ip
 800f6a6:	1ad4      	subs	r4, r2, r3
 800f6a8:	17d3      	asrs	r3, r2, #31
 800f6aa:	400b      	ands	r3, r1
 800f6ac:	189b      	adds	r3, r3, r2
 800f6ae:	10db      	asrs	r3, r3, #3
 800f6b0:	42a3      	cmp	r3, r4
 800f6b2:	dc22      	bgt.n	800f6fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74e>
 800f6b4:	9b05      	ldr	r3, [sp, #20]
 800f6b6:	429c      	cmp	r4, r3
 800f6b8:	da04      	bge.n	800f6c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x718>
 800f6ba:	2c00      	cmp	r4, #0
 800f6bc:	d01d      	beq.n	800f6fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74e>
 800f6be:	9405      	str	r4, [sp, #20]
 800f6c0:	9604      	str	r6, [sp, #16]
 800f6c2:	9703      	str	r7, [sp, #12]
 800f6c4:	3e01      	subs	r6, #1
 800f6c6:	1cb3      	adds	r3, r6, #2
 800f6c8:	d1cc      	bne.n	800f664 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b8>
 800f6ca:	9b02      	ldr	r3, [sp, #8]
 800f6cc:	9f07      	ldr	r7, [sp, #28]
 800f6ce:	3b08      	subs	r3, #8
 800f6d0:	9302      	str	r3, [sp, #8]
 800f6d2:	1c7b      	adds	r3, r7, #1
 800f6d4:	d1bb      	bne.n	800f64e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a2>
 800f6d6:	466b      	mov	r3, sp
 800f6d8:	899d      	ldrh	r5, [r3, #12]
 800f6da:	9b03      	ldr	r3, [sp, #12]
 800f6dc:	00de      	lsls	r6, r3, #3
 800f6de:	9b01      	ldr	r3, [sp, #4]
 800f6e0:	1998      	adds	r0, r3, r6
 800f6e2:	9b04      	ldr	r3, [sp, #16]
 800f6e4:	3301      	adds	r3, #1
 800f6e6:	d10b      	bne.n	800f700 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x754>
 800f6e8:	0001      	movs	r1, r0
 800f6ea:	a810      	add	r0, sp, #64	; 0x40
 800f6ec:	f7ff fadc 	bl	800eca8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800f6f0:	0029      	movs	r1, r5
 800f6f2:	9801      	ldr	r0, [sp, #4]
 800f6f4:	f7ff fc48 	bl	800ef88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800f6f8:	e46b      	b.n	800efd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26>
 800f6fa:	9604      	str	r6, [sp, #16]
 800f6fc:	9703      	str	r7, [sp, #12]
 800f6fe:	e7ea      	b.n	800f6d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x72a>
 800f700:	9b04      	ldr	r3, [sp, #16]
 800f702:	00dc      	lsls	r4, r3, #3
 800f704:	9b01      	ldr	r3, [sp, #4]
 800f706:	1919      	adds	r1, r3, r4
 800f708:	f7ff face 	bl	800eca8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800f70c:	9f00      	ldr	r7, [sp, #0]
 800f70e:	a910      	add	r1, sp, #64	; 0x40
 800f710:	37ac      	adds	r7, #172	; 0xac
 800f712:	1938      	adds	r0, r7, r4
 800f714:	2208      	movs	r2, #8
 800f716:	f004 fe4a 	bl	80143ae <memcpy>
 800f71a:	19b9      	adds	r1, r7, r6
 800f71c:	2208      	movs	r2, #8
 800f71e:	a810      	add	r0, sp, #64	; 0x40
 800f720:	f004 fe45 	bl	80143ae <memcpy>
 800f724:	e7e4      	b.n	800f6f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x744>
 800f726:	46c0      	nop			; (mov r8, r8)
 800f728:	0000ffff 	.word	0x0000ffff
 800f72c:	7fffffff 	.word	0x7fffffff

0800f730 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 800f730:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f732:	0006      	movs	r6, r0
 800f734:	3631      	adds	r6, #49	; 0x31
 800f736:	36ff      	adds	r6, #255	; 0xff
 800f738:	b09f      	sub	sp, #124	; 0x7c
 800f73a:	0004      	movs	r4, r0
 800f73c:	0030      	movs	r0, r6
 800f73e:	f7fc ff6f 	bl	800c620 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f742:	1e05      	subs	r5, r0, #0
 800f744:	d10b      	bne.n	800f75e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e>
 800f746:	2298      	movs	r2, #152	; 0x98
 800f748:	6823      	ldr	r3, [r4, #0]
 800f74a:	0052      	lsls	r2, r2, #1
 800f74c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f74e:	58a1      	ldr	r1, [r4, r2]
 800f750:	0020      	movs	r0, r4
 800f752:	6872      	ldr	r2, [r6, #4]
 800f754:	4798      	blx	r3
 800f756:	0023      	movs	r3, r4
 800f758:	33fc      	adds	r3, #252	; 0xfc
 800f75a:	635d      	str	r5, [r3, #52]	; 0x34
 800f75c:	639d      	str	r5, [r3, #56]	; 0x38
 800f75e:	0027      	movs	r7, r4
 800f760:	4bac      	ldr	r3, [pc, #688]	; (800fa14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e4>)
 800f762:	37ec      	adds	r7, #236	; 0xec
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d04a      	beq.n	800f800 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd0>
 800f76a:	4dab      	ldr	r5, [pc, #684]	; (800fa18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e8>)
 800f76c:	0028      	movs	r0, r5
 800f76e:	f7fc ff57 	bl	800c620 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f772:	1e06      	subs	r6, r0, #0
 800f774:	d144      	bne.n	800f800 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd0>
 800f776:	0028      	movs	r0, r5
 800f778:	f7ff f92c 	bl	800e9d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800f77c:	8869      	ldrh	r1, [r5, #2]
 800f77e:	882a      	ldrh	r2, [r5, #0]
 800f780:	0409      	lsls	r1, r1, #16
 800f782:	4311      	orrs	r1, r2
 800f784:	88ea      	ldrh	r2, [r5, #6]
 800f786:	88a8      	ldrh	r0, [r5, #4]
 800f788:	6823      	ldr	r3, [r4, #0]
 800f78a:	0412      	lsls	r2, r2, #16
 800f78c:	4302      	orrs	r2, r0
 800f78e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f790:	0020      	movs	r0, r4
 800f792:	4798      	blx	r3
 800f794:	802e      	strh	r6, [r5, #0]
 800f796:	806e      	strh	r6, [r5, #2]
 800f798:	80ae      	strh	r6, [r5, #4]
 800f79a:	80ee      	strh	r6, [r5, #6]
 800f79c:	ae0d      	add	r6, sp, #52	; 0x34
 800f79e:	0030      	movs	r0, r6
 800f7a0:	f7ff fb96 	bl	800eed0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800f7a4:	211e      	movs	r1, #30
 800f7a6:	4b9d      	ldr	r3, [pc, #628]	; (800fa1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ec>)
 800f7a8:	9605      	str	r6, [sp, #20]
 800f7aa:	881d      	ldrh	r5, [r3, #0]
 800f7ac:	883b      	ldrh	r3, [r7, #0]
 800f7ae:	002a      	movs	r2, r5
 800f7b0:	9302      	str	r3, [sp, #8]
 800f7b2:	ab06      	add	r3, sp, #24
 800f7b4:	18c9      	adds	r1, r1, r3
 800f7b6:	0023      	movs	r3, r4
 800f7b8:	33ac      	adds	r3, #172	; 0xac
 800f7ba:	9306      	str	r3, [sp, #24]
 800f7bc:	9b02      	ldr	r3, [sp, #8]
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d223      	bcs.n	800f80a <_ZN8touchgfx11Application15drawCachedAreasEv+0xda>
 800f7c2:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 800f7c4:	2b07      	cmp	r3, #7
 800f7c6:	d818      	bhi.n	800f7fa <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 800f7c8:	9f06      	ldr	r7, [sp, #24]
 800f7ca:	00d0      	lsls	r0, r2, #3
 800f7cc:	1838      	adds	r0, r7, r0
 800f7ce:	2600      	movs	r6, #0
 800f7d0:	5f87      	ldrsh	r7, [r0, r6]
 800f7d2:	9703      	str	r7, [sp, #12]
 800f7d4:	2702      	movs	r7, #2
 800f7d6:	5fc6      	ldrsh	r6, [r0, r7]
 800f7d8:	9604      	str	r6, [sp, #16]
 800f7da:	2704      	movs	r7, #4
 800f7dc:	5fc6      	ldrsh	r6, [r0, r7]
 800f7de:	0037      	movs	r7, r6
 800f7e0:	2606      	movs	r6, #6
 800f7e2:	5f80      	ldrsh	r0, [r0, r6]
 800f7e4:	1c5e      	adds	r6, r3, #1
 800f7e6:	87ce      	strh	r6, [r1, #62]	; 0x3e
 800f7e8:	9e05      	ldr	r6, [sp, #20]
 800f7ea:	00db      	lsls	r3, r3, #3
 800f7ec:	18f3      	adds	r3, r6, r3
 800f7ee:	9e03      	ldr	r6, [sp, #12]
 800f7f0:	809f      	strh	r7, [r3, #4]
 800f7f2:	801e      	strh	r6, [r3, #0]
 800f7f4:	9e04      	ldr	r6, [sp, #16]
 800f7f6:	80d8      	strh	r0, [r3, #6]
 800f7f8:	805e      	strh	r6, [r3, #2]
 800f7fa:	3201      	adds	r2, #1
 800f7fc:	b292      	uxth	r2, r2
 800f7fe:	e7dd      	b.n	800f7bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x8c>
 800f800:	883b      	ldrh	r3, [r7, #0]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d1ca      	bne.n	800f79c <_ZN8touchgfx11Application15drawCachedAreasEv+0x6c>
 800f806:	b01f      	add	sp, #124	; 0x7c
 800f808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f80a:	0023      	movs	r3, r4
 800f80c:	33fe      	adds	r3, #254	; 0xfe
 800f80e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800f810:	42ab      	cmp	r3, r5
 800f812:	d911      	bls.n	800f838 <_ZN8touchgfx11Application15drawCachedAreasEv+0x108>
 800f814:	00eb      	lsls	r3, r5, #3
 800f816:	18e3      	adds	r3, r4, r3
 800f818:	33ee      	adds	r3, #238	; 0xee
 800f81a:	8859      	ldrh	r1, [r3, #2]
 800f81c:	881a      	ldrh	r2, [r3, #0]
 800f81e:	0409      	lsls	r1, r1, #16
 800f820:	4311      	orrs	r1, r2
 800f822:	88da      	ldrh	r2, [r3, #6]
 800f824:	6820      	ldr	r0, [r4, #0]
 800f826:	889e      	ldrh	r6, [r3, #4]
 800f828:	0412      	lsls	r2, r2, #16
 800f82a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f82c:	4332      	orrs	r2, r6
 800f82e:	0020      	movs	r0, r4
 800f830:	3501      	adds	r5, #1
 800f832:	4798      	blx	r3
 800f834:	b2ad      	uxth	r5, r5
 800f836:	e7e8      	b.n	800f80a <_ZN8touchgfx11Application15drawCachedAreasEv+0xda>
 800f838:	0026      	movs	r6, r4
 800f83a:	4b79      	ldr	r3, [pc, #484]	; (800fa20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f0>)
 800f83c:	36ec      	adds	r6, #236	; 0xec
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	3348      	adds	r3, #72	; 0x48
 800f842:	781b      	ldrb	r3, [r3, #0]
 800f844:	2b01      	cmp	r3, #1
 800f846:	d000      	beq.n	800f84a <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 800f848:	e0f2      	b.n	800fa30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x300>
 800f84a:	2200      	movs	r2, #0
 800f84c:	4b73      	ldr	r3, [pc, #460]	; (800fa1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ec>)
 800f84e:	8830      	ldrh	r0, [r6, #0]
 800f850:	8819      	ldrh	r1, [r3, #0]
 800f852:	9202      	str	r2, [sp, #8]
 800f854:	00cb      	lsls	r3, r1, #3
 800f856:	33ae      	adds	r3, #174	; 0xae
 800f858:	18e3      	adds	r3, r4, r3
 800f85a:	4288      	cmp	r0, r1
 800f85c:	dd0a      	ble.n	800f874 <_ZN8touchgfx11Application15drawCachedAreasEv+0x144>
 800f85e:	881d      	ldrh	r5, [r3, #0]
 800f860:	889a      	ldrh	r2, [r3, #4]
 800f862:	1952      	adds	r2, r2, r5
 800f864:	9d02      	ldr	r5, [sp, #8]
 800f866:	b212      	sxth	r2, r2
 800f868:	4295      	cmp	r5, r2
 800f86a:	da00      	bge.n	800f86e <_ZN8touchgfx11Application15drawCachedAreasEv+0x13e>
 800f86c:	9202      	str	r2, [sp, #8]
 800f86e:	3101      	adds	r1, #1
 800f870:	3308      	adds	r3, #8
 800f872:	e7f2      	b.n	800f85a <_ZN8touchgfx11Application15drawCachedAreasEv+0x12a>
 800f874:	2201      	movs	r2, #1
 800f876:	4b6b      	ldr	r3, [pc, #428]	; (800fa24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f4>)
 800f878:	9203      	str	r2, [sp, #12]
 800f87a:	881b      	ldrh	r3, [r3, #0]
 800f87c:	2b0f      	cmp	r3, #15
 800f87e:	d901      	bls.n	800f884 <_ZN8touchgfx11Application15drawCachedAreasEv+0x154>
 800f880:	08db      	lsrs	r3, r3, #3
 800f882:	9303      	str	r3, [sp, #12]
 800f884:	2300      	movs	r3, #0
 800f886:	9309      	str	r3, [sp, #36]	; 0x24
 800f888:	930a      	str	r3, [sp, #40]	; 0x28
 800f88a:	ae09      	add	r6, sp, #36	; 0x24
 800f88c:	8870      	ldrh	r0, [r6, #2]
 800f88e:	88f5      	ldrh	r5, [r6, #6]
 800f890:	4f63      	ldr	r7, [pc, #396]	; (800fa20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f0>)
 800f892:	182d      	adds	r5, r5, r0
 800f894:	9a02      	ldr	r2, [sp, #8]
 800f896:	6838      	ldr	r0, [r7, #0]
 800f898:	b22d      	sxth	r5, r5
 800f89a:	6803      	ldr	r3, [r0, #0]
 800f89c:	4295      	cmp	r5, r2
 800f89e:	db00      	blt.n	800f8a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 800f8a0:	e083      	b.n	800f9aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x27a>
 800f8a2:	339c      	adds	r3, #156	; 0x9c
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	4798      	blx	r3
 800f8a8:	9b03      	ldr	r3, [sp, #12]
 800f8aa:	18eb      	adds	r3, r5, r3
 800f8ac:	4298      	cmp	r0, r3
 800f8ae:	da08      	bge.n	800f8c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x192>
 800f8b0:	9b02      	ldr	r3, [sp, #8]
 800f8b2:	4298      	cmp	r0, r3
 800f8b4:	da05      	bge.n	800f8c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x192>
 800f8b6:	4285      	cmp	r5, r0
 800f8b8:	dd6d      	ble.n	800f996 <_ZN8touchgfx11Application15drawCachedAreasEv+0x266>
 800f8ba:	2d00      	cmp	r5, #0
 800f8bc:	dd6b      	ble.n	800f996 <_ZN8touchgfx11Application15drawCachedAreasEv+0x266>
 800f8be:	9802      	ldr	r0, [sp, #8]
 800f8c0:	e005      	b.n	800f8ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x19e>
 800f8c2:	4285      	cmp	r5, r0
 800f8c4:	dcfb      	bgt.n	800f8be <_ZN8touchgfx11Application15drawCachedAreasEv+0x18e>
 800f8c6:	9b02      	ldr	r3, [sp, #8]
 800f8c8:	4298      	cmp	r0, r3
 800f8ca:	dd00      	ble.n	800f8ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x19e>
 800f8cc:	0018      	movs	r0, r3
 800f8ce:	4b56      	ldr	r3, [pc, #344]	; (800fa28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f8>)
 800f8d0:	1b40      	subs	r0, r0, r5
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	5e9b      	ldrsh	r3, [r3, r2]
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	80b3      	strh	r3, [r6, #4]
 800f8da:	4b50      	ldr	r3, [pc, #320]	; (800fa1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ec>)
 800f8dc:	8032      	strh	r2, [r6, #0]
 800f8de:	881f      	ldrh	r7, [r3, #0]
 800f8e0:	8075      	strh	r5, [r6, #2]
 800f8e2:	80f0      	strh	r0, [r6, #6]
 800f8e4:	0023      	movs	r3, r4
 800f8e6:	33ec      	adds	r3, #236	; 0xec
 800f8e8:	881b      	ldrh	r3, [r3, #0]
 800f8ea:	42bb      	cmp	r3, r7
 800f8ec:	d9cd      	bls.n	800f88a <_ZN8touchgfx11Application15drawCachedAreasEv+0x15a>
 800f8ee:	0021      	movs	r1, r4
 800f8f0:	ad0b      	add	r5, sp, #44	; 0x2c
 800f8f2:	00fb      	lsls	r3, r7, #3
 800f8f4:	31ac      	adds	r1, #172	; 0xac
 800f8f6:	18c9      	adds	r1, r1, r3
 800f8f8:	2208      	movs	r2, #8
 800f8fa:	0028      	movs	r0, r5
 800f8fc:	ae09      	add	r6, sp, #36	; 0x24
 800f8fe:	f004 fd56 	bl	80143ae <memcpy>
 800f902:	0031      	movs	r1, r6
 800f904:	0028      	movs	r0, r5
 800f906:	f7ff f933 	bl	800eb70 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800f90a:	2800      	cmp	r0, #0
 800f90c:	d04a      	beq.n	800f9a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 800f90e:	2300      	movs	r3, #0
 800f910:	5eea      	ldrsh	r2, [r5, r3]
 800f912:	2100      	movs	r1, #0
 800f914:	5e73      	ldrsh	r3, [r6, r1]
 800f916:	1c11      	adds	r1, r2, #0
 800f918:	429a      	cmp	r2, r3
 800f91a:	da00      	bge.n	800f91e <_ZN8touchgfx11Application15drawCachedAreasEv+0x1ee>
 800f91c:	1c19      	adds	r1, r3, #0
 800f91e:	b209      	sxth	r1, r1
 800f920:	9104      	str	r1, [sp, #16]
 800f922:	2002      	movs	r0, #2
 800f924:	5e29      	ldrsh	r1, [r5, r0]
 800f926:	2502      	movs	r5, #2
 800f928:	5f70      	ldrsh	r0, [r6, r5]
 800f92a:	1c0e      	adds	r6, r1, #0
 800f92c:	4684      	mov	ip, r0
 800f92e:	4281      	cmp	r1, r0
 800f930:	da00      	bge.n	800f934 <_ZN8touchgfx11Application15drawCachedAreasEv+0x204>
 800f932:	1c06      	adds	r6, r0, #0
 800f934:	a80b      	add	r0, sp, #44	; 0x2c
 800f936:	8885      	ldrh	r5, [r0, #4]
 800f938:	b236      	sxth	r6, r6
 800f93a:	18aa      	adds	r2, r5, r2
 800f93c:	b292      	uxth	r2, r2
 800f93e:	9205      	str	r2, [sp, #20]
 800f940:	ad09      	add	r5, sp, #36	; 0x24
 800f942:	88ad      	ldrh	r5, [r5, #4]
 800f944:	18eb      	adds	r3, r5, r3
 800f946:	b29b      	uxth	r3, r3
 800f948:	b215      	sxth	r5, r2
 800f94a:	b21a      	sxth	r2, r3
 800f94c:	4295      	cmp	r5, r2
 800f94e:	da00      	bge.n	800f952 <_ZN8touchgfx11Application15drawCachedAreasEv+0x222>
 800f950:	9b05      	ldr	r3, [sp, #20]
 800f952:	9a04      	ldr	r2, [sp, #16]
 800f954:	1a9b      	subs	r3, r3, r2
 800f956:	8083      	strh	r3, [r0, #4]
 800f958:	88c3      	ldrh	r3, [r0, #6]
 800f95a:	1859      	adds	r1, r3, r1
 800f95c:	ab09      	add	r3, sp, #36	; 0x24
 800f95e:	88db      	ldrh	r3, [r3, #6]
 800f960:	b289      	uxth	r1, r1
 800f962:	4463      	add	r3, ip
 800f964:	b29b      	uxth	r3, r3
 800f966:	b208      	sxth	r0, r1
 800f968:	b21a      	sxth	r2, r3
 800f96a:	4290      	cmp	r0, r2
 800f96c:	da00      	bge.n	800f970 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 800f96e:	000b      	movs	r3, r1
 800f970:	aa0b      	add	r2, sp, #44	; 0x2c
 800f972:	1b9b      	subs	r3, r3, r6
 800f974:	80d3      	strh	r3, [r2, #6]
 800f976:	9b04      	ldr	r3, [sp, #16]
 800f978:	8056      	strh	r6, [r2, #2]
 800f97a:	8013      	strh	r3, [r2, #0]
 800f97c:	a80b      	add	r0, sp, #44	; 0x2c
 800f97e:	f7fc fe4f 	bl	800c620 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f982:	2800      	cmp	r0, #0
 800f984:	d104      	bne.n	800f990 <_ZN8touchgfx11Application15drawCachedAreasEv+0x260>
 800f986:	6823      	ldr	r3, [r4, #0]
 800f988:	a90b      	add	r1, sp, #44	; 0x2c
 800f98a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f98c:	0020      	movs	r0, r4
 800f98e:	4798      	blx	r3
 800f990:	3701      	adds	r7, #1
 800f992:	b2bf      	uxth	r7, r7
 800f994:	e7a6      	b.n	800f8e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b4>
 800f996:	6838      	ldr	r0, [r7, #0]
 800f998:	2101      	movs	r1, #1
 800f99a:	6803      	ldr	r3, [r0, #0]
 800f99c:	3398      	adds	r3, #152	; 0x98
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	4798      	blx	r3
 800f9a2:	e772      	b.n	800f88a <_ZN8touchgfx11Application15drawCachedAreasEv+0x15a>
 800f9a4:	900b      	str	r0, [sp, #44]	; 0x2c
 800f9a6:	900c      	str	r0, [sp, #48]	; 0x30
 800f9a8:	e7e8      	b.n	800f97c <_ZN8touchgfx11Application15drawCachedAreasEv+0x24c>
 800f9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9ac:	4798      	blx	r3
 800f9ae:	4b1f      	ldr	r3, [pc, #124]	; (800fa2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 800f9b0:	781b      	ldrb	r3, [r3, #0]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d100      	bne.n	800f9b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x288>
 800f9b6:	e726      	b.n	800f806 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd6>
 800f9b8:	0023      	movs	r3, r4
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	33fe      	adds	r3, #254	; 0xfe
 800f9be:	861a      	strh	r2, [r3, #48]	; 0x30
 800f9c0:	4b16      	ldr	r3, [pc, #88]	; (800fa1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ec>)
 800f9c2:	a906      	add	r1, sp, #24
 800f9c4:	881a      	ldrh	r2, [r3, #0]
 800f9c6:	231e      	movs	r3, #30
 800f9c8:	185b      	adds	r3, r3, r1
 800f9ca:	0021      	movs	r1, r4
 800f9cc:	0020      	movs	r0, r4
 800f9ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f9d0:	31ee      	adds	r1, #238	; 0xee
 800f9d2:	9302      	str	r3, [sp, #8]
 800f9d4:	9103      	str	r1, [sp, #12]
 800f9d6:	30f0      	adds	r0, #240	; 0xf0
 800f9d8:	9b02      	ldr	r3, [sp, #8]
 800f9da:	429a      	cmp	r2, r3
 800f9dc:	d300      	bcc.n	800f9e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 800f9de:	e712      	b.n	800f806 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd6>
 800f9e0:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800f9e2:	2b07      	cmp	r3, #7
 800f9e4:	d813      	bhi.n	800fa0e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2de>
 800f9e6:	ad0d      	add	r5, sp, #52	; 0x34
 800f9e8:	00d4      	lsls	r4, r2, #3
 800f9ea:	192c      	adds	r4, r5, r4
 800f9ec:	2100      	movs	r1, #0
 800f9ee:	5e67      	ldrsh	r7, [r4, r1]
 800f9f0:	2102      	movs	r1, #2
 800f9f2:	5e66      	ldrsh	r6, [r4, r1]
 800f9f4:	2104      	movs	r1, #4
 800f9f6:	5e65      	ldrsh	r5, [r4, r1]
 800f9f8:	2106      	movs	r1, #6
 800f9fa:	5e64      	ldrsh	r4, [r4, r1]
 800f9fc:	1c59      	adds	r1, r3, #1
 800f9fe:	87c1      	strh	r1, [r0, #62]	; 0x3e
 800fa00:	9903      	ldr	r1, [sp, #12]
 800fa02:	00db      	lsls	r3, r3, #3
 800fa04:	18cb      	adds	r3, r1, r3
 800fa06:	801f      	strh	r7, [r3, #0]
 800fa08:	805e      	strh	r6, [r3, #2]
 800fa0a:	809d      	strh	r5, [r3, #4]
 800fa0c:	80dc      	strh	r4, [r3, #6]
 800fa0e:	3201      	adds	r2, #1
 800fa10:	b292      	uxth	r2, r2
 800fa12:	e7e1      	b.n	800f9d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a8>
 800fa14:	20002700 	.word	0x20002700
 800fa18:	2000270c 	.word	0x2000270c
 800fa1c:	20000020 	.word	0x20000020
 800fa20:	200026c8 	.word	0x200026c8
 800fa24:	200026be 	.word	0x200026be
 800fa28:	200026bc 	.word	0x200026bc
 800fa2c:	200026c6 	.word	0x200026c6
 800fa30:	2b02      	cmp	r3, #2
 800fa32:	d000      	beq.n	800fa36 <_ZN8touchgfx11Application15drawCachedAreasEv+0x306>
 800fa34:	e144      	b.n	800fcc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x590>
 800fa36:	4bb0      	ldr	r3, [pc, #704]	; (800fcf8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c8>)
 800fa38:	781b      	ldrb	r3, [r3, #0]
 800fa3a:	2b01      	cmp	r3, #1
 800fa3c:	d000      	beq.n	800fa40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>
 800fa3e:	e101      	b.n	800fc44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x514>
 800fa40:	0023      	movs	r3, r4
 800fa42:	33ec      	adds	r3, #236	; 0xec
 800fa44:	881b      	ldrh	r3, [r3, #0]
 800fa46:	9303      	str	r3, [sp, #12]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d0b0      	beq.n	800f9ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x27e>
 800fa4c:	0023      	movs	r3, r4
 800fa4e:	2100      	movs	r1, #0
 800fa50:	33ac      	adds	r3, #172	; 0xac
 800fa52:	2700      	movs	r7, #0
 800fa54:	5fdf      	ldrsh	r7, [r3, r7]
 800fa56:	4ba9      	ldr	r3, [pc, #676]	; (800fcfc <_ZN8touchgfx11Application15drawCachedAreasEv+0x5cc>)
 800fa58:	9102      	str	r1, [sp, #8]
 800fa5a:	881b      	ldrh	r3, [r3, #0]
 800fa5c:	3301      	adds	r3, #1
 800fa5e:	b29b      	uxth	r3, r3
 800fa60:	00da      	lsls	r2, r3, #3
 800fa62:	32ac      	adds	r2, #172	; 0xac
 800fa64:	18a2      	adds	r2, r4, r2
 800fa66:	9802      	ldr	r0, [sp, #8]
 800fa68:	b299      	uxth	r1, r3
 800fa6a:	00c5      	lsls	r5, r0, #3
 800fa6c:	9803      	ldr	r0, [sp, #12]
 800fa6e:	4288      	cmp	r0, r1
 800fa70:	d92d      	bls.n	800face <_ZN8touchgfx11Application15drawCachedAreasEv+0x39e>
 800fa72:	1965      	adds	r5, r4, r5
 800fa74:	0028      	movs	r0, r5
 800fa76:	0029      	movs	r1, r5
 800fa78:	30b0      	adds	r0, #176	; 0xb0
 800fa7a:	31ac      	adds	r1, #172	; 0xac
 800fa7c:	8809      	ldrh	r1, [r1, #0]
 800fa7e:	8800      	ldrh	r0, [r0, #0]
 800fa80:	469c      	mov	ip, r3
 800fa82:	1840      	adds	r0, r0, r1
 800fa84:	2100      	movs	r1, #0
 800fa86:	5e56      	ldrsh	r6, [r2, r1]
 800fa88:	8891      	ldrh	r1, [r2, #4]
 800fa8a:	b200      	sxth	r0, r0
 800fa8c:	1989      	adds	r1, r1, r6
 800fa8e:	b209      	sxth	r1, r1
 800fa90:	4288      	cmp	r0, r1
 800fa92:	da07      	bge.n	800faa4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x374>
 800fa94:	0037      	movs	r7, r6
 800fa96:	4286      	cmp	r6, r0
 800fa98:	da00      	bge.n	800fa9c <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 800fa9a:	0007      	movs	r7, r0
 800fa9c:	9302      	str	r3, [sp, #8]
 800fa9e:	3301      	adds	r3, #1
 800faa0:	3208      	adds	r2, #8
 800faa2:	e7e0      	b.n	800fa66 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 800faa4:	4288      	cmp	r0, r1
 800faa6:	d10e      	bne.n	800fac6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x396>
 800faa8:	35b2      	adds	r5, #178	; 0xb2
 800faaa:	2100      	movs	r1, #0
 800faac:	5e68      	ldrsh	r0, [r5, r1]
 800faae:	2506      	movs	r5, #6
 800fab0:	5f51      	ldrsh	r1, [r2, r5]
 800fab2:	4288      	cmp	r0, r1
 800fab4:	db01      	blt.n	800faba <_ZN8touchgfx11Application15drawCachedAreasEv+0x38a>
 800fab6:	9902      	ldr	r1, [sp, #8]
 800fab8:	468c      	mov	ip, r1
 800faba:	42b7      	cmp	r7, r6
 800fabc:	da00      	bge.n	800fac0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x390>
 800fabe:	0037      	movs	r7, r6
 800fac0:	4661      	mov	r1, ip
 800fac2:	9102      	str	r1, [sp, #8]
 800fac4:	e7eb      	b.n	800fa9e <_ZN8touchgfx11Application15drawCachedAreasEv+0x36e>
 800fac6:	428f      	cmp	r7, r1
 800fac8:	dae9      	bge.n	800fa9e <_ZN8touchgfx11Application15drawCachedAreasEv+0x36e>
 800faca:	000f      	movs	r7, r1
 800facc:	e7e7      	b.n	800fa9e <_ZN8touchgfx11Application15drawCachedAreasEv+0x36e>
 800face:	0021      	movs	r1, r4
 800fad0:	ae0b      	add	r6, sp, #44	; 0x2c
 800fad2:	31ac      	adds	r1, #172	; 0xac
 800fad4:	2208      	movs	r2, #8
 800fad6:	1949      	adds	r1, r1, r5
 800fad8:	0030      	movs	r0, r6
 800fada:	f004 fc68 	bl	80143ae <memcpy>
 800fade:	2304      	movs	r3, #4
 800fae0:	5ef2      	ldrsh	r2, [r6, r3]
 800fae2:	2a13      	cmp	r2, #19
 800fae4:	dc01      	bgt.n	800faea <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ba>
 800fae6:	2300      	movs	r3, #0
 800fae8:	5ef7      	ldrsh	r7, [r6, r3]
 800faea:	8833      	ldrh	r3, [r6, #0]
 800faec:	0030      	movs	r0, r6
 800faee:	189b      	adds	r3, r3, r2
 800faf0:	1bdb      	subs	r3, r3, r7
 800faf2:	80b3      	strh	r3, [r6, #4]
 800faf4:	8037      	strh	r7, [r6, #0]
 800faf6:	f7fe ff87 	bl	800ea08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800fafa:	0030      	movs	r0, r6
 800fafc:	f7fc fd90 	bl	800c620 <_ZNK8touchgfx4Rect7isEmptyEv>
 800fb00:	2800      	cmp	r0, #0
 800fb02:	d19d      	bne.n	800fa40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>
 800fb04:	4b7e      	ldr	r3, [pc, #504]	; (800fd00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5d0>)
 800fb06:	8831      	ldrh	r1, [r6, #0]
 800fb08:	6818      	ldr	r0, [r3, #0]
 800fb0a:	88b3      	ldrh	r3, [r6, #4]
 800fb0c:	6807      	ldr	r7, [r0, #0]
 800fb0e:	9303      	str	r3, [sp, #12]
 800fb10:	8872      	ldrh	r2, [r6, #2]
 800fb12:	88f6      	ldrh	r6, [r6, #6]
 800fb14:	3790      	adds	r7, #144	; 0x90
 800fb16:	b233      	sxth	r3, r6
 800fb18:	2b14      	cmp	r3, #20
 800fb1a:	dd00      	ble.n	800fb1e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ee>
 800fb1c:	2614      	movs	r6, #20
 800fb1e:	b2b6      	uxth	r6, r6
 800fb20:	9600      	str	r6, [sp, #0]
 800fb22:	683e      	ldr	r6, [r7, #0]
 800fb24:	9b03      	ldr	r3, [sp, #12]
 800fb26:	47b0      	blx	r6
 800fb28:	0007      	movs	r7, r0
 800fb2a:	ae0b      	add	r6, sp, #44	; 0x2c
 800fb2c:	80f0      	strh	r0, [r6, #6]
 800fb2e:	0030      	movs	r0, r6
 800fb30:	f7fe ff50 	bl	800e9d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800fb34:	6823      	ldr	r3, [r4, #0]
 800fb36:	1965      	adds	r5, r4, r5
 800fb38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb3a:	35b0      	adds	r5, #176	; 0xb0
 800fb3c:	0031      	movs	r1, r6
 800fb3e:	0020      	movs	r0, r4
 800fb40:	4798      	blx	r3
 800fb42:	882b      	ldrh	r3, [r5, #0]
 800fb44:	1bdf      	subs	r7, r3, r7
 800fb46:	b23f      	sxth	r7, r7
 800fb48:	802f      	strh	r7, [r5, #0]
 800fb4a:	2f00      	cmp	r7, #0
 800fb4c:	d000      	beq.n	800fb50 <_ZN8touchgfx11Application15drawCachedAreasEv+0x420>
 800fb4e:	e777      	b.n	800fa40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>
 800fb50:	466b      	mov	r3, sp
 800fb52:	0020      	movs	r0, r4
 800fb54:	8919      	ldrh	r1, [r3, #8]
 800fb56:	30ac      	adds	r0, #172	; 0xac
 800fb58:	f7ff fa16 	bl	800ef88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800fb5c:	e770      	b.n	800fa40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>
 800fb5e:	4297      	cmp	r7, r2
 800fb60:	d113      	bne.n	800fb8a <_ZN8touchgfx11Application15drawCachedAreasEv+0x45a>
 800fb62:	36b0      	adds	r6, #176	; 0xb0
 800fb64:	2100      	movs	r1, #0
 800fb66:	5e77      	ldrsh	r7, [r6, r1]
 800fb68:	001e      	movs	r6, r3
 800fb6a:	36b0      	adds	r6, #176	; 0xb0
 800fb6c:	2100      	movs	r1, #0
 800fb6e:	5e76      	ldrsh	r6, [r6, r1]
 800fb70:	42b7      	cmp	r7, r6
 800fb72:	db01      	blt.n	800fb78 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 800fb74:	9902      	ldr	r1, [sp, #8]
 800fb76:	468c      	mov	ip, r1
 800fb78:	33b2      	adds	r3, #178	; 0xb2
 800fb7a:	881b      	ldrh	r3, [r3, #0]
 800fb7c:	189a      	adds	r2, r3, r2
 800fb7e:	b212      	sxth	r2, r2
 800fb80:	4295      	cmp	r5, r2
 800fb82:	dc00      	bgt.n	800fb86 <_ZN8touchgfx11Application15drawCachedAreasEv+0x456>
 800fb84:	e098      	b.n	800fcb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x588>
 800fb86:	0015      	movs	r5, r2
 800fb88:	e096      	b.n	800fcb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x588>
 800fb8a:	4295      	cmp	r5, r2
 800fb8c:	dc00      	bgt.n	800fb90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x460>
 800fb8e:	e095      	b.n	800fcbc <_ZN8touchgfx11Application15drawCachedAreasEv+0x58c>
 800fb90:	0015      	movs	r5, r2
 800fb92:	e093      	b.n	800fcbc <_ZN8touchgfx11Application15drawCachedAreasEv+0x58c>
 800fb94:	9b04      	ldr	r3, [sp, #16]
 800fb96:	1998      	adds	r0, r3, r6
 800fb98:	19a6      	adds	r6, r4, r6
 800fb9a:	0033      	movs	r3, r6
 800fb9c:	33b2      	adds	r3, #178	; 0xb2
 800fb9e:	2200      	movs	r2, #0
 800fba0:	5e9b      	ldrsh	r3, [r3, r2]
 800fba2:	9303      	str	r3, [sp, #12]
 800fba4:	2b13      	cmp	r3, #19
 800fba6:	dc05      	bgt.n	800fbb4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x484>
 800fba8:	0033      	movs	r3, r6
 800fbaa:	33ae      	adds	r3, #174	; 0xae
 800fbac:	881d      	ldrh	r5, [r3, #0]
 800fbae:	9b03      	ldr	r3, [sp, #12]
 800fbb0:	18ed      	adds	r5, r5, r3
 800fbb2:	b22d      	sxth	r5, r5
 800fbb4:	f7fc fd34 	bl	800c620 <_ZNK8touchgfx4Rect7isEmptyEv>
 800fbb8:	2800      	cmp	r0, #0
 800fbba:	d151      	bne.n	800fc60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x530>
 800fbbc:	0033      	movs	r3, r6
 800fbbe:	33ac      	adds	r3, #172	; 0xac
 800fbc0:	2700      	movs	r7, #0
 800fbc2:	5fdf      	ldrsh	r7, [r3, r7]
 800fbc4:	0033      	movs	r3, r6
 800fbc6:	33ae      	adds	r3, #174	; 0xae
 800fbc8:	2100      	movs	r1, #0
 800fbca:	5e59      	ldrsh	r1, [r3, r1]
 800fbcc:	0033      	movs	r3, r6
 800fbce:	aa0b      	add	r2, sp, #44	; 0x2c
 800fbd0:	33b0      	adds	r3, #176	; 0xb0
 800fbd2:	80d0      	strh	r0, [r2, #6]
 800fbd4:	2000      	movs	r0, #0
 800fbd6:	5e1b      	ldrsh	r3, [r3, r0]
 800fbd8:	8017      	strh	r7, [r2, #0]
 800fbda:	8051      	strh	r1, [r2, #2]
 800fbdc:	8093      	strh	r3, [r2, #4]
 800fbde:	4a48      	ldr	r2, [pc, #288]	; (800fd00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5d0>)
 800fbe0:	b2bf      	uxth	r7, r7
 800fbe2:	6810      	ldr	r0, [r2, #0]
 800fbe4:	9706      	str	r7, [sp, #24]
 800fbe6:	6807      	ldr	r7, [r0, #0]
 800fbe8:	b29b      	uxth	r3, r3
 800fbea:	9305      	str	r3, [sp, #20]
 800fbec:	b28a      	uxth	r2, r1
 800fbee:	3790      	adds	r7, #144	; 0x90
 800fbf0:	1a6d      	subs	r5, r5, r1
 800fbf2:	2d14      	cmp	r5, #20
 800fbf4:	dd00      	ble.n	800fbf8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4c8>
 800fbf6:	2514      	movs	r5, #20
 800fbf8:	466b      	mov	r3, sp
 800fbfa:	899b      	ldrh	r3, [r3, #12]
 800fbfc:	1c29      	adds	r1, r5, #0
 800fbfe:	b2ad      	uxth	r5, r5
 800fc00:	429d      	cmp	r5, r3
 800fc02:	d900      	bls.n	800fc06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4d6>
 800fc04:	0019      	movs	r1, r3
 800fc06:	b289      	uxth	r1, r1
 800fc08:	9100      	str	r1, [sp, #0]
 800fc0a:	683d      	ldr	r5, [r7, #0]
 800fc0c:	9b05      	ldr	r3, [sp, #20]
 800fc0e:	9906      	ldr	r1, [sp, #24]
 800fc10:	47a8      	blx	r5
 800fc12:	ad0b      	add	r5, sp, #44	; 0x2c
 800fc14:	6823      	ldr	r3, [r4, #0]
 800fc16:	80e8      	strh	r0, [r5, #6]
 800fc18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fc1a:	0029      	movs	r1, r5
 800fc1c:	0020      	movs	r0, r4
 800fc1e:	4798      	blx	r3
 800fc20:	0033      	movs	r3, r6
 800fc22:	33ae      	adds	r3, #174	; 0xae
 800fc24:	88e9      	ldrh	r1, [r5, #6]
 800fc26:	881a      	ldrh	r2, [r3, #0]
 800fc28:	36b2      	adds	r6, #178	; 0xb2
 800fc2a:	188a      	adds	r2, r1, r2
 800fc2c:	801a      	strh	r2, [r3, #0]
 800fc2e:	8833      	ldrh	r3, [r6, #0]
 800fc30:	1a5b      	subs	r3, r3, r1
 800fc32:	b21b      	sxth	r3, r3
 800fc34:	8033      	strh	r3, [r6, #0]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d104      	bne.n	800fc44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x514>
 800fc3a:	466b      	mov	r3, sp
 800fc3c:	9804      	ldr	r0, [sp, #16]
 800fc3e:	8919      	ldrh	r1, [r3, #8]
 800fc40:	f7ff f9a2 	bl	800ef88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800fc44:	0023      	movs	r3, r4
 800fc46:	33ec      	adds	r3, #236	; 0xec
 800fc48:	881b      	ldrh	r3, [r3, #0]
 800fc4a:	9306      	str	r3, [sp, #24]
 800fc4c:	4b2b      	ldr	r3, [pc, #172]	; (800fcfc <_ZN8touchgfx11Application15drawCachedAreasEv+0x5cc>)
 800fc4e:	881b      	ldrh	r3, [r3, #0]
 800fc50:	3301      	adds	r3, #1
 800fc52:	b29b      	uxth	r3, r3
 800fc54:	9305      	str	r3, [sp, #20]
 800fc56:	00db      	lsls	r3, r3, #3
 800fc58:	9307      	str	r3, [sp, #28]
 800fc5a:	0023      	movs	r3, r4
 800fc5c:	33ac      	adds	r3, #172	; 0xac
 800fc5e:	9304      	str	r3, [sp, #16]
 800fc60:	9b06      	ldr	r3, [sp, #24]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d100      	bne.n	800fc68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x538>
 800fc66:	e6a2      	b.n	800f9ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x27e>
 800fc68:	2000      	movs	r0, #0
 800fc6a:	9b04      	ldr	r3, [sp, #16]
 800fc6c:	885d      	ldrh	r5, [r3, #2]
 800fc6e:	88db      	ldrh	r3, [r3, #6]
 800fc70:	9002      	str	r0, [sp, #8]
 800fc72:	18ed      	adds	r5, r5, r3
 800fc74:	b22d      	sxth	r5, r5
 800fc76:	9b05      	ldr	r3, [sp, #20]
 800fc78:	9a02      	ldr	r2, [sp, #8]
 800fc7a:	1819      	adds	r1, r3, r0
 800fc7c:	00d6      	lsls	r6, r2, #3
 800fc7e:	9a06      	ldr	r2, [sp, #24]
 800fc80:	b28b      	uxth	r3, r1
 800fc82:	429a      	cmp	r2, r3
 800fc84:	d800      	bhi.n	800fc88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>
 800fc86:	e785      	b.n	800fb94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x464>
 800fc88:	19a6      	adds	r6, r4, r6
 800fc8a:	0033      	movs	r3, r6
 800fc8c:	9a07      	ldr	r2, [sp, #28]
 800fc8e:	33ae      	adds	r3, #174	; 0xae
 800fc90:	2700      	movs	r7, #0
 800fc92:	5fdf      	ldrsh	r7, [r3, r7]
 800fc94:	00c3      	lsls	r3, r0, #3
 800fc96:	189b      	adds	r3, r3, r2
 800fc98:	18e3      	adds	r3, r4, r3
 800fc9a:	001a      	movs	r2, r3
 800fc9c:	32ae      	adds	r2, #174	; 0xae
 800fc9e:	468c      	mov	ip, r1
 800fca0:	2100      	movs	r1, #0
 800fca2:	5e52      	ldrsh	r2, [r2, r1]
 800fca4:	4297      	cmp	r7, r2
 800fca6:	dc00      	bgt.n	800fcaa <_ZN8touchgfx11Application15drawCachedAreasEv+0x57a>
 800fca8:	e759      	b.n	800fb5e <_ZN8touchgfx11Application15drawCachedAreasEv+0x42e>
 800fcaa:	33b2      	adds	r3, #178	; 0xb2
 800fcac:	881d      	ldrh	r5, [r3, #0]
 800fcae:	18ad      	adds	r5, r5, r2
 800fcb0:	b22d      	sxth	r5, r5
 800fcb2:	42bd      	cmp	r5, r7
 800fcb4:	dd00      	ble.n	800fcb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x588>
 800fcb6:	003d      	movs	r5, r7
 800fcb8:	4663      	mov	r3, ip
 800fcba:	9302      	str	r3, [sp, #8]
 800fcbc:	3001      	adds	r0, #1
 800fcbe:	e7da      	b.n	800fc76 <_ZN8touchgfx11Application15drawCachedAreasEv+0x546>
 800fcc0:	4b0e      	ldr	r3, [pc, #56]	; (800fcfc <_ZN8touchgfx11Application15drawCachedAreasEv+0x5cc>)
 800fcc2:	881d      	ldrh	r5, [r3, #0]
 800fcc4:	8833      	ldrh	r3, [r6, #0]
 800fcc6:	42ab      	cmp	r3, r5
 800fcc8:	d800      	bhi.n	800fccc <_ZN8touchgfx11Application15drawCachedAreasEv+0x59c>
 800fcca:	e670      	b.n	800f9ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x27e>
 800fccc:	0021      	movs	r1, r4
 800fcce:	00eb      	lsls	r3, r5, #3
 800fcd0:	31ac      	adds	r1, #172	; 0xac
 800fcd2:	18c9      	adds	r1, r1, r3
 800fcd4:	2208      	movs	r2, #8
 800fcd6:	a80b      	add	r0, sp, #44	; 0x2c
 800fcd8:	f004 fb69 	bl	80143ae <memcpy>
 800fcdc:	a80b      	add	r0, sp, #44	; 0x2c
 800fcde:	f7fc fc9f 	bl	800c620 <_ZNK8touchgfx4Rect7isEmptyEv>
 800fce2:	2800      	cmp	r0, #0
 800fce4:	d104      	bne.n	800fcf0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c0>
 800fce6:	6823      	ldr	r3, [r4, #0]
 800fce8:	a90b      	add	r1, sp, #44	; 0x2c
 800fcea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fcec:	0020      	movs	r0, r4
 800fcee:	4798      	blx	r3
 800fcf0:	3501      	adds	r5, #1
 800fcf2:	b2ad      	uxth	r5, r5
 800fcf4:	e7e6      	b.n	800fcc4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x594>
 800fcf6:	46c0      	nop			; (mov r8, r8)
 800fcf8:	200026c0 	.word	0x200026c0
 800fcfc:	20000020 	.word	0x20000020
 800fd00:	200026c8 	.word	0x200026c8

0800fd04 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800fd04:	2200      	movs	r2, #0
 800fd06:	4b03      	ldr	r3, [pc, #12]	; (800fd14 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800fd08:	801a      	strh	r2, [r3, #0]
 800fd0a:	805a      	strh	r2, [r3, #2]
 800fd0c:	809a      	strh	r2, [r3, #4]
 800fd0e:	80da      	strh	r2, [r3, #6]
 800fd10:	4770      	bx	lr
 800fd12:	46c0      	nop			; (mov r8, r8)
 800fd14:	2000270c 	.word	0x2000270c

0800fd18 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 800fd18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd1a:	0005      	movs	r5, r0
 800fd1c:	b0a1      	sub	sp, #132	; 0x84
 800fd1e:	a807      	add	r0, sp, #28
 800fd20:	0014      	movs	r4, r2
 800fd22:	9105      	str	r1, [sp, #20]
 800fd24:	001e      	movs	r6, r3
 800fd26:	f000 fd8a 	bl	801083e <_ZN8touchgfx12TextProviderC1Ev>
 800fd2a:	682b      	ldr	r3, [r5, #0]
 800fd2c:	0028      	movs	r0, r5
 800fd2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd30:	4798      	blx	r3
 800fd32:	0007      	movs	r7, r0
 800fd34:	682b      	ldr	r3, [r5, #0]
 800fd36:	0028      	movs	r0, r5
 800fd38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd3a:	4798      	blx	r3
 800fd3c:	003b      	movs	r3, r7
 800fd3e:	2700      	movs	r7, #0
 800fd40:	0032      	movs	r2, r6
 800fd42:	0021      	movs	r1, r4
 800fd44:	003e      	movs	r6, r7
 800fd46:	003c      	movs	r4, r7
 800fd48:	9000      	str	r0, [sp, #0]
 800fd4a:	a807      	add	r0, sp, #28
 800fd4c:	f000 fdce 	bl	80108ec <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800fd50:	9703      	str	r7, [sp, #12]
 800fd52:	2300      	movs	r3, #0
 800fd54:	9306      	str	r3, [sp, #24]
 800fd56:	4b1a      	ldr	r3, [pc, #104]	; (800fdc0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0xa8>)
 800fd58:	429c      	cmp	r4, r3
 800fd5a:	d003      	beq.n	800fd64 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4c>
 800fd5c:	4b19      	ldr	r3, [pc, #100]	; (800fdc4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0xac>)
 800fd5e:	429c      	cmp	r4, r3
 800fd60:	d000      	beq.n	800fd64 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4c>
 800fd62:	0027      	movs	r7, r4
 800fd64:	ab06      	add	r3, sp, #24
 800fd66:	002a      	movs	r2, r5
 800fd68:	9905      	ldr	r1, [sp, #20]
 800fd6a:	a807      	add	r0, sp, #28
 800fd6c:	f001 f8b6 	bl	8010edc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800fd70:	1e04      	subs	r4, r0, #0
 800fd72:	d001      	beq.n	800fd78 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x60>
 800fd74:	280a      	cmp	r0, #10
 800fd76:	d10d      	bne.n	800fd94 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 800fd78:	9a03      	ldr	r2, [sp, #12]
 800fd7a:	1c33      	adds	r3, r6, #0
 800fd7c:	4296      	cmp	r6, r2
 800fd7e:	d201      	bcs.n	800fd84 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x6c>
 800fd80:	466b      	mov	r3, sp
 800fd82:	899b      	ldrh	r3, [r3, #12]
 800fd84:	2600      	movs	r6, #0
 800fd86:	b29b      	uxth	r3, r3
 800fd88:	9303      	str	r3, [sp, #12]
 800fd8a:	2c00      	cmp	r4, #0
 800fd8c:	d1e1      	bne.n	800fd52 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x3a>
 800fd8e:	9803      	ldr	r0, [sp, #12]
 800fd90:	b021      	add	sp, #132	; 0x84
 800fd92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd94:	9a06      	ldr	r2, [sp, #24]
 800fd96:	2a00      	cmp	r2, #0
 800fd98:	d0db      	beq.n	800fd52 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x3a>
 800fd9a:	2380      	movs	r3, #128	; 0x80
 800fd9c:	7b50      	ldrb	r0, [r2, #13]
 800fd9e:	005b      	lsls	r3, r3, #1
 800fda0:	0040      	lsls	r0, r0, #1
 800fda2:	4018      	ands	r0, r3
 800fda4:	7a93      	ldrb	r3, [r2, #10]
 800fda6:	8894      	ldrh	r4, [r2, #4]
 800fda8:	4303      	orrs	r3, r0
 800fdaa:	9304      	str	r3, [sp, #16]
 800fdac:	682b      	ldr	r3, [r5, #0]
 800fdae:	0039      	movs	r1, r7
 800fdb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fdb2:	0028      	movs	r0, r5
 800fdb4:	4798      	blx	r3
 800fdb6:	9b04      	ldr	r3, [sp, #16]
 800fdb8:	18c0      	adds	r0, r0, r3
 800fdba:	1836      	adds	r6, r6, r0
 800fdbc:	b2b6      	uxth	r6, r6
 800fdbe:	e7e4      	b.n	800fd8a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x72>
 800fdc0:	0000feff 	.word	0x0000feff
 800fdc4:	0000200b 	.word	0x0000200b

0800fdc8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 800fdc8:	b510      	push	{r4, lr}
 800fdca:	6803      	ldr	r3, [r0, #0]
 800fdcc:	68db      	ldr	r3, [r3, #12]
 800fdce:	4798      	blx	r3
 800fdd0:	1e03      	subs	r3, r0, #0
 800fdd2:	d006      	beq.n	800fde2 <_ZNK8touchgfx4Font12getCharWidthEt+0x1a>
 800fdd4:	2280      	movs	r2, #128	; 0x80
 800fdd6:	7b43      	ldrb	r3, [r0, #13]
 800fdd8:	0052      	lsls	r2, r2, #1
 800fdda:	005b      	lsls	r3, r3, #1
 800fddc:	7a80      	ldrb	r0, [r0, #10]
 800fdde:	4013      	ands	r3, r2
 800fde0:	4303      	orrs	r3, r0
 800fde2:	0018      	movs	r0, r3
 800fde4:	bd10      	pop	{r4, pc}
	...

0800fde8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800fde8:	b40e      	push	{r1, r2, r3}
 800fdea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdec:	0005      	movs	r5, r0
 800fdee:	b09e      	sub	sp, #120	; 0x78
 800fdf0:	ab23      	add	r3, sp, #140	; 0x8c
 800fdf2:	cb10      	ldmia	r3!, {r4}
 800fdf4:	a805      	add	r0, sp, #20
 800fdf6:	9303      	str	r3, [sp, #12]
 800fdf8:	f000 fd21 	bl	801083e <_ZN8touchgfx12TextProviderC1Ev>
 800fdfc:	682b      	ldr	r3, [r5, #0]
 800fdfe:	0028      	movs	r0, r5
 800fe00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe02:	4798      	blx	r3
 800fe04:	682b      	ldr	r3, [r5, #0]
 800fe06:	0006      	movs	r6, r0
 800fe08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe0a:	0028      	movs	r0, r5
 800fe0c:	4798      	blx	r3
 800fe0e:	0021      	movs	r1, r4
 800fe10:	2400      	movs	r4, #0
 800fe12:	0033      	movs	r3, r6
 800fe14:	9000      	str	r0, [sp, #0]
 800fe16:	9a03      	ldr	r2, [sp, #12]
 800fe18:	a805      	add	r0, sp, #20
 800fe1a:	f000 fd67 	bl	80108ec <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800fe1e:	2680      	movs	r6, #128	; 0x80
 800fe20:	ab04      	add	r3, sp, #16
 800fe22:	002a      	movs	r2, r5
 800fe24:	0021      	movs	r1, r4
 800fe26:	a805      	add	r0, sp, #20
 800fe28:	9404      	str	r4, [sp, #16]
 800fe2a:	f001 f857 	bl	8010edc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800fe2e:	0076      	lsls	r6, r6, #1
 800fe30:	2800      	cmp	r0, #0
 800fe32:	d023      	beq.n	800fe7c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 800fe34:	280a      	cmp	r0, #10
 800fe36:	d01a      	beq.n	800fe6e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800fe38:	9b04      	ldr	r3, [sp, #16]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d017      	beq.n	800fe6e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800fe3e:	7b58      	ldrb	r0, [r3, #13]
 800fe40:	7a1f      	ldrb	r7, [r3, #8]
 800fe42:	00c1      	lsls	r1, r0, #3
 800fe44:	4031      	ands	r1, r6
 800fe46:	4339      	orrs	r1, r7
 800fe48:	2740      	movs	r7, #64	; 0x40
 800fe4a:	88ea      	ldrh	r2, [r5, #6]
 800fe4c:	4238      	tst	r0, r7
 800fe4e:	d002      	beq.n	800fe56 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x6e>
 800fe50:	4f0d      	ldr	r7, [pc, #52]	; (800fe88 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 800fe52:	19c9      	adds	r1, r1, r7
 800fe54:	b209      	sxth	r1, r1
 800fe56:	0100      	lsls	r0, r0, #4
 800fe58:	79db      	ldrb	r3, [r3, #7]
 800fe5a:	4030      	ands	r0, r6
 800fe5c:	4303      	orrs	r3, r0
 800fe5e:	18d3      	adds	r3, r2, r3
 800fe60:	1a5b      	subs	r3, r3, r1
 800fe62:	1c1a      	adds	r2, r3, #0
 800fe64:	b21b      	sxth	r3, r3
 800fe66:	42a3      	cmp	r3, r4
 800fe68:	da00      	bge.n	800fe6c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 800fe6a:	1c22      	adds	r2, r4, #0
 800fe6c:	b214      	sxth	r4, r2
 800fe6e:	ab04      	add	r3, sp, #16
 800fe70:	002a      	movs	r2, r5
 800fe72:	2100      	movs	r1, #0
 800fe74:	a805      	add	r0, sp, #20
 800fe76:	f001 f831 	bl	8010edc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800fe7a:	e7d9      	b.n	800fe30 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x48>
 800fe7c:	b2a0      	uxth	r0, r4
 800fe7e:	b01e      	add	sp, #120	; 0x78
 800fe80:	bcf0      	pop	{r4, r5, r6, r7}
 800fe82:	bc08      	pop	{r3}
 800fe84:	b003      	add	sp, #12
 800fe86:	4718      	bx	r3
 800fe88:	fffffe00 	.word	0xfffffe00

0800fe8c <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 800fe8c:	7a43      	ldrb	r3, [r0, #9]
 800fe8e:	8880      	ldrh	r0, [r0, #4]
 800fe90:	1818      	adds	r0, r3, r0
 800fe92:	b280      	uxth	r0, r0
 800fe94:	4770      	bx	lr

0800fe96 <_ZNK8touchgfx4Font13getFontHeightEv>:
 800fe96:	b510      	push	{r4, lr}
 800fe98:	6803      	ldr	r3, [r0, #0]
 800fe9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe9c:	4798      	blx	r3
 800fe9e:	bd10      	pop	{r4, pc}

0800fea0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800fea0:	b40e      	push	{r1, r2, r3}
 800fea2:	b570      	push	{r4, r5, r6, lr}
 800fea4:	0004      	movs	r4, r0
 800fea6:	b09d      	sub	sp, #116	; 0x74
 800fea8:	ab21      	add	r3, sp, #132	; 0x84
 800feaa:	cb20      	ldmia	r3!, {r5}
 800feac:	a803      	add	r0, sp, #12
 800feae:	9302      	str	r3, [sp, #8]
 800feb0:	f000 fcc5 	bl	801083e <_ZN8touchgfx12TextProviderC1Ev>
 800feb4:	6823      	ldr	r3, [r4, #0]
 800feb6:	0020      	movs	r0, r4
 800feb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800feba:	4798      	blx	r3
 800febc:	6823      	ldr	r3, [r4, #0]
 800febe:	0006      	movs	r6, r0
 800fec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fec2:	0020      	movs	r0, r4
 800fec4:	4798      	blx	r3
 800fec6:	0033      	movs	r3, r6
 800fec8:	9000      	str	r0, [sp, #0]
 800feca:	9a02      	ldr	r2, [sp, #8]
 800fecc:	0029      	movs	r1, r5
 800fece:	a803      	add	r0, sp, #12
 800fed0:	f000 fd0c 	bl	80108ec <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800fed4:	a803      	add	r0, sp, #12
 800fed6:	f001 f890 	bl	8010ffa <_ZN8touchgfx12TextProvider11getNextCharEv>
 800feda:	2401      	movs	r4, #1
 800fedc:	b2a3      	uxth	r3, r4
 800fede:	2800      	cmp	r0, #0
 800fee0:	d007      	beq.n	800fef2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 800fee2:	280a      	cmp	r0, #10
 800fee4:	d101      	bne.n	800feea <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x4a>
 800fee6:	3301      	adds	r3, #1
 800fee8:	b21c      	sxth	r4, r3
 800feea:	a803      	add	r0, sp, #12
 800feec:	f001 f885 	bl	8010ffa <_ZN8touchgfx12TextProvider11getNextCharEv>
 800fef0:	e7f4      	b.n	800fedc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3c>
 800fef2:	0018      	movs	r0, r3
 800fef4:	b01d      	add	sp, #116	; 0x74
 800fef6:	bc70      	pop	{r4, r5, r6}
 800fef8:	bc08      	pop	{r3}
 800fefa:	b003      	add	sp, #12
 800fefc:	4718      	bx	r3
	...

0800ff00 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800ff00:	b40e      	push	{r1, r2, r3}
 800ff02:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff04:	0004      	movs	r4, r0
 800ff06:	b09e      	sub	sp, #120	; 0x78
 800ff08:	ab23      	add	r3, sp, #140	; 0x8c
 800ff0a:	cb20      	ldmia	r3!, {r5}
 800ff0c:	a805      	add	r0, sp, #20
 800ff0e:	9303      	str	r3, [sp, #12]
 800ff10:	f000 fc95 	bl	801083e <_ZN8touchgfx12TextProviderC1Ev>
 800ff14:	6823      	ldr	r3, [r4, #0]
 800ff16:	0020      	movs	r0, r4
 800ff18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ff1a:	4798      	blx	r3
 800ff1c:	6823      	ldr	r3, [r4, #0]
 800ff1e:	0006      	movs	r6, r0
 800ff20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff22:	0020      	movs	r0, r4
 800ff24:	4798      	blx	r3
 800ff26:	0033      	movs	r3, r6
 800ff28:	0029      	movs	r1, r5
 800ff2a:	9000      	str	r0, [sp, #0]
 800ff2c:	9a03      	ldr	r2, [sp, #12]
 800ff2e:	a805      	add	r0, sp, #20
 800ff30:	f000 fcdc 	bl	80108ec <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800ff34:	2100      	movs	r1, #0
 800ff36:	ab04      	add	r3, sp, #16
 800ff38:	0022      	movs	r2, r4
 800ff3a:	a805      	add	r0, sp, #20
 800ff3c:	2680      	movs	r6, #128	; 0x80
 800ff3e:	9104      	str	r1, [sp, #16]
 800ff40:	2740      	movs	r7, #64	; 0x40
 800ff42:	f000 ffcb 	bl	8010edc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800ff46:	4d14      	ldr	r5, [pc, #80]	; (800ff98 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x98>)
 800ff48:	0076      	lsls	r6, r6, #1
 800ff4a:	2800      	cmp	r0, #0
 800ff4c:	d01d      	beq.n	800ff8a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x8a>
 800ff4e:	280a      	cmp	r0, #10
 800ff50:	d014      	beq.n	800ff7c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x7c>
 800ff52:	9b04      	ldr	r3, [sp, #16]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d011      	beq.n	800ff7c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x7c>
 800ff58:	7b58      	ldrb	r0, [r3, #13]
 800ff5a:	7a1b      	ldrb	r3, [r3, #8]
 800ff5c:	00c1      	lsls	r1, r0, #3
 800ff5e:	4031      	ands	r1, r6
 800ff60:	88e2      	ldrh	r2, [r4, #6]
 800ff62:	430b      	orrs	r3, r1
 800ff64:	4238      	tst	r0, r7
 800ff66:	d002      	beq.n	800ff6e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6e>
 800ff68:	490c      	ldr	r1, [pc, #48]	; (800ff9c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x9c>)
 800ff6a:	185b      	adds	r3, r3, r1
 800ff6c:	b21b      	sxth	r3, r3
 800ff6e:	1ad3      	subs	r3, r2, r3
 800ff70:	1c1a      	adds	r2, r3, #0
 800ff72:	b21b      	sxth	r3, r3
 800ff74:	42ab      	cmp	r3, r5
 800ff76:	dd00      	ble.n	800ff7a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x7a>
 800ff78:	1c2a      	adds	r2, r5, #0
 800ff7a:	b215      	sxth	r5, r2
 800ff7c:	ab04      	add	r3, sp, #16
 800ff7e:	0022      	movs	r2, r4
 800ff80:	2100      	movs	r1, #0
 800ff82:	a805      	add	r0, sp, #20
 800ff84:	f000 ffaa 	bl	8010edc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800ff88:	e7df      	b.n	800ff4a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 800ff8a:	0028      	movs	r0, r5
 800ff8c:	b01e      	add	sp, #120	; 0x78
 800ff8e:	bcf0      	pop	{r4, r5, r6, r7}
 800ff90:	bc08      	pop	{r3}
 800ff92:	b003      	add	sp, #12
 800ff94:	4718      	bx	r3
 800ff96:	46c0      	nop			; (mov r8, r8)
 800ff98:	00007fff 	.word	0x00007fff
 800ff9c:	fffffe00 	.word	0xfffffe00

0800ffa0 <_ZNK8touchgfx8Drawable10invalidateEv>:
 800ffa0:	b507      	push	{r0, r1, r2, lr}
 800ffa2:	2308      	movs	r3, #8
 800ffa4:	5ec2      	ldrsh	r2, [r0, r3]
 800ffa6:	210a      	movs	r1, #10
 800ffa8:	5e43      	ldrsh	r3, [r0, r1]
 800ffaa:	2100      	movs	r1, #0
 800ffac:	9100      	str	r1, [sp, #0]
 800ffae:	4669      	mov	r1, sp
 800ffb0:	80cb      	strh	r3, [r1, #6]
 800ffb2:	6803      	ldr	r3, [r0, #0]
 800ffb4:	808a      	strh	r2, [r1, #4]
 800ffb6:	691b      	ldr	r3, [r3, #16]
 800ffb8:	4798      	blx	r3
 800ffba:	bd07      	pop	{r0, r1, r2, pc}

0800ffbc <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 800ffbc:	b570      	push	{r4, r5, r6, lr}
 800ffbe:	000c      	movs	r4, r1
 800ffc0:	0005      	movs	r5, r0
 800ffc2:	680b      	ldr	r3, [r1, #0]
 800ffc4:	68db      	ldr	r3, [r3, #12]
 800ffc6:	4798      	blx	r3
 800ffc8:	6823      	ldr	r3, [r4, #0]
 800ffca:	0029      	movs	r1, r5
 800ffcc:	0020      	movs	r0, r4
 800ffce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffd0:	4798      	blx	r3
 800ffd2:	0028      	movs	r0, r5
 800ffd4:	bd70      	pop	{r4, r5, r6, pc}

0800ffd6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 800ffd6:	b510      	push	{r4, lr}
 800ffd8:	880b      	ldrh	r3, [r1, #0]
 800ffda:	8882      	ldrh	r2, [r0, #4]
 800ffdc:	189b      	adds	r3, r3, r2
 800ffde:	800b      	strh	r3, [r1, #0]
 800ffe0:	88c2      	ldrh	r2, [r0, #6]
 800ffe2:	884b      	ldrh	r3, [r1, #2]
 800ffe4:	189b      	adds	r3, r3, r2
 800ffe6:	804b      	strh	r3, [r1, #2]
 800ffe8:	6940      	ldr	r0, [r0, #20]
 800ffea:	2800      	cmp	r0, #0
 800ffec:	d002      	beq.n	800fff4 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x1e>
 800ffee:	6803      	ldr	r3, [r0, #0]
 800fff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fff2:	4798      	blx	r3
 800fff4:	bd10      	pop	{r4, pc}

0800fff6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 800fff6:	b570      	push	{r4, r5, r6, lr}
 800fff8:	000c      	movs	r4, r1
 800fffa:	8882      	ldrh	r2, [r0, #4]
 800fffc:	880b      	ldrh	r3, [r1, #0]
 800fffe:	0005      	movs	r5, r0
 8010000:	189b      	adds	r3, r3, r2
 8010002:	800b      	strh	r3, [r1, #0]
 8010004:	88c2      	ldrh	r2, [r0, #6]
 8010006:	884b      	ldrh	r3, [r1, #2]
 8010008:	189b      	adds	r3, r3, r2
 801000a:	804b      	strh	r3, [r1, #2]
 801000c:	1d01      	adds	r1, r0, #4
 801000e:	0020      	movs	r0, r4
 8010010:	f7fc fab6 	bl	800c580 <_ZN8touchgfx4RectaNERKS0_>
 8010014:	2204      	movs	r2, #4
 8010016:	5ea3      	ldrsh	r3, [r4, r2]
 8010018:	2b00      	cmp	r3, #0
 801001a:	dd0a      	ble.n	8010032 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3c>
 801001c:	2206      	movs	r2, #6
 801001e:	5ea3      	ldrsh	r3, [r4, r2]
 8010020:	2b00      	cmp	r3, #0
 8010022:	dd06      	ble.n	8010032 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3c>
 8010024:	6968      	ldr	r0, [r5, #20]
 8010026:	2800      	cmp	r0, #0
 8010028:	d003      	beq.n	8010032 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3c>
 801002a:	6803      	ldr	r3, [r0, #0]
 801002c:	0021      	movs	r1, r4
 801002e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010030:	4798      	blx	r3
 8010032:	bd70      	pop	{r4, r5, r6, pc}

08010034 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8010034:	b570      	push	{r4, r5, r6, lr}
 8010036:	000c      	movs	r4, r1
 8010038:	8882      	ldrh	r2, [r0, #4]
 801003a:	880b      	ldrh	r3, [r1, #0]
 801003c:	0005      	movs	r5, r0
 801003e:	189b      	adds	r3, r3, r2
 8010040:	800b      	strh	r3, [r1, #0]
 8010042:	88c2      	ldrh	r2, [r0, #6]
 8010044:	884b      	ldrh	r3, [r1, #2]
 8010046:	189b      	adds	r3, r3, r2
 8010048:	804b      	strh	r3, [r1, #2]
 801004a:	1d01      	adds	r1, r0, #4
 801004c:	0020      	movs	r0, r4
 801004e:	f7fc fa97 	bl	800c580 <_ZN8touchgfx4RectaNERKS0_>
 8010052:	2204      	movs	r2, #4
 8010054:	5ea3      	ldrsh	r3, [r4, r2]
 8010056:	2b00      	cmp	r3, #0
 8010058:	dd0a      	ble.n	8010070 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3c>
 801005a:	2206      	movs	r2, #6
 801005c:	5ea3      	ldrsh	r3, [r4, r2]
 801005e:	2b00      	cmp	r3, #0
 8010060:	dd06      	ble.n	8010070 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3c>
 8010062:	6968      	ldr	r0, [r5, #20]
 8010064:	2800      	cmp	r0, #0
 8010066:	d004      	beq.n	8010072 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8010068:	6803      	ldr	r3, [r0, #0]
 801006a:	0021      	movs	r1, r4
 801006c:	691b      	ldr	r3, [r3, #16]
 801006e:	4798      	blx	r3
 8010070:	bd70      	pop	{r4, r5, r6, pc}
 8010072:	4b09      	ldr	r3, [pc, #36]	; (8010098 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x64>)
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	3304      	adds	r3, #4
 8010078:	429d      	cmp	r5, r3
 801007a:	d1f9      	bne.n	8010070 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3c>
 801007c:	f7fe fe60 	bl	800ed40 <_ZN8touchgfx11Application11getInstanceEv>
 8010080:	8861      	ldrh	r1, [r4, #2]
 8010082:	8822      	ldrh	r2, [r4, #0]
 8010084:	0409      	lsls	r1, r1, #16
 8010086:	4311      	orrs	r1, r2
 8010088:	88e2      	ldrh	r2, [r4, #6]
 801008a:	6803      	ldr	r3, [r0, #0]
 801008c:	88a5      	ldrh	r5, [r4, #4]
 801008e:	0412      	lsls	r2, r2, #16
 8010090:	432a      	orrs	r2, r5
 8010092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010094:	4798      	blx	r3
 8010096:	e7eb      	b.n	8010070 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3c>
 8010098:	20002704 	.word	0x20002704

0801009c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801009c:	000b      	movs	r3, r1
 801009e:	b570      	push	{r4, r5, r6, lr}
 80100a0:	4313      	orrs	r3, r2
 80100a2:	0004      	movs	r4, r0
 80100a4:	000d      	movs	r5, r1
 80100a6:	0016      	movs	r6, r2
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d00f      	beq.n	80100cc <_ZN8touchgfx8Drawable12moveRelativeEss+0x30>
 80100ac:	6803      	ldr	r3, [r0, #0]
 80100ae:	699b      	ldr	r3, [r3, #24]
 80100b0:	4798      	blx	r3
 80100b2:	88e2      	ldrh	r2, [r4, #6]
 80100b4:	88a1      	ldrh	r1, [r4, #4]
 80100b6:	1992      	adds	r2, r2, r6
 80100b8:	1949      	adds	r1, r1, r5
 80100ba:	0020      	movs	r0, r4
 80100bc:	b212      	sxth	r2, r2
 80100be:	b209      	sxth	r1, r1
 80100c0:	f7f9 f8ee 	bl	80092a0 <_ZN8touchgfx8Drawable5setXYEss>
 80100c4:	6823      	ldr	r3, [r4, #0]
 80100c6:	0020      	movs	r0, r4
 80100c8:	699b      	ldr	r3, [r3, #24]
 80100ca:	4798      	blx	r3
 80100cc:	bd70      	pop	{r4, r5, r6, pc}

080100ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80100ce:	b510      	push	{r4, lr}
 80100d0:	0004      	movs	r4, r0
 80100d2:	0008      	movs	r0, r1
 80100d4:	2308      	movs	r3, #8
 80100d6:	5ec9      	ldrsh	r1, [r1, r3]
 80100d8:	230a      	movs	r3, #10
 80100da:	5ec2      	ldrsh	r2, [r0, r3]
 80100dc:	2300      	movs	r3, #0
 80100de:	8023      	strh	r3, [r4, #0]
 80100e0:	8063      	strh	r3, [r4, #2]
 80100e2:	6803      	ldr	r3, [r0, #0]
 80100e4:	80a1      	strh	r1, [r4, #4]
 80100e6:	80e2      	strh	r2, [r4, #6]
 80100e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100ea:	0021      	movs	r1, r4
 80100ec:	4798      	blx	r3
 80100ee:	0020      	movs	r0, r4
 80100f0:	bd10      	pop	{r4, pc}
	...

080100f4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 80100f4:	469c      	mov	ip, r3
 80100f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100f8:	b087      	sub	sp, #28
 80100fa:	ac0d      	add	r4, sp, #52	; 0x34
 80100fc:	7827      	ldrb	r7, [r4, #0]
 80100fe:	9101      	str	r1, [sp, #4]
 8010100:	7207      	strb	r7, [r0, #8]
 8010102:	277f      	movs	r7, #127	; 0x7f
 8010104:	4661      	mov	r1, ip
 8010106:	ac0e      	add	r4, sp, #56	; 0x38
 8010108:	7824      	ldrb	r4, [r4, #0]
 801010a:	ab0c      	add	r3, sp, #48	; 0x30
 801010c:	881b      	ldrh	r3, [r3, #0]
 801010e:	ad10      	add	r5, sp, #64	; 0x40
 8010110:	9402      	str	r4, [sp, #8]
 8010112:	782e      	ldrb	r6, [r5, #0]
 8010114:	ad11      	add	r5, sp, #68	; 0x44
 8010116:	782d      	ldrb	r5, [r5, #0]
 8010118:	80c3      	strh	r3, [r0, #6]
 801011a:	9b02      	ldr	r3, [sp, #8]
 801011c:	ac0f      	add	r4, sp, #60	; 0x3c
 801011e:	9503      	str	r5, [sp, #12]
 8010120:	7243      	strb	r3, [r0, #9]
 8010122:	7824      	ldrb	r4, [r4, #0]
 8010124:	7a83      	ldrb	r3, [r0, #10]
 8010126:	ad12      	add	r5, sp, #72	; 0x48
 8010128:	782d      	ldrb	r5, [r5, #0]
 801012a:	43bb      	bics	r3, r7
 801012c:	403c      	ands	r4, r7
 801012e:	9504      	str	r5, [sp, #16]
 8010130:	431c      	orrs	r4, r3
 8010132:	ad13      	add	r5, sp, #76	; 0x4c
 8010134:	9b03      	ldr	r3, [sp, #12]
 8010136:	882d      	ldrh	r5, [r5, #0]
 8010138:	72c3      	strb	r3, [r0, #11]
 801013a:	9b04      	ldr	r3, [sp, #16]
 801013c:	9505      	str	r5, [sp, #20]
 801013e:	7303      	strb	r3, [r0, #12]
 8010140:	9b05      	ldr	r3, [sp, #20]
 8010142:	ad14      	add	r5, sp, #80	; 0x50
 8010144:	81c3      	strh	r3, [r0, #14]
 8010146:	4b07      	ldr	r3, [pc, #28]	; (8010164 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x70>)
 8010148:	882d      	ldrh	r5, [r5, #0]
 801014a:	3308      	adds	r3, #8
 801014c:	6003      	str	r3, [r0, #0]
 801014e:	403c      	ands	r4, r7
 8010150:	9b01      	ldr	r3, [sp, #4]
 8010152:	01f6      	lsls	r6, r6, #7
 8010154:	4326      	orrs	r6, r4
 8010156:	8081      	strh	r1, [r0, #4]
 8010158:	7286      	strb	r6, [r0, #10]
 801015a:	8205      	strh	r5, [r0, #16]
 801015c:	6143      	str	r3, [r0, #20]
 801015e:	8302      	strh	r2, [r0, #24]
 8010160:	b007      	add	sp, #28
 8010162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010164:	08016c8c 	.word	0x08016c8c

08010168 <_ZNK8touchgfx9ConstFont4findEt>:
 8010168:	b5f0      	push	{r4, r5, r6, r7, lr}
 801016a:	6945      	ldr	r5, [r0, #20]
 801016c:	0003      	movs	r3, r0
 801016e:	1e28      	subs	r0, r5, #0
 8010170:	d03a      	beq.n	80101e8 <_ZNK8touchgfx9ConstFont4findEt+0x80>
 8010172:	2000      	movs	r0, #0
 8010174:	8b1a      	ldrh	r2, [r3, #24]
 8010176:	88ab      	ldrh	r3, [r5, #4]
 8010178:	3a01      	subs	r2, #1
 801017a:	1acb      	subs	r3, r1, r3
 801017c:	4283      	cmp	r3, r0
 801017e:	db33      	blt.n	80101e8 <_ZNK8touchgfx9ConstFont4findEt+0x80>
 8010180:	4293      	cmp	r3, r2
 8010182:	dd0c      	ble.n	801019e <_ZNK8touchgfx9ConstFont4findEt+0x36>
 8010184:	230e      	movs	r3, #14
 8010186:	4353      	muls	r3, r2
 8010188:	18eb      	adds	r3, r5, r3
 801018a:	889b      	ldrh	r3, [r3, #4]
 801018c:	1a5b      	subs	r3, r3, r1
 801018e:	1ad3      	subs	r3, r2, r3
 8010190:	429a      	cmp	r2, r3
 8010192:	db29      	blt.n	80101e8 <_ZNK8touchgfx9ConstFont4findEt+0x80>
 8010194:	4283      	cmp	r3, r0
 8010196:	da02      	bge.n	801019e <_ZNK8touchgfx9ConstFont4findEt+0x36>
 8010198:	0fd3      	lsrs	r3, r2, #31
 801019a:	189b      	adds	r3, r3, r2
 801019c:	105b      	asrs	r3, r3, #1
 801019e:	2400      	movs	r4, #0
 80101a0:	260e      	movs	r6, #14
 80101a2:	4294      	cmp	r4, r2
 80101a4:	dc1f      	bgt.n	80101e6 <_ZNK8touchgfx9ConstFont4findEt+0x7e>
 80101a6:	0030      	movs	r0, r6
 80101a8:	4358      	muls	r0, r3
 80101aa:	1828      	adds	r0, r5, r0
 80101ac:	8887      	ldrh	r7, [r0, #4]
 80101ae:	42b9      	cmp	r1, r7
 80101b0:	d01a      	beq.n	80101e8 <_ZNK8touchgfx9ConstFont4findEt+0x80>
 80101b2:	d20d      	bcs.n	80101d0 <_ZNK8touchgfx9ConstFont4findEt+0x68>
 80101b4:	1e5a      	subs	r2, r3, #1
 80101b6:	4294      	cmp	r4, r2
 80101b8:	dc15      	bgt.n	80101e6 <_ZNK8touchgfx9ConstFont4findEt+0x7e>
 80101ba:	380e      	subs	r0, #14
 80101bc:	8883      	ldrh	r3, [r0, #4]
 80101be:	1a5b      	subs	r3, r3, r1
 80101c0:	1ad3      	subs	r3, r2, r3
 80101c2:	429a      	cmp	r2, r3
 80101c4:	db0f      	blt.n	80101e6 <_ZNK8touchgfx9ConstFont4findEt+0x7e>
 80101c6:	429c      	cmp	r4, r3
 80101c8:	ddeb      	ble.n	80101a2 <_ZNK8touchgfx9ConstFont4findEt+0x3a>
 80101ca:	1913      	adds	r3, r2, r4
 80101cc:	105b      	asrs	r3, r3, #1
 80101ce:	e7e8      	b.n	80101a2 <_ZNK8touchgfx9ConstFont4findEt+0x3a>
 80101d0:	1c5c      	adds	r4, r3, #1
 80101d2:	42a2      	cmp	r2, r4
 80101d4:	db07      	blt.n	80101e6 <_ZNK8touchgfx9ConstFont4findEt+0x7e>
 80101d6:	8a43      	ldrh	r3, [r0, #18]
 80101d8:	1acb      	subs	r3, r1, r3
 80101da:	191b      	adds	r3, r3, r4
 80101dc:	429c      	cmp	r4, r3
 80101de:	dc02      	bgt.n	80101e6 <_ZNK8touchgfx9ConstFont4findEt+0x7e>
 80101e0:	429a      	cmp	r2, r3
 80101e2:	dade      	bge.n	80101a2 <_ZNK8touchgfx9ConstFont4findEt+0x3a>
 80101e4:	e7f1      	b.n	80101ca <_ZNK8touchgfx9ConstFont4findEt+0x62>
 80101e6:	2000      	movs	r0, #0
 80101e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080101ec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80101ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101ee:	0004      	movs	r4, r0
 80101f0:	0017      	movs	r7, r2
 80101f2:	001e      	movs	r6, r3
 80101f4:	2900      	cmp	r1, #0
 80101f6:	d102      	bne.n	80101fe <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 80101f8:	2500      	movs	r5, #0
 80101fa:	0028      	movs	r0, r5
 80101fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101fe:	290a      	cmp	r1, #10
 8010200:	d0fa      	beq.n	80101f8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>
 8010202:	4b10      	ldr	r3, [pc, #64]	; (8010244 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x58>)
 8010204:	4299      	cmp	r1, r3
 8010206:	d0f7      	beq.n	80101f8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>
 8010208:	4b0f      	ldr	r3, [pc, #60]	; (8010248 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x5c>)
 801020a:	4299      	cmp	r1, r3
 801020c:	d0f4      	beq.n	80101f8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>
 801020e:	f7ff ffab 	bl	8010168 <_ZNK8touchgfx9ConstFont4findEt>
 8010212:	1e05      	subs	r5, r0, #0
 8010214:	d109      	bne.n	801022a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x3e>
 8010216:	6823      	ldr	r3, [r4, #0]
 8010218:	0020      	movs	r0, r4
 801021a:	691b      	ldr	r3, [r3, #16]
 801021c:	4798      	blx	r3
 801021e:	0001      	movs	r1, r0
 8010220:	0020      	movs	r0, r4
 8010222:	f7ff ffa1 	bl	8010168 <_ZNK8touchgfx9ConstFont4findEt>
 8010226:	1e05      	subs	r5, r0, #0
 8010228:	d0e6      	beq.n	80101f8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>
 801022a:	6823      	ldr	r3, [r4, #0]
 801022c:	0029      	movs	r1, r5
 801022e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010230:	0020      	movs	r0, r4
 8010232:	4798      	blx	r3
 8010234:	6038      	str	r0, [r7, #0]
 8010236:	6823      	ldr	r3, [r4, #0]
 8010238:	0020      	movs	r0, r4
 801023a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801023c:	4798      	blx	r3
 801023e:	7030      	strb	r0, [r6, #0]
 8010240:	e7db      	b.n	80101fa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xe>
 8010242:	46c0      	nop			; (mov r8, r8)
 8010244:	0000feff 	.word	0x0000feff
 8010248:	0000200b 	.word	0x0000200b

0801024c <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801024c:	2000      	movs	r0, #0
 801024e:	4770      	bx	lr

08010250 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8010250:	2001      	movs	r0, #1
 8010252:	4770      	bx	lr

08010254 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8010254:	2002      	movs	r0, #2
 8010256:	4770      	bx	lr

08010258 <_ZN8touchgfx12GestureEventD1Ev>:
 8010258:	4770      	bx	lr

0801025a <_ZN8touchgfx9DragEventD1Ev>:
 801025a:	4770      	bx	lr

0801025c <_ZN8touchgfx10ClickEventD1Ev>:
 801025c:	4770      	bx	lr

0801025e <_ZN8touchgfx10ClickEventD0Ev>:
 801025e:	b510      	push	{r4, lr}
 8010260:	0004      	movs	r4, r0
 8010262:	210c      	movs	r1, #12
 8010264:	f003 fd86 	bl	8013d74 <_ZdlPvj>
 8010268:	0020      	movs	r0, r4
 801026a:	bd10      	pop	{r4, pc}

0801026c <_ZN8touchgfx9DragEventD0Ev>:
 801026c:	b510      	push	{r4, lr}
 801026e:	0004      	movs	r4, r0
 8010270:	2110      	movs	r1, #16
 8010272:	f003 fd7f 	bl	8013d74 <_ZdlPvj>
 8010276:	0020      	movs	r0, r4
 8010278:	bd10      	pop	{r4, pc}

0801027a <_ZN8touchgfx12GestureEventD0Ev>:
 801027a:	b510      	push	{r4, lr}
 801027c:	0004      	movs	r4, r0
 801027e:	210c      	movs	r1, #12
 8010280:	f003 fd78 	bl	8013d74 <_ZdlPvj>
 8010284:	0020      	movs	r0, r4
 8010286:	bd10      	pop	{r4, pc}

08010288 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8010288:	b5f0      	push	{r4, r5, r6, r7, lr}
 801028a:	000d      	movs	r5, r1
 801028c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801028e:	b087      	sub	sp, #28
 8010290:	0004      	movs	r4, r0
 8010292:	2900      	cmp	r1, #0
 8010294:	d01b      	beq.n	80102ce <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x46>
 8010296:	ae01      	add	r6, sp, #4
 8010298:	0030      	movs	r0, r6
 801029a:	f7ff ff18 	bl	80100ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801029e:	2306      	movs	r3, #6
 80102a0:	5ee8      	ldrsh	r0, [r5, r3]
 80102a2:	892a      	ldrh	r2, [r5, #8]
 80102a4:	8833      	ldrh	r3, [r6, #0]
 80102a6:	8871      	ldrh	r1, [r6, #2]
 80102a8:	1ad2      	subs	r2, r2, r3
 80102aa:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80102ac:	792f      	ldrb	r7, [r5, #4]
 80102ae:	18d2      	adds	r2, r2, r3
 80102b0:	896b      	ldrh	r3, [r5, #10]
 80102b2:	4d08      	ldr	r5, [pc, #32]	; (80102d4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4c>)
 80102b4:	1a5b      	subs	r3, r3, r1
 80102b6:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 80102b8:	9503      	str	r5, [sp, #12]
 80102ba:	185b      	adds	r3, r3, r1
 80102bc:	a903      	add	r1, sp, #12
 80102be:	80c8      	strh	r0, [r1, #6]
 80102c0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80102c2:	710f      	strb	r7, [r1, #4]
 80102c4:	810a      	strh	r2, [r1, #8]
 80102c6:	814b      	strh	r3, [r1, #10]
 80102c8:	6803      	ldr	r3, [r0, #0]
 80102ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80102cc:	4798      	blx	r3
 80102ce:	b007      	add	sp, #28
 80102d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102d2:	46c0      	nop			; (mov r8, r8)
 80102d4:	08016d24 	.word	0x08016d24

080102d8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 80102d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102da:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80102dc:	b08d      	sub	sp, #52	; 0x34
 80102de:	0004      	movs	r4, r0
 80102e0:	000d      	movs	r5, r1
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d002      	beq.n	80102ec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 80102e6:	790b      	ldrb	r3, [r1, #4]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d046      	beq.n	801037a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 80102ec:	ae05      	add	r6, sp, #20
 80102ee:	1d27      	adds	r7, r4, #4
 80102f0:	0039      	movs	r1, r7
 80102f2:	0030      	movs	r0, r6
 80102f4:	f7ff feeb 	bl	80100ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80102f8:	2200      	movs	r2, #0
 80102fa:	5eb3      	ldrsh	r3, [r6, r2]
 80102fc:	9302      	str	r3, [sp, #8]
 80102fe:	2202      	movs	r2, #2
 8010300:	5eb3      	ldrsh	r3, [r6, r2]
 8010302:	9303      	str	r3, [sp, #12]
 8010304:	792b      	ldrb	r3, [r5, #4]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d110      	bne.n	801032c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x54>
 801030a:	9b03      	ldr	r3, [sp, #12]
 801030c:	892a      	ldrh	r2, [r5, #8]
 801030e:	88e9      	ldrh	r1, [r5, #6]
 8010310:	1ad2      	subs	r2, r2, r3
 8010312:	9b02      	ldr	r3, [sp, #8]
 8010314:	b212      	sxth	r2, r2
 8010316:	1ac9      	subs	r1, r1, r3
 8010318:	0023      	movs	r3, r4
 801031a:	3336      	adds	r3, #54	; 0x36
 801031c:	9301      	str	r3, [sp, #4]
 801031e:	3b02      	subs	r3, #2
 8010320:	9300      	str	r3, [sp, #0]
 8010322:	b209      	sxth	r1, r1
 8010324:	3b04      	subs	r3, #4
 8010326:	0038      	movs	r0, r7
 8010328:	f7fc f84c 	bl	800c3c4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801032c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801032e:	2900      	cmp	r1, #0
 8010330:	d023      	beq.n	801037a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 8010332:	ae07      	add	r6, sp, #28
 8010334:	0030      	movs	r0, r6
 8010336:	f7ff feca 	bl	80100ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801033a:	8832      	ldrh	r2, [r6, #0]
 801033c:	9b02      	ldr	r3, [sp, #8]
 801033e:	9903      	ldr	r1, [sp, #12]
 8010340:	1a9a      	subs	r2, r3, r2
 8010342:	88eb      	ldrh	r3, [r5, #6]
 8010344:	7928      	ldrb	r0, [r5, #4]
 8010346:	18d2      	adds	r2, r2, r3
 8010348:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801034a:	18d2      	adds	r2, r2, r3
 801034c:	8873      	ldrh	r3, [r6, #2]
 801034e:	4e0c      	ldr	r6, [pc, #48]	; (8010380 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa8>)
 8010350:	1acb      	subs	r3, r1, r3
 8010352:	9609      	str	r6, [sp, #36]	; 0x24
 8010354:	2600      	movs	r6, #0
 8010356:	8929      	ldrh	r1, [r5, #8]
 8010358:	185b      	adds	r3, r3, r1
 801035a:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 801035c:	185b      	adds	r3, r3, r1
 801035e:	a909      	add	r1, sp, #36	; 0x24
 8010360:	7108      	strb	r0, [r1, #4]
 8010362:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8010364:	80ca      	strh	r2, [r1, #6]
 8010366:	810b      	strh	r3, [r1, #8]
 8010368:	814e      	strh	r6, [r1, #10]
 801036a:	6803      	ldr	r3, [r0, #0]
 801036c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801036e:	4798      	blx	r3
 8010370:	792b      	ldrb	r3, [r5, #4]
 8010372:	42b3      	cmp	r3, r6
 8010374:	d001      	beq.n	801037a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 8010376:	6326      	str	r6, [r4, #48]	; 0x30
 8010378:	6366      	str	r6, [r4, #52]	; 0x34
 801037a:	b00d      	add	sp, #52	; 0x34
 801037c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801037e:	46c0      	nop			; (mov r8, r8)
 8010380:	08016cfc 	.word	0x08016cfc

08010384 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8010384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010386:	b08b      	sub	sp, #44	; 0x2c
 8010388:	9101      	str	r1, [sp, #4]
 801038a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801038c:	0004      	movs	r4, r0
 801038e:	2900      	cmp	r1, #0
 8010390:	d06c      	beq.n	801046c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xe8>
 8010392:	a802      	add	r0, sp, #8
 8010394:	f7ff fe9b 	bl	80100ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010398:	ab02      	add	r3, sp, #8
 801039a:	2502      	movs	r5, #2
 801039c:	5f5d      	ldrsh	r5, [r3, r5]
 801039e:	9b01      	ldr	r3, [sp, #4]
 80103a0:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 80103a2:	88db      	ldrh	r3, [r3, #6]
 80103a4:	a902      	add	r1, sp, #8
 80103a6:	18d3      	adds	r3, r2, r3
 80103a8:	2600      	movs	r6, #0
 80103aa:	5f8e      	ldrsh	r6, [r1, r6]
 80103ac:	b21b      	sxth	r3, r3
 80103ae:	42b3      	cmp	r3, r6
 80103b0:	db2f      	blt.n	8010412 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80103b2:	a902      	add	r1, sp, #8
 80103b4:	8888      	ldrh	r0, [r1, #4]
 80103b6:	1980      	adds	r0, r0, r6
 80103b8:	b200      	sxth	r0, r0
 80103ba:	4283      	cmp	r3, r0
 80103bc:	da29      	bge.n	8010412 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80103be:	9901      	ldr	r1, [sp, #4]
 80103c0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80103c2:	890f      	ldrh	r7, [r1, #8]
 80103c4:	19df      	adds	r7, r3, r7
 80103c6:	b23f      	sxth	r7, r7
 80103c8:	42af      	cmp	r7, r5
 80103ca:	db22      	blt.n	8010412 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80103cc:	a902      	add	r1, sp, #8
 80103ce:	88c9      	ldrh	r1, [r1, #6]
 80103d0:	1949      	adds	r1, r1, r5
 80103d2:	b209      	sxth	r1, r1
 80103d4:	428f      	cmp	r7, r1
 80103d6:	da1c      	bge.n	8010412 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80103d8:	9f01      	ldr	r7, [sp, #4]
 80103da:	897f      	ldrh	r7, [r7, #10]
 80103dc:	19d2      	adds	r2, r2, r7
 80103de:	b212      	sxth	r2, r2
 80103e0:	42b2      	cmp	r2, r6
 80103e2:	db09      	blt.n	80103f8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x74>
 80103e4:	4282      	cmp	r2, r0
 80103e6:	da07      	bge.n	80103f8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x74>
 80103e8:	9a01      	ldr	r2, [sp, #4]
 80103ea:	8992      	ldrh	r2, [r2, #12]
 80103ec:	189b      	adds	r3, r3, r2
 80103ee:	b21b      	sxth	r3, r3
 80103f0:	42ab      	cmp	r3, r5
 80103f2:	db01      	blt.n	80103f8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x74>
 80103f4:	428b      	cmp	r3, r1
 80103f6:	db0c      	blt.n	8010412 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80103f8:	4b1d      	ldr	r3, [pc, #116]	; (8010470 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>)
 80103fa:	a906      	add	r1, sp, #24
 80103fc:	9306      	str	r3, [sp, #24]
 80103fe:	2302      	movs	r3, #2
 8010400:	710b      	strb	r3, [r1, #4]
 8010402:	2300      	movs	r3, #0
 8010404:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8010406:	80cb      	strh	r3, [r1, #6]
 8010408:	810b      	strh	r3, [r1, #8]
 801040a:	814b      	strh	r3, [r1, #10]
 801040c:	6803      	ldr	r3, [r0, #0]
 801040e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010410:	4798      	blx	r3
 8010412:	af04      	add	r7, sp, #16
 8010414:	0038      	movs	r0, r7
 8010416:	1d21      	adds	r1, r4, #4
 8010418:	f7ff fe59 	bl	80100ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801041c:	9b01      	ldr	r3, [sp, #4]
 801041e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8010420:	7918      	ldrb	r0, [r3, #4]
 8010422:	883b      	ldrh	r3, [r7, #0]
 8010424:	887f      	ldrh	r7, [r7, #2]
 8010426:	1b9e      	subs	r6, r3, r6
 8010428:	1b7d      	subs	r5, r7, r5
 801042a:	9f01      	ldr	r7, [sp, #4]
 801042c:	b2ad      	uxth	r5, r5
 801042e:	893f      	ldrh	r7, [r7, #8]
 8010430:	9b01      	ldr	r3, [sp, #4]
 8010432:	19ef      	adds	r7, r5, r7
 8010434:	19d7      	adds	r7, r2, r7
 8010436:	46bc      	mov	ip, r7
 8010438:	9f01      	ldr	r7, [sp, #4]
 801043a:	88db      	ldrh	r3, [r3, #6]
 801043c:	897f      	ldrh	r7, [r7, #10]
 801043e:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8010440:	b2b6      	uxth	r6, r6
 8010442:	18f3      	adds	r3, r6, r3
 8010444:	19f6      	adds	r6, r6, r7
 8010446:	18cb      	adds	r3, r1, r3
 8010448:	198e      	adds	r6, r1, r6
 801044a:	9901      	ldr	r1, [sp, #4]
 801044c:	8989      	ldrh	r1, [r1, #12]
 801044e:	186d      	adds	r5, r5, r1
 8010450:	a906      	add	r1, sp, #24
 8010452:	80cb      	strh	r3, [r1, #6]
 8010454:	4663      	mov	r3, ip
 8010456:	1952      	adds	r2, r2, r5
 8010458:	4d06      	ldr	r5, [pc, #24]	; (8010474 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf0>)
 801045a:	7108      	strb	r0, [r1, #4]
 801045c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801045e:	9506      	str	r5, [sp, #24]
 8010460:	810b      	strh	r3, [r1, #8]
 8010462:	814e      	strh	r6, [r1, #10]
 8010464:	818a      	strh	r2, [r1, #12]
 8010466:	6803      	ldr	r3, [r0, #0]
 8010468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801046a:	4798      	blx	r3
 801046c:	b00b      	add	sp, #44	; 0x2c
 801046e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010470:	08016cfc 	.word	0x08016cfc
 8010474:	08016d10 	.word	0x08016d10

08010478 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8010478:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801047a:	0005      	movs	r5, r0
 801047c:	220c      	movs	r2, #12
 801047e:	5e83      	ldrsh	r3, [r0, r2]
 8010480:	350c      	adds	r5, #12
 8010482:	3301      	adds	r3, #1
 8010484:	d10f      	bne.n	80104a6 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x2e>
 8010486:	466c      	mov	r4, sp
 8010488:	2308      	movs	r3, #8
 801048a:	5ec2      	ldrsh	r2, [r0, r3]
 801048c:	210a      	movs	r1, #10
 801048e:	5e43      	ldrsh	r3, [r0, r1]
 8010490:	2100      	movs	r1, #0
 8010492:	80e3      	strh	r3, [r4, #6]
 8010494:	6803      	ldr	r3, [r0, #0]
 8010496:	9100      	str	r1, [sp, #0]
 8010498:	80a2      	strh	r2, [r4, #4]
 801049a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801049c:	0021      	movs	r1, r4
 801049e:	4798      	blx	r3
 80104a0:	002b      	movs	r3, r5
 80104a2:	cc06      	ldmia	r4!, {r1, r2}
 80104a4:	c306      	stmia	r3!, {r1, r2}
 80104a6:	0028      	movs	r0, r5
 80104a8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

080104aa <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 80104aa:	b513      	push	{r0, r1, r4, lr}
 80104ac:	2220      	movs	r2, #32
 80104ae:	5e83      	ldrsh	r3, [r0, r2]
 80104b0:	0004      	movs	r4, r0
 80104b2:	3301      	adds	r3, #1
 80104b4:	d109      	bne.n	80104ca <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 80104b6:	0001      	movs	r1, r0
 80104b8:	4668      	mov	r0, sp
 80104ba:	f7ff fe08 	bl	80100ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80104be:	466b      	mov	r3, sp
 80104c0:	881b      	ldrh	r3, [r3, #0]
 80104c2:	8423      	strh	r3, [r4, #32]
 80104c4:	466b      	mov	r3, sp
 80104c6:	885b      	ldrh	r3, [r3, #2]
 80104c8:	8463      	strh	r3, [r4, #34]	; 0x22
 80104ca:	2320      	movs	r3, #32
 80104cc:	5ee0      	ldrsh	r0, [r4, r3]
 80104ce:	bd16      	pop	{r1, r2, r4, pc}

080104d0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 80104d0:	b513      	push	{r0, r1, r4, lr}
 80104d2:	2222      	movs	r2, #34	; 0x22
 80104d4:	5e83      	ldrsh	r3, [r0, r2]
 80104d6:	0004      	movs	r4, r0
 80104d8:	3301      	adds	r3, #1
 80104da:	d109      	bne.n	80104f0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 80104dc:	0001      	movs	r1, r0
 80104de:	4668      	mov	r0, sp
 80104e0:	f7ff fdf5 	bl	80100ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80104e4:	466b      	mov	r3, sp
 80104e6:	881b      	ldrh	r3, [r3, #0]
 80104e8:	8423      	strh	r3, [r4, #32]
 80104ea:	466b      	mov	r3, sp
 80104ec:	885b      	ldrh	r3, [r3, #2]
 80104ee:	8463      	strh	r3, [r4, #34]	; 0x22
 80104f0:	2322      	movs	r3, #34	; 0x22
 80104f2:	5ee0      	ldrsh	r0, [r4, r3]
 80104f4:	bd16      	pop	{r1, r2, r4, pc}
	...

080104f8 <_ZN8touchgfx6ScreenC1Ev>:
 80104f8:	b570      	push	{r4, r5, r6, lr}
 80104fa:	0005      	movs	r5, r0
 80104fc:	4b18      	ldr	r3, [pc, #96]	; (8010560 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80104fe:	0002      	movs	r2, r0
 8010500:	3308      	adds	r3, #8
 8010502:	c508      	stmia	r5!, {r3}
 8010504:	2300      	movs	r3, #0
 8010506:	3228      	adds	r2, #40	; 0x28
 8010508:	0001      	movs	r1, r0
 801050a:	8103      	strh	r3, [r0, #8]
 801050c:	8143      	strh	r3, [r0, #10]
 801050e:	8183      	strh	r3, [r0, #12]
 8010510:	81c3      	strh	r3, [r0, #14]
 8010512:	8203      	strh	r3, [r0, #16]
 8010514:	8243      	strh	r3, [r0, #18]
 8010516:	8283      	strh	r3, [r0, #20]
 8010518:	82c3      	strh	r3, [r0, #22]
 801051a:	6183      	str	r3, [r0, #24]
 801051c:	61c3      	str	r3, [r0, #28]
 801051e:	6203      	str	r3, [r0, #32]
 8010520:	8483      	strh	r3, [r0, #36]	; 0x24
 8010522:	84c3      	strh	r3, [r0, #38]	; 0x26
 8010524:	7013      	strb	r3, [r2, #0]
 8010526:	2201      	movs	r2, #1
 8010528:	3129      	adds	r1, #41	; 0x29
 801052a:	700a      	strb	r2, [r1, #0]
 801052c:	62c3      	str	r3, [r0, #44]	; 0x2c
 801052e:	6303      	str	r3, [r0, #48]	; 0x30
 8010530:	6343      	str	r3, [r0, #52]	; 0x34
 8010532:	0003      	movs	r3, r0
 8010534:	0004      	movs	r4, r0
 8010536:	490b      	ldr	r1, [pc, #44]	; (8010564 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8010538:	3338      	adds	r3, #56	; 0x38
 801053a:	6041      	str	r1, [r0, #4]
 801053c:	701a      	strb	r2, [r3, #0]
 801053e:	4b0a      	ldr	r3, [pc, #40]	; (8010568 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 8010540:	0028      	movs	r0, r5
 8010542:	2600      	movs	r6, #0
 8010544:	5f9e      	ldrsh	r6, [r3, r6]
 8010546:	4b09      	ldr	r3, [pc, #36]	; (801056c <_ZN8touchgfx6ScreenC1Ev+0x74>)
 8010548:	2100      	movs	r1, #0
 801054a:	5e59      	ldrsh	r1, [r3, r1]
 801054c:	4b08      	ldr	r3, [pc, #32]	; (8010570 <_ZN8touchgfx6ScreenC1Ev+0x78>)
 801054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010550:	4798      	blx	r3
 8010552:	6863      	ldr	r3, [r4, #4]
 8010554:	0028      	movs	r0, r5
 8010556:	0031      	movs	r1, r6
 8010558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801055a:	4798      	blx	r3
 801055c:	0020      	movs	r0, r4
 801055e:	bd70      	pop	{r4, r5, r6, pc}
 8010560:	08016d30 	.word	0x08016d30
 8010564:	080167e0 	.word	0x080167e0
 8010568:	200026be 	.word	0x200026be
 801056c:	200026bc 	.word	0x200026bc
 8010570:	080167d8 	.word	0x080167d8

08010574 <_ZN8touchgfx6Screen4drawEv>:
 8010574:	b507      	push	{r0, r1, r2, lr}
 8010576:	4b07      	ldr	r3, [pc, #28]	; (8010594 <_ZN8touchgfx6Screen4drawEv+0x20>)
 8010578:	2200      	movs	r2, #0
 801057a:	5e9a      	ldrsh	r2, [r3, r2]
 801057c:	4b06      	ldr	r3, [pc, #24]	; (8010598 <_ZN8touchgfx6Screen4drawEv+0x24>)
 801057e:	2100      	movs	r1, #0
 8010580:	5e5b      	ldrsh	r3, [r3, r1]
 8010582:	2100      	movs	r1, #0
 8010584:	9100      	str	r1, [sp, #0]
 8010586:	4669      	mov	r1, sp
 8010588:	80cb      	strh	r3, [r1, #6]
 801058a:	6803      	ldr	r3, [r0, #0]
 801058c:	808a      	strh	r2, [r1, #4]
 801058e:	689b      	ldr	r3, [r3, #8]
 8010590:	4798      	blx	r3
 8010592:	bd07      	pop	{r0, r1, r2, pc}
 8010594:	200026bc 	.word	0x200026bc
 8010598:	200026be 	.word	0x200026be

0801059c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801059c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801059e:	b08d      	sub	sp, #52	; 0x34
 80105a0:	9002      	str	r0, [sp, #8]
 80105a2:	0014      	movs	r4, r2
 80105a4:	2204      	movs	r2, #4
 80105a6:	5e8b      	ldrsh	r3, [r1, r2]
 80105a8:	000f      	movs	r7, r1
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	dd0e      	ble.n	80105cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x30>
 80105ae:	2206      	movs	r2, #6
 80105b0:	5e8b      	ldrsh	r3, [r1, r2]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	dd0a      	ble.n	80105cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x30>
 80105b6:	0020      	movs	r0, r4
 80105b8:	f7ff ff5e 	bl	8010478 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80105bc:	0039      	movs	r1, r7
 80105be:	f7fe fad7 	bl	800eb70 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80105c2:	69e3      	ldr	r3, [r4, #28]
 80105c4:	2800      	cmp	r0, #0
 80105c6:	d103      	bne.n	80105d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 80105c8:	1e1c      	subs	r4, r3, #0
 80105ca:	d1f4      	bne.n	80105b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a>
 80105cc:	b00d      	add	sp, #52	; 0x34
 80105ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d100      	bne.n	80105d6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x3a>
 80105d4:	e0aa      	b.n	801072c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x190>
 80105d6:	6823      	ldr	r3, [r4, #0]
 80105d8:	0021      	movs	r1, r4
 80105da:	68db      	ldr	r3, [r3, #12]
 80105dc:	a806      	add	r0, sp, #24
 80105de:	4798      	blx	r3
 80105e0:	0020      	movs	r0, r4
 80105e2:	f7ff ff62 	bl	80104aa <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80105e6:	ab06      	add	r3, sp, #24
 80105e8:	881d      	ldrh	r5, [r3, #0]
 80105ea:	ae08      	add	r6, sp, #32
 80105ec:	182d      	adds	r5, r5, r0
 80105ee:	0020      	movs	r0, r4
 80105f0:	f7ff ff6e 	bl	80104d0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80105f4:	ab06      	add	r3, sp, #24
 80105f6:	885b      	ldrh	r3, [r3, #2]
 80105f8:	b22d      	sxth	r5, r5
 80105fa:	1818      	adds	r0, r3, r0
 80105fc:	ab06      	add	r3, sp, #24
 80105fe:	2204      	movs	r2, #4
 8010600:	5e9a      	ldrsh	r2, [r3, r2]
 8010602:	ab06      	add	r3, sp, #24
 8010604:	2106      	movs	r1, #6
 8010606:	5e5b      	ldrsh	r3, [r3, r1]
 8010608:	80b2      	strh	r2, [r6, #4]
 801060a:	80f3      	strh	r3, [r6, #6]
 801060c:	8035      	strh	r5, [r6, #0]
 801060e:	8070      	strh	r0, [r6, #2]
 8010610:	0039      	movs	r1, r7
 8010612:	0030      	movs	r0, r6
 8010614:	f7fb ffb4 	bl	800c580 <_ZN8touchgfx4RectaNERKS0_>
 8010618:	0020      	movs	r0, r4
 801061a:	f7ff ff2d 	bl	8010478 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801061e:	ad0a      	add	r5, sp, #40	; 0x28
 8010620:	2208      	movs	r2, #8
 8010622:	0031      	movs	r1, r6
 8010624:	9001      	str	r0, [sp, #4]
 8010626:	0028      	movs	r0, r5
 8010628:	f003 fec1 	bl	80143ae <memcpy>
 801062c:	9901      	ldr	r1, [sp, #4]
 801062e:	0028      	movs	r0, r5
 8010630:	f7fb ffa6 	bl	800c580 <_ZN8touchgfx4RectaNERKS0_>
 8010634:	2200      	movs	r2, #0
 8010636:	5eab      	ldrsh	r3, [r5, r2]
 8010638:	9303      	str	r3, [sp, #12]
 801063a:	2202      	movs	r2, #2
 801063c:	5eab      	ldrsh	r3, [r5, r2]
 801063e:	9301      	str	r3, [sp, #4]
 8010640:	2204      	movs	r2, #4
 8010642:	5eab      	ldrsh	r3, [r5, r2]
 8010644:	9304      	str	r3, [sp, #16]
 8010646:	2306      	movs	r3, #6
 8010648:	5eee      	ldrsh	r6, [r5, r3]
 801064a:	2300      	movs	r3, #0
 801064c:	5efa      	ldrsh	r2, [r7, r3]
 801064e:	9b03      	ldr	r3, [sp, #12]
 8010650:	429a      	cmp	r2, r3
 8010652:	d10d      	bne.n	8010670 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 8010654:	2102      	movs	r1, #2
 8010656:	5e7b      	ldrsh	r3, [r7, r1]
 8010658:	9901      	ldr	r1, [sp, #4]
 801065a:	428b      	cmp	r3, r1
 801065c:	d108      	bne.n	8010670 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 801065e:	2104      	movs	r1, #4
 8010660:	5e7b      	ldrsh	r3, [r7, r1]
 8010662:	9904      	ldr	r1, [sp, #16]
 8010664:	428b      	cmp	r3, r1
 8010666:	d103      	bne.n	8010670 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 8010668:	2106      	movs	r1, #6
 801066a:	5e7b      	ldrsh	r3, [r7, r1]
 801066c:	42b3      	cmp	r3, r6
 801066e:	d05d      	beq.n	801072c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x190>
 8010670:	9b04      	ldr	r3, [sp, #16]
 8010672:	2b00      	cmp	r3, #0
 8010674:	dd55      	ble.n	8010722 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x186>
 8010676:	2e00      	cmp	r6, #0
 8010678:	dd53      	ble.n	8010722 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x186>
 801067a:	2102      	movs	r1, #2
 801067c:	5e7b      	ldrsh	r3, [r7, r1]
 801067e:	4669      	mov	r1, sp
 8010680:	8889      	ldrh	r1, [r1, #4]
 8010682:	9105      	str	r1, [sp, #20]
 8010684:	9901      	ldr	r1, [sp, #4]
 8010686:	428b      	cmp	r3, r1
 8010688:	da0c      	bge.n	80106a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x108>
 801068a:	2104      	movs	r1, #4
 801068c:	5e78      	ldrsh	r0, [r7, r1]
 801068e:	a908      	add	r1, sp, #32
 8010690:	800a      	strh	r2, [r1, #0]
 8010692:	9a05      	ldr	r2, [sp, #20]
 8010694:	804b      	strh	r3, [r1, #2]
 8010696:	1ad3      	subs	r3, r2, r3
 8010698:	8088      	strh	r0, [r1, #4]
 801069a:	80cb      	strh	r3, [r1, #6]
 801069c:	69e2      	ldr	r2, [r4, #28]
 801069e:	9802      	ldr	r0, [sp, #8]
 80106a0:	f7ff ff7c 	bl	801059c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80106a4:	2200      	movs	r2, #0
 80106a6:	5ebb      	ldrsh	r3, [r7, r2]
 80106a8:	466a      	mov	r2, sp
 80106aa:	8995      	ldrh	r5, [r2, #12]
 80106ac:	9a03      	ldr	r2, [sp, #12]
 80106ae:	4293      	cmp	r3, r2
 80106b0:	da0a      	bge.n	80106c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x12c>
 80106b2:	a908      	add	r1, sp, #32
 80106b4:	9a01      	ldr	r2, [sp, #4]
 80106b6:	800b      	strh	r3, [r1, #0]
 80106b8:	1aeb      	subs	r3, r5, r3
 80106ba:	804a      	strh	r2, [r1, #2]
 80106bc:	808b      	strh	r3, [r1, #4]
 80106be:	80ce      	strh	r6, [r1, #6]
 80106c0:	69e2      	ldr	r2, [r4, #28]
 80106c2:	9802      	ldr	r0, [sp, #8]
 80106c4:	f7ff ff6a 	bl	801059c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80106c8:	883a      	ldrh	r2, [r7, #0]
 80106ca:	88bb      	ldrh	r3, [r7, #4]
 80106cc:	189b      	adds	r3, r3, r2
 80106ce:	9a04      	ldr	r2, [sp, #16]
 80106d0:	b29b      	uxth	r3, r3
 80106d2:	18ad      	adds	r5, r5, r2
 80106d4:	b2ad      	uxth	r5, r5
 80106d6:	b22a      	sxth	r2, r5
 80106d8:	b219      	sxth	r1, r3
 80106da:	4291      	cmp	r1, r2
 80106dc:	dd0a      	ble.n	80106f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x158>
 80106de:	a908      	add	r1, sp, #32
 80106e0:	800a      	strh	r2, [r1, #0]
 80106e2:	9a01      	ldr	r2, [sp, #4]
 80106e4:	1b5d      	subs	r5, r3, r5
 80106e6:	804a      	strh	r2, [r1, #2]
 80106e8:	808d      	strh	r5, [r1, #4]
 80106ea:	80ce      	strh	r6, [r1, #6]
 80106ec:	69e2      	ldr	r2, [r4, #28]
 80106ee:	9802      	ldr	r0, [sp, #8]
 80106f0:	f7ff ff54 	bl	801059c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80106f4:	88fa      	ldrh	r2, [r7, #6]
 80106f6:	887b      	ldrh	r3, [r7, #2]
 80106f8:	189b      	adds	r3, r3, r2
 80106fa:	9a05      	ldr	r2, [sp, #20]
 80106fc:	b29b      	uxth	r3, r3
 80106fe:	1992      	adds	r2, r2, r6
 8010700:	b292      	uxth	r2, r2
 8010702:	b210      	sxth	r0, r2
 8010704:	b219      	sxth	r1, r3
 8010706:	4288      	cmp	r0, r1
 8010708:	da10      	bge.n	801072c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x190>
 801070a:	2104      	movs	r1, #4
 801070c:	5e7d      	ldrsh	r5, [r7, r1]
 801070e:	2100      	movs	r1, #0
 8010710:	5e7e      	ldrsh	r6, [r7, r1]
 8010712:	1a9b      	subs	r3, r3, r2
 8010714:	a908      	add	r1, sp, #32
 8010716:	800e      	strh	r6, [r1, #0]
 8010718:	8048      	strh	r0, [r1, #2]
 801071a:	808d      	strh	r5, [r1, #4]
 801071c:	80cb      	strh	r3, [r1, #6]
 801071e:	69e2      	ldr	r2, [r4, #28]
 8010720:	e001      	b.n	8010726 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18a>
 8010722:	0039      	movs	r1, r7
 8010724:	69e2      	ldr	r2, [r4, #28]
 8010726:	9802      	ldr	r0, [sp, #8]
 8010728:	f7ff ff38 	bl	801059c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801072c:	0020      	movs	r0, r4
 801072e:	f7ff fea3 	bl	8010478 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8010732:	0006      	movs	r6, r0
 8010734:	ad08      	add	r5, sp, #32
 8010736:	2208      	movs	r2, #8
 8010738:	0039      	movs	r1, r7
 801073a:	0028      	movs	r0, r5
 801073c:	f003 fe37 	bl	80143ae <memcpy>
 8010740:	0031      	movs	r1, r6
 8010742:	0028      	movs	r0, r5
 8010744:	f7fb ff1c 	bl	800c580 <_ZN8touchgfx4RectaNERKS0_>
 8010748:	2204      	movs	r2, #4
 801074a:	5eab      	ldrsh	r3, [r5, r2]
 801074c:	2b00      	cmp	r3, #0
 801074e:	dc00      	bgt.n	8010752 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1b6>
 8010750:	e73c      	b.n	80105cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x30>
 8010752:	2206      	movs	r2, #6
 8010754:	5eab      	ldrsh	r3, [r5, r2]
 8010756:	2b00      	cmp	r3, #0
 8010758:	dc00      	bgt.n	801075c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c0>
 801075a:	e737      	b.n	80105cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x30>
 801075c:	0020      	movs	r0, r4
 801075e:	f7ff fea4 	bl	80104aa <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8010762:	882b      	ldrh	r3, [r5, #0]
 8010764:	1a18      	subs	r0, r3, r0
 8010766:	8028      	strh	r0, [r5, #0]
 8010768:	0020      	movs	r0, r4
 801076a:	f7ff feb1 	bl	80104d0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801076e:	886b      	ldrh	r3, [r5, #2]
 8010770:	0029      	movs	r1, r5
 8010772:	1a18      	subs	r0, r3, r0
 8010774:	8068      	strh	r0, [r5, #2]
 8010776:	6823      	ldr	r3, [r4, #0]
 8010778:	0020      	movs	r0, r4
 801077a:	689b      	ldr	r3, [r3, #8]
 801077c:	4798      	blx	r3
 801077e:	e725      	b.n	80105cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x30>

08010780 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8010780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010782:	2300      	movs	r3, #0
 8010784:	000c      	movs	r4, r1
 8010786:	b087      	sub	sp, #28
 8010788:	af02      	add	r7, sp, #8
 801078a:	1d06      	adds	r6, r0, #4
 801078c:	0031      	movs	r1, r6
 801078e:	0005      	movs	r5, r0
 8010790:	0038      	movs	r0, r7
 8010792:	9301      	str	r3, [sp, #4]
 8010794:	f7ff fc9b 	bl	80100ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010798:	883b      	ldrh	r3, [r7, #0]
 801079a:	8822      	ldrh	r2, [r4, #0]
 801079c:	8879      	ldrh	r1, [r7, #2]
 801079e:	1ad2      	subs	r2, r2, r3
 80107a0:	8863      	ldrh	r3, [r4, #2]
 80107a2:	1a5b      	subs	r3, r3, r1
 80107a4:	2106      	movs	r1, #6
 80107a6:	5e60      	ldrsh	r0, [r4, r1]
 80107a8:	2104      	movs	r1, #4
 80107aa:	5e67      	ldrsh	r7, [r4, r1]
 80107ac:	a904      	add	r1, sp, #16
 80107ae:	800a      	strh	r2, [r1, #0]
 80107b0:	80c8      	strh	r0, [r1, #6]
 80107b2:	aa01      	add	r2, sp, #4
 80107b4:	0030      	movs	r0, r6
 80107b6:	804b      	strh	r3, [r1, #2]
 80107b8:	808f      	strh	r7, [r1, #4]
 80107ba:	f7fb ffce 	bl	800c75a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80107be:	9a01      	ldr	r2, [sp, #4]
 80107c0:	2a00      	cmp	r2, #0
 80107c2:	d003      	beq.n	80107cc <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x4c>
 80107c4:	0021      	movs	r1, r4
 80107c6:	0028      	movs	r0, r5
 80107c8:	f7ff fee8 	bl	801059c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80107cc:	b007      	add	sp, #28
 80107ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080107d0 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80107d0:	b530      	push	{r4, r5, lr}
 80107d2:	000d      	movs	r5, r1
 80107d4:	0001      	movs	r1, r0
 80107d6:	0004      	movs	r4, r0
 80107d8:	b085      	sub	sp, #20
 80107da:	3108      	adds	r1, #8
 80107dc:	2208      	movs	r2, #8
 80107de:	4668      	mov	r0, sp
 80107e0:	f003 fde5 	bl	80143ae <memcpy>
 80107e4:	0029      	movs	r1, r5
 80107e6:	4668      	mov	r0, sp
 80107e8:	f7fb feca 	bl	800c580 <_ZN8touchgfx4RectaNERKS0_>
 80107ec:	0023      	movs	r3, r4
 80107ee:	3338      	adds	r3, #56	; 0x38
 80107f0:	781b      	ldrb	r3, [r3, #0]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d005      	beq.n	8010802 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x32>
 80107f6:	4669      	mov	r1, sp
 80107f8:	0020      	movs	r0, r4
 80107fa:	f7ff ffc1 	bl	8010780 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80107fe:	b005      	add	sp, #20
 8010800:	bd30      	pop	{r4, r5, pc}
 8010802:	ad02      	add	r5, sp, #8
 8010804:	3404      	adds	r4, #4
 8010806:	0021      	movs	r1, r4
 8010808:	0028      	movs	r0, r5
 801080a:	f7ff fc60 	bl	80100ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801080e:	466b      	mov	r3, sp
 8010810:	882a      	ldrh	r2, [r5, #0]
 8010812:	881b      	ldrh	r3, [r3, #0]
 8010814:	4669      	mov	r1, sp
 8010816:	1a9b      	subs	r3, r3, r2
 8010818:	466a      	mov	r2, sp
 801081a:	8013      	strh	r3, [r2, #0]
 801081c:	8853      	ldrh	r3, [r2, #2]
 801081e:	886a      	ldrh	r2, [r5, #2]
 8010820:	0020      	movs	r0, r4
 8010822:	1a9b      	subs	r3, r3, r2
 8010824:	466a      	mov	r2, sp
 8010826:	8053      	strh	r3, [r2, #2]
 8010828:	f7fb ff5d 	bl	800c6e6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801082c:	e7e7      	b.n	80107fe <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>

0801082e <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801082e:	0003      	movs	r3, r0
 8010830:	0008      	movs	r0, r1
 8010832:	b510      	push	{r4, lr}
 8010834:	1d19      	adds	r1, r3, #4
 8010836:	6803      	ldr	r3, [r0, #0]
 8010838:	699b      	ldr	r3, [r3, #24]
 801083a:	4798      	blx	r3
 801083c:	bd10      	pop	{r4, pc}

0801083e <_ZN8touchgfx12TextProviderC1Ev>:
 801083e:	2302      	movs	r3, #2
 8010840:	b570      	push	{r4, r5, r6, lr}
 8010842:	7403      	strb	r3, [r0, #16]
 8010844:	0003      	movs	r3, r0
 8010846:	2500      	movs	r5, #0
 8010848:	0004      	movs	r4, r0
 801084a:	333a      	adds	r3, #58	; 0x3a
 801084c:	6005      	str	r5, [r0, #0]
 801084e:	6045      	str	r5, [r0, #4]
 8010850:	6145      	str	r5, [r0, #20]
 8010852:	7605      	strb	r5, [r0, #24]
 8010854:	83c5      	strh	r5, [r0, #30]
 8010856:	8405      	strh	r5, [r0, #32]
 8010858:	86c5      	strh	r5, [r0, #54]	; 0x36
 801085a:	8705      	strh	r5, [r0, #56]	; 0x38
 801085c:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801085e:	0029      	movs	r1, r5
 8010860:	80dd      	strh	r5, [r3, #6]
 8010862:	220e      	movs	r2, #14
 8010864:	6445      	str	r5, [r0, #68]	; 0x44
 8010866:	6485      	str	r5, [r0, #72]	; 0x48
 8010868:	304c      	adds	r0, #76	; 0x4c
 801086a:	f003 fcc1 	bl	80141f0 <memset>
 801086e:	0023      	movs	r3, r4
 8010870:	2201      	movs	r2, #1
 8010872:	335a      	adds	r3, #90	; 0x5a
 8010874:	801d      	strh	r5, [r3, #0]
 8010876:	805d      	strh	r5, [r3, #2]
 8010878:	809d      	strh	r5, [r3, #4]
 801087a:	71dd      	strb	r5, [r3, #7]
 801087c:	0020      	movs	r0, r4
 801087e:	719a      	strb	r2, [r3, #6]
 8010880:	f7f9 fa98 	bl	8009db4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8010884:	0020      	movs	r0, r4
 8010886:	bd70      	pop	{r4, r5, r6, pc}

08010888 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8010888:	2100      	movs	r1, #0
 801088a:	2201      	movs	r2, #1
 801088c:	b530      	push	{r4, r5, lr}
 801088e:	6843      	ldr	r3, [r0, #4]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d103      	bne.n	801089c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x14>
 8010894:	6803      	ldr	r3, [r0, #0]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d026      	beq.n	80108e8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x60>
 801089a:	6043      	str	r3, [r0, #4]
 801089c:	7e03      	ldrb	r3, [r0, #24]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d00a      	beq.n	80108b8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x30>
 80108a2:	6943      	ldr	r3, [r0, #20]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d006      	beq.n	80108b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x2e>
 80108a8:	881c      	ldrh	r4, [r3, #0]
 80108aa:	2c00      	cmp	r4, #0
 80108ac:	d003      	beq.n	80108b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x2e>
 80108ae:	1c9a      	adds	r2, r3, #2
 80108b0:	6142      	str	r2, [r0, #20]
 80108b2:	8818      	ldrh	r0, [r3, #0]
 80108b4:	bd30      	pop	{r4, r5, pc}
 80108b6:	7601      	strb	r1, [r0, #24]
 80108b8:	6843      	ldr	r3, [r0, #4]
 80108ba:	881d      	ldrh	r5, [r3, #0]
 80108bc:	2d00      	cmp	r5, #0
 80108be:	d013      	beq.n	80108e8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x60>
 80108c0:	1c9c      	adds	r4, r3, #2
 80108c2:	6044      	str	r4, [r0, #4]
 80108c4:	2d02      	cmp	r5, #2
 80108c6:	d1f4      	bne.n	80108b2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x2a>
 80108c8:	7c03      	ldrb	r3, [r0, #16]
 80108ca:	2b01      	cmp	r3, #1
 80108cc:	d8df      	bhi.n	801088e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80108ce:	1c5c      	adds	r4, r3, #1
 80108d0:	3302      	adds	r3, #2
 80108d2:	7404      	strb	r4, [r0, #16]
 80108d4:	009b      	lsls	r3, r3, #2
 80108d6:	581b      	ldr	r3, [r3, r0]
 80108d8:	6143      	str	r3, [r0, #20]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d0d7      	beq.n	801088e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80108de:	881b      	ldrh	r3, [r3, #0]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d0d4      	beq.n	801088e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80108e4:	7602      	strb	r2, [r0, #24]
 80108e6:	e7d2      	b.n	801088e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80108e8:	2000      	movs	r0, #0
 80108ea:	e7e3      	b.n	80108b4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x2c>

080108ec <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80108ec:	6001      	str	r1, [r0, #0]
 80108ee:	2100      	movs	r1, #0
 80108f0:	b510      	push	{r4, lr}
 80108f2:	6041      	str	r1, [r0, #4]
 80108f4:	6814      	ldr	r4, [r2, #0]
 80108f6:	6084      	str	r4, [r0, #8]
 80108f8:	6852      	ldr	r2, [r2, #4]
 80108fa:	7401      	strb	r1, [r0, #16]
 80108fc:	60c2      	str	r2, [r0, #12]
 80108fe:	0002      	movs	r2, r0
 8010900:	321a      	adds	r2, #26
 8010902:	6141      	str	r1, [r0, #20]
 8010904:	7601      	strb	r1, [r0, #24]
 8010906:	8701      	strh	r1, [r0, #56]	; 0x38
 8010908:	8401      	strh	r1, [r0, #32]
 801090a:	84d1      	strh	r1, [r2, #38]	; 0x26
 801090c:	6443      	str	r3, [r0, #68]	; 0x44
 801090e:	9b02      	ldr	r3, [sp, #8]
 8010910:	6483      	str	r3, [r0, #72]	; 0x48
 8010912:	f7f9 fa4f 	bl	8009db4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8010916:	bd10      	pop	{r4, pc}

08010918 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8010918:	b570      	push	{r4, r5, r6, lr}
 801091a:	0005      	movs	r5, r0
 801091c:	2900      	cmp	r1, #0
 801091e:	d010      	beq.n	8010942 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x2a>
 8010920:	0004      	movs	r4, r0
 8010922:	344c      	adds	r4, #76	; 0x4c
 8010924:	220e      	movs	r2, #14
 8010926:	0020      	movs	r0, r4
 8010928:	f003 fd41 	bl	80143ae <memcpy>
 801092c:	2280      	movs	r2, #128	; 0x80
 801092e:	0021      	movs	r1, r4
 8010930:	7b63      	ldrb	r3, [r4, #13]
 8010932:	0052      	lsls	r2, r2, #1
 8010934:	015b      	lsls	r3, r3, #5
 8010936:	401a      	ands	r2, r3
 8010938:	79a3      	ldrb	r3, [r4, #6]
 801093a:	3555      	adds	r5, #85	; 0x55
 801093c:	4313      	orrs	r3, r2
 801093e:	425b      	negs	r3, r3
 8010940:	702b      	strb	r3, [r5, #0]
 8010942:	0008      	movs	r0, r1
 8010944:	bd70      	pop	{r4, r5, r6, pc}

08010946 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8010946:	b570      	push	{r4, r5, r6, lr}
 8010948:	000c      	movs	r4, r1
 801094a:	6811      	ldr	r1, [r2, #0]
 801094c:	0010      	movs	r0, r2
 801094e:	68cd      	ldr	r5, [r1, #12]
 8010950:	0019      	movs	r1, r3
 8010952:	47a8      	blx	r5
 8010954:	2800      	cmp	r0, #0
 8010956:	d100      	bne.n	801095a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt+0x14>
 8010958:	0020      	movs	r0, r4
 801095a:	bd70      	pop	{r4, r5, r6, pc}

0801095c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801095c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801095e:	0005      	movs	r5, r0
 8010960:	0014      	movs	r4, r2
 8010962:	0008      	movs	r0, r1
 8010964:	2a00      	cmp	r2, #0
 8010966:	d107      	bne.n	8010978 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c>
 8010968:	002b      	movs	r3, r5
 801096a:	355e      	adds	r5, #94	; 0x5e
 801096c:	335a      	adds	r3, #90	; 0x5a
 801096e:	801a      	strh	r2, [r3, #0]
 8010970:	805a      	strh	r2, [r3, #2]
 8010972:	802a      	strh	r2, [r5, #0]
 8010974:	0020      	movs	r0, r4
 8010976:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010978:	2680      	movs	r6, #128	; 0x80
 801097a:	7b51      	ldrb	r1, [r2, #13]
 801097c:	8893      	ldrh	r3, [r2, #4]
 801097e:	0076      	lsls	r6, r6, #1
 8010980:	010a      	lsls	r2, r1, #4
 8010982:	4032      	ands	r2, r6
 8010984:	79e6      	ldrb	r6, [r4, #7]
 8010986:	4332      	orrs	r2, r6
 8010988:	4e6b      	ldr	r6, [pc, #428]	; (8010b38 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1dc>)
 801098a:	b297      	uxth	r7, r2
 801098c:	199e      	adds	r6, r3, r6
 801098e:	b2b6      	uxth	r6, r6
 8010990:	9700      	str	r7, [sp, #0]
 8010992:	2e1d      	cmp	r6, #29
 8010994:	d85f      	bhi.n	8010a56 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfa>
 8010996:	10d2      	asrs	r2, r2, #3
 8010998:	9201      	str	r2, [sp, #4]
 801099a:	2201      	movs	r2, #1
 801099c:	40b2      	lsls	r2, r6
 801099e:	4e67      	ldr	r6, [pc, #412]	; (8010b3c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e0>)
 80109a0:	4232      	tst	r2, r6
 80109a2:	d11e      	bne.n	80109e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x86>
 80109a4:	26e0      	movs	r6, #224	; 0xe0
 80109a6:	00b6      	lsls	r6, r6, #2
 80109a8:	4232      	tst	r2, r6
 80109aa:	d054      	beq.n	8010a56 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfa>
 80109ac:	002e      	movs	r6, r5
 80109ae:	364c      	adds	r6, #76	; 0x4c
 80109b0:	0021      	movs	r1, r4
 80109b2:	220e      	movs	r2, #14
 80109b4:	0030      	movs	r0, r6
 80109b6:	f003 fcfa 	bl	80143ae <memcpy>
 80109ba:	466b      	mov	r3, sp
 80109bc:	355c      	adds	r5, #92	; 0x5c
 80109be:	882a      	ldrh	r2, [r5, #0]
 80109c0:	8899      	ldrh	r1, [r3, #4]
 80109c2:	7b70      	ldrb	r0, [r6, #13]
 80109c4:	1a53      	subs	r3, r2, r1
 80109c6:	b29b      	uxth	r3, r3
 80109c8:	7233      	strb	r3, [r6, #8]
 80109ca:	0034      	movs	r4, r6
 80109cc:	2660      	movs	r6, #96	; 0x60
 80109ce:	10db      	asrs	r3, r3, #3
 80109d0:	43b0      	bics	r0, r6
 80109d2:	4033      	ands	r3, r6
 80109d4:	4303      	orrs	r3, r0
 80109d6:	7363      	strb	r3, [r4, #13]
 80109d8:	9b00      	ldr	r3, [sp, #0]
 80109da:	1ad2      	subs	r2, r2, r3
 80109dc:	1a52      	subs	r2, r2, r1
 80109de:	802a      	strh	r2, [r5, #0]
 80109e0:	e7c8      	b.n	8010974 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 80109e2:	002a      	movs	r2, r5
 80109e4:	4956      	ldr	r1, [pc, #344]	; (8010b40 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e4>)
 80109e6:	002e      	movs	r6, r5
 80109e8:	468c      	mov	ip, r1
 80109ea:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
 80109ec:	3222      	adds	r2, #34	; 0x22
 80109ee:	005b      	lsls	r3, r3, #1
 80109f0:	5a99      	ldrh	r1, [r3, r2]
 80109f2:	365a      	adds	r6, #90	; 0x5a
 80109f4:	4561      	cmp	r1, ip
 80109f6:	d10f      	bne.n	8010a18 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xbc>
 80109f8:	6803      	ldr	r3, [r0, #0]
 80109fa:	68db      	ldr	r3, [r3, #12]
 80109fc:	4798      	blx	r3
 80109fe:	2180      	movs	r1, #128	; 0x80
 8010a00:	7b42      	ldrb	r2, [r0, #13]
 8010a02:	0049      	lsls	r1, r1, #1
 8010a04:	00d3      	lsls	r3, r2, #3
 8010a06:	7a07      	ldrb	r7, [r0, #8]
 8010a08:	400b      	ands	r3, r1
 8010a0a:	431f      	orrs	r7, r3
 8010a0c:	0653      	lsls	r3, r2, #25
 8010a0e:	d502      	bpl.n	8010a16 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xba>
 8010a10:	4b4c      	ldr	r3, [pc, #304]	; (8010b44 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e8>)
 8010a12:	18ff      	adds	r7, r7, r3
 8010a14:	b23f      	sxth	r7, r7
 8010a16:	8037      	strh	r7, [r6, #0]
 8010a18:	8837      	ldrh	r7, [r6, #0]
 8010a1a:	9b00      	ldr	r3, [sp, #0]
 8010a1c:	0021      	movs	r1, r4
 8010a1e:	19df      	adds	r7, r3, r7
 8010a20:	9b01      	ldr	r3, [sp, #4]
 8010a22:	220e      	movs	r2, #14
 8010a24:	18ff      	adds	r7, r7, r3
 8010a26:	b2bf      	uxth	r7, r7
 8010a28:	8037      	strh	r7, [r6, #0]
 8010a2a:	002e      	movs	r6, r5
 8010a2c:	364c      	adds	r6, #76	; 0x4c
 8010a2e:	0030      	movs	r0, r6
 8010a30:	f003 fcbd 	bl	80143ae <memcpy>
 8010a34:	2260      	movs	r2, #96	; 0x60
 8010a36:	7b73      	ldrb	r3, [r6, #13]
 8010a38:	7237      	strb	r7, [r6, #8]
 8010a3a:	10ff      	asrs	r7, r7, #3
 8010a3c:	4393      	bics	r3, r2
 8010a3e:	4017      	ands	r7, r2
 8010a40:	002a      	movs	r2, r5
 8010a42:	431f      	orrs	r7, r3
 8010a44:	7377      	strb	r7, [r6, #13]
 8010a46:	3255      	adds	r2, #85	; 0x55
 8010a48:	355e      	adds	r5, #94	; 0x5e
 8010a4a:	8829      	ldrh	r1, [r5, #0]
 8010a4c:	7813      	ldrb	r3, [r2, #0]
 8010a4e:	0034      	movs	r4, r6
 8010a50:	1a5b      	subs	r3, r3, r1
 8010a52:	7013      	strb	r3, [r2, #0]
 8010a54:	e78e      	b.n	8010974 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8010a56:	2604      	movs	r6, #4
 8010a58:	001f      	movs	r7, r3
 8010a5a:	43b7      	bics	r7, r6
 8010a5c:	002e      	movs	r6, r5
 8010a5e:	4a3a      	ldr	r2, [pc, #232]	; (8010b48 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ec>)
 8010a60:	365a      	adds	r6, #90	; 0x5a
 8010a62:	4297      	cmp	r7, r2
 8010a64:	d002      	beq.n	8010a6c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x110>
 8010a66:	4a39      	ldr	r2, [pc, #228]	; (8010b4c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f0>)
 8010a68:	4293      	cmp	r3, r2
 8010a6a:	d12f      	bne.n	8010acc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x170>
 8010a6c:	3b01      	subs	r3, #1
 8010a6e:	0002      	movs	r2, r0
 8010a70:	b29b      	uxth	r3, r3
 8010a72:	0021      	movs	r1, r4
 8010a74:	0028      	movs	r0, r5
 8010a76:	f7ff ff66 	bl	8010946 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8010a7a:	2280      	movs	r2, #128	; 0x80
 8010a7c:	7b47      	ldrb	r7, [r0, #13]
 8010a7e:	0052      	lsls	r2, r2, #1
 8010a80:	00f9      	lsls	r1, r7, #3
 8010a82:	7a03      	ldrb	r3, [r0, #8]
 8010a84:	4011      	ands	r1, r2
 8010a86:	430b      	orrs	r3, r1
 8010a88:	0679      	lsls	r1, r7, #25
 8010a8a:	d502      	bpl.n	8010a92 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 8010a8c:	492d      	ldr	r1, [pc, #180]	; (8010b44 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e8>)
 8010a8e:	185b      	adds	r3, r3, r1
 8010a90:	b21b      	sxth	r3, r3
 8010a92:	8033      	strh	r3, [r6, #0]
 8010a94:	7b63      	ldrb	r3, [r4, #13]
 8010a96:	005b      	lsls	r3, r3, #1
 8010a98:	401a      	ands	r2, r3
 8010a9a:	7aa3      	ldrb	r3, [r4, #10]
 8010a9c:	4313      	orrs	r3, r2
 8010a9e:	109a      	asrs	r2, r3, #2
 8010aa0:	115b      	asrs	r3, r3, #5
 8010aa2:	18d3      	adds	r3, r2, r3
 8010aa4:	002a      	movs	r2, r5
 8010aa6:	325e      	adds	r2, #94	; 0x5e
 8010aa8:	8013      	strh	r3, [r2, #0]
 8010aaa:	2280      	movs	r2, #128	; 0x80
 8010aac:	7b61      	ldrb	r1, [r4, #13]
 8010aae:	0052      	lsls	r2, r2, #1
 8010ab0:	00cb      	lsls	r3, r1, #3
 8010ab2:	401a      	ands	r2, r3
 8010ab4:	7a23      	ldrb	r3, [r4, #8]
 8010ab6:	4313      	orrs	r3, r2
 8010ab8:	064a      	lsls	r2, r1, #25
 8010aba:	d502      	bpl.n	8010ac2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x166>
 8010abc:	4a21      	ldr	r2, [pc, #132]	; (8010b44 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e8>)
 8010abe:	189b      	adds	r3, r3, r2
 8010ac0:	b21b      	sxth	r3, r3
 8010ac2:	9a00      	ldr	r2, [sp, #0]
 8010ac4:	355c      	adds	r5, #92	; 0x5c
 8010ac6:	1a9b      	subs	r3, r3, r2
 8010ac8:	802b      	strh	r3, [r5, #0]
 8010aca:	e753      	b.n	8010974 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8010acc:	2780      	movs	r7, #128	; 0x80
 8010ace:	00ca      	lsls	r2, r1, #3
 8010ad0:	007f      	lsls	r7, r7, #1
 8010ad2:	4017      	ands	r7, r2
 8010ad4:	7a22      	ldrb	r2, [r4, #8]
 8010ad6:	433a      	orrs	r2, r7
 8010ad8:	0649      	lsls	r1, r1, #25
 8010ada:	d502      	bpl.n	8010ae2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x186>
 8010adc:	4919      	ldr	r1, [pc, #100]	; (8010b44 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e8>)
 8010ade:	1852      	adds	r2, r2, r1
 8010ae0:	b212      	sxth	r2, r2
 8010ae2:	8032      	strh	r2, [r6, #0]
 8010ae4:	002f      	movs	r7, r5
 8010ae6:	2210      	movs	r2, #16
 8010ae8:	001e      	movs	r6, r3
 8010aea:	4919      	ldr	r1, [pc, #100]	; (8010b50 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>)
 8010aec:	4396      	bics	r6, r2
 8010aee:	375e      	adds	r7, #94	; 0x5e
 8010af0:	4a18      	ldr	r2, [pc, #96]	; (8010b54 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f8>)
 8010af2:	428e      	cmp	r6, r1
 8010af4:	d001      	beq.n	8010afa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19e>
 8010af6:	4293      	cmp	r3, r2
 8010af8:	d11b      	bne.n	8010b32 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1d6>
 8010afa:	2180      	movs	r1, #128	; 0x80
 8010afc:	7b66      	ldrb	r6, [r4, #13]
 8010afe:	0049      	lsls	r1, r1, #1
 8010b00:	0076      	lsls	r6, r6, #1
 8010b02:	400e      	ands	r6, r1
 8010b04:	7aa1      	ldrb	r1, [r4, #10]
 8010b06:	430e      	orrs	r6, r1
 8010b08:	4293      	cmp	r3, r2
 8010b0a:	d010      	beq.n	8010b2e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1d2>
 8010b0c:	3b01      	subs	r3, #1
 8010b0e:	b29b      	uxth	r3, r3
 8010b10:	0002      	movs	r2, r0
 8010b12:	0021      	movs	r1, r4
 8010b14:	0028      	movs	r0, r5
 8010b16:	f7ff ff16 	bl	8010946 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8010b1a:	2280      	movs	r2, #128	; 0x80
 8010b1c:	7b43      	ldrb	r3, [r0, #13]
 8010b1e:	0052      	lsls	r2, r2, #1
 8010b20:	005b      	lsls	r3, r3, #1
 8010b22:	4013      	ands	r3, r2
 8010b24:	7a82      	ldrb	r2, [r0, #10]
 8010b26:	4313      	orrs	r3, r2
 8010b28:	1af6      	subs	r6, r6, r3
 8010b2a:	803e      	strh	r6, [r7, #0]
 8010b2c:	e7bd      	b.n	8010aaa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 8010b2e:	4b0a      	ldr	r3, [pc, #40]	; (8010b58 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1fc>)
 8010b30:	e7ee      	b.n	8010b10 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>
 8010b32:	2300      	movs	r3, #0
 8010b34:	803b      	strh	r3, [r7, #0]
 8010b36:	e7b8      	b.n	8010aaa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 8010b38:	fffff1cf 	.word	0xfffff1cf
 8010b3c:	3fc00079 	.word	0x3fc00079
 8010b40:	00000e33 	.word	0x00000e33
 8010b44:	fffffe00 	.word	0xfffffe00
 8010b48:	00000e1b 	.word	0x00000e1b
 8010b4c:	00000e1d 	.word	0x00000e1d
 8010b50:	00000e09 	.word	0x00000e09
 8010b54:	00000e13 	.word	0x00000e13
 8010b58:	00000e0c 	.word	0x00000e0c

08010b5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8010b5c:	0003      	movs	r3, r0
 8010b5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b60:	0006      	movs	r6, r0
 8010b62:	b085      	sub	sp, #20
 8010b64:	335c      	adds	r3, #92	; 0x5c
 8010b66:	0005      	movs	r5, r0
 8010b68:	0014      	movs	r4, r2
 8010b6a:	365a      	adds	r6, #90	; 0x5a
 8010b6c:	9301      	str	r3, [sp, #4]
 8010b6e:	2a00      	cmp	r2, #0
 8010b70:	d106      	bne.n	8010b80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x24>
 8010b72:	4bb5      	ldr	r3, [pc, #724]	; (8010e48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2ec>)
 8010b74:	9a01      	ldr	r2, [sp, #4]
 8010b76:	8033      	strh	r3, [r6, #0]
 8010b78:	355e      	adds	r5, #94	; 0x5e
 8010b7a:	8013      	strh	r3, [r2, #0]
 8010b7c:	802b      	strh	r3, [r5, #0]
 8010b7e:	e048      	b.n	8010c12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb6>
 8010b80:	2080      	movs	r0, #128	; 0x80
 8010b82:	8893      	ldrh	r3, [r2, #4]
 8010b84:	7b52      	ldrb	r2, [r2, #13]
 8010b86:	0040      	lsls	r0, r0, #1
 8010b88:	0111      	lsls	r1, r2, #4
 8010b8a:	4001      	ands	r1, r0
 8010b8c:	79e0      	ldrb	r0, [r4, #7]
 8010b8e:	4308      	orrs	r0, r1
 8010b90:	2101      	movs	r1, #1
 8010b92:	9000      	str	r0, [sp, #0]
 8010b94:	9103      	str	r1, [sp, #12]
 8010b96:	2804      	cmp	r0, #4
 8010b98:	dd01      	ble.n	8010b9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x42>
 8010b9a:	0881      	lsrs	r1, r0, #2
 8010b9c:	9103      	str	r1, [sp, #12]
 8010b9e:	21dd      	movs	r1, #221	; 0xdd
 8010ba0:	00c9      	lsls	r1, r1, #3
 8010ba2:	428b      	cmp	r3, r1
 8010ba4:	d900      	bls.n	8010ba8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x4c>
 8010ba6:	e0a1      	b.n	8010cec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 8010ba8:	49a8      	ldr	r1, [pc, #672]	; (8010e4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2f0>)
 8010baa:	428b      	cmp	r3, r1
 8010bac:	d212      	bcs.n	8010bd4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x78>
 8010bae:	49a8      	ldr	r1, [pc, #672]	; (8010e50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2f4>)
 8010bb0:	428b      	cmp	r3, r1
 8010bb2:	d85b      	bhi.n	8010c6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x110>
 8010bb4:	49a7      	ldr	r1, [pc, #668]	; (8010e54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2f8>)
 8010bb6:	428b      	cmp	r3, r1
 8010bb8:	d20c      	bcs.n	8010bd4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x78>
 8010bba:	49a7      	ldr	r1, [pc, #668]	; (8010e58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>)
 8010bbc:	428b      	cmp	r3, r1
 8010bbe:	d84e      	bhi.n	8010c5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x102>
 8010bc0:	49a6      	ldr	r1, [pc, #664]	; (8010e5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>)
 8010bc2:	428b      	cmp	r3, r1
 8010bc4:	d206      	bcs.n	8010bd4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x78>
 8010bc6:	49a6      	ldr	r1, [pc, #664]	; (8010e60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>)
 8010bc8:	428b      	cmp	r3, r1
 8010bca:	d02b      	beq.n	8010c24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc8>
 8010bcc:	d824      	bhi.n	8010c18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbc>
 8010bce:	390a      	subs	r1, #10
 8010bd0:	428b      	cmp	r3, r1
 8010bd2:	d365      	bcc.n	8010ca0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x144>
 8010bd4:	2100      	movs	r1, #0
 8010bd6:	5e73      	ldrsh	r3, [r6, r1]
 8010bd8:	9302      	str	r3, [sp, #8]
 8010bda:	0019      	movs	r1, r3
 8010bdc:	4b9a      	ldr	r3, [pc, #616]	; (8010e48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2ec>)
 8010bde:	4299      	cmp	r1, r3
 8010be0:	d000      	beq.n	8010be4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x88>
 8010be2:	e0ba      	b.n	8010d5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1fe>
 8010be4:	9b01      	ldr	r3, [sp, #4]
 8010be6:	2100      	movs	r1, #0
 8010be8:	5e5b      	ldrsh	r3, [r3, r1]
 8010bea:	9902      	ldr	r1, [sp, #8]
 8010bec:	428b      	cmp	r3, r1
 8010bee:	d000      	beq.n	8010bf2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x96>
 8010bf0:	e0b3      	b.n	8010d5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1fe>
 8010bf2:	2180      	movs	r1, #128	; 0x80
 8010bf4:	00d3      	lsls	r3, r2, #3
 8010bf6:	0049      	lsls	r1, r1, #1
 8010bf8:	4019      	ands	r1, r3
 8010bfa:	7a23      	ldrb	r3, [r4, #8]
 8010bfc:	430b      	orrs	r3, r1
 8010bfe:	0652      	lsls	r2, r2, #25
 8010c00:	d502      	bpl.n	8010c08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xac>
 8010c02:	4a98      	ldr	r2, [pc, #608]	; (8010e64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x308>)
 8010c04:	189b      	adds	r3, r3, r2
 8010c06:	b21b      	sxth	r3, r3
 8010c08:	9a00      	ldr	r2, [sp, #0]
 8010c0a:	8033      	strh	r3, [r6, #0]
 8010c0c:	1a9b      	subs	r3, r3, r2
 8010c0e:	9a01      	ldr	r2, [sp, #4]
 8010c10:	8013      	strh	r3, [r2, #0]
 8010c12:	0020      	movs	r0, r4
 8010c14:	b005      	add	sp, #20
 8010c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c18:	4993      	ldr	r1, [pc, #588]	; (8010e68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x30c>)
 8010c1a:	428b      	cmp	r3, r1
 8010c1c:	d340      	bcc.n	8010ca0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x144>
 8010c1e:	4993      	ldr	r1, [pc, #588]	; (8010e6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x310>)
 8010c20:	428b      	cmp	r3, r1
 8010c22:	d9d7      	bls.n	8010bd4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x78>
 8010c24:	9b01      	ldr	r3, [sp, #4]
 8010c26:	4f88      	ldr	r7, [pc, #544]	; (8010e48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2ec>)
 8010c28:	2100      	movs	r1, #0
 8010c2a:	5e5b      	ldrsh	r3, [r3, r1]
 8010c2c:	9302      	str	r3, [sp, #8]
 8010c2e:	2100      	movs	r1, #0
 8010c30:	5e73      	ldrsh	r3, [r6, r1]
 8010c32:	42bb      	cmp	r3, r7
 8010c34:	d000      	beq.n	8010c38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xdc>
 8010c36:	e0ce      	b.n	8010dd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x27a>
 8010c38:	9902      	ldr	r1, [sp, #8]
 8010c3a:	4299      	cmp	r1, r3
 8010c3c:	d000      	beq.n	8010c40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xe4>
 8010c3e:	e0ca      	b.n	8010dd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x27a>
 8010c40:	2180      	movs	r1, #128	; 0x80
 8010c42:	00d3      	lsls	r3, r2, #3
 8010c44:	0049      	lsls	r1, r1, #1
 8010c46:	4019      	ands	r1, r3
 8010c48:	7a23      	ldrb	r3, [r4, #8]
 8010c4a:	430b      	orrs	r3, r1
 8010c4c:	0652      	lsls	r2, r2, #25
 8010c4e:	d502      	bpl.n	8010c56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfa>
 8010c50:	4a84      	ldr	r2, [pc, #528]	; (8010e64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x308>)
 8010c52:	189b      	adds	r3, r3, r2
 8010c54:	b21b      	sxth	r3, r3
 8010c56:	9a00      	ldr	r2, [sp, #0]
 8010c58:	355c      	adds	r5, #92	; 0x5c
 8010c5a:	1a9b      	subs	r3, r3, r2
 8010c5c:	e78e      	b.n	8010b7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x20>
 8010c5e:	4984      	ldr	r1, [pc, #528]	; (8010e70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x314>)
 8010c60:	428b      	cmp	r3, r1
 8010c62:	d8df      	bhi.n	8010c24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc8>
 8010c64:	4983      	ldr	r1, [pc, #524]	; (8010e74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x318>)
 8010c66:	428b      	cmp	r3, r1
 8010c68:	d3dc      	bcc.n	8010c24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc8>
 8010c6a:	e7b3      	b.n	8010bd4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x78>
 8010c6c:	4982      	ldr	r1, [pc, #520]	; (8010e78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x31c>)
 8010c6e:	428b      	cmp	r3, r1
 8010c70:	d0b0      	beq.n	8010bd4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x78>
 8010c72:	d80b      	bhi.n	8010c8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x130>
 8010c74:	4981      	ldr	r1, [pc, #516]	; (8010e7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>)
 8010c76:	428b      	cmp	r3, r1
 8010c78:	d801      	bhi.n	8010c7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x122>
 8010c7a:	4981      	ldr	r1, [pc, #516]	; (8010e80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>)
 8010c7c:	e7f3      	b.n	8010c66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x10a>
 8010c7e:	4981      	ldr	r1, [pc, #516]	; (8010e84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x328>)
 8010c80:	428b      	cmp	r3, r1
 8010c82:	d0cf      	beq.n	8010c24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc8>
 8010c84:	3111      	adds	r1, #17
 8010c86:	428b      	cmp	r3, r1
 8010c88:	d10a      	bne.n	8010ca0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x144>
 8010c8a:	e7a3      	b.n	8010bd4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x78>
 8010c8c:	497e      	ldr	r1, [pc, #504]	; (8010e88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x32c>)
 8010c8e:	428b      	cmp	r3, r1
 8010c90:	d827      	bhi.n	8010ce2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x186>
 8010c92:	497e      	ldr	r1, [pc, #504]	; (8010e8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x330>)
 8010c94:	428b      	cmp	r3, r1
 8010c96:	d29d      	bcs.n	8010bd4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x78>
 8010c98:	497d      	ldr	r1, [pc, #500]	; (8010e90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x334>)
 8010c9a:	185b      	adds	r3, r3, r1
 8010c9c:	2b05      	cmp	r3, #5
 8010c9e:	d999      	bls.n	8010bd4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x78>
 8010ca0:	2180      	movs	r1, #128	; 0x80
 8010ca2:	00d3      	lsls	r3, r2, #3
 8010ca4:	0049      	lsls	r1, r1, #1
 8010ca6:	4019      	ands	r1, r3
 8010ca8:	7a23      	ldrb	r3, [r4, #8]
 8010caa:	430b      	orrs	r3, r1
 8010cac:	0652      	lsls	r2, r2, #25
 8010cae:	d502      	bpl.n	8010cb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x15a>
 8010cb0:	4a6c      	ldr	r2, [pc, #432]	; (8010e64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x308>)
 8010cb2:	189b      	adds	r3, r3, r2
 8010cb4:	b21b      	sxth	r3, r3
 8010cb6:	9a00      	ldr	r2, [sp, #0]
 8010cb8:	8033      	strh	r3, [r6, #0]
 8010cba:	1a9b      	subs	r3, r3, r2
 8010cbc:	9a01      	ldr	r2, [sp, #4]
 8010cbe:	2105      	movs	r1, #5
 8010cc0:	8013      	strh	r3, [r2, #0]
 8010cc2:	2380      	movs	r3, #128	; 0x80
 8010cc4:	7b60      	ldrb	r0, [r4, #13]
 8010cc6:	005b      	lsls	r3, r3, #1
 8010cc8:	0140      	lsls	r0, r0, #5
 8010cca:	4003      	ands	r3, r0
 8010ccc:	79a0      	ldrb	r0, [r4, #6]
 8010cce:	355e      	adds	r5, #94	; 0x5e
 8010cd0:	4318      	orrs	r0, r3
 8010cd2:	0040      	lsls	r0, r0, #1
 8010cd4:	f7ef fabe 	bl	8000254 <__divsi3>
 8010cd8:	2309      	movs	r3, #9
 8010cda:	56e3      	ldrsb	r3, [r4, r3]
 8010cdc:	1818      	adds	r0, r3, r0
 8010cde:	8028      	strh	r0, [r5, #0]
 8010ce0:	e797      	b.n	8010c12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb6>
 8010ce2:	496c      	ldr	r1, [pc, #432]	; (8010e94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x338>)
 8010ce4:	428b      	cmp	r3, r1
 8010ce6:	d09d      	beq.n	8010c24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc8>
 8010ce8:	496b      	ldr	r1, [pc, #428]	; (8010e98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x33c>)
 8010cea:	e7cc      	b.n	8010c86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8010cec:	496b      	ldr	r1, [pc, #428]	; (8010e9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x340>)
 8010cee:	428b      	cmp	r3, r1
 8010cf0:	d820      	bhi.n	8010d34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d8>
 8010cf2:	496b      	ldr	r1, [pc, #428]	; (8010ea0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x344>)
 8010cf4:	428b      	cmp	r3, r1
 8010cf6:	d295      	bcs.n	8010c24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc8>
 8010cf8:	496a      	ldr	r1, [pc, #424]	; (8010ea4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x348>)
 8010cfa:	428b      	cmp	r3, r1
 8010cfc:	d810      	bhi.n	8010d20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c4>
 8010cfe:	496a      	ldr	r1, [pc, #424]	; (8010ea8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x34c>)
 8010d00:	428b      	cmp	r3, r1
 8010d02:	d300      	bcc.n	8010d06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1aa>
 8010d04:	e766      	b.n	8010bd4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x78>
 8010d06:	4969      	ldr	r1, [pc, #420]	; (8010eac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x350>)
 8010d08:	428b      	cmp	r3, r1
 8010d0a:	d807      	bhi.n	8010d1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c0>
 8010d0c:	4968      	ldr	r1, [pc, #416]	; (8010eb0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x354>)
 8010d0e:	428b      	cmp	r3, r1
 8010d10:	d300      	bcc.n	8010d14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1b8>
 8010d12:	e75f      	b.n	8010bd4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x78>
 8010d14:	4967      	ldr	r1, [pc, #412]	; (8010eb4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x358>)
 8010d16:	428b      	cmp	r3, r1
 8010d18:	d084      	beq.n	8010c24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc8>
 8010d1a:	e7c1      	b.n	8010ca0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x144>
 8010d1c:	4966      	ldr	r1, [pc, #408]	; (8010eb8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x35c>)
 8010d1e:	e7fa      	b.n	8010d16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ba>
 8010d20:	4966      	ldr	r1, [pc, #408]	; (8010ebc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x360>)
 8010d22:	428b      	cmp	r3, r1
 8010d24:	d801      	bhi.n	8010d2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 8010d26:	4966      	ldr	r1, [pc, #408]	; (8010ec0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x364>)
 8010d28:	e79d      	b.n	8010c66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x10a>
 8010d2a:	4966      	ldr	r1, [pc, #408]	; (8010ec4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x368>)
 8010d2c:	428b      	cmp	r3, r1
 8010d2e:	d000      	beq.n	8010d32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8010d30:	e750      	b.n	8010bd4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x78>
 8010d32:	e777      	b.n	8010c24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc8>
 8010d34:	4964      	ldr	r1, [pc, #400]	; (8010ec8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x36c>)
 8010d36:	428b      	cmp	r3, r1
 8010d38:	d100      	bne.n	8010d3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e0>
 8010d3a:	e773      	b.n	8010c24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc8>
 8010d3c:	d801      	bhi.n	8010d42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 8010d3e:	4963      	ldr	r1, [pc, #396]	; (8010ecc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x370>)
 8010d40:	e7f4      	b.n	8010d2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8010d42:	4963      	ldr	r1, [pc, #396]	; (8010ed0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x374>)
 8010d44:	428b      	cmp	r3, r1
 8010d46:	d804      	bhi.n	8010d52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f6>
 8010d48:	4962      	ldr	r1, [pc, #392]	; (8010ed4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x378>)
 8010d4a:	428b      	cmp	r3, r1
 8010d4c:	d200      	bcs.n	8010d50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f4>
 8010d4e:	e741      	b.n	8010bd4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x78>
 8010d50:	e768      	b.n	8010c24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc8>
 8010d52:	4961      	ldr	r1, [pc, #388]	; (8010ed8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x37c>)
 8010d54:	428b      	cmp	r3, r1
 8010d56:	d8a3      	bhi.n	8010ca0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x144>
 8010d58:	e73c      	b.n	8010bd4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x78>
 8010d5a:	002f      	movs	r7, r5
 8010d5c:	374c      	adds	r7, #76	; 0x4c
 8010d5e:	0021      	movs	r1, r4
 8010d60:	220e      	movs	r2, #14
 8010d62:	0038      	movs	r0, r7
 8010d64:	f003 fb23 	bl	80143ae <memcpy>
 8010d68:	002b      	movs	r3, r5
 8010d6a:	335e      	adds	r3, #94	; 0x5e
 8010d6c:	2100      	movs	r1, #0
 8010d6e:	5e59      	ldrsh	r1, [r3, r1]
 8010d70:	4b35      	ldr	r3, [pc, #212]	; (8010e48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2ec>)
 8010d72:	4299      	cmp	r1, r3
 8010d74:	d00b      	beq.n	8010d8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x232>
 8010d76:	2280      	movs	r2, #128	; 0x80
 8010d78:	7b63      	ldrb	r3, [r4, #13]
 8010d7a:	0052      	lsls	r2, r2, #1
 8010d7c:	015b      	lsls	r3, r3, #5
 8010d7e:	401a      	ands	r2, r3
 8010d80:	79a3      	ldrb	r3, [r4, #6]
 8010d82:	4313      	orrs	r3, r2
 8010d84:	002a      	movs	r2, r5
 8010d86:	105b      	asrs	r3, r3, #1
 8010d88:	1acb      	subs	r3, r1, r3
 8010d8a:	3255      	adds	r2, #85	; 0x55
 8010d8c:	7013      	strb	r3, [r2, #0]
 8010d8e:	466b      	mov	r3, sp
 8010d90:	881a      	ldrh	r2, [r3, #0]
 8010d92:	9b02      	ldr	r3, [sp, #8]
 8010d94:	0019      	movs	r1, r3
 8010d96:	4b2c      	ldr	r3, [pc, #176]	; (8010e48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2ec>)
 8010d98:	4299      	cmp	r1, r3
 8010d9a:	d009      	beq.n	8010db0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x254>
 8010d9c:	2060      	movs	r0, #96	; 0x60
 8010d9e:	1853      	adds	r3, r2, r1
 8010da0:	b29b      	uxth	r3, r3
 8010da2:	7b79      	ldrb	r1, [r7, #13]
 8010da4:	723b      	strb	r3, [r7, #8]
 8010da6:	10db      	asrs	r3, r3, #3
 8010da8:	4381      	bics	r1, r0
 8010daa:	4003      	ands	r3, r0
 8010dac:	430b      	orrs	r3, r1
 8010dae:	737b      	strb	r3, [r7, #13]
 8010db0:	2180      	movs	r1, #128	; 0x80
 8010db2:	7b78      	ldrb	r0, [r7, #13]
 8010db4:	0049      	lsls	r1, r1, #1
 8010db6:	00c3      	lsls	r3, r0, #3
 8010db8:	4019      	ands	r1, r3
 8010dba:	7a3b      	ldrb	r3, [r7, #8]
 8010dbc:	430b      	orrs	r3, r1
 8010dbe:	0641      	lsls	r1, r0, #25
 8010dc0:	d502      	bpl.n	8010dc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x26c>
 8010dc2:	4928      	ldr	r1, [pc, #160]	; (8010e64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x308>)
 8010dc4:	185b      	adds	r3, r3, r1
 8010dc6:	b21b      	sxth	r3, r3
 8010dc8:	8033      	strh	r3, [r6, #0]
 8010dca:	1a9a      	subs	r2, r3, r2
 8010dcc:	9b01      	ldr	r3, [sp, #4]
 8010dce:	801a      	strh	r2, [r3, #0]
 8010dd0:	002c      	movs	r4, r5
 8010dd2:	344c      	adds	r4, #76	; 0x4c
 8010dd4:	e71d      	b.n	8010c12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb6>
 8010dd6:	002e      	movs	r6, r5
 8010dd8:	364c      	adds	r6, #76	; 0x4c
 8010dda:	0021      	movs	r1, r4
 8010ddc:	220e      	movs	r2, #14
 8010dde:	0030      	movs	r0, r6
 8010de0:	f003 fae5 	bl	80143ae <memcpy>
 8010de4:	002b      	movs	r3, r5
 8010de6:	335e      	adds	r3, #94	; 0x5e
 8010de8:	2100      	movs	r1, #0
 8010dea:	5e59      	ldrsh	r1, [r3, r1]
 8010dec:	42b9      	cmp	r1, r7
 8010dee:	d00b      	beq.n	8010e08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2ac>
 8010df0:	2280      	movs	r2, #128	; 0x80
 8010df2:	7b63      	ldrb	r3, [r4, #13]
 8010df4:	0052      	lsls	r2, r2, #1
 8010df6:	015b      	lsls	r3, r3, #5
 8010df8:	401a      	ands	r2, r3
 8010dfa:	79a3      	ldrb	r3, [r4, #6]
 8010dfc:	4313      	orrs	r3, r2
 8010dfe:	002a      	movs	r2, r5
 8010e00:	105b      	asrs	r3, r3, #1
 8010e02:	1acb      	subs	r3, r1, r3
 8010e04:	3255      	adds	r2, #85	; 0x55
 8010e06:	7013      	strb	r3, [r2, #0]
 8010e08:	9b02      	ldr	r3, [sp, #8]
 8010e0a:	42bb      	cmp	r3, r7
 8010e0c:	d00a      	beq.n	8010e24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c8>
 8010e0e:	9a03      	ldr	r2, [sp, #12]
 8010e10:	7b71      	ldrb	r1, [r6, #13]
 8010e12:	1a9b      	subs	r3, r3, r2
 8010e14:	2260      	movs	r2, #96	; 0x60
 8010e16:	b29b      	uxth	r3, r3
 8010e18:	7233      	strb	r3, [r6, #8]
 8010e1a:	10db      	asrs	r3, r3, #3
 8010e1c:	4013      	ands	r3, r2
 8010e1e:	4391      	bics	r1, r2
 8010e20:	430b      	orrs	r3, r1
 8010e22:	7373      	strb	r3, [r6, #13]
 8010e24:	2280      	movs	r2, #128	; 0x80
 8010e26:	7b71      	ldrb	r1, [r6, #13]
 8010e28:	0052      	lsls	r2, r2, #1
 8010e2a:	00cb      	lsls	r3, r1, #3
 8010e2c:	401a      	ands	r2, r3
 8010e2e:	7a33      	ldrb	r3, [r6, #8]
 8010e30:	4313      	orrs	r3, r2
 8010e32:	064a      	lsls	r2, r1, #25
 8010e34:	d502      	bpl.n	8010e3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2e0>
 8010e36:	4a0b      	ldr	r2, [pc, #44]	; (8010e64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x308>)
 8010e38:	189b      	adds	r3, r3, r2
 8010e3a:	b21b      	sxth	r3, r3
 8010e3c:	9a00      	ldr	r2, [sp, #0]
 8010e3e:	1a9b      	subs	r3, r3, r2
 8010e40:	9a01      	ldr	r2, [sp, #4]
 8010e42:	8013      	strh	r3, [r2, #0]
 8010e44:	e7c4      	b.n	8010dd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x274>
 8010e46:	46c0      	nop			; (mov r8, r8)
 8010e48:	ffff8000 	.word	0xffff8000
 8010e4c:	000006e7 	.word	0x000006e7
 8010e50:	0000065b 	.word	0x0000065b
 8010e54:	00000657 	.word	0x00000657
 8010e58:	0000064f 	.word	0x0000064f
 8010e5c:	0000064e 	.word	0x0000064e
 8010e60:	0000061a 	.word	0x0000061a
 8010e64:	fffffe00 	.word	0xfffffe00
 8010e68:	0000064b 	.word	0x0000064b
 8010e6c:	0000064c 	.word	0x0000064c
 8010e70:	00000654 	.word	0x00000654
 8010e74:	00000651 	.word	0x00000651
 8010e78:	00000674 	.word	0x00000674
 8010e7c:	0000065e 	.word	0x0000065e
 8010e80:	0000065d 	.word	0x0000065d
 8010e84:	0000065f 	.word	0x0000065f
 8010e88:	000006e2 	.word	0x000006e2
 8010e8c:	000006df 	.word	0x000006df
 8010e90:	fffff92a 	.word	0xfffff92a
 8010e94:	000006e3 	.word	0x000006e3
 8010e98:	000006e4 	.word	0x000006e4
 8010e9c:	000008ef 	.word	0x000008ef
 8010ea0:	000008ed 	.word	0x000008ed
 8010ea4:	000008e5 	.word	0x000008e5
 8010ea8:	000008e4 	.word	0x000008e4
 8010eac:	000006ec 	.word	0x000006ec
 8010eb0:	000006eb 	.word	0x000006eb
 8010eb4:	000006ea 	.word	0x000006ea
 8010eb8:	000006ed 	.word	0x000006ed
 8010ebc:	000008e8 	.word	0x000008e8
 8010ec0:	000008e7 	.word	0x000008e7
 8010ec4:	000008e9 	.word	0x000008e9
 8010ec8:	000008f6 	.word	0x000008f6
 8010ecc:	000008f2 	.word	0x000008f2
 8010ed0:	000008fa 	.word	0x000008fa
 8010ed4:	000008f9 	.word	0x000008f9
 8010ed8:	000008fe 	.word	0x000008fe

08010edc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8010edc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ede:	0017      	movs	r7, r2
 8010ee0:	0002      	movs	r2, r0
 8010ee2:	001d      	movs	r5, r3
 8010ee4:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8010ee6:	3222      	adds	r2, #34	; 0x22
 8010ee8:	005b      	lsls	r3, r3, #1
 8010eea:	5a9b      	ldrh	r3, [r3, r2]
 8010eec:	0006      	movs	r6, r0
 8010eee:	9300      	str	r3, [sp, #0]
 8010ef0:	f7f8 fe9e 	bl	8009c30 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8010ef4:	1e04      	subs	r4, r0, #0
 8010ef6:	d102      	bne.n	8010efe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x22>
 8010ef8:	6028      	str	r0, [r5, #0]
 8010efa:	0020      	movs	r0, r4
 8010efc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010efe:	683b      	ldr	r3, [r7, #0]
 8010f00:	0001      	movs	r1, r0
 8010f02:	68db      	ldr	r3, [r3, #12]
 8010f04:	0038      	movs	r0, r7
 8010f06:	4798      	blx	r3
 8010f08:	9b00      	ldr	r3, [sp, #0]
 8010f0a:	0002      	movs	r2, r0
 8010f0c:	6028      	str	r0, [r5, #0]
 8010f0e:	481a      	ldr	r0, [pc, #104]	; (8010f78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x9c>)
 8010f10:	491a      	ldr	r1, [pc, #104]	; (8010f7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa0>)
 8010f12:	181b      	adds	r3, r3, r0
 8010f14:	0030      	movs	r0, r6
 8010f16:	b29b      	uxth	r3, r3
 8010f18:	3061      	adds	r0, #97	; 0x61
 8010f1a:	9001      	str	r0, [sp, #4]
 8010f1c:	428b      	cmp	r3, r1
 8010f1e:	d815      	bhi.n	8010f4c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x70>
 8010f20:	9b00      	ldr	r3, [sp, #0]
 8010f22:	0039      	movs	r1, r7
 8010f24:	0030      	movs	r0, r6
 8010f26:	f7ff fe19 	bl	8010b5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8010f2a:	6028      	str	r0, [r5, #0]
 8010f2c:	6829      	ldr	r1, [r5, #0]
 8010f2e:	1e0b      	subs	r3, r1, #0
 8010f30:	d009      	beq.n	8010f46 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6a>
 8010f32:	2280      	movs	r2, #128	; 0x80
 8010f34:	7b4b      	ldrb	r3, [r1, #13]
 8010f36:	0052      	lsls	r2, r2, #1
 8010f38:	005b      	lsls	r3, r3, #1
 8010f3a:	401a      	ands	r2, r3
 8010f3c:	7a8b      	ldrb	r3, [r1, #10]
 8010f3e:	4313      	orrs	r3, r2
 8010f40:	425a      	negs	r2, r3
 8010f42:	4153      	adcs	r3, r2
 8010f44:	b2db      	uxtb	r3, r3
 8010f46:	9a01      	ldr	r2, [sp, #4]
 8010f48:	7013      	strb	r3, [r2, #0]
 8010f4a:	e7d6      	b.n	8010efa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8010f4c:	4b0c      	ldr	r3, [pc, #48]	; (8010f80 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 8010f4e:	18e3      	adds	r3, r4, r3
 8010f50:	b29b      	uxth	r3, r3
 8010f52:	2b7f      	cmp	r3, #127	; 0x7f
 8010f54:	d804      	bhi.n	8010f60 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x84>
 8010f56:	0039      	movs	r1, r7
 8010f58:	0030      	movs	r0, r6
 8010f5a:	f7ff fcff 	bl	801095c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8010f5e:	e7e4      	b.n	8010f2a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 8010f60:	9b01      	ldr	r3, [sp, #4]
 8010f62:	781b      	ldrb	r3, [r3, #0]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d0e1      	beq.n	8010f2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x50>
 8010f68:	4b06      	ldr	r3, [pc, #24]	; (8010f84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 8010f6a:	429c      	cmp	r4, r3
 8010f6c:	d1de      	bne.n	8010f2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x50>
 8010f6e:	0011      	movs	r1, r2
 8010f70:	0030      	movs	r0, r6
 8010f72:	f7ff fcd1 	bl	8010918 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8010f76:	e7d8      	b.n	8010f2a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 8010f78:	fffffa00 	.word	0xfffffa00
 8010f7c:	000002ff 	.word	0x000002ff
 8010f80:	fffff200 	.word	0xfffff200
 8010f84:	00000902 	.word	0x00000902

08010f88 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8010f88:	b570      	push	{r4, r5, r6, lr}
 8010f8a:	0002      	movs	r2, r0
 8010f8c:	0004      	movs	r4, r0
 8010f8e:	0005      	movs	r5, r0
 8010f90:	323a      	adds	r2, #58	; 0x3a
 8010f92:	3422      	adds	r4, #34	; 0x22
 8010f94:	88d6      	ldrh	r6, [r2, #6]
 8010f96:	8ae3      	ldrh	r3, [r4, #22]
 8010f98:	2e00      	cmp	r6, #0
 8010f9a:	d019      	beq.n	8010fd0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 8010f9c:	2b0a      	cmp	r3, #10
 8010f9e:	d02b      	beq.n	8010ff8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8010fa0:	8891      	ldrh	r1, [r2, #4]
 8010fa2:	3e01      	subs	r6, #1
 8010fa4:	0048      	lsls	r0, r1, #1
 8010fa6:	5a80      	ldrh	r0, [r0, r2]
 8010fa8:	80d6      	strh	r6, [r2, #6]
 8010faa:	1c4e      	adds	r6, r1, #1
 8010fac:	b2b6      	uxth	r6, r6
 8010fae:	2e01      	cmp	r6, #1
 8010fb0:	d80b      	bhi.n	8010fca <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 8010fb2:	8096      	strh	r6, [r2, #4]
 8010fb4:	1c59      	adds	r1, r3, #1
 8010fb6:	82e1      	strh	r1, [r4, #22]
 8010fb8:	8aa1      	ldrh	r1, [r4, #20]
 8010fba:	185b      	adds	r3, r3, r1
 8010fbc:	b29b      	uxth	r3, r3
 8010fbe:	2b09      	cmp	r3, #9
 8010fc0:	d900      	bls.n	8010fc4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x3c>
 8010fc2:	3b0a      	subs	r3, #10
 8010fc4:	005b      	lsls	r3, r3, #1
 8010fc6:	52e0      	strh	r0, [r4, r3]
 8010fc8:	e7e4      	b.n	8010f94 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 8010fca:	3901      	subs	r1, #1
 8010fcc:	8091      	strh	r1, [r2, #4]
 8010fce:	e7f1      	b.n	8010fb4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 8010fd0:	8ae3      	ldrh	r3, [r4, #22]
 8010fd2:	2b0a      	cmp	r3, #10
 8010fd4:	d010      	beq.n	8010ff8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8010fd6:	0028      	movs	r0, r5
 8010fd8:	f7ff fc56 	bl	8010888 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8010fdc:	8ae3      	ldrh	r3, [r4, #22]
 8010fde:	1c5a      	adds	r2, r3, #1
 8010fe0:	82e2      	strh	r2, [r4, #22]
 8010fe2:	8aa2      	ldrh	r2, [r4, #20]
 8010fe4:	189b      	adds	r3, r3, r2
 8010fe6:	b29b      	uxth	r3, r3
 8010fe8:	001a      	movs	r2, r3
 8010fea:	3a0a      	subs	r2, #10
 8010fec:	2b09      	cmp	r3, #9
 8010fee:	d800      	bhi.n	8010ff2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6a>
 8010ff0:	001a      	movs	r2, r3
 8010ff2:	0052      	lsls	r2, r2, #1
 8010ff4:	52a0      	strh	r0, [r4, r2]
 8010ff6:	e7eb      	b.n	8010fd0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 8010ff8:	bd70      	pop	{r4, r5, r6, pc}

08010ffa <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8010ffa:	0003      	movs	r3, r0
 8010ffc:	b570      	push	{r4, r5, r6, lr}
 8010ffe:	3322      	adds	r3, #34	; 0x22
 8011000:	8a9a      	ldrh	r2, [r3, #20]
 8011002:	0005      	movs	r5, r0
 8011004:	0051      	lsls	r1, r2, #1
 8011006:	5acc      	ldrh	r4, [r1, r3]
 8011008:	8ad9      	ldrh	r1, [r3, #22]
 801100a:	3901      	subs	r1, #1
 801100c:	82d9      	strh	r1, [r3, #22]
 801100e:	1c51      	adds	r1, r2, #1
 8011010:	b289      	uxth	r1, r1
 8011012:	2909      	cmp	r1, #9
 8011014:	d816      	bhi.n	8011044 <_ZN8touchgfx12TextProvider11getNextCharEv+0x4a>
 8011016:	8299      	strh	r1, [r3, #20]
 8011018:	0028      	movs	r0, r5
 801101a:	351a      	adds	r5, #26
 801101c:	f7ff ffb4 	bl	8010f88 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8011020:	88eb      	ldrh	r3, [r5, #6]
 8011022:	2b01      	cmp	r3, #1
 8011024:	d801      	bhi.n	801102a <_ZN8touchgfx12TextProvider11getNextCharEv+0x30>
 8011026:	3301      	adds	r3, #1
 8011028:	80eb      	strh	r3, [r5, #6]
 801102a:	88ab      	ldrh	r3, [r5, #4]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d101      	bne.n	8011034 <_ZN8touchgfx12TextProvider11getNextCharEv+0x3a>
 8011030:	3302      	adds	r3, #2
 8011032:	80ab      	strh	r3, [r5, #4]
 8011034:	88ab      	ldrh	r3, [r5, #4]
 8011036:	0020      	movs	r0, r4
 8011038:	3b01      	subs	r3, #1
 801103a:	b29b      	uxth	r3, r3
 801103c:	80ab      	strh	r3, [r5, #4]
 801103e:	005b      	lsls	r3, r3, #1
 8011040:	52ec      	strh	r4, [r5, r3]
 8011042:	bd70      	pop	{r4, r5, r6, pc}
 8011044:	3a09      	subs	r2, #9
 8011046:	829a      	strh	r2, [r3, #20]
 8011048:	e7e6      	b.n	8011018 <_ZN8touchgfx12TextProvider11getNextCharEv+0x1e>

0801104a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801104a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801104c:	0007      	movs	r7, r0
 801104e:	b087      	sub	sp, #28
 8011050:	9304      	str	r3, [sp, #16]
 8011052:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8011054:	3722      	adds	r7, #34	; 0x22
 8011056:	9302      	str	r3, [sp, #8]
 8011058:	428a      	cmp	r2, r1
 801105a:	d92d      	bls.n	80110b8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 801105c:	0005      	movs	r5, r0
 801105e:	8afb      	ldrh	r3, [r7, #22]
 8011060:	1a56      	subs	r6, r2, r1
 8011062:	9301      	str	r3, [sp, #4]
 8011064:	b2b3      	uxth	r3, r6
 8011066:	9300      	str	r3, [sp, #0]
 8011068:	353a      	adds	r5, #58	; 0x3a
 801106a:	88eb      	ldrh	r3, [r5, #6]
 801106c:	9e02      	ldr	r6, [sp, #8]
 801106e:	9303      	str	r3, [sp, #12]
 8011070:	9b01      	ldr	r3, [sp, #4]
 8011072:	88ac      	ldrh	r4, [r5, #4]
 8011074:	199b      	adds	r3, r3, r6
 8011076:	3b01      	subs	r3, #1
 8011078:	9e00      	ldr	r6, [sp, #0]
 801107a:	b29b      	uxth	r3, r3
 801107c:	1b9e      	subs	r6, r3, r6
 801107e:	b2b6      	uxth	r6, r6
 8011080:	46b4      	mov	ip, r6
 8011082:	9705      	str	r7, [sp, #20]
 8011084:	001f      	movs	r7, r3
 8011086:	2b09      	cmp	r3, #9
 8011088:	d900      	bls.n	801108c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801108a:	3f0a      	subs	r7, #10
 801108c:	9e05      	ldr	r6, [sp, #20]
 801108e:	007f      	lsls	r7, r7, #1
 8011090:	5bbe      	ldrh	r6, [r7, r6]
 8011092:	2c00      	cmp	r4, #0
 8011094:	d100      	bne.n	8011098 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x4e>
 8011096:	3402      	adds	r4, #2
 8011098:	3c01      	subs	r4, #1
 801109a:	b2a4      	uxth	r4, r4
 801109c:	3b01      	subs	r3, #1
 801109e:	0067      	lsls	r7, r4, #1
 80110a0:	b29b      	uxth	r3, r3
 80110a2:	537e      	strh	r6, [r7, r5]
 80110a4:	4563      	cmp	r3, ip
 80110a6:	d1ed      	bne.n	8011084 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x3a>
 80110a8:	9e00      	ldr	r6, [sp, #0]
 80110aa:	9b01      	ldr	r3, [sp, #4]
 80110ac:	1b9b      	subs	r3, r3, r6
 80110ae:	8703      	strh	r3, [r0, #56]	; 0x38
 80110b0:	9b03      	ldr	r3, [sp, #12]
 80110b2:	80ac      	strh	r4, [r5, #4]
 80110b4:	18f6      	adds	r6, r6, r3
 80110b6:	80ee      	strh	r6, [r5, #6]
 80110b8:	0003      	movs	r3, r0
 80110ba:	3322      	adds	r3, #34	; 0x22
 80110bc:	8adc      	ldrh	r4, [r3, #22]
 80110be:	1a64      	subs	r4, r4, r1
 80110c0:	82dc      	strh	r4, [r3, #22]
 80110c2:	9c02      	ldr	r4, [sp, #8]
 80110c4:	1909      	adds	r1, r1, r4
 80110c6:	b289      	uxth	r1, r1
 80110c8:	2909      	cmp	r1, #9
 80110ca:	d816      	bhi.n	80110fa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb0>
 80110cc:	250a      	movs	r5, #10
 80110ce:	8299      	strh	r1, [r3, #20]
 80110d0:	2a00      	cmp	r2, #0
 80110d2:	d014      	beq.n	80110fe <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb4>
 80110d4:	3a01      	subs	r2, #1
 80110d6:	b292      	uxth	r2, r2
 80110d8:	9c04      	ldr	r4, [sp, #16]
 80110da:	0051      	lsls	r1, r2, #1
 80110dc:	5b0c      	ldrh	r4, [r1, r4]
 80110de:	8ad9      	ldrh	r1, [r3, #22]
 80110e0:	3101      	adds	r1, #1
 80110e2:	82d9      	strh	r1, [r3, #22]
 80110e4:	8a99      	ldrh	r1, [r3, #20]
 80110e6:	2900      	cmp	r1, #0
 80110e8:	d100      	bne.n	80110ec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa2>
 80110ea:	829d      	strh	r5, [r3, #20]
 80110ec:	8a99      	ldrh	r1, [r3, #20]
 80110ee:	3901      	subs	r1, #1
 80110f0:	b289      	uxth	r1, r1
 80110f2:	8299      	strh	r1, [r3, #20]
 80110f4:	0049      	lsls	r1, r1, #1
 80110f6:	525c      	strh	r4, [r3, r1]
 80110f8:	e7ea      	b.n	80110d0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x86>
 80110fa:	390a      	subs	r1, #10
 80110fc:	e7e6      	b.n	80110cc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 80110fe:	f7ff ff43 	bl	8010f88 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8011102:	b007      	add	sp, #28
 8011104:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011106 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8011106:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011108:	0007      	movs	r7, r0
 801110a:	2500      	movs	r5, #0
 801110c:	ac05      	add	r4, sp, #20
 801110e:	8826      	ldrh	r6, [r4, #0]
 8011110:	371a      	adds	r7, #26
 8011112:	4295      	cmp	r5, r2
 8011114:	d011      	beq.n	801113a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8011116:	880c      	ldrh	r4, [r1, #0]
 8011118:	46a4      	mov	ip, r4
 801111a:	88bc      	ldrh	r4, [r7, #4]
 801111c:	1914      	adds	r4, r2, r4
 801111e:	3c01      	subs	r4, #1
 8011120:	1b64      	subs	r4, r4, r5
 8011122:	b2a4      	uxth	r4, r4
 8011124:	2c01      	cmp	r4, #1
 8011126:	d900      	bls.n	801112a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 8011128:	3c02      	subs	r4, #2
 801112a:	0064      	lsls	r4, r4, #1
 801112c:	5b3c      	ldrh	r4, [r7, r4]
 801112e:	3102      	adds	r1, #2
 8011130:	4564      	cmp	r4, ip
 8011132:	d115      	bne.n	8011160 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8011134:	3501      	adds	r5, #1
 8011136:	b2ad      	uxth	r5, r5
 8011138:	e7eb      	b.n	8011112 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xc>
 801113a:	2400      	movs	r4, #0
 801113c:	199b      	adds	r3, r3, r6
 801113e:	3022      	adds	r0, #34	; 0x22
 8011140:	b2a2      	uxth	r2, r4
 8011142:	429a      	cmp	r2, r3
 8011144:	da0e      	bge.n	8011164 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5e>
 8011146:	8a86      	ldrh	r6, [r0, #20]
 8011148:	0065      	lsls	r5, r4, #1
 801114a:	1992      	adds	r2, r2, r6
 801114c:	b292      	uxth	r2, r2
 801114e:	5b4d      	ldrh	r5, [r1, r5]
 8011150:	2a09      	cmp	r2, #9
 8011152:	d900      	bls.n	8011156 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 8011154:	3a0a      	subs	r2, #10
 8011156:	0052      	lsls	r2, r2, #1
 8011158:	5a82      	ldrh	r2, [r0, r2]
 801115a:	3401      	adds	r4, #1
 801115c:	42aa      	cmp	r2, r5
 801115e:	d0ef      	beq.n	8011140 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3a>
 8011160:	2000      	movs	r0, #0
 8011162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011164:	2001      	movs	r0, #1
 8011166:	e7fc      	b.n	8011162 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5c>

08011168 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8011168:	b5f0      	push	{r4, r5, r6, r7, lr}
 801116a:	b087      	sub	sp, #28
 801116c:	9004      	str	r0, [sp, #16]
 801116e:	9205      	str	r2, [sp, #20]
 8011170:	880a      	ldrh	r2, [r1, #0]
 8011172:	1c8f      	adds	r7, r1, #2
 8011174:	0b14      	lsrs	r4, r2, #12
 8011176:	0063      	lsls	r3, r4, #1
 8011178:	5bdb      	ldrh	r3, [r3, r7]
 801117a:	9905      	ldr	r1, [sp, #20]
 801117c:	428b      	cmp	r3, r1
 801117e:	d127      	bne.n	80111d0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x68>
 8011180:	230f      	movs	r3, #15
 8011182:	210f      	movs	r1, #15
 8011184:	1215      	asrs	r5, r2, #8
 8011186:	401d      	ands	r5, r3
 8011188:	1113      	asrs	r3, r2, #4
 801118a:	4019      	ands	r1, r3
 801118c:	230f      	movs	r3, #15
 801118e:	4013      	ands	r3, r2
 8011190:	9102      	str	r1, [sp, #8]
 8011192:	9303      	str	r3, [sp, #12]
 8011194:	9100      	str	r1, [sp, #0]
 8011196:	002b      	movs	r3, r5
 8011198:	0022      	movs	r2, r4
 801119a:	0039      	movs	r1, r7
 801119c:	9804      	ldr	r0, [sp, #16]
 801119e:	f7ff ffb2 	bl	8011106 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80111a2:	1e06      	subs	r6, r0, #0
 80111a4:	d00c      	beq.n	80111c0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x58>
 80111a6:	9a02      	ldr	r2, [sp, #8]
 80111a8:	1963      	adds	r3, r4, r5
 80111aa:	189b      	adds	r3, r3, r2
 80111ac:	005b      	lsls	r3, r3, #1
 80111ae:	18fb      	adds	r3, r7, r3
 80111b0:	9a03      	ldr	r2, [sp, #12]
 80111b2:	0029      	movs	r1, r5
 80111b4:	9804      	ldr	r0, [sp, #16]
 80111b6:	f7ff ff48 	bl	801104a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80111ba:	0030      	movs	r0, r6
 80111bc:	b007      	add	sp, #28
 80111be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111c0:	9b03      	ldr	r3, [sp, #12]
 80111c2:	1919      	adds	r1, r3, r4
 80111c4:	9b02      	ldr	r3, [sp, #8]
 80111c6:	1949      	adds	r1, r1, r5
 80111c8:	18c9      	adds	r1, r1, r3
 80111ca:	0049      	lsls	r1, r1, #1
 80111cc:	1879      	adds	r1, r7, r1
 80111ce:	e7cf      	b.n	8011170 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80111d0:	2600      	movs	r6, #0
 80111d2:	e7f2      	b.n	80111ba <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x52>

080111d4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80111d4:	b570      	push	{r4, r5, r6, lr}
 80111d6:	8814      	ldrh	r4, [r2, #0]
 80111d8:	2000      	movs	r0, #0
 80111da:	429c      	cmp	r4, r3
 80111dc:	d815      	bhi.n	801120a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>
 80111de:	1e4c      	subs	r4, r1, #1
 80111e0:	00a4      	lsls	r4, r4, #2
 80111e2:	5aa4      	ldrh	r4, [r4, r2]
 80111e4:	429c      	cmp	r4, r3
 80111e6:	d310      	bcc.n	801120a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>
 80111e8:	4288      	cmp	r0, r1
 80111ea:	d20f      	bcs.n	801120c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80111ec:	1844      	adds	r4, r0, r1
 80111ee:	1064      	asrs	r4, r4, #1
 80111f0:	00a5      	lsls	r5, r4, #2
 80111f2:	5b56      	ldrh	r6, [r2, r5]
 80111f4:	42b3      	cmp	r3, r6
 80111f6:	d902      	bls.n	80111fe <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2a>
 80111f8:	3401      	adds	r4, #1
 80111fa:	b2a0      	uxth	r0, r4
 80111fc:	e7f4      	b.n	80111e8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80111fe:	42b3      	cmp	r3, r6
 8011200:	d201      	bcs.n	8011206 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8011202:	b2a1      	uxth	r1, r4
 8011204:	e7f0      	b.n	80111e8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8011206:	1952      	adds	r2, r2, r5
 8011208:	8850      	ldrh	r0, [r2, #2]
 801120a:	bd70      	pop	{r4, r5, r6, pc}
 801120c:	2000      	movs	r0, #0
 801120e:	e7fc      	b.n	801120a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08011210 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8011210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011212:	0004      	movs	r4, r0
 8011214:	260b      	movs	r6, #11
 8011216:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8011218:	886b      	ldrh	r3, [r5, #2]
 801121a:	085b      	lsrs	r3, r3, #1
 801121c:	9301      	str	r3, [sp, #4]
 801121e:	3e01      	subs	r6, #1
 8011220:	2e00      	cmp	r6, #0
 8011222:	d014      	beq.n	801124e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 8011224:	0022      	movs	r2, r4
 8011226:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8011228:	3222      	adds	r2, #34	; 0x22
 801122a:	005b      	lsls	r3, r3, #1
 801122c:	5a9f      	ldrh	r7, [r3, r2]
 801122e:	9901      	ldr	r1, [sp, #4]
 8011230:	003b      	movs	r3, r7
 8011232:	002a      	movs	r2, r5
 8011234:	0020      	movs	r0, r4
 8011236:	f7ff ffcd 	bl	80111d4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801123a:	2800      	cmp	r0, #0
 801123c:	d007      	beq.n	801124e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801123e:	0040      	lsls	r0, r0, #1
 8011240:	1829      	adds	r1, r5, r0
 8011242:	003a      	movs	r2, r7
 8011244:	0020      	movs	r0, r4
 8011246:	f7ff ff8f 	bl	8011168 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801124a:	2800      	cmp	r0, #0
 801124c:	d1e7      	bne.n	801121e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801124e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08011250 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8011250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011252:	694b      	ldr	r3, [r1, #20]
 8011254:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8011256:	000e      	movs	r6, r1
 8011258:	0007      	movs	r7, r0
 801125a:	1b18      	subs	r0, r3, r4
 801125c:	2300      	movs	r3, #0
 801125e:	b08d      	sub	sp, #52	; 0x34
 8011260:	6849      	ldr	r1, [r1, #4]
 8011262:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8011264:	4298      	cmp	r0, r3
 8011266:	d008      	beq.n	801127a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x2a>
 8011268:	1a89      	subs	r1, r1, r2
 801126a:	4299      	cmp	r1, r3
 801126c:	d005      	beq.n	801127a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x2a>
 801126e:	4341      	muls	r1, r0
 8011270:	200f      	movs	r0, #15
 8011272:	17cb      	asrs	r3, r1, #31
 8011274:	4003      	ands	r3, r0
 8011276:	185b      	adds	r3, r3, r1
 8011278:	111b      	asrs	r3, r3, #4
 801127a:	2000      	movs	r0, #0
 801127c:	6831      	ldr	r1, [r6, #0]
 801127e:	1b0c      	subs	r4, r1, r4
 8011280:	69b1      	ldr	r1, [r6, #24]
 8011282:	4284      	cmp	r4, r0
 8011284:	d008      	beq.n	8011298 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x48>
 8011286:	1a8a      	subs	r2, r1, r2
 8011288:	4282      	cmp	r2, r0
 801128a:	d005      	beq.n	8011298 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x48>
 801128c:	210f      	movs	r1, #15
 801128e:	4362      	muls	r2, r4
 8011290:	17d0      	asrs	r0, r2, #31
 8011292:	4008      	ands	r0, r1
 8011294:	1880      	adds	r0, r0, r2
 8011296:	1100      	asrs	r0, r0, #4
 8011298:	1a18      	subs	r0, r3, r0
 801129a:	f7f0 f865 	bl	8001368 <__aeabi_i2f>
 801129e:	21f6      	movs	r1, #246	; 0xf6
 80112a0:	0589      	lsls	r1, r1, #22
 80112a2:	f7ef fd53 	bl	8000d4c <__aeabi_fmul>
 80112a6:	1c01      	adds	r1, r0, #0
 80112a8:	20fe      	movs	r0, #254	; 0xfe
 80112aa:	0580      	lsls	r0, r0, #22
 80112ac:	f7ef fb84 	bl	80009b8 <__aeabi_fdiv>
 80112b0:	2280      	movs	r2, #128	; 0x80
 80112b2:	0612      	lsls	r2, r2, #24
 80112b4:	4694      	mov	ip, r2
 80112b6:	9002      	str	r0, [sp, #8]
 80112b8:	9b02      	ldr	r3, [sp, #8]
 80112ba:	0034      	movs	r4, r6
 80112bc:	4463      	add	r3, ip
 80112be:	9307      	str	r3, [sp, #28]
 80112c0:	0033      	movs	r3, r6
 80112c2:	003d      	movs	r5, r7
 80112c4:	3344      	adds	r3, #68	; 0x44
 80112c6:	3408      	adds	r4, #8
 80112c8:	9303      	str	r3, [sp, #12]
 80112ca:	20fe      	movs	r0, #254	; 0xfe
 80112cc:	6821      	ldr	r1, [r4, #0]
 80112ce:	0580      	lsls	r0, r0, #22
 80112d0:	f7ef fb72 	bl	80009b8 <__aeabi_fdiv>
 80112d4:	6028      	str	r0, [r5, #0]
 80112d6:	1c01      	adds	r1, r0, #0
 80112d8:	9001      	str	r0, [sp, #4]
 80112da:	6860      	ldr	r0, [r4, #4]
 80112dc:	f7ef fd36 	bl	8000d4c <__aeabi_fmul>
 80112e0:	60e8      	str	r0, [r5, #12]
 80112e2:	68a0      	ldr	r0, [r4, #8]
 80112e4:	9901      	ldr	r1, [sp, #4]
 80112e6:	f7ef fd31 	bl	8000d4c <__aeabi_fmul>
 80112ea:	9b03      	ldr	r3, [sp, #12]
 80112ec:	3414      	adds	r4, #20
 80112ee:	61a8      	str	r0, [r5, #24]
 80112f0:	3504      	adds	r5, #4
 80112f2:	42a3      	cmp	r3, r4
 80112f4:	d1e9      	bne.n	80112ca <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x7a>
 80112f6:	68bb      	ldr	r3, [r7, #8]
 80112f8:	6878      	ldr	r0, [r7, #4]
 80112fa:	1c19      	adds	r1, r3, #0
 80112fc:	9303      	str	r3, [sp, #12]
 80112fe:	f7ef fe73 	bl	8000fe8 <__aeabi_fsub>
 8011302:	683b      	ldr	r3, [r7, #0]
 8011304:	9903      	ldr	r1, [sp, #12]
 8011306:	1c04      	adds	r4, r0, #0
 8011308:	1c18      	adds	r0, r3, #0
 801130a:	9301      	str	r3, [sp, #4]
 801130c:	f7ef fe6c 	bl	8000fe8 <__aeabi_fsub>
 8011310:	6af5      	ldr	r5, [r6, #44]	; 0x2c
 8011312:	6873      	ldr	r3, [r6, #4]
 8011314:	9004      	str	r0, [sp, #16]
 8011316:	1b58      	subs	r0, r3, r5
 8011318:	f7f0 f826 	bl	8001368 <__aeabi_i2f>
 801131c:	21f6      	movs	r1, #246	; 0xf6
 801131e:	0589      	lsls	r1, r1, #22
 8011320:	f7ef fd14 	bl	8000d4c <__aeabi_fmul>
 8011324:	1c21      	adds	r1, r4, #0
 8011326:	f7ef fd11 	bl	8000d4c <__aeabi_fmul>
 801132a:	69b3      	ldr	r3, [r6, #24]
 801132c:	9003      	str	r0, [sp, #12]
 801132e:	1b58      	subs	r0, r3, r5
 8011330:	f7f0 f81a 	bl	8001368 <__aeabi_i2f>
 8011334:	21f6      	movs	r1, #246	; 0xf6
 8011336:	0589      	lsls	r1, r1, #22
 8011338:	f7ef fd08 	bl	8000d4c <__aeabi_fmul>
 801133c:	9904      	ldr	r1, [sp, #16]
 801133e:	f7ef fd05 	bl	8000d4c <__aeabi_fmul>
 8011342:	1c01      	adds	r1, r0, #0
 8011344:	9803      	ldr	r0, [sp, #12]
 8011346:	f7ef fe4f 	bl	8000fe8 <__aeabi_fsub>
 801134a:	9902      	ldr	r1, [sp, #8]
 801134c:	f7ef fcfe 	bl	8000d4c <__aeabi_fmul>
 8011350:	6278      	str	r0, [r7, #36]	; 0x24
 8011352:	6833      	ldr	r3, [r6, #0]
 8011354:	6ab5      	ldr	r5, [r6, #40]	; 0x28
 8011356:	9003      	str	r0, [sp, #12]
 8011358:	1b58      	subs	r0, r3, r5
 801135a:	f7f0 f805 	bl	8001368 <__aeabi_i2f>
 801135e:	21f6      	movs	r1, #246	; 0xf6
 8011360:	0589      	lsls	r1, r1, #22
 8011362:	f7ef fcf3 	bl	8000d4c <__aeabi_fmul>
 8011366:	1c21      	adds	r1, r4, #0
 8011368:	f7ef fcf0 	bl	8000d4c <__aeabi_fmul>
 801136c:	6973      	ldr	r3, [r6, #20]
 801136e:	1c04      	adds	r4, r0, #0
 8011370:	1b58      	subs	r0, r3, r5
 8011372:	f7ef fff9 	bl	8001368 <__aeabi_i2f>
 8011376:	21f6      	movs	r1, #246	; 0xf6
 8011378:	0589      	lsls	r1, r1, #22
 801137a:	f7ef fce7 	bl	8000d4c <__aeabi_fmul>
 801137e:	9904      	ldr	r1, [sp, #16]
 8011380:	f7ef fce4 	bl	8000d4c <__aeabi_fmul>
 8011384:	1c01      	adds	r1, r0, #0
 8011386:	1c20      	adds	r0, r4, #0
 8011388:	f7ef fe2e 	bl	8000fe8 <__aeabi_fsub>
 801138c:	9907      	ldr	r1, [sp, #28]
 801138e:	f7ef fcdd 	bl	8000d4c <__aeabi_fmul>
 8011392:	697d      	ldr	r5, [r7, #20]
 8011394:	9004      	str	r0, [sp, #16]
 8011396:	1c29      	adds	r1, r5, #0
 8011398:	62b8      	str	r0, [r7, #40]	; 0x28
 801139a:	6938      	ldr	r0, [r7, #16]
 801139c:	f7ef fe24 	bl	8000fe8 <__aeabi_fsub>
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	1c29      	adds	r1, r5, #0
 80113a4:	9006      	str	r0, [sp, #24]
 80113a6:	1c18      	adds	r0, r3, #0
 80113a8:	9305      	str	r3, [sp, #20]
 80113aa:	f7ef fe1d 	bl	8000fe8 <__aeabi_fsub>
 80113ae:	6af4      	ldr	r4, [r6, #44]	; 0x2c
 80113b0:	6873      	ldr	r3, [r6, #4]
 80113b2:	9008      	str	r0, [sp, #32]
 80113b4:	1b18      	subs	r0, r3, r4
 80113b6:	f7ef ffd7 	bl	8001368 <__aeabi_i2f>
 80113ba:	21f6      	movs	r1, #246	; 0xf6
 80113bc:	0589      	lsls	r1, r1, #22
 80113be:	f7ef fcc5 	bl	8000d4c <__aeabi_fmul>
 80113c2:	9906      	ldr	r1, [sp, #24]
 80113c4:	f7ef fcc2 	bl	8000d4c <__aeabi_fmul>
 80113c8:	69b3      	ldr	r3, [r6, #24]
 80113ca:	1c05      	adds	r5, r0, #0
 80113cc:	1b18      	subs	r0, r3, r4
 80113ce:	f7ef ffcb 	bl	8001368 <__aeabi_i2f>
 80113d2:	21f6      	movs	r1, #246	; 0xf6
 80113d4:	0589      	lsls	r1, r1, #22
 80113d6:	f7ef fcb9 	bl	8000d4c <__aeabi_fmul>
 80113da:	9908      	ldr	r1, [sp, #32]
 80113dc:	f7ef fcb6 	bl	8000d4c <__aeabi_fmul>
 80113e0:	1c01      	adds	r1, r0, #0
 80113e2:	1c28      	adds	r0, r5, #0
 80113e4:	f7ef fe00 	bl	8000fe8 <__aeabi_fsub>
 80113e8:	9902      	ldr	r1, [sp, #8]
 80113ea:	f7ef fcaf 	bl	8000d4c <__aeabi_fmul>
 80113ee:	62f8      	str	r0, [r7, #44]	; 0x2c
 80113f0:	6833      	ldr	r3, [r6, #0]
 80113f2:	6ab4      	ldr	r4, [r6, #40]	; 0x28
 80113f4:	9009      	str	r0, [sp, #36]	; 0x24
 80113f6:	1b18      	subs	r0, r3, r4
 80113f8:	f7ef ffb6 	bl	8001368 <__aeabi_i2f>
 80113fc:	21f6      	movs	r1, #246	; 0xf6
 80113fe:	0589      	lsls	r1, r1, #22
 8011400:	f7ef fca4 	bl	8000d4c <__aeabi_fmul>
 8011404:	9906      	ldr	r1, [sp, #24]
 8011406:	f7ef fca1 	bl	8000d4c <__aeabi_fmul>
 801140a:	6973      	ldr	r3, [r6, #20]
 801140c:	1c05      	adds	r5, r0, #0
 801140e:	1b18      	subs	r0, r3, r4
 8011410:	f7ef ffaa 	bl	8001368 <__aeabi_i2f>
 8011414:	21f6      	movs	r1, #246	; 0xf6
 8011416:	0589      	lsls	r1, r1, #22
 8011418:	f7ef fc98 	bl	8000d4c <__aeabi_fmul>
 801141c:	9908      	ldr	r1, [sp, #32]
 801141e:	f7ef fc95 	bl	8000d4c <__aeabi_fmul>
 8011422:	1c01      	adds	r1, r0, #0
 8011424:	1c28      	adds	r0, r5, #0
 8011426:	f7ef fddf 	bl	8000fe8 <__aeabi_fsub>
 801142a:	9907      	ldr	r1, [sp, #28]
 801142c:	f7ef fc8e 	bl	8000d4c <__aeabi_fmul>
 8011430:	6a3d      	ldr	r5, [r7, #32]
 8011432:	9008      	str	r0, [sp, #32]
 8011434:	1c29      	adds	r1, r5, #0
 8011436:	6338      	str	r0, [r7, #48]	; 0x30
 8011438:	69f8      	ldr	r0, [r7, #28]
 801143a:	f7ef fdd5 	bl	8000fe8 <__aeabi_fsub>
 801143e:	69bb      	ldr	r3, [r7, #24]
 8011440:	1c29      	adds	r1, r5, #0
 8011442:	900a      	str	r0, [sp, #40]	; 0x28
 8011444:	1c18      	adds	r0, r3, #0
 8011446:	9306      	str	r3, [sp, #24]
 8011448:	f7ef fdce 	bl	8000fe8 <__aeabi_fsub>
 801144c:	6af4      	ldr	r4, [r6, #44]	; 0x2c
 801144e:	6873      	ldr	r3, [r6, #4]
 8011450:	900b      	str	r0, [sp, #44]	; 0x2c
 8011452:	1b18      	subs	r0, r3, r4
 8011454:	f7ef ff88 	bl	8001368 <__aeabi_i2f>
 8011458:	21f6      	movs	r1, #246	; 0xf6
 801145a:	0589      	lsls	r1, r1, #22
 801145c:	f7ef fc76 	bl	8000d4c <__aeabi_fmul>
 8011460:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011462:	f7ef fc73 	bl	8000d4c <__aeabi_fmul>
 8011466:	69b3      	ldr	r3, [r6, #24]
 8011468:	1c05      	adds	r5, r0, #0
 801146a:	1b18      	subs	r0, r3, r4
 801146c:	f7ef ff7c 	bl	8001368 <__aeabi_i2f>
 8011470:	21f6      	movs	r1, #246	; 0xf6
 8011472:	0589      	lsls	r1, r1, #22
 8011474:	f7ef fc6a 	bl	8000d4c <__aeabi_fmul>
 8011478:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801147a:	f7ef fc67 	bl	8000d4c <__aeabi_fmul>
 801147e:	1c01      	adds	r1, r0, #0
 8011480:	1c28      	adds	r0, r5, #0
 8011482:	f7ef fdb1 	bl	8000fe8 <__aeabi_fsub>
 8011486:	9902      	ldr	r1, [sp, #8]
 8011488:	f7ef fc60 	bl	8000d4c <__aeabi_fmul>
 801148c:	6378      	str	r0, [r7, #52]	; 0x34
 801148e:	6833      	ldr	r3, [r6, #0]
 8011490:	6ab4      	ldr	r4, [r6, #40]	; 0x28
 8011492:	9002      	str	r0, [sp, #8]
 8011494:	1b18      	subs	r0, r3, r4
 8011496:	f7ef ff67 	bl	8001368 <__aeabi_i2f>
 801149a:	21f6      	movs	r1, #246	; 0xf6
 801149c:	0589      	lsls	r1, r1, #22
 801149e:	f7ef fc55 	bl	8000d4c <__aeabi_fmul>
 80114a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80114a4:	f7ef fc52 	bl	8000d4c <__aeabi_fmul>
 80114a8:	1c05      	adds	r5, r0, #0
 80114aa:	6970      	ldr	r0, [r6, #20]
 80114ac:	1b00      	subs	r0, r0, r4
 80114ae:	f7ef ff5b 	bl	8001368 <__aeabi_i2f>
 80114b2:	21f6      	movs	r1, #246	; 0xf6
 80114b4:	0589      	lsls	r1, r1, #22
 80114b6:	f7ef fc49 	bl	8000d4c <__aeabi_fmul>
 80114ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80114bc:	f7ef fc46 	bl	8000d4c <__aeabi_fmul>
 80114c0:	1c01      	adds	r1, r0, #0
 80114c2:	1c28      	adds	r0, r5, #0
 80114c4:	f7ef fd90 	bl	8000fe8 <__aeabi_fsub>
 80114c8:	9907      	ldr	r1, [sp, #28]
 80114ca:	f7ef fc3f 	bl	8000d4c <__aeabi_fmul>
 80114ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80114d0:	63b8      	str	r0, [r7, #56]	; 0x38
 80114d2:	1c04      	adds	r4, r0, #0
 80114d4:	9801      	ldr	r0, [sp, #4]
 80114d6:	f7ef fc39 	bl	8000d4c <__aeabi_fmul>
 80114da:	9905      	ldr	r1, [sp, #20]
 80114dc:	1c05      	adds	r5, r0, #0
 80114de:	9803      	ldr	r0, [sp, #12]
 80114e0:	f7ef fc34 	bl	8000d4c <__aeabi_fmul>
 80114e4:	1c01      	adds	r1, r0, #0
 80114e6:	1c28      	adds	r0, r5, #0
 80114e8:	f7ef fd7e 	bl	8000fe8 <__aeabi_fsub>
 80114ec:	2100      	movs	r1, #0
 80114ee:	1c05      	adds	r5, r0, #0
 80114f0:	f7ee ffc2 	bl	8000478 <__aeabi_fcmpgt>
 80114f4:	2800      	cmp	r0, #0
 80114f6:	d01b      	beq.n	8011530 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x2e0>
 80114f8:	2380      	movs	r3, #128	; 0x80
 80114fa:	021b      	lsls	r3, r3, #8
 80114fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80114fe:	9902      	ldr	r1, [sp, #8]
 8011500:	9801      	ldr	r0, [sp, #4]
 8011502:	f7ef fc23 	bl	8000d4c <__aeabi_fmul>
 8011506:	9906      	ldr	r1, [sp, #24]
 8011508:	1c05      	adds	r5, r0, #0
 801150a:	9803      	ldr	r0, [sp, #12]
 801150c:	f7ef fc1e 	bl	8000d4c <__aeabi_fmul>
 8011510:	1c01      	adds	r1, r0, #0
 8011512:	1c28      	adds	r0, r5, #0
 8011514:	f7ef fd68 	bl	8000fe8 <__aeabi_fsub>
 8011518:	2100      	movs	r1, #0
 801151a:	1c05      	adds	r5, r0, #0
 801151c:	f7ee ffac 	bl	8000478 <__aeabi_fcmpgt>
 8011520:	2800      	cmp	r0, #0
 8011522:	d020      	beq.n	8011566 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x316>
 8011524:	2380      	movs	r3, #128	; 0x80
 8011526:	021b      	lsls	r3, r3, #8
 8011528:	0038      	movs	r0, r7
 801152a:	643b      	str	r3, [r7, #64]	; 0x40
 801152c:	b00d      	add	sp, #52	; 0x34
 801152e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011530:	2100      	movs	r1, #0
 8011532:	1c28      	adds	r0, r5, #0
 8011534:	f7ee ff8c 	bl	8000450 <__aeabi_fcmplt>
 8011538:	2800      	cmp	r0, #0
 801153a:	d001      	beq.n	8011540 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x2f0>
 801153c:	4b17      	ldr	r3, [pc, #92]	; (801159c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x34c>)
 801153e:	e7dd      	b.n	80114fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x2ac>
 8011540:	9908      	ldr	r1, [sp, #32]
 8011542:	9801      	ldr	r0, [sp, #4]
 8011544:	f7ef fc02 	bl	8000d4c <__aeabi_fmul>
 8011548:	9905      	ldr	r1, [sp, #20]
 801154a:	1c05      	adds	r5, r0, #0
 801154c:	9804      	ldr	r0, [sp, #16]
 801154e:	f7ef fbfd 	bl	8000d4c <__aeabi_fmul>
 8011552:	1c01      	adds	r1, r0, #0
 8011554:	1c28      	adds	r0, r5, #0
 8011556:	f7ef fd47 	bl	8000fe8 <__aeabi_fsub>
 801155a:	2100      	movs	r1, #0
 801155c:	f7ee ff96 	bl	800048c <__aeabi_fcmpge>
 8011560:	2800      	cmp	r0, #0
 8011562:	d1c9      	bne.n	80114f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x2a8>
 8011564:	e7ea      	b.n	801153c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x2ec>
 8011566:	2100      	movs	r1, #0
 8011568:	1c28      	adds	r0, r5, #0
 801156a:	f7ee ff71 	bl	8000450 <__aeabi_fcmplt>
 801156e:	2800      	cmp	r0, #0
 8011570:	d001      	beq.n	8011576 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x326>
 8011572:	4b0a      	ldr	r3, [pc, #40]	; (801159c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x34c>)
 8011574:	e7d8      	b.n	8011528 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x2d8>
 8011576:	1c21      	adds	r1, r4, #0
 8011578:	9801      	ldr	r0, [sp, #4]
 801157a:	f7ef fbe7 	bl	8000d4c <__aeabi_fmul>
 801157e:	9906      	ldr	r1, [sp, #24]
 8011580:	1c04      	adds	r4, r0, #0
 8011582:	9804      	ldr	r0, [sp, #16]
 8011584:	f7ef fbe2 	bl	8000d4c <__aeabi_fmul>
 8011588:	1c01      	adds	r1, r0, #0
 801158a:	1c20      	adds	r0, r4, #0
 801158c:	f7ef fd2c 	bl	8000fe8 <__aeabi_fsub>
 8011590:	2100      	movs	r1, #0
 8011592:	f7ee ff7b 	bl	800048c <__aeabi_fcmpge>
 8011596:	2800      	cmp	r0, #0
 8011598:	d1c4      	bne.n	8011524 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x2d4>
 801159a:	e7ea      	b.n	8011572 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x322>
 801159c:	00007fff 	.word	0x00007fff

080115a0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 80115a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115a2:	2514      	movs	r5, #20
 80115a4:	000f      	movs	r7, r1
 80115a6:	210f      	movs	r1, #15
 80115a8:	435d      	muls	r5, r3
 80115aa:	b085      	sub	sp, #20
 80115ac:	1955      	adds	r5, r2, r5
 80115ae:	9303      	str	r3, [sp, #12]
 80115b0:	686b      	ldr	r3, [r5, #4]
 80115b2:	0004      	movs	r4, r0
 80115b4:	469c      	mov	ip, r3
 80115b6:	185b      	adds	r3, r3, r1
 80115b8:	d500      	bpl.n	80115bc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 80115ba:	e0a8      	b.n	801170e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x16e>
 80115bc:	111b      	asrs	r3, r3, #4
 80115be:	2114      	movs	r1, #20
 80115c0:	9300      	str	r3, [sp, #0]
 80115c2:	9b00      	ldr	r3, [sp, #0]
 80115c4:	6163      	str	r3, [r4, #20]
 80115c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115c8:	4359      	muls	r1, r3
 80115ca:	230f      	movs	r3, #15
 80115cc:	1852      	adds	r2, r2, r1
 80115ce:	6850      	ldr	r0, [r2, #4]
 80115d0:	18c1      	adds	r1, r0, r3
 80115d2:	d500      	bpl.n	80115d6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x36>
 80115d4:	e0a9      	b.n	801172a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18a>
 80115d6:	1109      	asrs	r1, r1, #4
 80115d8:	9b00      	ldr	r3, [sp, #0]
 80115da:	1ac9      	subs	r1, r1, r3
 80115dc:	61a1      	str	r1, [r4, #24]
 80115de:	d100      	bne.n	80115e2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x42>
 80115e0:	e092      	b.n	8011708 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x168>
 80115e2:	6853      	ldr	r3, [r2, #4]
 80115e4:	6869      	ldr	r1, [r5, #4]
 80115e6:	6812      	ldr	r2, [r2, #0]
 80115e8:	1a58      	subs	r0, r3, r1
 80115ea:	682b      	ldr	r3, [r5, #0]
 80115ec:	9900      	ldr	r1, [sp, #0]
 80115ee:	1ad2      	subs	r2, r2, r3
 80115f0:	9302      	str	r3, [sp, #8]
 80115f2:	0113      	lsls	r3, r2, #4
 80115f4:	4359      	muls	r1, r3
 80115f6:	9301      	str	r3, [sp, #4]
 80115f8:	686b      	ldr	r3, [r5, #4]
 80115fa:	0106      	lsls	r6, r0, #4
 80115fc:	435a      	muls	r2, r3
 80115fe:	1a8b      	subs	r3, r1, r2
 8011600:	9a02      	ldr	r2, [sp, #8]
 8011602:	4350      	muls	r0, r2
 8011604:	1818      	adds	r0, r3, r0
 8011606:	3801      	subs	r0, #1
 8011608:	1980      	adds	r0, r0, r6
 801160a:	d500      	bpl.n	801160e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x6e>
 801160c:	e09b      	b.n	8011746 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1a6>
 801160e:	0031      	movs	r1, r6
 8011610:	f7ee ff06 	bl	8000420 <__aeabi_idivmod>
 8011614:	6020      	str	r0, [r4, #0]
 8011616:	6121      	str	r1, [r4, #16]
 8011618:	9b01      	ldr	r3, [sp, #4]
 801161a:	2b00      	cmp	r3, #0
 801161c:	da00      	bge.n	8011620 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801161e:	e0a0      	b.n	8011762 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c2>
 8011620:	0031      	movs	r1, r6
 8011622:	0018      	movs	r0, r3
 8011624:	f7ee fefc 	bl	8000420 <__aeabi_idivmod>
 8011628:	6060      	str	r0, [r4, #4]
 801162a:	60a1      	str	r1, [r4, #8]
 801162c:	6963      	ldr	r3, [r4, #20]
 801162e:	60e6      	str	r6, [r4, #12]
 8011630:	0118      	lsls	r0, r3, #4
 8011632:	686b      	ldr	r3, [r5, #4]
 8011634:	1ac0      	subs	r0, r0, r3
 8011636:	f7ef fe97 	bl	8001368 <__aeabi_i2f>
 801163a:	21f6      	movs	r1, #246	; 0xf6
 801163c:	0589      	lsls	r1, r1, #22
 801163e:	f7ef fb85 	bl	8000d4c <__aeabi_fmul>
 8011642:	6823      	ldr	r3, [r4, #0]
 8011644:	1c06      	adds	r6, r0, #0
 8011646:	0118      	lsls	r0, r3, #4
 8011648:	682b      	ldr	r3, [r5, #0]
 801164a:	1ac0      	subs	r0, r0, r3
 801164c:	f7ef fe8c 	bl	8001368 <__aeabi_i2f>
 8011650:	21f6      	movs	r1, #246	; 0xf6
 8011652:	0589      	lsls	r1, r1, #22
 8011654:	f7ef fb7a 	bl	8000d4c <__aeabi_fmul>
 8011658:	9b03      	ldr	r3, [sp, #12]
 801165a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801165c:	009d      	lsls	r5, r3, #2
 801165e:	197d      	adds	r5, r7, r5
 8011660:	9001      	str	r0, [sp, #4]
 8011662:	1c30      	adds	r0, r6, #0
 8011664:	f7ef fb72 	bl	8000d4c <__aeabi_fmul>
 8011668:	6829      	ldr	r1, [r5, #0]
 801166a:	f7ef f805 	bl	8000678 <__aeabi_fadd>
 801166e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011670:	9000      	str	r0, [sp, #0]
 8011672:	9801      	ldr	r0, [sp, #4]
 8011674:	f7ef fb6a 	bl	8000d4c <__aeabi_fmul>
 8011678:	1c01      	adds	r1, r0, #0
 801167a:	9800      	ldr	r0, [sp, #0]
 801167c:	f7ee fffc 	bl	8000678 <__aeabi_fadd>
 8011680:	61e0      	str	r0, [r4, #28]
 8011682:	6860      	ldr	r0, [r4, #4]
 8011684:	f7ef fe70 	bl	8001368 <__aeabi_i2f>
 8011688:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801168a:	9000      	str	r0, [sp, #0]
 801168c:	f7ef fb5e 	bl	8000d4c <__aeabi_fmul>
 8011690:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011692:	f7ee fff1 	bl	8000678 <__aeabi_fadd>
 8011696:	6220      	str	r0, [r4, #32]
 8011698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801169a:	1c30      	adds	r0, r6, #0
 801169c:	6263      	str	r3, [r4, #36]	; 0x24
 801169e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80116a0:	f7ef fb54 	bl	8000d4c <__aeabi_fmul>
 80116a4:	68e9      	ldr	r1, [r5, #12]
 80116a6:	f7ee ffe7 	bl	8000678 <__aeabi_fadd>
 80116aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80116ac:	9002      	str	r0, [sp, #8]
 80116ae:	9801      	ldr	r0, [sp, #4]
 80116b0:	f7ef fb4c 	bl	8000d4c <__aeabi_fmul>
 80116b4:	1c01      	adds	r1, r0, #0
 80116b6:	9802      	ldr	r0, [sp, #8]
 80116b8:	f7ee ffde 	bl	8000678 <__aeabi_fadd>
 80116bc:	62a0      	str	r0, [r4, #40]	; 0x28
 80116be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80116c0:	9800      	ldr	r0, [sp, #0]
 80116c2:	f7ef fb43 	bl	8000d4c <__aeabi_fmul>
 80116c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80116c8:	f7ee ffd6 	bl	8000678 <__aeabi_fadd>
 80116cc:	62e0      	str	r0, [r4, #44]	; 0x2c
 80116ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116d0:	1c30      	adds	r0, r6, #0
 80116d2:	6323      	str	r3, [r4, #48]	; 0x30
 80116d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80116d6:	f7ef fb39 	bl	8000d4c <__aeabi_fmul>
 80116da:	69a9      	ldr	r1, [r5, #24]
 80116dc:	f7ee ffcc 	bl	8000678 <__aeabi_fadd>
 80116e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80116e2:	1c05      	adds	r5, r0, #0
 80116e4:	9801      	ldr	r0, [sp, #4]
 80116e6:	f7ef fb31 	bl	8000d4c <__aeabi_fmul>
 80116ea:	1c01      	adds	r1, r0, #0
 80116ec:	1c28      	adds	r0, r5, #0
 80116ee:	f7ee ffc3 	bl	8000678 <__aeabi_fadd>
 80116f2:	6360      	str	r0, [r4, #52]	; 0x34
 80116f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80116f6:	9800      	ldr	r0, [sp, #0]
 80116f8:	f7ef fb28 	bl	8000d4c <__aeabi_fmul>
 80116fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80116fe:	f7ee ffbb 	bl	8000678 <__aeabi_fadd>
 8011702:	63a0      	str	r0, [r4, #56]	; 0x38
 8011704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011706:	63e3      	str	r3, [r4, #60]	; 0x3c
 8011708:	0020      	movs	r0, r4
 801170a:	b005      	add	sp, #20
 801170c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801170e:	210f      	movs	r1, #15
 8011710:	17d8      	asrs	r0, r3, #31
 8011712:	4008      	ands	r0, r1
 8011714:	260f      	movs	r6, #15
 8011716:	18c0      	adds	r0, r0, r3
 8011718:	4663      	mov	r3, ip
 801171a:	4276      	negs	r6, r6
 801171c:	1af6      	subs	r6, r6, r3
 801171e:	4031      	ands	r1, r6
 8011720:	1e4b      	subs	r3, r1, #1
 8011722:	4199      	sbcs	r1, r3
 8011724:	1100      	asrs	r0, r0, #4
 8011726:	1a43      	subs	r3, r0, r1
 8011728:	e749      	b.n	80115be <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1e>
 801172a:	260f      	movs	r6, #15
 801172c:	17cb      	asrs	r3, r1, #31
 801172e:	4033      	ands	r3, r6
 8011730:	469c      	mov	ip, r3
 8011732:	230f      	movs	r3, #15
 8011734:	425b      	negs	r3, r3
 8011736:	1a18      	subs	r0, r3, r0
 8011738:	4006      	ands	r6, r0
 801173a:	1e70      	subs	r0, r6, #1
 801173c:	4186      	sbcs	r6, r0
 801173e:	4461      	add	r1, ip
 8011740:	1109      	asrs	r1, r1, #4
 8011742:	1b89      	subs	r1, r1, r6
 8011744:	e748      	b.n	80115d8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8011746:	4240      	negs	r0, r0
 8011748:	0031      	movs	r1, r6
 801174a:	f7ee fe69 	bl	8000420 <__aeabi_idivmod>
 801174e:	4243      	negs	r3, r0
 8011750:	6023      	str	r3, [r4, #0]
 8011752:	6121      	str	r1, [r4, #16]
 8011754:	2900      	cmp	r1, #0
 8011756:	d100      	bne.n	801175a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1ba>
 8011758:	e75e      	b.n	8011618 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x78>
 801175a:	43c0      	mvns	r0, r0
 801175c:	1a71      	subs	r1, r6, r1
 801175e:	6020      	str	r0, [r4, #0]
 8011760:	e759      	b.n	8011616 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x76>
 8011762:	9b01      	ldr	r3, [sp, #4]
 8011764:	0031      	movs	r1, r6
 8011766:	4258      	negs	r0, r3
 8011768:	f7ee fe5a 	bl	8000420 <__aeabi_idivmod>
 801176c:	4243      	negs	r3, r0
 801176e:	6063      	str	r3, [r4, #4]
 8011770:	60a1      	str	r1, [r4, #8]
 8011772:	2900      	cmp	r1, #0
 8011774:	d100      	bne.n	8011778 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d8>
 8011776:	e759      	b.n	801162c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x8c>
 8011778:	43c0      	mvns	r0, r0
 801177a:	1a71      	subs	r1, r6, r1
 801177c:	6060      	str	r0, [r4, #4]
 801177e:	e754      	b.n	801162a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x8a>

08011780 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8011780:	4b01      	ldr	r3, [pc, #4]	; (8011788 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8011782:	6018      	str	r0, [r3, #0]
 8011784:	4770      	bx	lr
 8011786:	46c0      	nop			; (mov r8, r8)
 8011788:	20002728 	.word	0x20002728

0801178c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801178c:	4b07      	ldr	r3, [pc, #28]	; (80117ac <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801178e:	8819      	ldrh	r1, [r3, #0]
 8011790:	2300      	movs	r3, #0
 8011792:	4281      	cmp	r1, r0
 8011794:	d807      	bhi.n	80117a6 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1a>
 8011796:	4a06      	ldr	r2, [pc, #24]	; (80117b0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x24>)
 8011798:	8812      	ldrh	r2, [r2, #0]
 801179a:	1852      	adds	r2, r2, r1
 801179c:	2101      	movs	r1, #1
 801179e:	4290      	cmp	r0, r2
 80117a0:	db00      	blt.n	80117a4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80117a2:	1c19      	adds	r1, r3, #0
 80117a4:	b2cb      	uxtb	r3, r1
 80117a6:	0018      	movs	r0, r3
 80117a8:	4770      	bx	lr
 80117aa:	46c0      	nop			; (mov r8, r8)
 80117ac:	20002748 	.word	0x20002748
 80117b0:	2000274c 	.word	0x2000274c

080117b4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80117b4:	b510      	push	{r4, lr}
 80117b6:	0004      	movs	r4, r0
 80117b8:	f7ff ffe8 	bl	801178c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80117bc:	1e03      	subs	r3, r0, #0
 80117be:	d003      	beq.n	80117c8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>
 80117c0:	4b02      	ldr	r3, [pc, #8]	; (80117cc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x18>)
 80117c2:	00a4      	lsls	r4, r4, #2
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	58e3      	ldr	r3, [r4, r3]
 80117c8:	0018      	movs	r0, r3
 80117ca:	bd10      	pop	{r4, pc}
 80117cc:	2000272c 	.word	0x2000272c

080117d0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 80117d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117d2:	4c23      	ldr	r4, [pc, #140]	; (8011860 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>)
 80117d4:	6823      	ldr	r3, [r4, #0]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d041      	beq.n	801185e <_ZN8touchgfx6Bitmap10clearCacheEv+0x8e>
 80117da:	4d22      	ldr	r5, [pc, #136]	; (8011864 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 80117dc:	4822      	ldr	r0, [pc, #136]	; (8011868 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 80117de:	882a      	ldrh	r2, [r5, #0]
 80117e0:	4694      	mov	ip, r2
 80117e2:	4a22      	ldr	r2, [pc, #136]	; (801186c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 80117e4:	8811      	ldrh	r1, [r2, #0]
 80117e6:	4461      	add	r1, ip
 80117e8:	1c4a      	adds	r2, r1, #1
 80117ea:	008f      	lsls	r7, r1, #2
 80117ec:	4002      	ands	r2, r0
 80117ee:	4820      	ldr	r0, [pc, #128]	; (8011870 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 80117f0:	19de      	adds	r6, r3, r7
 80117f2:	0052      	lsls	r2, r2, #1
 80117f4:	18bf      	adds	r7, r7, r2
 80117f6:	6006      	str	r6, [r0, #0]
 80117f8:	4e1e      	ldr	r6, [pc, #120]	; (8011874 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 80117fa:	19da      	adds	r2, r3, r7
 80117fc:	4660      	mov	r0, ip
 80117fe:	6032      	str	r2, [r6, #0]
 8011800:	220e      	movs	r2, #14
 8011802:	4342      	muls	r2, r0
 8011804:	2003      	movs	r0, #3
 8011806:	3203      	adds	r2, #3
 8011808:	4382      	bics	r2, r0
 801180a:	19d2      	adds	r2, r2, r7
 801180c:	4f1a      	ldr	r7, [pc, #104]	; (8011878 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801180e:	189b      	adds	r3, r3, r2
 8011810:	603b      	str	r3, [r7, #0]
 8011812:	2300      	movs	r3, #0
 8011814:	469c      	mov	ip, r3
 8011816:	4f19      	ldr	r7, [pc, #100]	; (801187c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8011818:	803b      	strh	r3, [r7, #0]
 801181a:	4f19      	ldr	r7, [pc, #100]	; (8011880 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801181c:	683f      	ldr	r7, [r7, #0]
 801181e:	1aba      	subs	r2, r7, r2
 8011820:	4f18      	ldr	r7, [pc, #96]	; (8011884 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8011822:	603a      	str	r2, [r7, #0]
 8011824:	4a18      	ldr	r2, [pc, #96]	; (8011888 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8011826:	8013      	strh	r3, [r2, #0]
 8011828:	428b      	cmp	r3, r1
 801182a:	d10c      	bne.n	8011846 <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 801182c:	220e      	movs	r2, #14
 801182e:	2020      	movs	r0, #32
 8011830:	8829      	ldrh	r1, [r5, #0]
 8011832:	6833      	ldr	r3, [r6, #0]
 8011834:	434a      	muls	r2, r1
 8011836:	18d2      	adds	r2, r2, r3
 8011838:	4293      	cmp	r3, r2
 801183a:	d010      	beq.n	801185e <_ZN8touchgfx6Bitmap10clearCacheEv+0x8e>
 801183c:	7b19      	ldrb	r1, [r3, #12]
 801183e:	4381      	bics	r1, r0
 8011840:	7319      	strb	r1, [r3, #12]
 8011842:	330e      	adds	r3, #14
 8011844:	e7f8      	b.n	8011838 <_ZN8touchgfx6Bitmap10clearCacheEv+0x68>
 8011846:	4667      	mov	r7, ip
 8011848:	6820      	ldr	r0, [r4, #0]
 801184a:	009a      	lsls	r2, r3, #2
 801184c:	5017      	str	r7, [r2, r0]
 801184e:	2701      	movs	r7, #1
 8011850:	4807      	ldr	r0, [pc, #28]	; (8011870 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8011852:	005a      	lsls	r2, r3, #1
 8011854:	6800      	ldr	r0, [r0, #0]
 8011856:	427f      	negs	r7, r7
 8011858:	5217      	strh	r7, [r2, r0]
 801185a:	3301      	adds	r3, #1
 801185c:	e7e4      	b.n	8011828 <_ZN8touchgfx6Bitmap10clearCacheEv+0x58>
 801185e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011860:	2000272c 	.word	0x2000272c
 8011864:	2000274c 	.word	0x2000274c
 8011868:	0000fffe 	.word	0x0000fffe
 801186c:	20002748 	.word	0x20002748
 8011870:	20002740 	.word	0x20002740
 8011874:	20002730 	.word	0x20002730
 8011878:	20002738 	.word	0x20002738
 801187c:	2000274a 	.word	0x2000274a
 8011880:	20002734 	.word	0x20002734
 8011884:	20002744 	.word	0x20002744
 8011888:	2000273c 	.word	0x2000273c

0801188c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801188c:	b510      	push	{r4, lr}
 801188e:	4b07      	ldr	r3, [pc, #28]	; (80118ac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d109      	bne.n	80118aa <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1e>
 8011896:	2900      	cmp	r1, #0
 8011898:	d007      	beq.n	80118aa <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1e>
 801189a:	4b05      	ldr	r3, [pc, #20]	; (80118b0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801189c:	801a      	strh	r2, [r3, #0]
 801189e:	4b05      	ldr	r3, [pc, #20]	; (80118b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 80118a0:	6019      	str	r1, [r3, #0]
 80118a2:	4b05      	ldr	r3, [pc, #20]	; (80118b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x2c>)
 80118a4:	6018      	str	r0, [r3, #0]
 80118a6:	f7ff ff93 	bl	80117d0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 80118aa:	bd10      	pop	{r4, pc}
 80118ac:	20002738 	.word	0x20002738
 80118b0:	2000274c 	.word	0x2000274c
 80118b4:	20002734 	.word	0x20002734
 80118b8:	2000272c 	.word	0x2000272c

080118bc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80118bc:	b570      	push	{r4, r5, r6, lr}
 80118be:	0004      	movs	r4, r0
 80118c0:	0010      	movs	r0, r2
 80118c2:	4a06      	ldr	r2, [pc, #24]	; (80118dc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80118c4:	6815      	ldr	r5, [r2, #0]
 80118c6:	2d00      	cmp	r5, #0
 80118c8:	d106      	bne.n	80118d8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 80118ca:	6014      	str	r4, [r2, #0]
 80118cc:	4a04      	ldr	r2, [pc, #16]	; (80118e0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 80118ce:	8011      	strh	r1, [r2, #0]
 80118d0:	9a04      	ldr	r2, [sp, #16]
 80118d2:	0019      	movs	r1, r3
 80118d4:	f7ff ffda 	bl	801188c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80118d8:	bd70      	pop	{r4, r5, r6, pc}
 80118da:	46c0      	nop			; (mov r8, r8)
 80118dc:	20002750 	.word	0x20002750
 80118e0:	20002748 	.word	0x20002748

080118e4 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80118e4:	4a13      	ldr	r2, [pc, #76]	; (8011934 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 80118e6:	8803      	ldrh	r3, [r0, #0]
 80118e8:	8812      	ldrh	r2, [r2, #0]
 80118ea:	4293      	cmp	r3, r2
 80118ec:	d207      	bcs.n	80118fe <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 80118ee:	2114      	movs	r1, #20
 80118f0:	4a11      	ldr	r2, [pc, #68]	; (8011938 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 80118f2:	434b      	muls	r3, r1
 80118f4:	6812      	ldr	r2, [r2, #0]
 80118f6:	18d3      	adds	r3, r2, r3
 80118f8:	2008      	movs	r0, #8
 80118fa:	5e18      	ldrsh	r0, [r3, r0]
 80118fc:	4770      	bx	lr
 80118fe:	490f      	ldr	r1, [pc, #60]	; (801193c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8011900:	8809      	ldrh	r1, [r1, #0]
 8011902:	1889      	adds	r1, r1, r2
 8011904:	428b      	cmp	r3, r1
 8011906:	da06      	bge.n	8011916 <_ZNK8touchgfx6Bitmap8getWidthEv+0x32>
 8011908:	1a9b      	subs	r3, r3, r2
 801190a:	4a0d      	ldr	r2, [pc, #52]	; (8011940 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801190c:	6811      	ldr	r1, [r2, #0]
 801190e:	220e      	movs	r2, #14
 8011910:	4353      	muls	r3, r2
 8011912:	18cb      	adds	r3, r1, r3
 8011914:	e7f0      	b.n	80118f8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x14>
 8011916:	4a0b      	ldr	r2, [pc, #44]	; (8011944 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8011918:	2000      	movs	r0, #0
 801191a:	4293      	cmp	r3, r2
 801191c:	d1ee      	bne.n	80118fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x18>
 801191e:	4b0a      	ldr	r3, [pc, #40]	; (8011948 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8011920:	781b      	ldrb	r3, [r3, #0]
 8011922:	4283      	cmp	r3, r0
 8011924:	d103      	bne.n	801192e <_ZNK8touchgfx6Bitmap8getWidthEv+0x4a>
 8011926:	4b09      	ldr	r3, [pc, #36]	; (801194c <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8011928:	2000      	movs	r0, #0
 801192a:	5e18      	ldrsh	r0, [r3, r0]
 801192c:	e7e6      	b.n	80118fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x18>
 801192e:	4b08      	ldr	r3, [pc, #32]	; (8011950 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8011930:	e7fa      	b.n	8011928 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8011932:	46c0      	nop			; (mov r8, r8)
 8011934:	20002748 	.word	0x20002748
 8011938:	20002750 	.word	0x20002750
 801193c:	2000274c 	.word	0x2000274c
 8011940:	20002730 	.word	0x20002730
 8011944:	0000fffe 	.word	0x0000fffe
 8011948:	200026c0 	.word	0x200026c0
 801194c:	200026c2 	.word	0x200026c2
 8011950:	200026c4 	.word	0x200026c4

08011954 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8011954:	4a13      	ldr	r2, [pc, #76]	; (80119a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8011956:	8803      	ldrh	r3, [r0, #0]
 8011958:	8812      	ldrh	r2, [r2, #0]
 801195a:	4293      	cmp	r3, r2
 801195c:	d207      	bcs.n	801196e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801195e:	2114      	movs	r1, #20
 8011960:	4a11      	ldr	r2, [pc, #68]	; (80119a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8011962:	434b      	muls	r3, r1
 8011964:	6812      	ldr	r2, [r2, #0]
 8011966:	18d3      	adds	r3, r2, r3
 8011968:	200a      	movs	r0, #10
 801196a:	5e18      	ldrsh	r0, [r3, r0]
 801196c:	4770      	bx	lr
 801196e:	490f      	ldr	r1, [pc, #60]	; (80119ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8011970:	8809      	ldrh	r1, [r1, #0]
 8011972:	1889      	adds	r1, r1, r2
 8011974:	428b      	cmp	r3, r1
 8011976:	da06      	bge.n	8011986 <_ZNK8touchgfx6Bitmap9getHeightEv+0x32>
 8011978:	1a9b      	subs	r3, r3, r2
 801197a:	4a0d      	ldr	r2, [pc, #52]	; (80119b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801197c:	6811      	ldr	r1, [r2, #0]
 801197e:	220e      	movs	r2, #14
 8011980:	4353      	muls	r3, r2
 8011982:	18cb      	adds	r3, r1, r3
 8011984:	e7f0      	b.n	8011968 <_ZNK8touchgfx6Bitmap9getHeightEv+0x14>
 8011986:	4a0b      	ldr	r2, [pc, #44]	; (80119b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8011988:	2000      	movs	r0, #0
 801198a:	4293      	cmp	r3, r2
 801198c:	d1ee      	bne.n	801196c <_ZNK8touchgfx6Bitmap9getHeightEv+0x18>
 801198e:	4b0a      	ldr	r3, [pc, #40]	; (80119b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8011990:	781b      	ldrb	r3, [r3, #0]
 8011992:	4283      	cmp	r3, r0
 8011994:	d103      	bne.n	801199e <_ZNK8touchgfx6Bitmap9getHeightEv+0x4a>
 8011996:	4b09      	ldr	r3, [pc, #36]	; (80119bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8011998:	2000      	movs	r0, #0
 801199a:	5e18      	ldrsh	r0, [r3, r0]
 801199c:	e7e6      	b.n	801196c <_ZNK8touchgfx6Bitmap9getHeightEv+0x18>
 801199e:	4b08      	ldr	r3, [pc, #32]	; (80119c0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 80119a0:	e7fa      	b.n	8011998 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 80119a2:	46c0      	nop			; (mov r8, r8)
 80119a4:	20002748 	.word	0x20002748
 80119a8:	20002750 	.word	0x20002750
 80119ac:	2000274c 	.word	0x2000274c
 80119b0:	20002730 	.word	0x20002730
 80119b4:	0000fffe 	.word	0x0000fffe
 80119b8:	200026c0 	.word	0x200026c0
 80119bc:	200026c4 	.word	0x200026c4
 80119c0:	200026c2 	.word	0x200026c2

080119c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80119c4:	b570      	push	{r4, r5, r6, lr}
 80119c6:	4b1f      	ldr	r3, [pc, #124]	; (8011a44 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 80119c8:	8809      	ldrh	r1, [r1, #0]
 80119ca:	881b      	ldrh	r3, [r3, #0]
 80119cc:	0004      	movs	r4, r0
 80119ce:	4299      	cmp	r1, r3
 80119d0:	d213      	bcs.n	80119fa <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x36>
 80119d2:	2314      	movs	r3, #20
 80119d4:	4a1c      	ldr	r2, [pc, #112]	; (8011a48 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 80119d6:	434b      	muls	r3, r1
 80119d8:	6811      	ldr	r1, [r2, #0]
 80119da:	18c9      	adds	r1, r1, r3
 80119dc:	8a0a      	ldrh	r2, [r1, #16]
 80119de:	230c      	movs	r3, #12
 80119e0:	5ecd      	ldrsh	r5, [r1, r3]
 80119e2:	230e      	movs	r3, #14
 80119e4:	5ec8      	ldrsh	r0, [r1, r3]
 80119e6:	8a4b      	ldrh	r3, [r1, #18]
 80119e8:	04d2      	lsls	r2, r2, #19
 80119ea:	0cd2      	lsrs	r2, r2, #19
 80119ec:	04db      	lsls	r3, r3, #19
 80119ee:	0cdb      	lsrs	r3, r3, #19
 80119f0:	8025      	strh	r5, [r4, #0]
 80119f2:	8060      	strh	r0, [r4, #2]
 80119f4:	80a2      	strh	r2, [r4, #4]
 80119f6:	80e3      	strh	r3, [r4, #6]
 80119f8:	e00d      	b.n	8011a16 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 80119fa:	4a14      	ldr	r2, [pc, #80]	; (8011a4c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 80119fc:	8812      	ldrh	r2, [r2, #0]
 80119fe:	18d2      	adds	r2, r2, r3
 8011a00:	4291      	cmp	r1, r2
 8011a02:	da0a      	bge.n	8011a1a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x56>
 8011a04:	4a12      	ldr	r2, [pc, #72]	; (8011a50 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8011a06:	1acb      	subs	r3, r1, r3
 8011a08:	6811      	ldr	r1, [r2, #0]
 8011a0a:	220e      	movs	r2, #14
 8011a0c:	4353      	muls	r3, r2
 8011a0e:	3a06      	subs	r2, #6
 8011a10:	18c9      	adds	r1, r1, r3
 8011a12:	f002 fccc 	bl	80143ae <memcpy>
 8011a16:	0020      	movs	r0, r4
 8011a18:	bd70      	pop	{r4, r5, r6, pc}
 8011a1a:	4b0e      	ldr	r3, [pc, #56]	; (8011a54 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8011a1c:	4299      	cmp	r1, r3
 8011a1e:	d10b      	bne.n	8011a38 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8011a20:	4b0d      	ldr	r3, [pc, #52]	; (8011a58 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8011a22:	2100      	movs	r1, #0
 8011a24:	5e59      	ldrsh	r1, [r3, r1]
 8011a26:	4b0d      	ldr	r3, [pc, #52]	; (8011a5c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8011a28:	8081      	strh	r1, [r0, #4]
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	5e9a      	ldrsh	r2, [r3, r2]
 8011a2e:	2300      	movs	r3, #0
 8011a30:	80c2      	strh	r2, [r0, #6]
 8011a32:	8003      	strh	r3, [r0, #0]
 8011a34:	8043      	strh	r3, [r0, #2]
 8011a36:	e7ee      	b.n	8011a16 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8011a38:	2300      	movs	r3, #0
 8011a3a:	8003      	strh	r3, [r0, #0]
 8011a3c:	8043      	strh	r3, [r0, #2]
 8011a3e:	8083      	strh	r3, [r0, #4]
 8011a40:	e7d9      	b.n	80119f6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x32>
 8011a42:	46c0      	nop			; (mov r8, r8)
 8011a44:	20002748 	.word	0x20002748
 8011a48:	20002750 	.word	0x20002750
 8011a4c:	2000274c 	.word	0x2000274c
 8011a50:	20002730 	.word	0x20002730
 8011a54:	0000fffe 	.word	0x0000fffe
 8011a58:	200026bc 	.word	0x200026bc
 8011a5c:	200026be 	.word	0x200026be

08011a60 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8011a60:	4a17      	ldr	r2, [pc, #92]	; (8011ac0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 8011a62:	8803      	ldrh	r3, [r0, #0]
 8011a64:	8812      	ldrh	r2, [r2, #0]
 8011a66:	4293      	cmp	r3, r2
 8011a68:	d214      	bcs.n	8011a94 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 8011a6a:	2214      	movs	r2, #20
 8011a6c:	435a      	muls	r2, r3
 8011a6e:	4b15      	ldr	r3, [pc, #84]	; (8011ac4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8011a70:	2001      	movs	r0, #1
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	189b      	adds	r3, r3, r2
 8011a76:	8a1a      	ldrh	r2, [r3, #16]
 8011a78:	8919      	ldrh	r1, [r3, #8]
 8011a7a:	04d2      	lsls	r2, r2, #19
 8011a7c:	0cd2      	lsrs	r2, r2, #19
 8011a7e:	428a      	cmp	r2, r1
 8011a80:	db07      	blt.n	8011a92 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 8011a82:	8a5a      	ldrh	r2, [r3, #18]
 8011a84:	04d2      	lsls	r2, r2, #19
 8011a86:	0cd2      	lsrs	r2, r2, #19
 8011a88:	895b      	ldrh	r3, [r3, #10]
 8011a8a:	429a      	cmp	r2, r3
 8011a8c:	db00      	blt.n	8011a90 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x30>
 8011a8e:	2000      	movs	r0, #0
 8011a90:	b2c0      	uxtb	r0, r0
 8011a92:	4770      	bx	lr
 8011a94:	490c      	ldr	r1, [pc, #48]	; (8011ac8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8011a96:	2000      	movs	r0, #0
 8011a98:	8809      	ldrh	r1, [r1, #0]
 8011a9a:	1889      	adds	r1, r1, r2
 8011a9c:	428b      	cmp	r3, r1
 8011a9e:	daf8      	bge.n	8011a92 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 8011aa0:	1a9b      	subs	r3, r3, r2
 8011aa2:	220e      	movs	r2, #14
 8011aa4:	435a      	muls	r2, r3
 8011aa6:	4b09      	ldr	r3, [pc, #36]	; (8011acc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8011aa8:	3001      	adds	r0, #1
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	189b      	adds	r3, r3, r2
 8011aae:	2204      	movs	r2, #4
 8011ab0:	5e99      	ldrsh	r1, [r3, r2]
 8011ab2:	891a      	ldrh	r2, [r3, #8]
 8011ab4:	4291      	cmp	r1, r2
 8011ab6:	dbec      	blt.n	8011a92 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 8011ab8:	2106      	movs	r1, #6
 8011aba:	5e5a      	ldrsh	r2, [r3, r1]
 8011abc:	e7e4      	b.n	8011a88 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 8011abe:	46c0      	nop			; (mov r8, r8)
 8011ac0:	20002748 	.word	0x20002748
 8011ac4:	20002750 	.word	0x20002750
 8011ac8:	2000274c 	.word	0x2000274c
 8011acc:	20002730 	.word	0x20002730

08011ad0 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8011ad0:	4a12      	ldr	r2, [pc, #72]	; (8011b1c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8011ad2:	8803      	ldrh	r3, [r0, #0]
 8011ad4:	8811      	ldrh	r1, [r2, #0]
 8011ad6:	428b      	cmp	r3, r1
 8011ad8:	d20d      	bcs.n	8011af6 <_ZNK8touchgfx6Bitmap7getDataEv+0x26>
 8011ada:	4a11      	ldr	r2, [pc, #68]	; (8011b20 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8011adc:	6812      	ldr	r2, [r2, #0]
 8011ade:	2a00      	cmp	r2, #0
 8011ae0:	d003      	beq.n	8011aea <_ZNK8touchgfx6Bitmap7getDataEv+0x1a>
 8011ae2:	0099      	lsls	r1, r3, #2
 8011ae4:	5888      	ldr	r0, [r1, r2]
 8011ae6:	2800      	cmp	r0, #0
 8011ae8:	d104      	bne.n	8011af4 <_ZNK8touchgfx6Bitmap7getDataEv+0x24>
 8011aea:	4a0e      	ldr	r2, [pc, #56]	; (8011b24 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8011aec:	6811      	ldr	r1, [r2, #0]
 8011aee:	2214      	movs	r2, #20
 8011af0:	4353      	muls	r3, r2
 8011af2:	5858      	ldr	r0, [r3, r1]
 8011af4:	4770      	bx	lr
 8011af6:	4a0c      	ldr	r2, [pc, #48]	; (8011b28 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8011af8:	8812      	ldrh	r2, [r2, #0]
 8011afa:	1852      	adds	r2, r2, r1
 8011afc:	4293      	cmp	r3, r2
 8011afe:	da04      	bge.n	8011b0a <_ZNK8touchgfx6Bitmap7getDataEv+0x3a>
 8011b00:	4a07      	ldr	r2, [pc, #28]	; (8011b20 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8011b02:	009b      	lsls	r3, r3, #2
 8011b04:	6812      	ldr	r2, [r2, #0]
 8011b06:	5898      	ldr	r0, [r3, r2]
 8011b08:	e7f4      	b.n	8011af4 <_ZNK8touchgfx6Bitmap7getDataEv+0x24>
 8011b0a:	4a08      	ldr	r2, [pc, #32]	; (8011b2c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8011b0c:	2000      	movs	r0, #0
 8011b0e:	4293      	cmp	r3, r2
 8011b10:	d1f0      	bne.n	8011af4 <_ZNK8touchgfx6Bitmap7getDataEv+0x24>
 8011b12:	4b07      	ldr	r3, [pc, #28]	; (8011b30 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8011b18:	e7ec      	b.n	8011af4 <_ZNK8touchgfx6Bitmap7getDataEv+0x24>
 8011b1a:	46c0      	nop			; (mov r8, r8)
 8011b1c:	20002748 	.word	0x20002748
 8011b20:	2000272c 	.word	0x2000272c
 8011b24:	20002750 	.word	0x20002750
 8011b28:	2000274c 	.word	0x2000274c
 8011b2c:	0000fffe 	.word	0x0000fffe
 8011b30:	200026c8 	.word	0x200026c8

08011b34 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8011b34:	b530      	push	{r4, r5, lr}
 8011b36:	4a25      	ldr	r2, [pc, #148]	; (8011bcc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8011b38:	8803      	ldrh	r3, [r0, #0]
 8011b3a:	8812      	ldrh	r2, [r2, #0]
 8011b3c:	4293      	cmp	r3, r2
 8011b3e:	d221      	bcs.n	8011b84 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x50>
 8011b40:	2214      	movs	r2, #20
 8011b42:	4923      	ldr	r1, [pc, #140]	; (8011bd0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8011b44:	435a      	muls	r2, r3
 8011b46:	680d      	ldr	r5, [r1, #0]
 8011b48:	18ad      	adds	r5, r5, r2
 8011b4a:	6868      	ldr	r0, [r5, #4]
 8011b4c:	2800      	cmp	r0, #0
 8011b4e:	d018      	beq.n	8011b82 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8011b50:	4a20      	ldr	r2, [pc, #128]	; (8011bd4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8011b52:	6811      	ldr	r1, [r2, #0]
 8011b54:	2900      	cmp	r1, #0
 8011b56:	d014      	beq.n	8011b82 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8011b58:	009b      	lsls	r3, r3, #2
 8011b5a:	585a      	ldr	r2, [r3, r1]
 8011b5c:	2a00      	cmp	r2, #0
 8011b5e:	d010      	beq.n	8011b82 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8011b60:	892b      	ldrh	r3, [r5, #8]
 8011b62:	896c      	ldrh	r4, [r5, #10]
 8011b64:	7ce9      	ldrb	r1, [r5, #19]
 8011b66:	435c      	muls	r4, r3
 8011b68:	7c6b      	ldrb	r3, [r5, #17]
 8011b6a:	0949      	lsrs	r1, r1, #5
 8011b6c:	095b      	lsrs	r3, r3, #5
 8011b6e:	00db      	lsls	r3, r3, #3
 8011b70:	430b      	orrs	r3, r1
 8011b72:	0060      	lsls	r0, r4, #1
 8011b74:	2b0b      	cmp	r3, #11
 8011b76:	d100      	bne.n	8011b7a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x46>
 8011b78:	0020      	movs	r0, r4
 8011b7a:	2303      	movs	r3, #3
 8011b7c:	3003      	adds	r0, #3
 8011b7e:	4398      	bics	r0, r3
 8011b80:	1810      	adds	r0, r2, r0
 8011b82:	bd30      	pop	{r4, r5, pc}
 8011b84:	4914      	ldr	r1, [pc, #80]	; (8011bd8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8011b86:	2000      	movs	r0, #0
 8011b88:	8809      	ldrh	r1, [r1, #0]
 8011b8a:	1889      	adds	r1, r1, r2
 8011b8c:	428b      	cmp	r3, r1
 8011b8e:	daf8      	bge.n	8011b82 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8011b90:	210e      	movs	r1, #14
 8011b92:	1a9a      	subs	r2, r3, r2
 8011b94:	4351      	muls	r1, r2
 8011b96:	4a11      	ldr	r2, [pc, #68]	; (8011bdc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 8011b98:	301f      	adds	r0, #31
 8011b9a:	6812      	ldr	r2, [r2, #0]
 8011b9c:	1852      	adds	r2, r2, r1
 8011b9e:	7b11      	ldrb	r1, [r2, #12]
 8011ba0:	4001      	ands	r1, r0
 8011ba2:	290b      	cmp	r1, #11
 8011ba4:	d10b      	bne.n	8011bbe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8a>
 8011ba6:	8911      	ldrh	r1, [r2, #8]
 8011ba8:	8950      	ldrh	r0, [r2, #10]
 8011baa:	4a0a      	ldr	r2, [pc, #40]	; (8011bd4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8011bac:	4348      	muls	r0, r1
 8011bae:	2103      	movs	r1, #3
 8011bb0:	6812      	ldr	r2, [r2, #0]
 8011bb2:	009b      	lsls	r3, r3, #2
 8011bb4:	3003      	adds	r0, #3
 8011bb6:	589b      	ldr	r3, [r3, r2]
 8011bb8:	4388      	bics	r0, r1
 8011bba:	1818      	adds	r0, r3, r0
 8011bbc:	e7e1      	b.n	8011b82 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8011bbe:	2000      	movs	r0, #0
 8011bc0:	290d      	cmp	r1, #13
 8011bc2:	d1de      	bne.n	8011b82 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8011bc4:	320d      	adds	r2, #13
 8011bc6:	0010      	movs	r0, r2
 8011bc8:	e7db      	b.n	8011b82 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8011bca:	46c0      	nop			; (mov r8, r8)
 8011bcc:	20002748 	.word	0x20002748
 8011bd0:	20002750 	.word	0x20002750
 8011bd4:	2000272c 	.word	0x2000272c
 8011bd8:	2000274c 	.word	0x2000274c
 8011bdc:	20002730 	.word	0x20002730

08011be0 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8011be0:	b510      	push	{r4, lr}
 8011be2:	4a15      	ldr	r2, [pc, #84]	; (8011c38 <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>)
 8011be4:	8803      	ldrh	r3, [r0, #0]
 8011be6:	8812      	ldrh	r2, [r2, #0]
 8011be8:	4293      	cmp	r3, r2
 8011bea:	d20b      	bcs.n	8011c04 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8011bec:	2214      	movs	r2, #20
 8011bee:	435a      	muls	r2, r3
 8011bf0:	4b12      	ldr	r3, [pc, #72]	; (8011c3c <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>)
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	189b      	adds	r3, r3, r2
 8011bf6:	7c58      	ldrb	r0, [r3, #17]
 8011bf8:	7cdb      	ldrb	r3, [r3, #19]
 8011bfa:	0940      	lsrs	r0, r0, #5
 8011bfc:	00c0      	lsls	r0, r0, #3
 8011bfe:	095b      	lsrs	r3, r3, #5
 8011c00:	4318      	orrs	r0, r3
 8011c02:	bd10      	pop	{r4, pc}
 8011c04:	490e      	ldr	r1, [pc, #56]	; (8011c40 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8011c06:	8809      	ldrh	r1, [r1, #0]
 8011c08:	1889      	adds	r1, r1, r2
 8011c0a:	428b      	cmp	r3, r1
 8011c0c:	da09      	bge.n	8011c22 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 8011c0e:	210e      	movs	r1, #14
 8011c10:	1a9b      	subs	r3, r3, r2
 8011c12:	434b      	muls	r3, r1
 8011c14:	4a0b      	ldr	r2, [pc, #44]	; (8011c44 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8011c16:	6812      	ldr	r2, [r2, #0]
 8011c18:	18d3      	adds	r3, r2, r3
 8011c1a:	7b18      	ldrb	r0, [r3, #12]
 8011c1c:	06c0      	lsls	r0, r0, #27
 8011c1e:	0ec0      	lsrs	r0, r0, #27
 8011c20:	e7ef      	b.n	8011c02 <_ZNK8touchgfx6Bitmap9getFormatEv+0x22>
 8011c22:	4a09      	ldr	r2, [pc, #36]	; (8011c48 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8011c24:	2000      	movs	r0, #0
 8011c26:	4293      	cmp	r3, r2
 8011c28:	d1eb      	bne.n	8011c02 <_ZNK8touchgfx6Bitmap9getFormatEv+0x22>
 8011c2a:	f7fb f883 	bl	800cd34 <_ZN8touchgfx3HAL3lcdEv>
 8011c2e:	6803      	ldr	r3, [r0, #0]
 8011c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c32:	4798      	blx	r3
 8011c34:	e7e5      	b.n	8011c02 <_ZNK8touchgfx6Bitmap9getFormatEv+0x22>
 8011c36:	46c0      	nop			; (mov r8, r8)
 8011c38:	20002748 	.word	0x20002748
 8011c3c:	20002750 	.word	0x20002750
 8011c40:	2000274c 	.word	0x2000274c
 8011c44:	20002730 	.word	0x20002730
 8011c48:	0000fffe 	.word	0x0000fffe

08011c4c <_ZNK8touchgfx19LCD16bppSerialFlash8bitDepthEv>:
 8011c4c:	2010      	movs	r0, #16
 8011c4e:	4770      	bx	lr

08011c50 <_ZNK8touchgfx19LCD16bppSerialFlash17framebufferFormatEv>:
 8011c50:	2000      	movs	r0, #0
 8011c52:	4770      	bx	lr

08011c54 <_ZNK8touchgfx19LCD16bppSerialFlash17framebufferStrideEv>:
 8011c54:	4b02      	ldr	r3, [pc, #8]	; (8011c60 <_ZNK8touchgfx19LCD16bppSerialFlash17framebufferStrideEv+0xc>)
 8011c56:	8818      	ldrh	r0, [r3, #0]
 8011c58:	0040      	lsls	r0, r0, #1
 8011c5a:	b280      	uxth	r0, r0
 8011c5c:	4770      	bx	lr
 8011c5e:	46c0      	nop			; (mov r8, r8)
 8011c60:	200026c2 	.word	0x200026c2

08011c64 <_ZN8touchgfx19LCD16bppSerialFlash29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8011c64:	2300      	movs	r3, #0
 8011c66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c68:	b085      	sub	sp, #20
 8011c6a:	9302      	str	r3, [sp, #8]
 8011c6c:	4b12      	ldr	r3, [pc, #72]	; (8011cb8 <_ZN8touchgfx19LCD16bppSerialFlash29copyAreaFromTFTToClientBufferERKNS_4RectE+0x54>)
 8011c6e:	0005      	movs	r5, r0
 8011c70:	781b      	ldrb	r3, [r3, #0]
 8011c72:	000e      	movs	r6, r1
 8011c74:	4a11      	ldr	r2, [pc, #68]	; (8011cbc <_ZN8touchgfx19LCD16bppSerialFlash29copyAreaFromTFTToClientBufferERKNS_4RectE+0x58>)
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d000      	beq.n	8011c7c <_ZN8touchgfx19LCD16bppSerialFlash29copyAreaFromTFTToClientBufferERKNS_4RectE+0x18>
 8011c7a:	4a11      	ldr	r2, [pc, #68]	; (8011cc0 <_ZN8touchgfx19LCD16bppSerialFlash29copyAreaFromTFTToClientBufferERKNS_4RectE+0x5c>)
 8011c7c:	2100      	movs	r1, #0
 8011c7e:	5e52      	ldrsh	r2, [r2, r1]
 8011c80:	ac02      	add	r4, sp, #8
 8011c82:	80a2      	strh	r2, [r4, #4]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d115      	bne.n	8011cb4 <_ZN8touchgfx19LCD16bppSerialFlash29copyAreaFromTFTToClientBufferERKNS_4RectE+0x50>
 8011c88:	4b0d      	ldr	r3, [pc, #52]	; (8011cc0 <_ZN8touchgfx19LCD16bppSerialFlash29copyAreaFromTFTToClientBufferERKNS_4RectE+0x5c>)
 8011c8a:	2200      	movs	r2, #0
 8011c8c:	5e9b      	ldrsh	r3, [r3, r2]
 8011c8e:	80e3      	strh	r3, [r4, #6]
 8011c90:	4b0c      	ldr	r3, [pc, #48]	; (8011cc4 <_ZN8touchgfx19LCD16bppSerialFlash29copyAreaFromTFTToClientBufferERKNS_4RectE+0x60>)
 8011c92:	6818      	ldr	r0, [r3, #0]
 8011c94:	6803      	ldr	r3, [r0, #0]
 8011c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c98:	4798      	blx	r3
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	682b      	ldr	r3, [r5, #0]
 8011c9e:	9201      	str	r2, [sp, #4]
 8011ca0:	32ff      	adds	r2, #255	; 0xff
 8011ca2:	9200      	str	r2, [sp, #0]
 8011ca4:	0001      	movs	r1, r0
 8011ca6:	68df      	ldr	r7, [r3, #12]
 8011ca8:	0022      	movs	r2, r4
 8011caa:	0033      	movs	r3, r6
 8011cac:	0028      	movs	r0, r5
 8011cae:	47b8      	blx	r7
 8011cb0:	b005      	add	sp, #20
 8011cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cb4:	4b01      	ldr	r3, [pc, #4]	; (8011cbc <_ZN8touchgfx19LCD16bppSerialFlash29copyAreaFromTFTToClientBufferERKNS_4RectE+0x58>)
 8011cb6:	e7e8      	b.n	8011c8a <_ZN8touchgfx19LCD16bppSerialFlash29copyAreaFromTFTToClientBufferERKNS_4RectE+0x26>
 8011cb8:	200026c0 	.word	0x200026c0
 8011cbc:	200026c2 	.word	0x200026c2
 8011cc0:	200026c4 	.word	0x200026c4
 8011cc4:	200026c8 	.word	0x200026c8

08011cc8 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8011cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cca:	000e      	movs	r6, r1
 8011ccc:	6809      	ldr	r1, [r1, #0]
 8011cce:	0005      	movs	r5, r0
 8011cd0:	0014      	movs	r4, r2
 8011cd2:	001f      	movs	r7, r3
 8011cd4:	2900      	cmp	r1, #0
 8011cd6:	d110      	bne.n	8011cfa <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x32>
 8011cd8:	6871      	ldr	r1, [r6, #4]
 8011cda:	2900      	cmp	r1, #0
 8011cdc:	d11a      	bne.n	8011d14 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 8011cde:	2fff      	cmp	r7, #255	; 0xff
 8011ce0:	d100      	bne.n	8011ce4 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 8011ce2:	e068      	b.n	8011db6 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 8011ce4:	2c0b      	cmp	r4, #11
 8011ce6:	d062      	beq.n	8011dae <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe6>
 8011ce8:	d822      	bhi.n	8011d30 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x68>
 8011cea:	2c03      	cmp	r4, #3
 8011cec:	d057      	beq.n	8011d9e <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd6>
 8011cee:	d818      	bhi.n	8011d22 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5a>
 8011cf0:	2c01      	cmp	r4, #1
 8011cf2:	d056      	beq.n	8011da2 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xda>
 8011cf4:	d957      	bls.n	8011da6 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xde>
 8011cf6:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8011cf8:	e00b      	b.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011cfa:	68c0      	ldr	r0, [r0, #12]
 8011cfc:	6803      	ldr	r3, [r0, #0]
 8011cfe:	689b      	ldr	r3, [r3, #8]
 8011d00:	4798      	blx	r3
 8011d02:	2800      	cmp	r0, #0
 8011d04:	d1e8      	bne.n	8011cd8 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10>
 8011d06:	003b      	movs	r3, r7
 8011d08:	0022      	movs	r2, r4
 8011d0a:	0031      	movs	r1, r6
 8011d0c:	0028      	movs	r0, r5
 8011d0e:	f7fb ff53 	bl	800dbb8 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>
 8011d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d14:	68e8      	ldr	r0, [r5, #12]
 8011d16:	6803      	ldr	r3, [r0, #0]
 8011d18:	689b      	ldr	r3, [r3, #8]
 8011d1a:	4798      	blx	r3
 8011d1c:	2800      	cmp	r0, #0
 8011d1e:	d1de      	bne.n	8011cde <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16>
 8011d20:	e7f1      	b.n	8011d06 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 8011d22:	2c09      	cmp	r4, #9
 8011d24:	d043      	beq.n	8011dae <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe6>
 8011d26:	d840      	bhi.n	8011daa <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 8011d28:	2c08      	cmp	r4, #8
 8011d2a:	d03e      	beq.n	8011daa <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 8011d2c:	2000      	movs	r0, #0
 8011d2e:	e7f0      	b.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011d30:	2c2f      	cmp	r4, #47	; 0x2f
 8011d32:	d026      	beq.n	8011d82 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 8011d34:	d80e      	bhi.n	8011d54 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 8011d36:	2c2d      	cmp	r4, #45	; 0x2d
 8011d38:	d015      	beq.n	8011d66 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8011d3a:	d829      	bhi.n	8011d90 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 8011d3c:	2c2c      	cmp	r4, #44	; 0x2c
 8011d3e:	d1f5      	bne.n	8011d2c <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 8011d40:	6873      	ldr	r3, [r6, #4]
 8011d42:	781b      	ldrb	r3, [r3, #0]
 8011d44:	2b01      	cmp	r3, #1
 8011d46:	d01a      	beq.n	8011d7e <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d026      	beq.n	8011d9a <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 8011d4c:	2b02      	cmp	r3, #2
 8011d4e:	d1ed      	bne.n	8011d2c <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 8011d50:	6928      	ldr	r0, [r5, #16]
 8011d52:	e7de      	b.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011d54:	2c31      	cmp	r4, #49	; 0x31
 8011d56:	d004      	beq.n	8011d62 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8011d58:	d32b      	bcc.n	8011db2 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xea>
 8011d5a:	2c32      	cmp	r4, #50	; 0x32
 8011d5c:	d029      	beq.n	8011db2 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xea>
 8011d5e:	2c33      	cmp	r4, #51	; 0x33
 8011d60:	d1e4      	bne.n	8011d2c <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 8011d62:	6fa8      	ldr	r0, [r5, #120]	; 0x78
 8011d64:	e7d5      	b.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011d66:	6873      	ldr	r3, [r6, #4]
 8011d68:	781b      	ldrb	r3, [r3, #0]
 8011d6a:	2b01      	cmp	r3, #1
 8011d6c:	d005      	beq.n	8011d7a <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb2>
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d00c      	beq.n	8011d8c <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 8011d72:	2b02      	cmp	r3, #2
 8011d74:	d1da      	bne.n	8011d2c <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 8011d76:	69a8      	ldr	r0, [r5, #24]
 8011d78:	e7cb      	b.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011d7a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8011d7c:	e7c9      	b.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011d7e:	6a28      	ldr	r0, [r5, #32]
 8011d80:	e7c7      	b.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011d82:	2000      	movs	r0, #0
 8011d84:	6873      	ldr	r3, [r6, #4]
 8011d86:	781b      	ldrb	r3, [r3, #0]
 8011d88:	4283      	cmp	r3, r0
 8011d8a:	d1c2      	bne.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011d8c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8011d8e:	e7c0      	b.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011d90:	2000      	movs	r0, #0
 8011d92:	6873      	ldr	r3, [r6, #4]
 8011d94:	781b      	ldrb	r3, [r3, #0]
 8011d96:	4283      	cmp	r3, r0
 8011d98:	d1bb      	bne.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011d9a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8011d9c:	e7b9      	b.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011d9e:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8011da0:	e7b7      	b.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011da2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011da4:	e7b5      	b.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011da6:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8011da8:	e7b3      	b.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011daa:	6e28      	ldr	r0, [r5, #96]	; 0x60
 8011dac:	e7b1      	b.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011dae:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8011db0:	e7af      	b.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011db2:	6f28      	ldr	r0, [r5, #112]	; 0x70
 8011db4:	e7ad      	b.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011db6:	2c0b      	cmp	r4, #11
 8011db8:	d04f      	beq.n	8011e5a <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x192>
 8011dba:	d80e      	bhi.n	8011dda <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x112>
 8011dbc:	2c03      	cmp	r4, #3
 8011dbe:	d046      	beq.n	8011e4e <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x186>
 8011dc0:	d804      	bhi.n	8011dcc <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x104>
 8011dc2:	2c01      	cmp	r4, #1
 8011dc4:	d045      	beq.n	8011e52 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18a>
 8011dc6:	d946      	bls.n	8011e56 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18e>
 8011dc8:	6c68      	ldr	r0, [r5, #68]	; 0x44
 8011dca:	e7a2      	b.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011dcc:	2c09      	cmp	r4, #9
 8011dce:	d044      	beq.n	8011e5a <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x192>
 8011dd0:	d801      	bhi.n	8011dd6 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10e>
 8011dd2:	2c08      	cmp	r4, #8
 8011dd4:	d1aa      	bne.n	8011d2c <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 8011dd6:	6e68      	ldr	r0, [r5, #100]	; 0x64
 8011dd8:	e79b      	b.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011dda:	2c2f      	cmp	r4, #47	; 0x2f
 8011ddc:	d027      	beq.n	8011e2e <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x166>
 8011dde:	d80e      	bhi.n	8011dfe <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8011de0:	2c2d      	cmp	r4, #45	; 0x2d
 8011de2:	d015      	beq.n	8011e10 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>
 8011de4:	d82b      	bhi.n	8011e3e <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 8011de6:	2c2c      	cmp	r4, #44	; 0x2c
 8011de8:	d1a0      	bne.n	8011d2c <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 8011dea:	6873      	ldr	r3, [r6, #4]
 8011dec:	781b      	ldrb	r3, [r3, #0]
 8011dee:	2b01      	cmp	r3, #1
 8011df0:	d01b      	beq.n	8011e2a <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x162>
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d029      	beq.n	8011e4a <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x182>
 8011df6:	2b02      	cmp	r3, #2
 8011df8:	d198      	bne.n	8011d2c <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 8011dfa:	6968      	ldr	r0, [r5, #20]
 8011dfc:	e789      	b.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011dfe:	2c31      	cmp	r4, #49	; 0x31
 8011e00:	d004      	beq.n	8011e0c <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>
 8011e02:	d32c      	bcc.n	8011e5e <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x196>
 8011e04:	2c32      	cmp	r4, #50	; 0x32
 8011e06:	d02a      	beq.n	8011e5e <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x196>
 8011e08:	2c33      	cmp	r4, #51	; 0x33
 8011e0a:	d18f      	bne.n	8011d2c <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 8011e0c:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 8011e0e:	e780      	b.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011e10:	6873      	ldr	r3, [r6, #4]
 8011e12:	781b      	ldrb	r3, [r3, #0]
 8011e14:	2b01      	cmp	r3, #1
 8011e16:	d006      	beq.n	8011e26 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15e>
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d00e      	beq.n	8011e3a <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x172>
 8011e1c:	2b02      	cmp	r3, #2
 8011e1e:	d000      	beq.n	8011e22 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15a>
 8011e20:	e784      	b.n	8011d2c <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 8011e22:	69e8      	ldr	r0, [r5, #28]
 8011e24:	e775      	b.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011e26:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8011e28:	e773      	b.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011e2a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8011e2c:	e771      	b.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011e2e:	2000      	movs	r0, #0
 8011e30:	6873      	ldr	r3, [r6, #4]
 8011e32:	781b      	ldrb	r3, [r3, #0]
 8011e34:	4283      	cmp	r3, r0
 8011e36:	d000      	beq.n	8011e3a <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x172>
 8011e38:	e76b      	b.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011e3a:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8011e3c:	e769      	b.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011e3e:	2000      	movs	r0, #0
 8011e40:	6873      	ldr	r3, [r6, #4]
 8011e42:	781b      	ldrb	r3, [r3, #0]
 8011e44:	4283      	cmp	r3, r0
 8011e46:	d000      	beq.n	8011e4a <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x182>
 8011e48:	e763      	b.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011e4a:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8011e4c:	e761      	b.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011e4e:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8011e50:	e75f      	b.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011e52:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8011e54:	e75d      	b.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011e56:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8011e58:	e75b      	b.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011e5a:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8011e5c:	e759      	b.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011e5e:	6f68      	ldr	r0, [r5, #116]	; 0x74
 8011e60:	e757      	b.n	8011d12 <_ZN8touchgfx19LCD16bppSerialFlash28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>

08011e62 <_ZN8touchgfx19LCD16bppSerialFlash29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8011e62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e64:	0006      	movs	r6, r0
 8011e66:	b08d      	sub	sp, #52	; 0x34
 8011e68:	ac09      	add	r4, sp, #36	; 0x24
 8011e6a:	0020      	movs	r0, r4
 8011e6c:	9106      	str	r1, [sp, #24]
 8011e6e:	9207      	str	r2, [sp, #28]
 8011e70:	8023      	strh	r3, [r4, #0]
 8011e72:	f7ff fe2d 	bl	8011ad0 <_ZNK8touchgfx6Bitmap7getDataEv>
 8011e76:	6833      	ldr	r3, [r6, #0]
 8011e78:	0005      	movs	r5, r0
 8011e7a:	699b      	ldr	r3, [r3, #24]
 8011e7c:	0020      	movs	r0, r4
 8011e7e:	9305      	str	r3, [sp, #20]
 8011e80:	f7ff fd30 	bl	80118e4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011e84:	0007      	movs	r7, r0
 8011e86:	0020      	movs	r0, r4
 8011e88:	f7ff fd64 	bl	8011954 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011e8c:	9701      	str	r7, [sp, #4]
 8011e8e:	9002      	str	r0, [sp, #8]
 8011e90:	9500      	str	r5, [sp, #0]
 8011e92:	a80a      	add	r0, sp, #40	; 0x28
 8011e94:	9b07      	ldr	r3, [sp, #28]
 8011e96:	9a06      	ldr	r2, [sp, #24]
 8011e98:	0031      	movs	r1, r6
 8011e9a:	9c05      	ldr	r4, [sp, #20]
 8011e9c:	47a0      	blx	r4
 8011e9e:	0028      	movs	r0, r5
 8011ea0:	b00d      	add	sp, #52	; 0x34
 8011ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011ea4 <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb>:
 8011ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ea6:	b08f      	sub	sp, #60	; 0x3c
 8011ea8:	001f      	movs	r7, r3
 8011eaa:	ab14      	add	r3, sp, #80	; 0x50
 8011eac:	781b      	ldrb	r3, [r3, #0]
 8011eae:	0006      	movs	r6, r0
 8011eb0:	9101      	str	r1, [sp, #4]
 8011eb2:	0015      	movs	r5, r2
 8011eb4:	9302      	str	r3, [sp, #8]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d100      	bne.n	8011ebc <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0x18>
 8011eba:	e163      	b.n	8012184 <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0x2e0>
 8011ebc:	ac0c      	add	r4, sp, #48	; 0x30
 8011ebe:	0029      	movs	r1, r5
 8011ec0:	2208      	movs	r2, #8
 8011ec2:	a80a      	add	r0, sp, #40	; 0x28
 8011ec4:	f002 fa73 	bl	80143ae <memcpy>
 8011ec8:	2208      	movs	r2, #8
 8011eca:	0039      	movs	r1, r7
 8011ecc:	0020      	movs	r0, r4
 8011ece:	f002 fa6e 	bl	80143ae <memcpy>
 8011ed2:	a80a      	add	r0, sp, #40	; 0x28
 8011ed4:	f7fc fd98 	bl	800ea08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011ed8:	0020      	movs	r0, r4
 8011eda:	0029      	movs	r1, r5
 8011edc:	f7fc fdbc 	bl	800ea58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011ee0:	2302      	movs	r3, #2
 8011ee2:	5ee2      	ldrsh	r2, [r4, r3]
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	5ee1      	ldrsh	r1, [r4, r3]
 8011ee8:	ab0a      	add	r3, sp, #40	; 0x28
 8011eea:	2004      	movs	r0, #4
 8011eec:	5e1b      	ldrsh	r3, [r3, r0]
 8011eee:	9801      	ldr	r0, [sp, #4]
 8011ef0:	4353      	muls	r3, r2
 8011ef2:	185b      	adds	r3, r3, r1
 8011ef4:	005b      	lsls	r3, r3, #1
 8011ef6:	18c3      	adds	r3, r0, r3
 8011ef8:	9301      	str	r3, [sp, #4]
 8011efa:	ab0a      	add	r3, sp, #40	; 0x28
 8011efc:	881b      	ldrh	r3, [r3, #0]
 8011efe:	1859      	adds	r1, r3, r1
 8011f00:	8021      	strh	r1, [r4, #0]
 8011f02:	ab0a      	add	r3, sp, #40	; 0x28
 8011f04:	885b      	ldrh	r3, [r3, #2]
 8011f06:	189a      	adds	r2, r3, r2
 8011f08:	8062      	strh	r2, [r4, #2]
 8011f0a:	2204      	movs	r2, #4
 8011f0c:	5ea3      	ldrsh	r3, [r4, r2]
 8011f0e:	9305      	str	r3, [sp, #20]
 8011f10:	2306      	movs	r3, #6
 8011f12:	5ee5      	ldrsh	r5, [r4, r3]
 8011f14:	4b9c      	ldr	r3, [pc, #624]	; (8012188 <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0x2e4>)
 8011f16:	6818      	ldr	r0, [r3, #0]
 8011f18:	6803      	ldr	r3, [r0, #0]
 8011f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f1c:	4798      	blx	r3
 8011f1e:	4b9b      	ldr	r3, [pc, #620]	; (801218c <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0x2e8>)
 8011f20:	881a      	ldrh	r2, [r3, #0]
 8011f22:	2102      	movs	r1, #2
 8011f24:	5e63      	ldrsh	r3, [r4, r1]
 8011f26:	4355      	muls	r5, r2
 8011f28:	4353      	muls	r3, r2
 8011f2a:	2100      	movs	r1, #0
 8011f2c:	5e64      	ldrsh	r4, [r4, r1]
 8011f2e:	006d      	lsls	r5, r5, #1
 8011f30:	191c      	adds	r4, r3, r4
 8011f32:	0064      	lsls	r4, r4, #1
 8011f34:	1904      	adds	r4, r0, r4
 8011f36:	68f0      	ldr	r0, [r6, #12]
 8011f38:	1963      	adds	r3, r4, r5
 8011f3a:	9304      	str	r3, [sp, #16]
 8011f3c:	6803      	ldr	r3, [r0, #0]
 8011f3e:	9901      	ldr	r1, [sp, #4]
 8011f40:	689b      	ldr	r3, [r3, #8]
 8011f42:	4798      	blx	r3
 8011f44:	9b05      	ldr	r3, [sp, #20]
 8011f46:	005b      	lsls	r3, r3, #1
 8011f48:	9303      	str	r3, [sp, #12]
 8011f4a:	9b02      	ldr	r3, [sp, #8]
 8011f4c:	2800      	cmp	r0, #0
 8011f4e:	d100      	bne.n	8011f52 <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 8011f50:	e07d      	b.n	801204e <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0x1aa>
 8011f52:	2bff      	cmp	r3, #255	; 0xff
 8011f54:	d063      	beq.n	801201e <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0x17a>
 8011f56:	23ff      	movs	r3, #255	; 0xff
 8011f58:	9a02      	ldr	r2, [sp, #8]
 8011f5a:	1a9b      	subs	r3, r3, r2
 8011f5c:	9306      	str	r3, [sp, #24]
 8011f5e:	2303      	movs	r3, #3
 8011f60:	469c      	mov	ip, r3
 8011f62:	9b04      	ldr	r3, [sp, #16]
 8011f64:	42a3      	cmp	r3, r4
 8011f66:	d800      	bhi.n	8011f6a <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0xc6>
 8011f68:	e107      	b.n	801217a <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0x2d6>
 8011f6a:	0020      	movs	r0, r4
 8011f6c:	9b03      	ldr	r3, [sp, #12]
 8011f6e:	18e3      	adds	r3, r4, r3
 8011f70:	9307      	str	r3, [sp, #28]
 8011f72:	9b07      	ldr	r3, [sp, #28]
 8011f74:	4283      	cmp	r3, r0
 8011f76:	d942      	bls.n	8011ffe <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0x15a>
 8011f78:	466a      	mov	r2, sp
 8011f7a:	2607      	movs	r6, #7
 8011f7c:	9b01      	ldr	r3, [sp, #4]
 8011f7e:	8805      	ldrh	r5, [r0, #0]
 8011f80:	881b      	ldrh	r3, [r3, #0]
 8011f82:	8917      	ldrh	r7, [r2, #8]
 8011f84:	8b14      	ldrh	r4, [r2, #24]
 8011f86:	1219      	asrs	r1, r3, #8
 8011f88:	122a      	asrs	r2, r5, #8
 8011f8a:	43b1      	bics	r1, r6
 8011f8c:	43b2      	bics	r2, r6
 8011f8e:	4666      	mov	r6, ip
 8011f90:	4362      	muls	r2, r4
 8011f92:	4379      	muls	r1, r7
 8011f94:	1889      	adds	r1, r1, r2
 8011f96:	10da      	asrs	r2, r3, #3
 8011f98:	43b2      	bics	r2, r6
 8011f9a:	b2d2      	uxtb	r2, r2
 8011f9c:	437a      	muls	r2, r7
 8011f9e:	9208      	str	r2, [sp, #32]
 8011fa0:	4662      	mov	r2, ip
 8011fa2:	10ee      	asrs	r6, r5, #3
 8011fa4:	4396      	bics	r6, r2
 8011fa6:	00db      	lsls	r3, r3, #3
 8011fa8:	00ed      	lsls	r5, r5, #3
 8011faa:	b2f6      	uxtb	r6, r6
 8011fac:	b2db      	uxtb	r3, r3
 8011fae:	b2ed      	uxtb	r5, r5
 8011fb0:	4366      	muls	r6, r4
 8011fb2:	437b      	muls	r3, r7
 8011fb4:	436c      	muls	r4, r5
 8011fb6:	b289      	uxth	r1, r1
 8011fb8:	191b      	adds	r3, r3, r4
 8011fba:	1c4c      	adds	r4, r1, #1
 8011fbc:	1209      	asrs	r1, r1, #8
 8011fbe:	1861      	adds	r1, r4, r1
 8011fc0:	24ff      	movs	r4, #255	; 0xff
 8011fc2:	9a08      	ldr	r2, [sp, #32]
 8011fc4:	b29b      	uxth	r3, r3
 8011fc6:	1992      	adds	r2, r2, r6
 8011fc8:	0224      	lsls	r4, r4, #8
 8011fca:	1c5e      	adds	r6, r3, #1
 8011fcc:	121b      	asrs	r3, r3, #8
 8011fce:	4021      	ands	r1, r4
 8011fd0:	18f3      	adds	r3, r6, r3
 8011fd2:	0ac9      	lsrs	r1, r1, #11
 8011fd4:	041b      	lsls	r3, r3, #16
 8011fd6:	b292      	uxth	r2, r2
 8011fd8:	0edb      	lsrs	r3, r3, #27
 8011fda:	02c9      	lsls	r1, r1, #11
 8011fdc:	4319      	orrs	r1, r3
 8011fde:	1c53      	adds	r3, r2, #1
 8011fe0:	1212      	asrs	r2, r2, #8
 8011fe2:	189a      	adds	r2, r3, r2
 8011fe4:	23ff      	movs	r3, #255	; 0xff
 8011fe6:	0952      	lsrs	r2, r2, #5
 8011fe8:	00db      	lsls	r3, r3, #3
 8011fea:	401a      	ands	r2, r3
 8011fec:	3b18      	subs	r3, #24
 8011fee:	401a      	ands	r2, r3
 8011ff0:	9b01      	ldr	r3, [sp, #4]
 8011ff2:	4311      	orrs	r1, r2
 8011ff4:	3302      	adds	r3, #2
 8011ff6:	8001      	strh	r1, [r0, #0]
 8011ff8:	9301      	str	r3, [sp, #4]
 8011ffa:	3002      	adds	r0, #2
 8011ffc:	e7b9      	b.n	8011f72 <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0xce>
 8011ffe:	4b63      	ldr	r3, [pc, #396]	; (801218c <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0x2e8>)
 8012000:	881c      	ldrh	r4, [r3, #0]
 8012002:	9b05      	ldr	r3, [sp, #20]
 8012004:	1ae4      	subs	r4, r4, r3
 8012006:	ab0a      	add	r3, sp, #40	; 0x28
 8012008:	2204      	movs	r2, #4
 801200a:	5e9b      	ldrsh	r3, [r3, r2]
 801200c:	9a05      	ldr	r2, [sp, #20]
 801200e:	0064      	lsls	r4, r4, #1
 8012010:	1a9b      	subs	r3, r3, r2
 8012012:	9a01      	ldr	r2, [sp, #4]
 8012014:	005b      	lsls	r3, r3, #1
 8012016:	18d3      	adds	r3, r2, r3
 8012018:	1904      	adds	r4, r0, r4
 801201a:	9301      	str	r3, [sp, #4]
 801201c:	e7a1      	b.n	8011f62 <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0xbe>
 801201e:	4b5a      	ldr	r3, [pc, #360]	; (8012188 <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0x2e4>)
 8012020:	9a04      	ldr	r2, [sp, #16]
 8012022:	6818      	ldr	r0, [r3, #0]
 8012024:	6803      	ldr	r3, [r0, #0]
 8012026:	42a2      	cmp	r2, r4
 8012028:	d800      	bhi.n	801202c <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801202a:	e0a6      	b.n	801217a <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0x2d6>
 801202c:	9a01      	ldr	r2, [sp, #4]
 801202e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8012030:	0021      	movs	r1, r4
 8012032:	9b03      	ldr	r3, [sp, #12]
 8012034:	47a8      	blx	r5
 8012036:	4b55      	ldr	r3, [pc, #340]	; (801218c <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0x2e8>)
 8012038:	881b      	ldrh	r3, [r3, #0]
 801203a:	005b      	lsls	r3, r3, #1
 801203c:	18e4      	adds	r4, r4, r3
 801203e:	ab0a      	add	r3, sp, #40	; 0x28
 8012040:	2204      	movs	r2, #4
 8012042:	5e9b      	ldrsh	r3, [r3, r2]
 8012044:	9a01      	ldr	r2, [sp, #4]
 8012046:	005b      	lsls	r3, r3, #1
 8012048:	18d3      	adds	r3, r2, r3
 801204a:	9301      	str	r3, [sp, #4]
 801204c:	e7e7      	b.n	801201e <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0x17a>
 801204e:	2bff      	cmp	r3, #255	; 0xff
 8012050:	d100      	bne.n	8012054 <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0x1b0>
 8012052:	e07c      	b.n	801214e <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0x2aa>
 8012054:	23ff      	movs	r3, #255	; 0xff
 8012056:	9a02      	ldr	r2, [sp, #8]
 8012058:	68f0      	ldr	r0, [r6, #12]
 801205a:	1a9b      	subs	r3, r3, r2
 801205c:	9308      	str	r3, [sp, #32]
 801205e:	6803      	ldr	r3, [r0, #0]
 8012060:	9a03      	ldr	r2, [sp, #12]
 8012062:	691b      	ldr	r3, [r3, #16]
 8012064:	9901      	ldr	r1, [sp, #4]
 8012066:	4798      	blx	r3
 8012068:	9b04      	ldr	r3, [sp, #16]
 801206a:	42a3      	cmp	r3, r4
 801206c:	d800      	bhi.n	8012070 <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>
 801206e:	e084      	b.n	801217a <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0x2d6>
 8012070:	68f0      	ldr	r0, [r6, #12]
 8012072:	6803      	ldr	r3, [r0, #0]
 8012074:	695b      	ldr	r3, [r3, #20]
 8012076:	4798      	blx	r3
 8012078:	4b44      	ldr	r3, [pc, #272]	; (801218c <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0x2e8>)
 801207a:	9a04      	ldr	r2, [sp, #16]
 801207c:	881b      	ldrh	r3, [r3, #0]
 801207e:	9006      	str	r0, [sp, #24]
 8012080:	005b      	lsls	r3, r3, #1
 8012082:	18e3      	adds	r3, r4, r3
 8012084:	429a      	cmp	r2, r3
 8012086:	d90c      	bls.n	80120a2 <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0x1fe>
 8012088:	ab0a      	add	r3, sp, #40	; 0x28
 801208a:	2204      	movs	r2, #4
 801208c:	5e9b      	ldrsh	r3, [r3, r2]
 801208e:	9a01      	ldr	r2, [sp, #4]
 8012090:	005b      	lsls	r3, r3, #1
 8012092:	68f0      	ldr	r0, [r6, #12]
 8012094:	18d3      	adds	r3, r2, r3
 8012096:	9301      	str	r3, [sp, #4]
 8012098:	6803      	ldr	r3, [r0, #0]
 801209a:	9a03      	ldr	r2, [sp, #12]
 801209c:	691b      	ldr	r3, [r3, #16]
 801209e:	9901      	ldr	r1, [sp, #4]
 80120a0:	4798      	blx	r3
 80120a2:	0020      	movs	r0, r4
 80120a4:	9b03      	ldr	r3, [sp, #12]
 80120a6:	18e3      	adds	r3, r4, r3
 80120a8:	9309      	str	r3, [sp, #36]	; 0x24
 80120aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120ac:	4283      	cmp	r3, r0
 80120ae:	d947      	bls.n	8012140 <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0x29c>
 80120b0:	8803      	ldrh	r3, [r0, #0]
 80120b2:	466a      	mov	r2, sp
 80120b4:	469c      	mov	ip, r3
 80120b6:	4664      	mov	r4, ip
 80120b8:	2707      	movs	r7, #7
 80120ba:	9b06      	ldr	r3, [sp, #24]
 80120bc:	8911      	ldrh	r1, [r2, #8]
 80120be:	881b      	ldrh	r3, [r3, #0]
 80120c0:	8c12      	ldrh	r2, [r2, #32]
 80120c2:	121d      	asrs	r5, r3, #8
 80120c4:	1224      	asrs	r4, r4, #8
 80120c6:	43bd      	bics	r5, r7
 80120c8:	43bc      	bics	r4, r7
 80120ca:	4354      	muls	r4, r2
 80120cc:	434d      	muls	r5, r1
 80120ce:	192d      	adds	r5, r5, r4
 80120d0:	b2ac      	uxth	r4, r5
 80120d2:	4665      	mov	r5, ip
 80120d4:	9407      	str	r4, [sp, #28]
 80120d6:	3f04      	subs	r7, #4
 80120d8:	10dc      	asrs	r4, r3, #3
 80120da:	43bc      	bics	r4, r7
 80120dc:	10ef      	asrs	r7, r5, #3
 80120de:	2503      	movs	r5, #3
 80120e0:	40ab      	lsls	r3, r5
 80120e2:	b2e4      	uxtb	r4, r4
 80120e4:	b2db      	uxtb	r3, r3
 80120e6:	434c      	muls	r4, r1
 80120e8:	434b      	muls	r3, r1
 80120ea:	4661      	mov	r1, ip
 80120ec:	40a9      	lsls	r1, r5
 80120ee:	43af      	bics	r7, r5
 80120f0:	b2c9      	uxtb	r1, r1
 80120f2:	b2ff      	uxtb	r7, r7
 80120f4:	4357      	muls	r7, r2
 80120f6:	434a      	muls	r2, r1
 80120f8:	9907      	ldr	r1, [sp, #28]
 80120fa:	189b      	adds	r3, r3, r2
 80120fc:	9a07      	ldr	r2, [sp, #28]
 80120fe:	120d      	asrs	r5, r1, #8
 8012100:	3201      	adds	r2, #1
 8012102:	1955      	adds	r5, r2, r5
 8012104:	22ff      	movs	r2, #255	; 0xff
 8012106:	b29b      	uxth	r3, r3
 8012108:	19e4      	adds	r4, r4, r7
 801210a:	0212      	lsls	r2, r2, #8
 801210c:	1c5f      	adds	r7, r3, #1
 801210e:	121b      	asrs	r3, r3, #8
 8012110:	4015      	ands	r5, r2
 8012112:	18fb      	adds	r3, r7, r3
 8012114:	0aed      	lsrs	r5, r5, #11
 8012116:	041b      	lsls	r3, r3, #16
 8012118:	b2a4      	uxth	r4, r4
 801211a:	0edb      	lsrs	r3, r3, #27
 801211c:	02ed      	lsls	r5, r5, #11
 801211e:	431d      	orrs	r5, r3
 8012120:	1c63      	adds	r3, r4, #1
 8012122:	1224      	asrs	r4, r4, #8
 8012124:	191c      	adds	r4, r3, r4
 8012126:	23ff      	movs	r3, #255	; 0xff
 8012128:	0964      	lsrs	r4, r4, #5
 801212a:	00db      	lsls	r3, r3, #3
 801212c:	401c      	ands	r4, r3
 801212e:	3b18      	subs	r3, #24
 8012130:	401c      	ands	r4, r3
 8012132:	9b06      	ldr	r3, [sp, #24]
 8012134:	4325      	orrs	r5, r4
 8012136:	3302      	adds	r3, #2
 8012138:	8005      	strh	r5, [r0, #0]
 801213a:	9306      	str	r3, [sp, #24]
 801213c:	3002      	adds	r0, #2
 801213e:	e7b4      	b.n	80120aa <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0x206>
 8012140:	4b12      	ldr	r3, [pc, #72]	; (801218c <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0x2e8>)
 8012142:	881c      	ldrh	r4, [r3, #0]
 8012144:	9b05      	ldr	r3, [sp, #20]
 8012146:	1ae4      	subs	r4, r4, r3
 8012148:	0064      	lsls	r4, r4, #1
 801214a:	1904      	adds	r4, r0, r4
 801214c:	e78c      	b.n	8012068 <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0x1c4>
 801214e:	9b04      	ldr	r3, [sp, #16]
 8012150:	42a3      	cmp	r3, r4
 8012152:	d912      	bls.n	801217a <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0x2d6>
 8012154:	68f0      	ldr	r0, [r6, #12]
 8012156:	0022      	movs	r2, r4
 8012158:	6803      	ldr	r3, [r0, #0]
 801215a:	9901      	ldr	r1, [sp, #4]
 801215c:	68dd      	ldr	r5, [r3, #12]
 801215e:	9b03      	ldr	r3, [sp, #12]
 8012160:	47a8      	blx	r5
 8012162:	4b0a      	ldr	r3, [pc, #40]	; (801218c <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0x2e8>)
 8012164:	881b      	ldrh	r3, [r3, #0]
 8012166:	005b      	lsls	r3, r3, #1
 8012168:	18e4      	adds	r4, r4, r3
 801216a:	ab0a      	add	r3, sp, #40	; 0x28
 801216c:	2204      	movs	r2, #4
 801216e:	5e9b      	ldrsh	r3, [r3, r2]
 8012170:	9a01      	ldr	r2, [sp, #4]
 8012172:	005b      	lsls	r3, r3, #1
 8012174:	18d3      	adds	r3, r2, r3
 8012176:	9301      	str	r3, [sp, #4]
 8012178:	e7e9      	b.n	801214e <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0x2aa>
 801217a:	4b03      	ldr	r3, [pc, #12]	; (8012188 <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKtRKNS_4RectES5_hb+0x2e4>)
 801217c:	6818      	ldr	r0, [r3, #0]
 801217e:	6803      	ldr	r3, [r0, #0]
 8012180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012182:	4798      	blx	r3
 8012184:	b00f      	add	sp, #60	; 0x3c
 8012186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012188:	200026c8 	.word	0x200026c8
 801218c:	200026c2 	.word	0x200026c2

08012190 <_ZN8touchgfx19LCD16bppSerialFlash29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8012190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012192:	001d      	movs	r5, r3
 8012194:	b091      	sub	sp, #68	; 0x44
 8012196:	ab16      	add	r3, sp, #88	; 0x58
 8012198:	0014      	movs	r4, r2
 801219a:	cb04      	ldmia	r3!, {r2}
 801219c:	9000      	str	r0, [sp, #0]
 801219e:	9209      	str	r2, [sp, #36]	; 0x24
 80121a0:	2200      	movs	r2, #0
 80121a2:	5e9b      	ldrsh	r3, [r3, r2]
 80121a4:	000e      	movs	r6, r1
 80121a6:	9301      	str	r3, [sp, #4]
 80121a8:	ab18      	add	r3, sp, #96	; 0x60
 80121aa:	2200      	movs	r2, #0
 80121ac:	5e9b      	ldrsh	r3, [r3, r2]
 80121ae:	9302      	str	r3, [sp, #8]
 80121b0:	2300      	movs	r3, #0
 80121b2:	5eea      	ldrsh	r2, [r5, r3]
 80121b4:	2102      	movs	r1, #2
 80121b6:	5e6b      	ldrsh	r3, [r5, r1]
 80121b8:	a90a      	add	r1, sp, #40	; 0x28
 80121ba:	804b      	strh	r3, [r1, #2]
 80121bc:	000b      	movs	r3, r1
 80121be:	800a      	strh	r2, [r1, #0]
 80121c0:	9a01      	ldr	r2, [sp, #4]
 80121c2:	0018      	movs	r0, r3
 80121c4:	808a      	strh	r2, [r1, #4]
 80121c6:	9a02      	ldr	r2, [sp, #8]
 80121c8:	80ca      	strh	r2, [r1, #6]
 80121ca:	0029      	movs	r1, r5
 80121cc:	f7fa f9d8 	bl	800c580 <_ZN8touchgfx4RectaNERKS0_>
 80121d0:	0021      	movs	r1, r4
 80121d2:	a80a      	add	r0, sp, #40	; 0x28
 80121d4:	f7fa f9d4 	bl	800c580 <_ZN8touchgfx4RectaNERKS0_>
 80121d8:	4b6d      	ldr	r3, [pc, #436]	; (8012390 <_ZN8touchgfx19LCD16bppSerialFlash29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x200>)
 80121da:	ac0a      	add	r4, sp, #40	; 0x28
 80121dc:	881a      	ldrh	r2, [r3, #0]
 80121de:	4b6d      	ldr	r3, [pc, #436]	; (8012394 <_ZN8touchgfx19LCD16bppSerialFlash29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x204>)
 80121e0:	2700      	movs	r7, #0
 80121e2:	5fe7      	ldrsh	r7, [r4, r7]
 80121e4:	881b      	ldrh	r3, [r3, #0]
 80121e6:	b210      	sxth	r0, r2
 80121e8:	b219      	sxth	r1, r3
 80121ea:	468c      	mov	ip, r1
 80121ec:	2f00      	cmp	r7, #0
 80121ee:	da06      	bge.n	80121fe <_ZN8touchgfx19LCD16bppSerialFlash29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x6e>
 80121f0:	ac0a      	add	r4, sp, #40	; 0x28
 80121f2:	88a4      	ldrh	r4, [r4, #4]
 80121f4:	19e4      	adds	r4, r4, r7
 80121f6:	af0a      	add	r7, sp, #40	; 0x28
 80121f8:	80bc      	strh	r4, [r7, #4]
 80121fa:	2400      	movs	r4, #0
 80121fc:	803c      	strh	r4, [r7, #0]
 80121fe:	ac0a      	add	r4, sp, #40	; 0x28
 8012200:	2700      	movs	r7, #0
 8012202:	5fe7      	ldrsh	r7, [r4, r7]
 8012204:	ac0a      	add	r4, sp, #40	; 0x28
 8012206:	2104      	movs	r1, #4
 8012208:	5e64      	ldrsh	r4, [r4, r1]
 801220a:	1bc0      	subs	r0, r0, r7
 801220c:	4284      	cmp	r4, r0
 801220e:	dd02      	ble.n	8012216 <_ZN8touchgfx19LCD16bppSerialFlash29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x86>
 8012210:	1bd0      	subs	r0, r2, r7
 8012212:	ac0a      	add	r4, sp, #40	; 0x28
 8012214:	80a0      	strh	r0, [r4, #4]
 8012216:	a80a      	add	r0, sp, #40	; 0x28
 8012218:	2102      	movs	r1, #2
 801221a:	5e44      	ldrsh	r4, [r0, r1]
 801221c:	2c00      	cmp	r4, #0
 801221e:	da05      	bge.n	801222c <_ZN8touchgfx19LCD16bppSerialFlash29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x9c>
 8012220:	88c0      	ldrh	r0, [r0, #6]
 8012222:	1900      	adds	r0, r0, r4
 8012224:	ac0a      	add	r4, sp, #40	; 0x28
 8012226:	80e0      	strh	r0, [r4, #6]
 8012228:	2000      	movs	r0, #0
 801222a:	8060      	strh	r0, [r4, #2]
 801222c:	a80a      	add	r0, sp, #40	; 0x28
 801222e:	2102      	movs	r1, #2
 8012230:	5e44      	ldrsh	r4, [r0, r1]
 8012232:	2106      	movs	r1, #6
 8012234:	5e40      	ldrsh	r0, [r0, r1]
 8012236:	4661      	mov	r1, ip
 8012238:	1b09      	subs	r1, r1, r4
 801223a:	4288      	cmp	r0, r1
 801223c:	dd02      	ble.n	8012244 <_ZN8touchgfx19LCD16bppSerialFlash29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb4>
 801223e:	1b19      	subs	r1, r3, r4
 8012240:	a80a      	add	r0, sp, #40	; 0x28
 8012242:	80c1      	strh	r1, [r0, #6]
 8012244:	4954      	ldr	r1, [pc, #336]	; (8012398 <_ZN8touchgfx19LCD16bppSerialFlash29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x208>)
 8012246:	7809      	ldrb	r1, [r1, #0]
 8012248:	2900      	cmp	r1, #0
 801224a:	d115      	bne.n	8012278 <_ZN8touchgfx19LCD16bppSerialFlash29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe8>
 801224c:	ab0a      	add	r3, sp, #40	; 0x28
 801224e:	2104      	movs	r1, #4
 8012250:	5e5b      	ldrsh	r3, [r3, r1]
 8012252:	1a9a      	subs	r2, r3, r2
 8012254:	4253      	negs	r3, r2
 8012256:	415a      	adcs	r2, r3
 8012258:	b2d3      	uxtb	r3, r2
 801225a:	a80a      	add	r0, sp, #40	; 0x28
 801225c:	9306      	str	r3, [sp, #24]
 801225e:	f7fa f9df 	bl	800c620 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012262:	2800      	cmp	r0, #0
 8012264:	d010      	beq.n	8012288 <_ZN8touchgfx19LCD16bppSerialFlash29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xf8>
 8012266:	2300      	movs	r3, #0
 8012268:	9a00      	ldr	r2, [sp, #0]
 801226a:	8013      	strh	r3, [r2, #0]
 801226c:	8053      	strh	r3, [r2, #2]
 801226e:	8093      	strh	r3, [r2, #4]
 8012270:	80d3      	strh	r3, [r2, #6]
 8012272:	9800      	ldr	r0, [sp, #0]
 8012274:	b011      	add	sp, #68	; 0x44
 8012276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012278:	aa0a      	add	r2, sp, #40	; 0x28
 801227a:	2106      	movs	r1, #6
 801227c:	5e52      	ldrsh	r2, [r2, r1]
 801227e:	1ad3      	subs	r3, r2, r3
 8012280:	425a      	negs	r2, r3
 8012282:	4153      	adcs	r3, r2
 8012284:	b2db      	uxtb	r3, r3
 8012286:	e7e8      	b.n	801225a <_ZN8touchgfx19LCD16bppSerialFlash29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xca>
 8012288:	ab0a      	add	r3, sp, #40	; 0x28
 801228a:	2204      	movs	r2, #4
 801228c:	5e9b      	ldrsh	r3, [r3, r2]
 801228e:	9307      	str	r3, [sp, #28]
 8012290:	ab0a      	add	r3, sp, #40	; 0x28
 8012292:	2206      	movs	r2, #6
 8012294:	5e9b      	ldrsh	r3, [r3, r2]
 8012296:	9305      	str	r3, [sp, #20]
 8012298:	882b      	ldrh	r3, [r5, #0]
 801229a:	1aff      	subs	r7, r7, r3
 801229c:	b23b      	sxth	r3, r7
 801229e:	9303      	str	r3, [sp, #12]
 80122a0:	886b      	ldrh	r3, [r5, #2]
 80122a2:	ad0c      	add	r5, sp, #48	; 0x30
 80122a4:	1ae4      	subs	r4, r4, r3
 80122a6:	b223      	sxth	r3, r4
 80122a8:	9304      	str	r3, [sp, #16]
 80122aa:	9b03      	ldr	r3, [sp, #12]
 80122ac:	ac0e      	add	r4, sp, #56	; 0x38
 80122ae:	802b      	strh	r3, [r5, #0]
 80122b0:	9b04      	ldr	r3, [sp, #16]
 80122b2:	0021      	movs	r1, r4
 80122b4:	806b      	strh	r3, [r5, #2]
 80122b6:	9b07      	ldr	r3, [sp, #28]
 80122b8:	900e      	str	r0, [sp, #56]	; 0x38
 80122ba:	80ab      	strh	r3, [r5, #4]
 80122bc:	9b05      	ldr	r3, [sp, #20]
 80122be:	0028      	movs	r0, r5
 80122c0:	80eb      	strh	r3, [r5, #6]
 80122c2:	9b01      	ldr	r3, [sp, #4]
 80122c4:	80a3      	strh	r3, [r4, #4]
 80122c6:	9b02      	ldr	r3, [sp, #8]
 80122c8:	80e3      	strh	r3, [r4, #6]
 80122ca:	f7fc fbc5 	bl	800ea58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80122ce:	a80a      	add	r0, sp, #40	; 0x28
 80122d0:	f7fc fb9a 	bl	800ea08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80122d4:	0020      	movs	r0, r4
 80122d6:	f7fc fb97 	bl	800ea08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80122da:	2204      	movs	r2, #4
 80122dc:	5ea3      	ldrsh	r3, [r4, r2]
 80122de:	0030      	movs	r0, r6
 80122e0:	9301      	str	r3, [sp, #4]
 80122e2:	4b2e      	ldr	r3, [pc, #184]	; (801239c <_ZN8touchgfx19LCD16bppSerialFlash29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x20c>)
 80122e4:	881b      	ldrh	r3, [r3, #0]
 80122e6:	9308      	str	r3, [sp, #32]
 80122e8:	6833      	ldr	r3, [r6, #0]
 80122ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122ec:	4798      	blx	r3
 80122ee:	9002      	str	r0, [sp, #8]
 80122f0:	2302      	movs	r3, #2
 80122f2:	5eec      	ldrsh	r4, [r5, r3]
 80122f4:	9b01      	ldr	r3, [sp, #4]
 80122f6:	4f2a      	ldr	r7, [pc, #168]	; (80123a0 <_ZN8touchgfx19LCD16bppSerialFlash29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x210>)
 80122f8:	435c      	muls	r4, r3
 80122fa:	2200      	movs	r2, #0
 80122fc:	5eab      	ldrsh	r3, [r5, r2]
 80122fe:	6838      	ldr	r0, [r7, #0]
 8012300:	18e4      	adds	r4, r4, r3
 8012302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012304:	0064      	lsls	r4, r4, #1
 8012306:	191c      	adds	r4, r3, r4
 8012308:	6803      	ldr	r3, [r0, #0]
 801230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801230c:	4798      	blx	r3
 801230e:	ab0a      	add	r3, sp, #40	; 0x28
 8012310:	2600      	movs	r6, #0
 8012312:	5f9e      	ldrsh	r6, [r3, r6]
 8012314:	ab0a      	add	r3, sp, #40	; 0x28
 8012316:	2202      	movs	r2, #2
 8012318:	5e9b      	ldrsh	r3, [r3, r2]
 801231a:	9a02      	ldr	r2, [sp, #8]
 801231c:	0076      	lsls	r6, r6, #1
 801231e:	4353      	muls	r3, r2
 8012320:	18f6      	adds	r6, r6, r3
 8012322:	9b06      	ldr	r3, [sp, #24]
 8012324:	1986      	adds	r6, r0, r6
 8012326:	2b00      	cmp	r3, #0
 8012328:	d018      	beq.n	801235c <_ZN8touchgfx19LCD16bppSerialFlash29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1cc>
 801232a:	9b01      	ldr	r3, [sp, #4]
 801232c:	9a08      	ldr	r2, [sp, #32]
 801232e:	4293      	cmp	r3, r2
 8012330:	d114      	bne.n	801235c <_ZN8touchgfx19LCD16bppSerialFlash29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1cc>
 8012332:	2206      	movs	r2, #6
 8012334:	5eab      	ldrsh	r3, [r5, r2]
 8012336:	9a02      	ldr	r2, [sp, #8]
 8012338:	6838      	ldr	r0, [r7, #0]
 801233a:	435a      	muls	r2, r3
 801233c:	0013      	movs	r3, r2
 801233e:	6802      	ldr	r2, [r0, #0]
 8012340:	0021      	movs	r1, r4
 8012342:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8012344:	0032      	movs	r2, r6
 8012346:	47a8      	blx	r5
 8012348:	9b00      	ldr	r3, [sp, #0]
 801234a:	9a03      	ldr	r2, [sp, #12]
 801234c:	801a      	strh	r2, [r3, #0]
 801234e:	9a04      	ldr	r2, [sp, #16]
 8012350:	805a      	strh	r2, [r3, #2]
 8012352:	9a07      	ldr	r2, [sp, #28]
 8012354:	809a      	strh	r2, [r3, #4]
 8012356:	9a05      	ldr	r2, [sp, #20]
 8012358:	80da      	strh	r2, [r3, #6]
 801235a:	e78a      	b.n	8012272 <_ZN8touchgfx19LCD16bppSerialFlash29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801235c:	2206      	movs	r2, #6
 801235e:	5eab      	ldrsh	r3, [r5, r2]
 8012360:	9a01      	ldr	r2, [sp, #4]
 8012362:	4353      	muls	r3, r2
 8012364:	005b      	lsls	r3, r3, #1
 8012366:	18e3      	adds	r3, r4, r3
 8012368:	9306      	str	r3, [sp, #24]
 801236a:	0055      	lsls	r5, r2, #1
 801236c:	9b06      	ldr	r3, [sp, #24]
 801236e:	429c      	cmp	r4, r3
 8012370:	d2ea      	bcs.n	8012348 <_ZN8touchgfx19LCD16bppSerialFlash29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8012372:	4b0b      	ldr	r3, [pc, #44]	; (80123a0 <_ZN8touchgfx19LCD16bppSerialFlash29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x210>)
 8012374:	0021      	movs	r1, r4
 8012376:	6818      	ldr	r0, [r3, #0]
 8012378:	ab0c      	add	r3, sp, #48	; 0x30
 801237a:	2204      	movs	r2, #4
 801237c:	5e9b      	ldrsh	r3, [r3, r2]
 801237e:	6802      	ldr	r2, [r0, #0]
 8012380:	005b      	lsls	r3, r3, #1
 8012382:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8012384:	0032      	movs	r2, r6
 8012386:	47b8      	blx	r7
 8012388:	9b02      	ldr	r3, [sp, #8]
 801238a:	1964      	adds	r4, r4, r5
 801238c:	18f6      	adds	r6, r6, r3
 801238e:	e7ed      	b.n	801236c <_ZN8touchgfx19LCD16bppSerialFlash29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1dc>
 8012390:	200026bc 	.word	0x200026bc
 8012394:	200026be 	.word	0x200026be
 8012398:	200026c0 	.word	0x200026c0
 801239c:	200026c2 	.word	0x200026c2
 80123a0:	200026c8 	.word	0x200026c8

080123a4 <_ZN8touchgfx19LCD16bppSerialFlash8fillRectERKNS_4RectENS_9colortypeEh>:
 80123a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123a6:	0005      	movs	r5, r0
 80123a8:	b085      	sub	sp, #20
 80123aa:	000c      	movs	r4, r1
 80123ac:	0017      	movs	r7, r2
 80123ae:	1e1e      	subs	r6, r3, #0
 80123b0:	d01f      	beq.n	80123f2 <_ZN8touchgfx19LCD16bppSerialFlash8fillRectERKNS_4RectENS_9colortypeEh+0x4e>
 80123b2:	0008      	movs	r0, r1
 80123b4:	f7fa f934 	bl	800c620 <_ZNK8touchgfx4Rect7isEmptyEv>
 80123b8:	2800      	cmp	r0, #0
 80123ba:	d11a      	bne.n	80123f2 <_ZN8touchgfx19LCD16bppSerialFlash8fillRectERKNS_4RectENS_9colortypeEh+0x4e>
 80123bc:	0021      	movs	r1, r4
 80123be:	2208      	movs	r2, #8
 80123c0:	a802      	add	r0, sp, #8
 80123c2:	f001 fff4 	bl	80143ae <memcpy>
 80123c6:	a802      	add	r0, sp, #8
 80123c8:	f7fc fb1e 	bl	800ea08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80123cc:	4c0a      	ldr	r4, [pc, #40]	; (80123f8 <_ZN8touchgfx19LCD16bppSerialFlash8fillRectERKNS_4RectENS_9colortypeEh+0x54>)
 80123ce:	6820      	ldr	r0, [r4, #0]
 80123d0:	6803      	ldr	r3, [r0, #0]
 80123d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123d4:	4798      	blx	r3
 80123d6:	4b09      	ldr	r3, [pc, #36]	; (80123fc <_ZN8touchgfx19LCD16bppSerialFlash8fillRectERKNS_4RectENS_9colortypeEh+0x58>)
 80123d8:	0001      	movs	r1, r0
 80123da:	881a      	ldrh	r2, [r3, #0]
 80123dc:	682b      	ldr	r3, [r5, #0]
 80123de:	9601      	str	r6, [sp, #4]
 80123e0:	9700      	str	r7, [sp, #0]
 80123e2:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80123e4:	0028      	movs	r0, r5
 80123e6:	ab02      	add	r3, sp, #8
 80123e8:	47b0      	blx	r6
 80123ea:	6820      	ldr	r0, [r4, #0]
 80123ec:	6803      	ldr	r3, [r0, #0]
 80123ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123f0:	4798      	blx	r3
 80123f2:	b005      	add	sp, #20
 80123f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123f6:	46c0      	nop			; (mov r8, r8)
 80123f8:	200026c8 	.word	0x200026c8
 80123fc:	200026c2 	.word	0x200026c2

08012400 <_ZN8touchgfx19LCD16bppSerialFlash10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8012400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012402:	b087      	sub	sp, #28
 8012404:	001f      	movs	r7, r3
 8012406:	ab0c      	add	r3, sp, #48	; 0x30
 8012408:	cb10      	ldmia	r3!, {r4}
 801240a:	9100      	str	r1, [sp, #0]
 801240c:	781e      	ldrb	r6, [r3, #0]
 801240e:	0015      	movs	r5, r2
 8012410:	2e00      	cmp	r6, #0
 8012412:	d100      	bne.n	8012416 <_ZN8touchgfx19LCD16bppSerialFlash10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16>
 8012414:	e0ba      	b.n	801258c <_ZN8touchgfx19LCD16bppSerialFlash10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>
 8012416:	0038      	movs	r0, r7
 8012418:	f7fa f902 	bl	800c620 <_ZNK8touchgfx4Rect7isEmptyEv>
 801241c:	2800      	cmp	r0, #0
 801241e:	d000      	beq.n	8012422 <_ZN8touchgfx19LCD16bppSerialFlash10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x22>
 8012420:	e0b4      	b.n	801258c <_ZN8touchgfx19LCD16bppSerialFlash10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>
 8012422:	2304      	movs	r3, #4
 8012424:	5ef9      	ldrsh	r1, [r7, r3]
 8012426:	2002      	movs	r0, #2
 8012428:	5e3b      	ldrsh	r3, [r7, r0]
 801242a:	000a      	movs	r2, r1
 801242c:	436b      	muls	r3, r5
 801242e:	469c      	mov	ip, r3
 8012430:	2300      	movs	r3, #0
 8012432:	5ef8      	ldrsh	r0, [r7, r3]
 8012434:	0003      	movs	r3, r0
 8012436:	9800      	ldr	r0, [sp, #0]
 8012438:	4463      	add	r3, ip
 801243a:	005b      	lsls	r3, r3, #1
 801243c:	18c3      	adds	r3, r0, r3
 801243e:	1a68      	subs	r0, r5, r1
 8012440:	4684      	mov	ip, r0
 8012442:	2006      	movs	r0, #6
 8012444:	5e38      	ldrsh	r0, [r7, r0]
 8012446:	0a27      	lsrs	r7, r4, #8
 8012448:	4368      	muls	r0, r5
 801244a:	0040      	lsls	r0, r0, #1
 801244c:	1818      	adds	r0, r3, r0
 801244e:	2eff      	cmp	r6, #255	; 0xff
 8012450:	d059      	beq.n	8012506 <_ZN8touchgfx19LCD16bppSerialFlash10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 8012452:	22ff      	movs	r2, #255	; 0xff
 8012454:	1b92      	subs	r2, r2, r6
 8012456:	9204      	str	r2, [sp, #16]
 8012458:	004a      	lsls	r2, r1, #1
 801245a:	9200      	str	r2, [sp, #0]
 801245c:	0c22      	lsrs	r2, r4, #16
 801245e:	b2b6      	uxth	r6, r6
 8012460:	b2d2      	uxtb	r2, r2
 8012462:	4372      	muls	r2, r6
 8012464:	9201      	str	r2, [sp, #4]
 8012466:	4662      	mov	r2, ip
 8012468:	b2e4      	uxtb	r4, r4
 801246a:	b2ff      	uxtb	r7, r7
 801246c:	4374      	muls	r4, r6
 801246e:	4377      	muls	r7, r6
 8012470:	0052      	lsls	r2, r2, #1
 8012472:	9402      	str	r4, [sp, #8]
 8012474:	9203      	str	r2, [sp, #12]
 8012476:	4283      	cmp	r3, r0
 8012478:	d300      	bcc.n	801247c <_ZN8touchgfx19LCD16bppSerialFlash10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x7c>
 801247a:	e087      	b.n	801258c <_ZN8touchgfx19LCD16bppSerialFlash10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>
 801247c:	9a00      	ldr	r2, [sp, #0]
 801247e:	189a      	adds	r2, r3, r2
 8012480:	9205      	str	r2, [sp, #20]
 8012482:	9a05      	ldr	r2, [sp, #20]
 8012484:	4293      	cmp	r3, r2
 8012486:	d23b      	bcs.n	8012500 <_ZN8touchgfx19LCD16bppSerialFlash10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 8012488:	2107      	movs	r1, #7
 801248a:	2503      	movs	r5, #3
 801248c:	881c      	ldrh	r4, [r3, #0]
 801248e:	1222      	asrs	r2, r4, #8
 8012490:	438a      	bics	r2, r1
 8012492:	10e1      	asrs	r1, r4, #3
 8012494:	43a9      	bics	r1, r5
 8012496:	b2c9      	uxtb	r1, r1
 8012498:	468c      	mov	ip, r1
 801249a:	4669      	mov	r1, sp
 801249c:	40ac      	lsls	r4, r5
 801249e:	8a0d      	ldrh	r5, [r1, #16]
 80124a0:	1151      	asrs	r1, r2, #5
 80124a2:	4311      	orrs	r1, r2
 80124a4:	4369      	muls	r1, r5
 80124a6:	9a01      	ldr	r2, [sp, #4]
 80124a8:	4666      	mov	r6, ip
 80124aa:	1851      	adds	r1, r2, r1
 80124ac:	4662      	mov	r2, ip
 80124ae:	b2e4      	uxtb	r4, r4
 80124b0:	1192      	asrs	r2, r2, #6
 80124b2:	4332      	orrs	r2, r6
 80124b4:	1166      	asrs	r6, r4, #5
 80124b6:	4334      	orrs	r4, r6
 80124b8:	436c      	muls	r4, r5
 80124ba:	436a      	muls	r2, r5
 80124bc:	9d02      	ldr	r5, [sp, #8]
 80124be:	b289      	uxth	r1, r1
 80124c0:	192c      	adds	r4, r5, r4
 80124c2:	b2a5      	uxth	r5, r4
 80124c4:	1c4c      	adds	r4, r1, #1
 80124c6:	1209      	asrs	r1, r1, #8
 80124c8:	1864      	adds	r4, r4, r1
 80124ca:	21ff      	movs	r1, #255	; 0xff
 80124cc:	0209      	lsls	r1, r1, #8
 80124ce:	400c      	ands	r4, r1
 80124d0:	18ba      	adds	r2, r7, r2
 80124d2:	1c69      	adds	r1, r5, #1
 80124d4:	122d      	asrs	r5, r5, #8
 80124d6:	b292      	uxth	r2, r2
 80124d8:	194d      	adds	r5, r1, r5
 80124da:	0ae4      	lsrs	r4, r4, #11
 80124dc:	1c51      	adds	r1, r2, #1
 80124de:	042d      	lsls	r5, r5, #16
 80124e0:	1212      	asrs	r2, r2, #8
 80124e2:	0eed      	lsrs	r5, r5, #27
 80124e4:	188a      	adds	r2, r1, r2
 80124e6:	02e4      	lsls	r4, r4, #11
 80124e8:	21ff      	movs	r1, #255	; 0xff
 80124ea:	432c      	orrs	r4, r5
 80124ec:	25fc      	movs	r5, #252	; 0xfc
 80124ee:	0952      	lsrs	r2, r2, #5
 80124f0:	00c9      	lsls	r1, r1, #3
 80124f2:	400a      	ands	r2, r1
 80124f4:	00ed      	lsls	r5, r5, #3
 80124f6:	402a      	ands	r2, r5
 80124f8:	4314      	orrs	r4, r2
 80124fa:	801c      	strh	r4, [r3, #0]
 80124fc:	3302      	adds	r3, #2
 80124fe:	e7c0      	b.n	8012482 <_ZN8touchgfx19LCD16bppSerialFlash10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x82>
 8012500:	9a03      	ldr	r2, [sp, #12]
 8012502:	189b      	adds	r3, r3, r2
 8012504:	e7b7      	b.n	8012476 <_ZN8touchgfx19LCD16bppSerialFlash10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 8012506:	26fc      	movs	r6, #252	; 0xfc
 8012508:	0967      	lsrs	r7, r4, #5
 801250a:	00f6      	lsls	r6, r6, #3
 801250c:	403e      	ands	r6, r7
 801250e:	0ce7      	lsrs	r7, r4, #19
 8012510:	02ff      	lsls	r7, r7, #11
 8012512:	0624      	lsls	r4, r4, #24
 8012514:	433e      	orrs	r6, r7
 8012516:	0ee4      	lsrs	r4, r4, #27
 8012518:	4326      	orrs	r6, r4
 801251a:	b2b6      	uxth	r6, r6
 801251c:	07ec      	lsls	r4, r5, #31
 801251e:	d50c      	bpl.n	801253a <_ZN8touchgfx19LCD16bppSerialFlash10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 8012520:	4662      	mov	r2, ip
 8012522:	0049      	lsls	r1, r1, #1
 8012524:	0052      	lsls	r2, r2, #1
 8012526:	4283      	cmp	r3, r0
 8012528:	d230      	bcs.n	801258c <_ZN8touchgfx19LCD16bppSerialFlash10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>
 801252a:	185c      	adds	r4, r3, r1
 801252c:	42a3      	cmp	r3, r4
 801252e:	d202      	bcs.n	8012536 <_ZN8touchgfx19LCD16bppSerialFlash10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x136>
 8012530:	801e      	strh	r6, [r3, #0]
 8012532:	3302      	adds	r3, #2
 8012534:	e7fa      	b.n	801252c <_ZN8touchgfx19LCD16bppSerialFlash10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12c>
 8012536:	189b      	adds	r3, r3, r2
 8012538:	e7f5      	b.n	8012526 <_ZN8touchgfx19LCD16bppSerialFlash10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 801253a:	079c      	lsls	r4, r3, #30
 801253c:	d008      	beq.n	8012550 <_ZN8touchgfx19LCD16bppSerialFlash10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x150>
 801253e:	001a      	movs	r2, r3
 8012540:	006c      	lsls	r4, r5, #1
 8012542:	4282      	cmp	r2, r0
 8012544:	d202      	bcs.n	801254c <_ZN8touchgfx19LCD16bppSerialFlash10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14c>
 8012546:	8016      	strh	r6, [r2, #0]
 8012548:	1912      	adds	r2, r2, r4
 801254a:	e7fa      	b.n	8012542 <_ZN8touchgfx19LCD16bppSerialFlash10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x142>
 801254c:	3302      	adds	r3, #2
 801254e:	1e4a      	subs	r2, r1, #1
 8012550:	07d1      	lsls	r1, r2, #31
 8012552:	d50a      	bpl.n	801256a <_ZN8touchgfx19LCD16bppSerialFlash10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16a>
 8012554:	490e      	ldr	r1, [pc, #56]	; (8012590 <_ZN8touchgfx19LCD16bppSerialFlash10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x190>)
 8012556:	006c      	lsls	r4, r5, #1
 8012558:	1851      	adds	r1, r2, r1
 801255a:	0049      	lsls	r1, r1, #1
 801255c:	1859      	adds	r1, r3, r1
 801255e:	4281      	cmp	r1, r0
 8012560:	d202      	bcs.n	8012568 <_ZN8touchgfx19LCD16bppSerialFlash10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8012562:	800e      	strh	r6, [r1, #0]
 8012564:	1909      	adds	r1, r1, r4
 8012566:	e7fa      	b.n	801255e <_ZN8touchgfx19LCD16bppSerialFlash10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 8012568:	3a01      	subs	r2, #1
 801256a:	2a00      	cmp	r2, #0
 801256c:	d00e      	beq.n	801258c <_ZN8touchgfx19LCD16bppSerialFlash10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>
 801256e:	0434      	lsls	r4, r6, #16
 8012570:	1052      	asrs	r2, r2, #1
 8012572:	4326      	orrs	r6, r4
 8012574:	0092      	lsls	r2, r2, #2
 8012576:	006d      	lsls	r5, r5, #1
 8012578:	4283      	cmp	r3, r0
 801257a:	d207      	bcs.n	801258c <_ZN8touchgfx19LCD16bppSerialFlash10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>
 801257c:	0019      	movs	r1, r3
 801257e:	18d4      	adds	r4, r2, r3
 8012580:	42a1      	cmp	r1, r4
 8012582:	d201      	bcs.n	8012588 <_ZN8touchgfx19LCD16bppSerialFlash10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x188>
 8012584:	c140      	stmia	r1!, {r6}
 8012586:	e7fb      	b.n	8012580 <_ZN8touchgfx19LCD16bppSerialFlash10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x180>
 8012588:	195b      	adds	r3, r3, r5
 801258a:	e7f5      	b.n	8012578 <_ZN8touchgfx19LCD16bppSerialFlash10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x178>
 801258c:	b007      	add	sp, #28
 801258e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012590:	7fffffff 	.word	0x7fffffff

08012594 <_ZN8touchgfx19LCD16bppSerialFlashC1ERNS_15FlashDataReaderE>:
 8012594:	2300      	movs	r3, #0
 8012596:	4a14      	ldr	r2, [pc, #80]	; (80125e8 <_ZN8touchgfx19LCD16bppSerialFlashC1ERNS_15FlashDataReaderE+0x54>)
 8012598:	6043      	str	r3, [r0, #4]
 801259a:	3208      	adds	r2, #8
 801259c:	6002      	str	r2, [r0, #0]
 801259e:	1d02      	adds	r2, r0, #4
 80125a0:	6083      	str	r3, [r0, #8]
 80125a2:	60c1      	str	r1, [r0, #12]
 80125a4:	6103      	str	r3, [r0, #16]
 80125a6:	6143      	str	r3, [r0, #20]
 80125a8:	6183      	str	r3, [r0, #24]
 80125aa:	61c3      	str	r3, [r0, #28]
 80125ac:	6203      	str	r3, [r0, #32]
 80125ae:	6243      	str	r3, [r0, #36]	; 0x24
 80125b0:	6283      	str	r3, [r0, #40]	; 0x28
 80125b2:	62c3      	str	r3, [r0, #44]	; 0x2c
 80125b4:	6303      	str	r3, [r0, #48]	; 0x30
 80125b6:	6343      	str	r3, [r0, #52]	; 0x34
 80125b8:	6383      	str	r3, [r0, #56]	; 0x38
 80125ba:	63c3      	str	r3, [r0, #60]	; 0x3c
 80125bc:	6403      	str	r3, [r0, #64]	; 0x40
 80125be:	6443      	str	r3, [r0, #68]	; 0x44
 80125c0:	6483      	str	r3, [r0, #72]	; 0x48
 80125c2:	64c3      	str	r3, [r0, #76]	; 0x4c
 80125c4:	6503      	str	r3, [r0, #80]	; 0x50
 80125c6:	6543      	str	r3, [r0, #84]	; 0x54
 80125c8:	6583      	str	r3, [r0, #88]	; 0x58
 80125ca:	65c3      	str	r3, [r0, #92]	; 0x5c
 80125cc:	6603      	str	r3, [r0, #96]	; 0x60
 80125ce:	6643      	str	r3, [r0, #100]	; 0x64
 80125d0:	6683      	str	r3, [r0, #104]	; 0x68
 80125d2:	66c3      	str	r3, [r0, #108]	; 0x6c
 80125d4:	6703      	str	r3, [r0, #112]	; 0x70
 80125d6:	6743      	str	r3, [r0, #116]	; 0x74
 80125d8:	6783      	str	r3, [r0, #120]	; 0x78
 80125da:	3204      	adds	r2, #4
 80125dc:	67c3      	str	r3, [r0, #124]	; 0x7c
 80125de:	6793      	str	r3, [r2, #120]	; 0x78
 80125e0:	67d3      	str	r3, [r2, #124]	; 0x7c
 80125e2:	3280      	adds	r2, #128	; 0x80
 80125e4:	6013      	str	r3, [r2, #0]
 80125e6:	4770      	bx	lr
 80125e8:	08016d64 	.word	0x08016d64

080125ec <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80125ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125ee:	0015      	movs	r5, r2
 80125f0:	000e      	movs	r6, r1
 80125f2:	b08f      	sub	sp, #60	; 0x3c
 80125f4:	9300      	str	r3, [sp, #0]
 80125f6:	ab14      	add	r3, sp, #80	; 0x50
 80125f8:	781b      	ldrb	r3, [r3, #0]
 80125fa:	ac0c      	add	r4, sp, #48	; 0x30
 80125fc:	0029      	movs	r1, r5
 80125fe:	0007      	movs	r7, r0
 8012600:	2208      	movs	r2, #8
 8012602:	a80a      	add	r0, sp, #40	; 0x28
 8012604:	9302      	str	r3, [sp, #8]
 8012606:	f001 fed2 	bl	80143ae <memcpy>
 801260a:	2208      	movs	r2, #8
 801260c:	9900      	ldr	r1, [sp, #0]
 801260e:	0020      	movs	r0, r4
 8012610:	f001 fecd 	bl	80143ae <memcpy>
 8012614:	a80a      	add	r0, sp, #40	; 0x28
 8012616:	f7fc f9f7 	bl	800ea08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801261a:	0020      	movs	r0, r4
 801261c:	0029      	movs	r1, r5
 801261e:	f7fc fa1b 	bl	800ea58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012622:	2302      	movs	r3, #2
 8012624:	5ee2      	ldrsh	r2, [r4, r3]
 8012626:	2300      	movs	r3, #0
 8012628:	5ee1      	ldrsh	r1, [r4, r3]
 801262a:	ab0a      	add	r3, sp, #40	; 0x28
 801262c:	2004      	movs	r0, #4
 801262e:	5e1b      	ldrsh	r3, [r3, r0]
 8012630:	4353      	muls	r3, r2
 8012632:	185b      	adds	r3, r3, r1
 8012634:	009b      	lsls	r3, r3, #2
 8012636:	18f3      	adds	r3, r6, r3
 8012638:	9300      	str	r3, [sp, #0]
 801263a:	ab0a      	add	r3, sp, #40	; 0x28
 801263c:	881b      	ldrh	r3, [r3, #0]
 801263e:	1859      	adds	r1, r3, r1
 8012640:	8021      	strh	r1, [r4, #0]
 8012642:	ab0a      	add	r3, sp, #40	; 0x28
 8012644:	885b      	ldrh	r3, [r3, #2]
 8012646:	189a      	adds	r2, r3, r2
 8012648:	8062      	strh	r2, [r4, #2]
 801264a:	2204      	movs	r2, #4
 801264c:	5ea3      	ldrsh	r3, [r4, r2]
 801264e:	9301      	str	r3, [sp, #4]
 8012650:	2306      	movs	r3, #6
 8012652:	5ee5      	ldrsh	r5, [r4, r3]
 8012654:	4b9f      	ldr	r3, [pc, #636]	; (80128d4 <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x2e8>)
 8012656:	6818      	ldr	r0, [r3, #0]
 8012658:	6803      	ldr	r3, [r0, #0]
 801265a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801265c:	4798      	blx	r3
 801265e:	4b9e      	ldr	r3, [pc, #632]	; (80128d8 <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x2ec>)
 8012660:	881a      	ldrh	r2, [r3, #0]
 8012662:	2102      	movs	r1, #2
 8012664:	5e63      	ldrsh	r3, [r4, r1]
 8012666:	4355      	muls	r5, r2
 8012668:	4353      	muls	r3, r2
 801266a:	2100      	movs	r1, #0
 801266c:	5e64      	ldrsh	r4, [r4, r1]
 801266e:	006d      	lsls	r5, r5, #1
 8012670:	191c      	adds	r4, r3, r4
 8012672:	0064      	lsls	r4, r4, #1
 8012674:	1904      	adds	r4, r0, r4
 8012676:	68f8      	ldr	r0, [r7, #12]
 8012678:	1963      	adds	r3, r4, r5
 801267a:	9304      	str	r3, [sp, #16]
 801267c:	6803      	ldr	r3, [r0, #0]
 801267e:	9900      	ldr	r1, [sp, #0]
 8012680:	689b      	ldr	r3, [r3, #8]
 8012682:	4798      	blx	r3
 8012684:	2800      	cmp	r0, #0
 8012686:	d100      	bne.n	801268a <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8012688:	e07f      	b.n	801278a <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19e>
 801268a:	9b01      	ldr	r3, [sp, #4]
 801268c:	005b      	lsls	r3, r3, #1
 801268e:	9303      	str	r3, [sp, #12]
 8012690:	9b04      	ldr	r3, [sp, #16]
 8012692:	429c      	cmp	r4, r3
 8012694:	d300      	bcc.n	8012698 <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xac>
 8012696:	e116      	b.n	80128c6 <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x2da>
 8012698:	9b03      	ldr	r3, [sp, #12]
 801269a:	18e3      	adds	r3, r4, r3
 801269c:	9305      	str	r3, [sp, #20]
 801269e:	9b05      	ldr	r3, [sp, #20]
 80126a0:	429c      	cmp	r4, r3
 80126a2:	d262      	bcs.n	801276a <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 80126a4:	9b00      	ldr	r3, [sp, #0]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	0e1a      	lsrs	r2, r3, #24
 80126aa:	d010      	beq.n	80126ce <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 80126ac:	0a1f      	lsrs	r7, r3, #8
 80126ae:	2aff      	cmp	r2, #255	; 0xff
 80126b0:	d112      	bne.n	80126d8 <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xec>
 80126b2:	9902      	ldr	r1, [sp, #8]
 80126b4:	29ff      	cmp	r1, #255	; 0xff
 80126b6:	d10f      	bne.n	80126d8 <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xec>
 80126b8:	22fc      	movs	r2, #252	; 0xfc
 80126ba:	0959      	lsrs	r1, r3, #5
 80126bc:	00d2      	lsls	r2, r2, #3
 80126be:	4011      	ands	r1, r2
 80126c0:	0cda      	lsrs	r2, r3, #19
 80126c2:	02d2      	lsls	r2, r2, #11
 80126c4:	061b      	lsls	r3, r3, #24
 80126c6:	430a      	orrs	r2, r1
 80126c8:	0edb      	lsrs	r3, r3, #27
 80126ca:	431a      	orrs	r2, r3
 80126cc:	8022      	strh	r2, [r4, #0]
 80126ce:	9b00      	ldr	r3, [sp, #0]
 80126d0:	3402      	adds	r4, #2
 80126d2:	3304      	adds	r3, #4
 80126d4:	9300      	str	r3, [sp, #0]
 80126d6:	e7e2      	b.n	801269e <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xb2>
 80126d8:	9902      	ldr	r1, [sp, #8]
 80126da:	8825      	ldrh	r5, [r4, #0]
 80126dc:	434a      	muls	r2, r1
 80126de:	1c50      	adds	r0, r2, #1
 80126e0:	1212      	asrs	r2, r2, #8
 80126e2:	1880      	adds	r0, r0, r2
 80126e4:	1200      	asrs	r0, r0, #8
 80126e6:	b282      	uxth	r2, r0
 80126e8:	4694      	mov	ip, r2
 80126ea:	2207      	movs	r2, #7
 80126ec:	43c0      	mvns	r0, r0
 80126ee:	1229      	asrs	r1, r5, #8
 80126f0:	4391      	bics	r1, r2
 80126f2:	10ee      	asrs	r6, r5, #3
 80126f4:	3a04      	subs	r2, #4
 80126f6:	4396      	bics	r6, r2
 80126f8:	4095      	lsls	r5, r2
 80126fa:	114a      	asrs	r2, r1, #5
 80126fc:	b2c0      	uxtb	r0, r0
 80126fe:	4311      	orrs	r1, r2
 8012700:	4341      	muls	r1, r0
 8012702:	9106      	str	r1, [sp, #24]
 8012704:	4661      	mov	r1, ip
 8012706:	0c1a      	lsrs	r2, r3, #16
 8012708:	b2d2      	uxtb	r2, r2
 801270a:	434a      	muls	r2, r1
 801270c:	9906      	ldr	r1, [sp, #24]
 801270e:	b2f6      	uxtb	r6, r6
 8012710:	1889      	adds	r1, r1, r2
 8012712:	11b2      	asrs	r2, r6, #6
 8012714:	4332      	orrs	r2, r6
 8012716:	4666      	mov	r6, ip
 8012718:	b2ff      	uxtb	r7, r7
 801271a:	4377      	muls	r7, r6
 801271c:	4342      	muls	r2, r0
 801271e:	b2ed      	uxtb	r5, r5
 8012720:	19d2      	adds	r2, r2, r7
 8012722:	116f      	asrs	r7, r5, #5
 8012724:	433d      	orrs	r5, r7
 8012726:	b2db      	uxtb	r3, r3
 8012728:	4373      	muls	r3, r6
 801272a:	4345      	muls	r5, r0
 801272c:	b289      	uxth	r1, r1
 801272e:	18ed      	adds	r5, r5, r3
 8012730:	1c4b      	adds	r3, r1, #1
 8012732:	1209      	asrs	r1, r1, #8
 8012734:	1859      	adds	r1, r3, r1
 8012736:	23ff      	movs	r3, #255	; 0xff
 8012738:	b292      	uxth	r2, r2
 801273a:	021b      	lsls	r3, r3, #8
 801273c:	b2ad      	uxth	r5, r5
 801273e:	4019      	ands	r1, r3
 8012740:	1c53      	adds	r3, r2, #1
 8012742:	1212      	asrs	r2, r2, #8
 8012744:	1c6e      	adds	r6, r5, #1
 8012746:	189a      	adds	r2, r3, r2
 8012748:	122d      	asrs	r5, r5, #8
 801274a:	23ff      	movs	r3, #255	; 0xff
 801274c:	1976      	adds	r6, r6, r5
 801274e:	25fc      	movs	r5, #252	; 0xfc
 8012750:	0436      	lsls	r6, r6, #16
 8012752:	0ac9      	lsrs	r1, r1, #11
 8012754:	0952      	lsrs	r2, r2, #5
 8012756:	00db      	lsls	r3, r3, #3
 8012758:	0ef6      	lsrs	r6, r6, #27
 801275a:	02c9      	lsls	r1, r1, #11
 801275c:	401a      	ands	r2, r3
 801275e:	00ed      	lsls	r5, r5, #3
 8012760:	430e      	orrs	r6, r1
 8012762:	402a      	ands	r2, r5
 8012764:	4316      	orrs	r6, r2
 8012766:	8026      	strh	r6, [r4, #0]
 8012768:	e7b1      	b.n	80126ce <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801276a:	4b5b      	ldr	r3, [pc, #364]	; (80128d8 <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x2ec>)
 801276c:	9a01      	ldr	r2, [sp, #4]
 801276e:	881b      	ldrh	r3, [r3, #0]
 8012770:	1a9b      	subs	r3, r3, r2
 8012772:	005b      	lsls	r3, r3, #1
 8012774:	18e4      	adds	r4, r4, r3
 8012776:	ab0a      	add	r3, sp, #40	; 0x28
 8012778:	2204      	movs	r2, #4
 801277a:	5e9b      	ldrsh	r3, [r3, r2]
 801277c:	9a01      	ldr	r2, [sp, #4]
 801277e:	1a9b      	subs	r3, r3, r2
 8012780:	9a00      	ldr	r2, [sp, #0]
 8012782:	009b      	lsls	r3, r3, #2
 8012784:	18d3      	adds	r3, r2, r3
 8012786:	9300      	str	r3, [sp, #0]
 8012788:	e782      	b.n	8012690 <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801278a:	9b01      	ldr	r3, [sp, #4]
 801278c:	68f8      	ldr	r0, [r7, #12]
 801278e:	009b      	lsls	r3, r3, #2
 8012790:	9305      	str	r3, [sp, #20]
 8012792:	6803      	ldr	r3, [r0, #0]
 8012794:	9a05      	ldr	r2, [sp, #20]
 8012796:	691b      	ldr	r3, [r3, #16]
 8012798:	9900      	ldr	r1, [sp, #0]
 801279a:	4798      	blx	r3
 801279c:	9b01      	ldr	r3, [sp, #4]
 801279e:	005b      	lsls	r3, r3, #1
 80127a0:	9307      	str	r3, [sp, #28]
 80127a2:	9b04      	ldr	r3, [sp, #16]
 80127a4:	429c      	cmp	r4, r3
 80127a6:	d300      	bcc.n	80127aa <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1be>
 80127a8:	e08d      	b.n	80128c6 <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x2da>
 80127aa:	68f8      	ldr	r0, [r7, #12]
 80127ac:	6803      	ldr	r3, [r0, #0]
 80127ae:	695b      	ldr	r3, [r3, #20]
 80127b0:	4798      	blx	r3
 80127b2:	4b49      	ldr	r3, [pc, #292]	; (80128d8 <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x2ec>)
 80127b4:	9a04      	ldr	r2, [sp, #16]
 80127b6:	881b      	ldrh	r3, [r3, #0]
 80127b8:	9003      	str	r0, [sp, #12]
 80127ba:	005b      	lsls	r3, r3, #1
 80127bc:	18e3      	adds	r3, r4, r3
 80127be:	429a      	cmp	r2, r3
 80127c0:	d90c      	bls.n	80127dc <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1f0>
 80127c2:	ab0a      	add	r3, sp, #40	; 0x28
 80127c4:	2204      	movs	r2, #4
 80127c6:	5e9b      	ldrsh	r3, [r3, r2]
 80127c8:	9a00      	ldr	r2, [sp, #0]
 80127ca:	009b      	lsls	r3, r3, #2
 80127cc:	68f8      	ldr	r0, [r7, #12]
 80127ce:	18d3      	adds	r3, r2, r3
 80127d0:	9300      	str	r3, [sp, #0]
 80127d2:	6803      	ldr	r3, [r0, #0]
 80127d4:	9a05      	ldr	r2, [sp, #20]
 80127d6:	691b      	ldr	r3, [r3, #16]
 80127d8:	9900      	ldr	r1, [sp, #0]
 80127da:	4798      	blx	r3
 80127dc:	9b07      	ldr	r3, [sp, #28]
 80127de:	18e3      	adds	r3, r4, r3
 80127e0:	9308      	str	r3, [sp, #32]
 80127e2:	9b08      	ldr	r3, [sp, #32]
 80127e4:	429c      	cmp	r4, r3
 80127e6:	d267      	bcs.n	80128b8 <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x2cc>
 80127e8:	9b03      	ldr	r3, [sp, #12]
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	0e1a      	lsrs	r2, r3, #24
 80127ee:	d011      	beq.n	8012814 <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x228>
 80127f0:	0a19      	lsrs	r1, r3, #8
 80127f2:	9109      	str	r1, [sp, #36]	; 0x24
 80127f4:	2aff      	cmp	r2, #255	; 0xff
 80127f6:	d112      	bne.n	801281e <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x232>
 80127f8:	9902      	ldr	r1, [sp, #8]
 80127fa:	29ff      	cmp	r1, #255	; 0xff
 80127fc:	d10f      	bne.n	801281e <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x232>
 80127fe:	22fc      	movs	r2, #252	; 0xfc
 8012800:	0959      	lsrs	r1, r3, #5
 8012802:	00d2      	lsls	r2, r2, #3
 8012804:	4011      	ands	r1, r2
 8012806:	0cda      	lsrs	r2, r3, #19
 8012808:	02d2      	lsls	r2, r2, #11
 801280a:	061b      	lsls	r3, r3, #24
 801280c:	430a      	orrs	r2, r1
 801280e:	0edb      	lsrs	r3, r3, #27
 8012810:	431a      	orrs	r2, r3
 8012812:	8022      	strh	r2, [r4, #0]
 8012814:	9b03      	ldr	r3, [sp, #12]
 8012816:	3402      	adds	r4, #2
 8012818:	3304      	adds	r3, #4
 801281a:	9303      	str	r3, [sp, #12]
 801281c:	e7e1      	b.n	80127e2 <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1f6>
 801281e:	9902      	ldr	r1, [sp, #8]
 8012820:	8825      	ldrh	r5, [r4, #0]
 8012822:	434a      	muls	r2, r1
 8012824:	1c50      	adds	r0, r2, #1
 8012826:	1212      	asrs	r2, r2, #8
 8012828:	1880      	adds	r0, r0, r2
 801282a:	1200      	asrs	r0, r0, #8
 801282c:	b282      	uxth	r2, r0
 801282e:	4694      	mov	ip, r2
 8012830:	2207      	movs	r2, #7
 8012832:	1229      	asrs	r1, r5, #8
 8012834:	4391      	bics	r1, r2
 8012836:	3a04      	subs	r2, #4
 8012838:	10ee      	asrs	r6, r5, #3
 801283a:	4095      	lsls	r5, r2
 801283c:	43c0      	mvns	r0, r0
 801283e:	4396      	bics	r6, r2
 8012840:	b2ea      	uxtb	r2, r5
 8012842:	4665      	mov	r5, ip
 8012844:	9206      	str	r2, [sp, #24]
 8012846:	114a      	asrs	r2, r1, #5
 8012848:	4311      	orrs	r1, r2
 801284a:	0c1a      	lsrs	r2, r3, #16
 801284c:	b2c0      	uxtb	r0, r0
 801284e:	b2d2      	uxtb	r2, r2
 8012850:	436a      	muls	r2, r5
 8012852:	4341      	muls	r1, r0
 8012854:	b2f6      	uxtb	r6, r6
 8012856:	1889      	adds	r1, r1, r2
 8012858:	11b2      	asrs	r2, r6, #6
 801285a:	4332      	orrs	r2, r6
 801285c:	466d      	mov	r5, sp
 801285e:	2624      	movs	r6, #36	; 0x24
 8012860:	19ad      	adds	r5, r5, r6
 8012862:	782e      	ldrb	r6, [r5, #0]
 8012864:	4665      	mov	r5, ip
 8012866:	4342      	muls	r2, r0
 8012868:	436e      	muls	r6, r5
 801286a:	9d06      	ldr	r5, [sp, #24]
 801286c:	1992      	adds	r2, r2, r6
 801286e:	116e      	asrs	r6, r5, #5
 8012870:	4335      	orrs	r5, r6
 8012872:	4345      	muls	r5, r0
 8012874:	4660      	mov	r0, ip
 8012876:	b2db      	uxtb	r3, r3
 8012878:	4343      	muls	r3, r0
 801287a:	18ed      	adds	r5, r5, r3
 801287c:	23ff      	movs	r3, #255	; 0xff
 801287e:	b289      	uxth	r1, r1
 8012880:	b2ad      	uxth	r5, r5
 8012882:	1c4e      	adds	r6, r1, #1
 8012884:	1209      	asrs	r1, r1, #8
 8012886:	1876      	adds	r6, r6, r1
 8012888:	021b      	lsls	r3, r3, #8
 801288a:	1c69      	adds	r1, r5, #1
 801288c:	122d      	asrs	r5, r5, #8
 801288e:	b292      	uxth	r2, r2
 8012890:	401e      	ands	r6, r3
 8012892:	194d      	adds	r5, r1, r5
 8012894:	1c53      	adds	r3, r2, #1
 8012896:	0af6      	lsrs	r6, r6, #11
 8012898:	042d      	lsls	r5, r5, #16
 801289a:	1212      	asrs	r2, r2, #8
 801289c:	0eed      	lsrs	r5, r5, #27
 801289e:	189a      	adds	r2, r3, r2
 80128a0:	02f6      	lsls	r6, r6, #11
 80128a2:	23ff      	movs	r3, #255	; 0xff
 80128a4:	432e      	orrs	r6, r5
 80128a6:	25fc      	movs	r5, #252	; 0xfc
 80128a8:	0952      	lsrs	r2, r2, #5
 80128aa:	00db      	lsls	r3, r3, #3
 80128ac:	401a      	ands	r2, r3
 80128ae:	00ed      	lsls	r5, r5, #3
 80128b0:	402a      	ands	r2, r5
 80128b2:	4316      	orrs	r6, r2
 80128b4:	8026      	strh	r6, [r4, #0]
 80128b6:	e7ad      	b.n	8012814 <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x228>
 80128b8:	4b07      	ldr	r3, [pc, #28]	; (80128d8 <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x2ec>)
 80128ba:	9a01      	ldr	r2, [sp, #4]
 80128bc:	881b      	ldrh	r3, [r3, #0]
 80128be:	1a9b      	subs	r3, r3, r2
 80128c0:	005b      	lsls	r3, r3, #1
 80128c2:	18e4      	adds	r4, r4, r3
 80128c4:	e76d      	b.n	80127a2 <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 80128c6:	4b03      	ldr	r3, [pc, #12]	; (80128d4 <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x2e8>)
 80128c8:	6818      	ldr	r0, [r3, #0]
 80128ca:	6803      	ldr	r3, [r0, #0]
 80128cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128ce:	4798      	blx	r3
 80128d0:	b00f      	add	sp, #60	; 0x3c
 80128d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128d4:	200026c8 	.word	0x200026c8
 80128d8:	200026c2 	.word	0x200026c2

080128dc <_ZN8touchgfx19LCD16bppSerialFlash21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 80128dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80128de:	0015      	movs	r5, r2
 80128e0:	000e      	movs	r6, r1
 80128e2:	b089      	sub	sp, #36	; 0x24
 80128e4:	ac06      	add	r4, sp, #24
 80128e6:	0029      	movs	r1, r5
 80128e8:	0007      	movs	r7, r0
 80128ea:	2208      	movs	r2, #8
 80128ec:	a804      	add	r0, sp, #16
 80128ee:	9300      	str	r3, [sp, #0]
 80128f0:	f001 fd5d 	bl	80143ae <memcpy>
 80128f4:	2208      	movs	r2, #8
 80128f6:	9900      	ldr	r1, [sp, #0]
 80128f8:	0020      	movs	r0, r4
 80128fa:	f001 fd58 	bl	80143ae <memcpy>
 80128fe:	a804      	add	r0, sp, #16
 8012900:	f7fc f882 	bl	800ea08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012904:	0020      	movs	r0, r4
 8012906:	0029      	movs	r1, r5
 8012908:	f7fc f8a6 	bl	800ea58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801290c:	2302      	movs	r3, #2
 801290e:	5ee2      	ldrsh	r2, [r4, r3]
 8012910:	2300      	movs	r3, #0
 8012912:	5ee1      	ldrsh	r1, [r4, r3]
 8012914:	ab04      	add	r3, sp, #16
 8012916:	2004      	movs	r0, #4
 8012918:	5e1b      	ldrsh	r3, [r3, r0]
 801291a:	4353      	muls	r3, r2
 801291c:	185b      	adds	r3, r3, r1
 801291e:	009b      	lsls	r3, r3, #2
 8012920:	18f6      	adds	r6, r6, r3
 8012922:	ab04      	add	r3, sp, #16
 8012924:	881b      	ldrh	r3, [r3, #0]
 8012926:	1859      	adds	r1, r3, r1
 8012928:	8021      	strh	r1, [r4, #0]
 801292a:	ab04      	add	r3, sp, #16
 801292c:	885b      	ldrh	r3, [r3, #2]
 801292e:	189a      	adds	r2, r3, r2
 8012930:	8062      	strh	r2, [r4, #2]
 8012932:	2204      	movs	r2, #4
 8012934:	5ea3      	ldrsh	r3, [r4, r2]
 8012936:	9300      	str	r3, [sp, #0]
 8012938:	2306      	movs	r3, #6
 801293a:	5ee5      	ldrsh	r5, [r4, r3]
 801293c:	4b44      	ldr	r3, [pc, #272]	; (8012a50 <_ZN8touchgfx19LCD16bppSerialFlash21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x174>)
 801293e:	6818      	ldr	r0, [r3, #0]
 8012940:	6803      	ldr	r3, [r0, #0]
 8012942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012944:	4798      	blx	r3
 8012946:	4b43      	ldr	r3, [pc, #268]	; (8012a54 <_ZN8touchgfx19LCD16bppSerialFlash21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x178>)
 8012948:	881a      	ldrh	r2, [r3, #0]
 801294a:	2102      	movs	r1, #2
 801294c:	5e63      	ldrsh	r3, [r4, r1]
 801294e:	4355      	muls	r5, r2
 8012950:	4353      	muls	r3, r2
 8012952:	2100      	movs	r1, #0
 8012954:	5e64      	ldrsh	r4, [r4, r1]
 8012956:	006d      	lsls	r5, r5, #1
 8012958:	191c      	adds	r4, r3, r4
 801295a:	0064      	lsls	r4, r4, #1
 801295c:	1904      	adds	r4, r0, r4
 801295e:	68f8      	ldr	r0, [r7, #12]
 8012960:	1963      	adds	r3, r4, r5
 8012962:	9301      	str	r3, [sp, #4]
 8012964:	6803      	ldr	r3, [r0, #0]
 8012966:	0031      	movs	r1, r6
 8012968:	689b      	ldr	r3, [r3, #8]
 801296a:	4798      	blx	r3
 801296c:	2800      	cmp	r0, #0
 801296e:	d026      	beq.n	80129be <_ZN8touchgfx19LCD16bppSerialFlash21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xe2>
 8012970:	271f      	movs	r7, #31
 8012972:	9b00      	ldr	r3, [sp, #0]
 8012974:	0059      	lsls	r1, r3, #1
 8012976:	9b01      	ldr	r3, [sp, #4]
 8012978:	429c      	cmp	r4, r3
 801297a:	d262      	bcs.n	8012a42 <_ZN8touchgfx19LCD16bppSerialFlash21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x166>
 801297c:	1860      	adds	r0, r4, r1
 801297e:	4284      	cmp	r4, r0
 8012980:	d20f      	bcs.n	80129a2 <_ZN8touchgfx19LCD16bppSerialFlash21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc6>
 8012982:	ce04      	ldmia	r6!, {r2}
 8012984:	25fc      	movs	r5, #252	; 0xfc
 8012986:	0cd3      	lsrs	r3, r2, #19
 8012988:	02db      	lsls	r3, r3, #11
 801298a:	469c      	mov	ip, r3
 801298c:	00ed      	lsls	r5, r5, #3
 801298e:	0953      	lsrs	r3, r2, #5
 8012990:	402b      	ands	r3, r5
 8012992:	4665      	mov	r5, ip
 8012994:	08d2      	lsrs	r2, r2, #3
 8012996:	432b      	orrs	r3, r5
 8012998:	403a      	ands	r2, r7
 801299a:	4313      	orrs	r3, r2
 801299c:	8023      	strh	r3, [r4, #0]
 801299e:	3402      	adds	r4, #2
 80129a0:	e7ed      	b.n	801297e <_ZN8touchgfx19LCD16bppSerialFlash21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xa2>
 80129a2:	4b2c      	ldr	r3, [pc, #176]	; (8012a54 <_ZN8touchgfx19LCD16bppSerialFlash21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x178>)
 80129a4:	8818      	ldrh	r0, [r3, #0]
 80129a6:	9b00      	ldr	r3, [sp, #0]
 80129a8:	1ac0      	subs	r0, r0, r3
 80129aa:	ab04      	add	r3, sp, #16
 80129ac:	2204      	movs	r2, #4
 80129ae:	5e9b      	ldrsh	r3, [r3, r2]
 80129b0:	9a00      	ldr	r2, [sp, #0]
 80129b2:	0040      	lsls	r0, r0, #1
 80129b4:	1a9b      	subs	r3, r3, r2
 80129b6:	009b      	lsls	r3, r3, #2
 80129b8:	1824      	adds	r4, r4, r0
 80129ba:	18f6      	adds	r6, r6, r3
 80129bc:	e7db      	b.n	8012976 <_ZN8touchgfx19LCD16bppSerialFlash21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x9a>
 80129be:	9b00      	ldr	r3, [sp, #0]
 80129c0:	68f8      	ldr	r0, [r7, #12]
 80129c2:	009b      	lsls	r3, r3, #2
 80129c4:	9302      	str	r3, [sp, #8]
 80129c6:	6803      	ldr	r3, [r0, #0]
 80129c8:	9a02      	ldr	r2, [sp, #8]
 80129ca:	691b      	ldr	r3, [r3, #16]
 80129cc:	0031      	movs	r1, r6
 80129ce:	4798      	blx	r3
 80129d0:	9b00      	ldr	r3, [sp, #0]
 80129d2:	005b      	lsls	r3, r3, #1
 80129d4:	9303      	str	r3, [sp, #12]
 80129d6:	9b01      	ldr	r3, [sp, #4]
 80129d8:	429c      	cmp	r4, r3
 80129da:	d232      	bcs.n	8012a42 <_ZN8touchgfx19LCD16bppSerialFlash21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x166>
 80129dc:	68f8      	ldr	r0, [r7, #12]
 80129de:	6803      	ldr	r3, [r0, #0]
 80129e0:	695b      	ldr	r3, [r3, #20]
 80129e2:	4798      	blx	r3
 80129e4:	4b1b      	ldr	r3, [pc, #108]	; (8012a54 <_ZN8touchgfx19LCD16bppSerialFlash21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x178>)
 80129e6:	9a01      	ldr	r2, [sp, #4]
 80129e8:	881b      	ldrh	r3, [r3, #0]
 80129ea:	0005      	movs	r5, r0
 80129ec:	005b      	lsls	r3, r3, #1
 80129ee:	18e3      	adds	r3, r4, r3
 80129f0:	429a      	cmp	r2, r3
 80129f2:	d90a      	bls.n	8012a0a <_ZN8touchgfx19LCD16bppSerialFlash21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x12e>
 80129f4:	ab04      	add	r3, sp, #16
 80129f6:	2204      	movs	r2, #4
 80129f8:	5e9b      	ldrsh	r3, [r3, r2]
 80129fa:	68f8      	ldr	r0, [r7, #12]
 80129fc:	009b      	lsls	r3, r3, #2
 80129fe:	18f6      	adds	r6, r6, r3
 8012a00:	6803      	ldr	r3, [r0, #0]
 8012a02:	9a02      	ldr	r2, [sp, #8]
 8012a04:	691b      	ldr	r3, [r3, #16]
 8012a06:	0031      	movs	r1, r6
 8012a08:	4798      	blx	r3
 8012a0a:	9b03      	ldr	r3, [sp, #12]
 8012a0c:	18e0      	adds	r0, r4, r3
 8012a0e:	4284      	cmp	r4, r0
 8012a10:	d210      	bcs.n	8012a34 <_ZN8touchgfx19LCD16bppSerialFlash21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x158>
 8012a12:	cd04      	ldmia	r5!, {r2}
 8012a14:	0cd1      	lsrs	r1, r2, #19
 8012a16:	02cb      	lsls	r3, r1, #11
 8012a18:	21fc      	movs	r1, #252	; 0xfc
 8012a1a:	469c      	mov	ip, r3
 8012a1c:	00c9      	lsls	r1, r1, #3
 8012a1e:	0953      	lsrs	r3, r2, #5
 8012a20:	400b      	ands	r3, r1
 8012a22:	4661      	mov	r1, ip
 8012a24:	430b      	orrs	r3, r1
 8012a26:	211f      	movs	r1, #31
 8012a28:	08d2      	lsrs	r2, r2, #3
 8012a2a:	400a      	ands	r2, r1
 8012a2c:	4313      	orrs	r3, r2
 8012a2e:	8023      	strh	r3, [r4, #0]
 8012a30:	3402      	adds	r4, #2
 8012a32:	e7ec      	b.n	8012a0e <_ZN8touchgfx19LCD16bppSerialFlash21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x132>
 8012a34:	4b07      	ldr	r3, [pc, #28]	; (8012a54 <_ZN8touchgfx19LCD16bppSerialFlash21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x178>)
 8012a36:	8818      	ldrh	r0, [r3, #0]
 8012a38:	9b00      	ldr	r3, [sp, #0]
 8012a3a:	1ac0      	subs	r0, r0, r3
 8012a3c:	0040      	lsls	r0, r0, #1
 8012a3e:	1824      	adds	r4, r4, r0
 8012a40:	e7c9      	b.n	80129d6 <_ZN8touchgfx19LCD16bppSerialFlash21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xfa>
 8012a42:	4b03      	ldr	r3, [pc, #12]	; (8012a50 <_ZN8touchgfx19LCD16bppSerialFlash21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x174>)
 8012a44:	6818      	ldr	r0, [r3, #0]
 8012a46:	6803      	ldr	r3, [r0, #0]
 8012a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a4a:	4798      	blx	r3
 8012a4c:	b009      	add	sp, #36	; 0x24
 8012a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a50:	200026c8 	.word	0x200026c8
 8012a54:	200026c2 	.word	0x200026c2

08012a58 <_ZN8touchgfx19LCD16bppSerialFlash14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8012a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a5a:	0015      	movs	r5, r2
 8012a5c:	b08d      	sub	sp, #52	; 0x34
 8012a5e:	9300      	str	r3, [sp, #0]
 8012a60:	ab12      	add	r3, sp, #72	; 0x48
 8012a62:	781b      	ldrb	r3, [r3, #0]
 8012a64:	ac0a      	add	r4, sp, #40	; 0x28
 8012a66:	000e      	movs	r6, r1
 8012a68:	0007      	movs	r7, r0
 8012a6a:	0029      	movs	r1, r5
 8012a6c:	2208      	movs	r2, #8
 8012a6e:	a808      	add	r0, sp, #32
 8012a70:	9302      	str	r3, [sp, #8]
 8012a72:	f001 fc9c 	bl	80143ae <memcpy>
 8012a76:	2208      	movs	r2, #8
 8012a78:	9900      	ldr	r1, [sp, #0]
 8012a7a:	0020      	movs	r0, r4
 8012a7c:	f001 fc97 	bl	80143ae <memcpy>
 8012a80:	a808      	add	r0, sp, #32
 8012a82:	f7fb ffc1 	bl	800ea08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012a86:	0029      	movs	r1, r5
 8012a88:	2503      	movs	r5, #3
 8012a8a:	0020      	movs	r0, r4
 8012a8c:	f7fb ffe4 	bl	800ea58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012a90:	2302      	movs	r3, #2
 8012a92:	5ee2      	ldrsh	r2, [r4, r3]
 8012a94:	2300      	movs	r3, #0
 8012a96:	5ee1      	ldrsh	r1, [r4, r3]
 8012a98:	ab08      	add	r3, sp, #32
 8012a9a:	2004      	movs	r0, #4
 8012a9c:	5e1b      	ldrsh	r3, [r3, r0]
 8012a9e:	4353      	muls	r3, r2
 8012aa0:	185b      	adds	r3, r3, r1
 8012aa2:	436b      	muls	r3, r5
 8012aa4:	18f3      	adds	r3, r6, r3
 8012aa6:	9300      	str	r3, [sp, #0]
 8012aa8:	ab08      	add	r3, sp, #32
 8012aaa:	881b      	ldrh	r3, [r3, #0]
 8012aac:	1859      	adds	r1, r3, r1
 8012aae:	8021      	strh	r1, [r4, #0]
 8012ab0:	ab08      	add	r3, sp, #32
 8012ab2:	885b      	ldrh	r3, [r3, #2]
 8012ab4:	189a      	adds	r2, r3, r2
 8012ab6:	8062      	strh	r2, [r4, #2]
 8012ab8:	2304      	movs	r3, #4
 8012aba:	5ee6      	ldrsh	r6, [r4, r3]
 8012abc:	2206      	movs	r2, #6
 8012abe:	5ea3      	ldrsh	r3, [r4, r2]
 8012ac0:	9301      	str	r3, [sp, #4]
 8012ac2:	4ba7      	ldr	r3, [pc, #668]	; (8012d60 <_ZN8touchgfx19LCD16bppSerialFlash14blitCopyRGB888EPKhRKNS_4RectES5_h+0x308>)
 8012ac4:	6818      	ldr	r0, [r3, #0]
 8012ac6:	6803      	ldr	r3, [r0, #0]
 8012ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012aca:	4798      	blx	r3
 8012acc:	4ba5      	ldr	r3, [pc, #660]	; (8012d64 <_ZN8touchgfx19LCD16bppSerialFlash14blitCopyRGB888EPKhRKNS_4RectES5_h+0x30c>)
 8012ace:	881a      	ldrh	r2, [r3, #0]
 8012ad0:	2102      	movs	r1, #2
 8012ad2:	5e63      	ldrsh	r3, [r4, r1]
 8012ad4:	2100      	movs	r1, #0
 8012ad6:	5e64      	ldrsh	r4, [r4, r1]
 8012ad8:	4353      	muls	r3, r2
 8012ada:	191c      	adds	r4, r3, r4
 8012adc:	9b01      	ldr	r3, [sp, #4]
 8012ade:	0064      	lsls	r4, r4, #1
 8012ae0:	4353      	muls	r3, r2
 8012ae2:	1904      	adds	r4, r0, r4
 8012ae4:	005b      	lsls	r3, r3, #1
 8012ae6:	18e3      	adds	r3, r4, r3
 8012ae8:	9301      	str	r3, [sp, #4]
 8012aea:	1b93      	subs	r3, r2, r6
 8012aec:	9303      	str	r3, [sp, #12]
 8012aee:	ab08      	add	r3, sp, #32
 8012af0:	2204      	movs	r2, #4
 8012af2:	5e9b      	ldrsh	r3, [r3, r2]
 8012af4:	68f8      	ldr	r0, [r7, #12]
 8012af6:	9304      	str	r3, [sp, #16]
 8012af8:	6803      	ldr	r3, [r0, #0]
 8012afa:	9900      	ldr	r1, [sp, #0]
 8012afc:	689b      	ldr	r3, [r3, #8]
 8012afe:	4798      	blx	r3
 8012b00:	9b03      	ldr	r3, [sp, #12]
 8012b02:	005b      	lsls	r3, r3, #1
 8012b04:	9303      	str	r3, [sp, #12]
 8012b06:	2800      	cmp	r0, #0
 8012b08:	d077      	beq.n	8012bfa <_ZN8touchgfx19LCD16bppSerialFlash14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1a2>
 8012b0a:	9b04      	ldr	r3, [sp, #16]
 8012b0c:	1b9b      	subs	r3, r3, r6
 8012b0e:	435d      	muls	r5, r3
 8012b10:	9b02      	ldr	r3, [sp, #8]
 8012b12:	46ac      	mov	ip, r5
 8012b14:	43d9      	mvns	r1, r3
 8012b16:	0076      	lsls	r6, r6, #1
 8012b18:	b2c9      	uxtb	r1, r1
 8012b1a:	2bff      	cmp	r3, #255	; 0xff
 8012b1c:	d127      	bne.n	8012b6e <_ZN8touchgfx19LCD16bppSerialFlash14blitCopyRGB888EPKhRKNS_4RectES5_h+0x116>
 8012b1e:	22fc      	movs	r2, #252	; 0xfc
 8012b20:	00d2      	lsls	r2, r2, #3
 8012b22:	9b01      	ldr	r3, [sp, #4]
 8012b24:	429c      	cmp	r4, r3
 8012b26:	d300      	bcc.n	8012b2a <_ZN8touchgfx19LCD16bppSerialFlash14blitCopyRGB888EPKhRKNS_4RectES5_h+0xd2>
 8012b28:	e112      	b.n	8012d50 <_ZN8touchgfx19LCD16bppSerialFlash14blitCopyRGB888EPKhRKNS_4RectES5_h+0x2f8>
 8012b2a:	19a1      	adds	r1, r4, r6
 8012b2c:	428c      	cmp	r4, r1
 8012b2e:	d213      	bcs.n	8012b58 <_ZN8touchgfx19LCD16bppSerialFlash14blitCopyRGB888EPKhRKNS_4RectES5_h+0x100>
 8012b30:	9b00      	ldr	r3, [sp, #0]
 8012b32:	785b      	ldrb	r3, [r3, #1]
 8012b34:	00db      	lsls	r3, r3, #3
 8012b36:	4013      	ands	r3, r2
 8012b38:	0018      	movs	r0, r3
 8012b3a:	9b00      	ldr	r3, [sp, #0]
 8012b3c:	789b      	ldrb	r3, [r3, #2]
 8012b3e:	08db      	lsrs	r3, r3, #3
 8012b40:	02db      	lsls	r3, r3, #11
 8012b42:	4303      	orrs	r3, r0
 8012b44:	9800      	ldr	r0, [sp, #0]
 8012b46:	7800      	ldrb	r0, [r0, #0]
 8012b48:	08c0      	lsrs	r0, r0, #3
 8012b4a:	4303      	orrs	r3, r0
 8012b4c:	8023      	strh	r3, [r4, #0]
 8012b4e:	9b00      	ldr	r3, [sp, #0]
 8012b50:	3402      	adds	r4, #2
 8012b52:	3303      	adds	r3, #3
 8012b54:	9300      	str	r3, [sp, #0]
 8012b56:	e7e9      	b.n	8012b2c <_ZN8touchgfx19LCD16bppSerialFlash14blitCopyRGB888EPKhRKNS_4RectES5_h+0xd4>
 8012b58:	9b03      	ldr	r3, [sp, #12]
 8012b5a:	18e4      	adds	r4, r4, r3
 8012b5c:	9b00      	ldr	r3, [sp, #0]
 8012b5e:	4463      	add	r3, ip
 8012b60:	9300      	str	r3, [sp, #0]
 8012b62:	e7de      	b.n	8012b22 <_ZN8touchgfx19LCD16bppSerialFlash14blitCopyRGB888EPKhRKNS_4RectES5_h+0xca>
 8012b64:	9b03      	ldr	r3, [sp, #12]
 8012b66:	18e4      	adds	r4, r4, r3
 8012b68:	9b00      	ldr	r3, [sp, #0]
 8012b6a:	4463      	add	r3, ip
 8012b6c:	9300      	str	r3, [sp, #0]
 8012b6e:	9b01      	ldr	r3, [sp, #4]
 8012b70:	429c      	cmp	r4, r3
 8012b72:	d300      	bcc.n	8012b76 <_ZN8touchgfx19LCD16bppSerialFlash14blitCopyRGB888EPKhRKNS_4RectES5_h+0x11e>
 8012b74:	e0ec      	b.n	8012d50 <_ZN8touchgfx19LCD16bppSerialFlash14blitCopyRGB888EPKhRKNS_4RectES5_h+0x2f8>
 8012b76:	19a3      	adds	r3, r4, r6
 8012b78:	9304      	str	r3, [sp, #16]
 8012b7a:	9b04      	ldr	r3, [sp, #16]
 8012b7c:	429c      	cmp	r4, r3
 8012b7e:	d2f1      	bcs.n	8012b64 <_ZN8touchgfx19LCD16bppSerialFlash14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10c>
 8012b80:	466b      	mov	r3, sp
 8012b82:	2507      	movs	r5, #7
 8012b84:	8822      	ldrh	r2, [r4, #0]
 8012b86:	8918      	ldrh	r0, [r3, #8]
 8012b88:	1213      	asrs	r3, r2, #8
 8012b8a:	43ab      	bics	r3, r5
 8012b8c:	10d7      	asrs	r7, r2, #3
 8012b8e:	35f5      	adds	r5, #245	; 0xf5
 8012b90:	403d      	ands	r5, r7
 8012b92:	115f      	asrs	r7, r3, #5
 8012b94:	433b      	orrs	r3, r7
 8012b96:	9f00      	ldr	r7, [sp, #0]
 8012b98:	434b      	muls	r3, r1
 8012b9a:	78bf      	ldrb	r7, [r7, #2]
 8012b9c:	00d2      	lsls	r2, r2, #3
 8012b9e:	4347      	muls	r7, r0
 8012ba0:	19db      	adds	r3, r3, r7
 8012ba2:	11af      	asrs	r7, r5, #6
 8012ba4:	433d      	orrs	r5, r7
 8012ba6:	9f00      	ldr	r7, [sp, #0]
 8012ba8:	434d      	muls	r5, r1
 8012baa:	787f      	ldrb	r7, [r7, #1]
 8012bac:	b2d2      	uxtb	r2, r2
 8012bae:	4347      	muls	r7, r0
 8012bb0:	19ed      	adds	r5, r5, r7
 8012bb2:	1157      	asrs	r7, r2, #5
 8012bb4:	433a      	orrs	r2, r7
 8012bb6:	9f00      	ldr	r7, [sp, #0]
 8012bb8:	434a      	muls	r2, r1
 8012bba:	783f      	ldrb	r7, [r7, #0]
 8012bbc:	b29b      	uxth	r3, r3
 8012bbe:	4378      	muls	r0, r7
 8012bc0:	27f8      	movs	r7, #248	; 0xf8
 8012bc2:	1812      	adds	r2, r2, r0
 8012bc4:	1c58      	adds	r0, r3, #1
 8012bc6:	121b      	asrs	r3, r3, #8
 8012bc8:	b292      	uxth	r2, r2
 8012bca:	023f      	lsls	r7, r7, #8
 8012bcc:	18c3      	adds	r3, r0, r3
 8012bce:	403b      	ands	r3, r7
 8012bd0:	1c57      	adds	r7, r2, #1
 8012bd2:	1212      	asrs	r2, r2, #8
 8012bd4:	18ba      	adds	r2, r7, r2
 8012bd6:	0412      	lsls	r2, r2, #16
 8012bd8:	b2ad      	uxth	r5, r5
 8012bda:	0ed2      	lsrs	r2, r2, #27
 8012bdc:	4313      	orrs	r3, r2
 8012bde:	1c6a      	adds	r2, r5, #1
 8012be0:	122d      	asrs	r5, r5, #8
 8012be2:	1955      	adds	r5, r2, r5
 8012be4:	22fc      	movs	r2, #252	; 0xfc
 8012be6:	096d      	lsrs	r5, r5, #5
 8012be8:	00d2      	lsls	r2, r2, #3
 8012bea:	4015      	ands	r5, r2
 8012bec:	432b      	orrs	r3, r5
 8012bee:	8023      	strh	r3, [r4, #0]
 8012bf0:	9b00      	ldr	r3, [sp, #0]
 8012bf2:	3402      	adds	r4, #2
 8012bf4:	3303      	adds	r3, #3
 8012bf6:	9300      	str	r3, [sp, #0]
 8012bf8:	e7bf      	b.n	8012b7a <_ZN8touchgfx19LCD16bppSerialFlash14blitCopyRGB888EPKhRKNS_4RectES5_h+0x122>
 8012bfa:	002b      	movs	r3, r5
 8012bfc:	4373      	muls	r3, r6
 8012bfe:	68f8      	ldr	r0, [r7, #12]
 8012c00:	9304      	str	r3, [sp, #16]
 8012c02:	6803      	ldr	r3, [r0, #0]
 8012c04:	9a04      	ldr	r2, [sp, #16]
 8012c06:	691b      	ldr	r3, [r3, #16]
 8012c08:	9900      	ldr	r1, [sp, #0]
 8012c0a:	4798      	blx	r3
 8012c0c:	0073      	lsls	r3, r6, #1
 8012c0e:	9305      	str	r3, [sp, #20]
 8012c10:	9b02      	ldr	r3, [sp, #8]
 8012c12:	2bff      	cmp	r3, #255	; 0xff
 8012c14:	d064      	beq.n	8012ce0 <_ZN8touchgfx19LCD16bppSerialFlash14blitCopyRGB888EPKhRKNS_4RectES5_h+0x288>
 8012c16:	9506      	str	r5, [sp, #24]
 8012c18:	9b01      	ldr	r3, [sp, #4]
 8012c1a:	429c      	cmp	r4, r3
 8012c1c:	d300      	bcc.n	8012c20 <_ZN8touchgfx19LCD16bppSerialFlash14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8012c1e:	e097      	b.n	8012d50 <_ZN8touchgfx19LCD16bppSerialFlash14blitCopyRGB888EPKhRKNS_4RectES5_h+0x2f8>
 8012c20:	68f8      	ldr	r0, [r7, #12]
 8012c22:	6803      	ldr	r3, [r0, #0]
 8012c24:	695b      	ldr	r3, [r3, #20]
 8012c26:	4798      	blx	r3
 8012c28:	4b4e      	ldr	r3, [pc, #312]	; (8012d64 <_ZN8touchgfx19LCD16bppSerialFlash14blitCopyRGB888EPKhRKNS_4RectES5_h+0x30c>)
 8012c2a:	9a01      	ldr	r2, [sp, #4]
 8012c2c:	881b      	ldrh	r3, [r3, #0]
 8012c2e:	0005      	movs	r5, r0
 8012c30:	005b      	lsls	r3, r3, #1
 8012c32:	18e3      	adds	r3, r4, r3
 8012c34:	429a      	cmp	r2, r3
 8012c36:	d90d      	bls.n	8012c54 <_ZN8touchgfx19LCD16bppSerialFlash14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1fc>
 8012c38:	ab08      	add	r3, sp, #32
 8012c3a:	2204      	movs	r2, #4
 8012c3c:	5e9b      	ldrsh	r3, [r3, r2]
 8012c3e:	9a06      	ldr	r2, [sp, #24]
 8012c40:	68f8      	ldr	r0, [r7, #12]
 8012c42:	4353      	muls	r3, r2
 8012c44:	9a00      	ldr	r2, [sp, #0]
 8012c46:	18d3      	adds	r3, r2, r3
 8012c48:	9300      	str	r3, [sp, #0]
 8012c4a:	6803      	ldr	r3, [r0, #0]
 8012c4c:	9a04      	ldr	r2, [sp, #16]
 8012c4e:	691b      	ldr	r3, [r3, #16]
 8012c50:	9900      	ldr	r1, [sp, #0]
 8012c52:	4798      	blx	r3
 8012c54:	9b05      	ldr	r3, [sp, #20]
 8012c56:	18e3      	adds	r3, r4, r3
 8012c58:	9307      	str	r3, [sp, #28]
 8012c5a:	9b02      	ldr	r3, [sp, #8]
 8012c5c:	43db      	mvns	r3, r3
 8012c5e:	b2db      	uxtb	r3, r3
 8012c60:	469c      	mov	ip, r3
 8012c62:	9b07      	ldr	r3, [sp, #28]
 8012c64:	429c      	cmp	r4, r3
 8012c66:	d270      	bcs.n	8012d4a <_ZN8touchgfx19LCD16bppSerialFlash14blitCopyRGB888EPKhRKNS_4RectES5_h+0x2f2>
 8012c68:	466b      	mov	r3, sp
 8012c6a:	2107      	movs	r1, #7
 8012c6c:	8822      	ldrh	r2, [r4, #0]
 8012c6e:	8918      	ldrh	r0, [r3, #8]
 8012c70:	9e06      	ldr	r6, [sp, #24]
 8012c72:	1213      	asrs	r3, r2, #8
 8012c74:	438b      	bics	r3, r1
 8012c76:	10d1      	asrs	r1, r2, #3
 8012c78:	43b1      	bics	r1, r6
 8012c7a:	115e      	asrs	r6, r3, #5
 8012c7c:	4333      	orrs	r3, r6
 8012c7e:	4666      	mov	r6, ip
 8012c80:	4373      	muls	r3, r6
 8012c82:	78ae      	ldrb	r6, [r5, #2]
 8012c84:	b2c9      	uxtb	r1, r1
 8012c86:	4346      	muls	r6, r0
 8012c88:	199b      	adds	r3, r3, r6
 8012c8a:	118e      	asrs	r6, r1, #6
 8012c8c:	4331      	orrs	r1, r6
 8012c8e:	4666      	mov	r6, ip
 8012c90:	4371      	muls	r1, r6
 8012c92:	786e      	ldrb	r6, [r5, #1]
 8012c94:	00d2      	lsls	r2, r2, #3
 8012c96:	4346      	muls	r6, r0
 8012c98:	b2d2      	uxtb	r2, r2
 8012c9a:	1989      	adds	r1, r1, r6
 8012c9c:	1156      	asrs	r6, r2, #5
 8012c9e:	4332      	orrs	r2, r6
 8012ca0:	4666      	mov	r6, ip
 8012ca2:	4372      	muls	r2, r6
 8012ca4:	782e      	ldrb	r6, [r5, #0]
 8012ca6:	b29b      	uxth	r3, r3
 8012ca8:	4370      	muls	r0, r6
 8012caa:	26f8      	movs	r6, #248	; 0xf8
 8012cac:	1812      	adds	r2, r2, r0
 8012cae:	1c58      	adds	r0, r3, #1
 8012cb0:	121b      	asrs	r3, r3, #8
 8012cb2:	b292      	uxth	r2, r2
 8012cb4:	0236      	lsls	r6, r6, #8
 8012cb6:	18c3      	adds	r3, r0, r3
 8012cb8:	4033      	ands	r3, r6
 8012cba:	1c56      	adds	r6, r2, #1
 8012cbc:	1212      	asrs	r2, r2, #8
 8012cbe:	18b2      	adds	r2, r6, r2
 8012cc0:	0412      	lsls	r2, r2, #16
 8012cc2:	b289      	uxth	r1, r1
 8012cc4:	0ed2      	lsrs	r2, r2, #27
 8012cc6:	4313      	orrs	r3, r2
 8012cc8:	1c4a      	adds	r2, r1, #1
 8012cca:	1209      	asrs	r1, r1, #8
 8012ccc:	1851      	adds	r1, r2, r1
 8012cce:	22fc      	movs	r2, #252	; 0xfc
 8012cd0:	0949      	lsrs	r1, r1, #5
 8012cd2:	00d2      	lsls	r2, r2, #3
 8012cd4:	4011      	ands	r1, r2
 8012cd6:	430b      	orrs	r3, r1
 8012cd8:	8023      	strh	r3, [r4, #0]
 8012cda:	3503      	adds	r5, #3
 8012cdc:	3402      	adds	r4, #2
 8012cde:	e7c0      	b.n	8012c62 <_ZN8touchgfx19LCD16bppSerialFlash14blitCopyRGB888EPKhRKNS_4RectES5_h+0x20a>
 8012ce0:	26fc      	movs	r6, #252	; 0xfc
 8012ce2:	9502      	str	r5, [sp, #8]
 8012ce4:	00f6      	lsls	r6, r6, #3
 8012ce6:	9b01      	ldr	r3, [sp, #4]
 8012ce8:	429c      	cmp	r4, r3
 8012cea:	d231      	bcs.n	8012d50 <_ZN8touchgfx19LCD16bppSerialFlash14blitCopyRGB888EPKhRKNS_4RectES5_h+0x2f8>
 8012cec:	68f8      	ldr	r0, [r7, #12]
 8012cee:	6803      	ldr	r3, [r0, #0]
 8012cf0:	695b      	ldr	r3, [r3, #20]
 8012cf2:	4798      	blx	r3
 8012cf4:	4b1b      	ldr	r3, [pc, #108]	; (8012d64 <_ZN8touchgfx19LCD16bppSerialFlash14blitCopyRGB888EPKhRKNS_4RectES5_h+0x30c>)
 8012cf6:	9a01      	ldr	r2, [sp, #4]
 8012cf8:	881b      	ldrh	r3, [r3, #0]
 8012cfa:	0005      	movs	r5, r0
 8012cfc:	005b      	lsls	r3, r3, #1
 8012cfe:	18e3      	adds	r3, r4, r3
 8012d00:	429a      	cmp	r2, r3
 8012d02:	d90d      	bls.n	8012d20 <_ZN8touchgfx19LCD16bppSerialFlash14blitCopyRGB888EPKhRKNS_4RectES5_h+0x2c8>
 8012d04:	ab08      	add	r3, sp, #32
 8012d06:	2204      	movs	r2, #4
 8012d08:	5e9b      	ldrsh	r3, [r3, r2]
 8012d0a:	9a02      	ldr	r2, [sp, #8]
 8012d0c:	68f8      	ldr	r0, [r7, #12]
 8012d0e:	4353      	muls	r3, r2
 8012d10:	9a00      	ldr	r2, [sp, #0]
 8012d12:	18d3      	adds	r3, r2, r3
 8012d14:	9300      	str	r3, [sp, #0]
 8012d16:	6803      	ldr	r3, [r0, #0]
 8012d18:	9a04      	ldr	r2, [sp, #16]
 8012d1a:	691b      	ldr	r3, [r3, #16]
 8012d1c:	9900      	ldr	r1, [sp, #0]
 8012d1e:	4798      	blx	r3
 8012d20:	9b05      	ldr	r3, [sp, #20]
 8012d22:	18e2      	adds	r2, r4, r3
 8012d24:	4294      	cmp	r4, r2
 8012d26:	d20d      	bcs.n	8012d44 <_ZN8touchgfx19LCD16bppSerialFlash14blitCopyRGB888EPKhRKNS_4RectES5_h+0x2ec>
 8012d28:	78ab      	ldrb	r3, [r5, #2]
 8012d2a:	7869      	ldrb	r1, [r5, #1]
 8012d2c:	08db      	lsrs	r3, r3, #3
 8012d2e:	00c9      	lsls	r1, r1, #3
 8012d30:	02db      	lsls	r3, r3, #11
 8012d32:	4031      	ands	r1, r6
 8012d34:	4319      	orrs	r1, r3
 8012d36:	782b      	ldrb	r3, [r5, #0]
 8012d38:	3503      	adds	r5, #3
 8012d3a:	08db      	lsrs	r3, r3, #3
 8012d3c:	430b      	orrs	r3, r1
 8012d3e:	8023      	strh	r3, [r4, #0]
 8012d40:	3402      	adds	r4, #2
 8012d42:	e7ef      	b.n	8012d24 <_ZN8touchgfx19LCD16bppSerialFlash14blitCopyRGB888EPKhRKNS_4RectES5_h+0x2cc>
 8012d44:	9b03      	ldr	r3, [sp, #12]
 8012d46:	18e4      	adds	r4, r4, r3
 8012d48:	e7cd      	b.n	8012ce6 <_ZN8touchgfx19LCD16bppSerialFlash14blitCopyRGB888EPKhRKNS_4RectES5_h+0x28e>
 8012d4a:	9b03      	ldr	r3, [sp, #12]
 8012d4c:	18e4      	adds	r4, r4, r3
 8012d4e:	e763      	b.n	8012c18 <_ZN8touchgfx19LCD16bppSerialFlash14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c0>
 8012d50:	4b03      	ldr	r3, [pc, #12]	; (8012d60 <_ZN8touchgfx19LCD16bppSerialFlash14blitCopyRGB888EPKhRKNS_4RectES5_h+0x308>)
 8012d52:	6818      	ldr	r0, [r3, #0]
 8012d54:	6803      	ldr	r3, [r0, #0]
 8012d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d58:	4798      	blx	r3
 8012d5a:	b00d      	add	sp, #52	; 0x34
 8012d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d5e:	46c0      	nop			; (mov r8, r8)
 8012d60:	200026c8 	.word	0x200026c8
 8012d64:	200026c2 	.word	0x200026c2

08012d68 <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8012d68:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012d6a:	ac06      	add	r4, sp, #24
 8012d6c:	0015      	movs	r5, r2
 8012d6e:	001a      	movs	r2, r3
 8012d70:	cc08      	ldmia	r4!, {r3}
 8012d72:	ae08      	add	r6, sp, #32
 8012d74:	7824      	ldrb	r4, [r4, #0]
 8012d76:	7836      	ldrb	r6, [r6, #0]
 8012d78:	2d01      	cmp	r5, #1
 8012d7a:	d00e      	beq.n	8012d9a <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 8012d7c:	2d00      	cmp	r5, #0
 8012d7e:	d002      	beq.n	8012d86 <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1e>
 8012d80:	2d02      	cmp	r5, #2
 8012d82:	d006      	beq.n	8012d92 <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 8012d84:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8012d86:	6805      	ldr	r5, [r0, #0]
 8012d88:	9601      	str	r6, [sp, #4]
 8012d8a:	9400      	str	r4, [sp, #0]
 8012d8c:	68ec      	ldr	r4, [r5, #12]
 8012d8e:	47a0      	blx	r4
 8012d90:	e7f8      	b.n	8012d84 <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 8012d92:	9400      	str	r4, [sp, #0]
 8012d94:	f7ff fc2a 	bl	80125ec <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8012d98:	e7f4      	b.n	8012d84 <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 8012d9a:	9400      	str	r4, [sp, #0]
 8012d9c:	f7ff fe5c 	bl	8012a58 <_ZN8touchgfx19LCD16bppSerialFlash14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8012da0:	e7f0      	b.n	8012d84 <_ZN8touchgfx19LCD16bppSerialFlash8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
	...

08012da4 <_ZN8touchgfx19LCD16bppSerialFlash19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8012da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012da6:	001d      	movs	r5, r3
 8012da8:	000e      	movs	r6, r1
 8012daa:	b08f      	sub	sp, #60	; 0x3c
 8012dac:	ab14      	add	r3, sp, #80	; 0x50
 8012dae:	9203      	str	r2, [sp, #12]
 8012db0:	cb04      	ldmia	r3!, {r2}
 8012db2:	ac0c      	add	r4, sp, #48	; 0x30
 8012db4:	781b      	ldrb	r3, [r3, #0]
 8012db6:	0029      	movs	r1, r5
 8012db8:	0007      	movs	r7, r0
 8012dba:	9200      	str	r2, [sp, #0]
 8012dbc:	a80a      	add	r0, sp, #40	; 0x28
 8012dbe:	2208      	movs	r2, #8
 8012dc0:	9302      	str	r3, [sp, #8]
 8012dc2:	f001 faf4 	bl	80143ae <memcpy>
 8012dc6:	2208      	movs	r2, #8
 8012dc8:	9900      	ldr	r1, [sp, #0]
 8012dca:	0020      	movs	r0, r4
 8012dcc:	f001 faef 	bl	80143ae <memcpy>
 8012dd0:	a80a      	add	r0, sp, #40	; 0x28
 8012dd2:	f7fb fe19 	bl	800ea08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012dd6:	0020      	movs	r0, r4
 8012dd8:	0029      	movs	r1, r5
 8012dda:	f7fb fe3d 	bl	800ea58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012dde:	2302      	movs	r3, #2
 8012de0:	5ee2      	ldrsh	r2, [r4, r3]
 8012de2:	2300      	movs	r3, #0
 8012de4:	5ee1      	ldrsh	r1, [r4, r3]
 8012de6:	ab0a      	add	r3, sp, #40	; 0x28
 8012de8:	2004      	movs	r0, #4
 8012dea:	5e1b      	ldrsh	r3, [r3, r0]
 8012dec:	4353      	muls	r3, r2
 8012dee:	185b      	adds	r3, r3, r1
 8012df0:	18f3      	adds	r3, r6, r3
 8012df2:	9300      	str	r3, [sp, #0]
 8012df4:	ab0a      	add	r3, sp, #40	; 0x28
 8012df6:	881b      	ldrh	r3, [r3, #0]
 8012df8:	185b      	adds	r3, r3, r1
 8012dfa:	8023      	strh	r3, [r4, #0]
 8012dfc:	ab0a      	add	r3, sp, #40	; 0x28
 8012dfe:	885b      	ldrh	r3, [r3, #2]
 8012e00:	189b      	adds	r3, r3, r2
 8012e02:	8063      	strh	r3, [r4, #2]
 8012e04:	2204      	movs	r2, #4
 8012e06:	5ea3      	ldrsh	r3, [r4, r2]
 8012e08:	9301      	str	r3, [sp, #4]
 8012e0a:	2306      	movs	r3, #6
 8012e0c:	5ee5      	ldrsh	r5, [r4, r3]
 8012e0e:	4ba6      	ldr	r3, [pc, #664]	; (80130a8 <_ZN8touchgfx19LCD16bppSerialFlash19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x304>)
 8012e10:	6818      	ldr	r0, [r3, #0]
 8012e12:	6803      	ldr	r3, [r0, #0]
 8012e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e16:	4798      	blx	r3
 8012e18:	4ba4      	ldr	r3, [pc, #656]	; (80130ac <_ZN8touchgfx19LCD16bppSerialFlash19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x308>)
 8012e1a:	881a      	ldrh	r2, [r3, #0]
 8012e1c:	2102      	movs	r1, #2
 8012e1e:	5e63      	ldrsh	r3, [r4, r1]
 8012e20:	4355      	muls	r5, r2
 8012e22:	4353      	muls	r3, r2
 8012e24:	2100      	movs	r1, #0
 8012e26:	5e64      	ldrsh	r4, [r4, r1]
 8012e28:	006d      	lsls	r5, r5, #1
 8012e2a:	191c      	adds	r4, r3, r4
 8012e2c:	0064      	lsls	r4, r4, #1
 8012e2e:	1904      	adds	r4, r0, r4
 8012e30:	1963      	adds	r3, r4, r5
 8012e32:	9304      	str	r3, [sp, #16]
 8012e34:	9b03      	ldr	r3, [sp, #12]
 8012e36:	68f8      	ldr	r0, [r7, #12]
 8012e38:	3304      	adds	r3, #4
 8012e3a:	9305      	str	r3, [sp, #20]
 8012e3c:	6803      	ldr	r3, [r0, #0]
 8012e3e:	9900      	ldr	r1, [sp, #0]
 8012e40:	689b      	ldr	r3, [r3, #8]
 8012e42:	4798      	blx	r3
 8012e44:	2800      	cmp	r0, #0
 8012e46:	d031      	beq.n	8012eac <_ZN8touchgfx19LCD16bppSerialFlash19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x108>
 8012e48:	68f8      	ldr	r0, [r7, #12]
 8012e4a:	9905      	ldr	r1, [sp, #20]
 8012e4c:	6803      	ldr	r3, [r0, #0]
 8012e4e:	689b      	ldr	r3, [r3, #8]
 8012e50:	4798      	blx	r3
 8012e52:	2800      	cmp	r0, #0
 8012e54:	d02a      	beq.n	8012eac <_ZN8touchgfx19LCD16bppSerialFlash19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x108>
 8012e56:	9b01      	ldr	r3, [sp, #4]
 8012e58:	005b      	lsls	r3, r3, #1
 8012e5a:	9306      	str	r3, [sp, #24]
 8012e5c:	9b04      	ldr	r3, [sp, #16]
 8012e5e:	429c      	cmp	r4, r3
 8012e60:	d300      	bcc.n	8012e64 <_ZN8touchgfx19LCD16bppSerialFlash19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 8012e62:	e119      	b.n	8013098 <_ZN8touchgfx19LCD16bppSerialFlash19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x2f4>
 8012e64:	9b06      	ldr	r3, [sp, #24]
 8012e66:	18e3      	adds	r3, r4, r3
 8012e68:	9303      	str	r3, [sp, #12]
 8012e6a:	9b03      	ldr	r3, [sp, #12]
 8012e6c:	429c      	cmp	r4, r3
 8012e6e:	d300      	bcc.n	8012e72 <_ZN8touchgfx19LCD16bppSerialFlash19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xce>
 8012e70:	e0af      	b.n	8012fd2 <_ZN8touchgfx19LCD16bppSerialFlash19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22e>
 8012e72:	9b00      	ldr	r3, [sp, #0]
 8012e74:	9a05      	ldr	r2, [sp, #20]
 8012e76:	781b      	ldrb	r3, [r3, #0]
 8012e78:	009b      	lsls	r3, r3, #2
 8012e7a:	589b      	ldr	r3, [r3, r2]
 8012e7c:	0e1a      	lsrs	r2, r3, #24
 8012e7e:	d010      	beq.n	8012ea2 <_ZN8touchgfx19LCD16bppSerialFlash19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 8012e80:	0a1f      	lsrs	r7, r3, #8
 8012e82:	2aff      	cmp	r2, #255	; 0xff
 8012e84:	d15c      	bne.n	8012f40 <_ZN8touchgfx19LCD16bppSerialFlash19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19c>
 8012e86:	9902      	ldr	r1, [sp, #8]
 8012e88:	29ff      	cmp	r1, #255	; 0xff
 8012e8a:	d159      	bne.n	8012f40 <_ZN8touchgfx19LCD16bppSerialFlash19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19c>
 8012e8c:	22fc      	movs	r2, #252	; 0xfc
 8012e8e:	0959      	lsrs	r1, r3, #5
 8012e90:	00d2      	lsls	r2, r2, #3
 8012e92:	4011      	ands	r1, r2
 8012e94:	0cda      	lsrs	r2, r3, #19
 8012e96:	02d2      	lsls	r2, r2, #11
 8012e98:	061b      	lsls	r3, r3, #24
 8012e9a:	430a      	orrs	r2, r1
 8012e9c:	0edb      	lsrs	r3, r3, #27
 8012e9e:	431a      	orrs	r2, r3
 8012ea0:	8022      	strh	r2, [r4, #0]
 8012ea2:	9b00      	ldr	r3, [sp, #0]
 8012ea4:	3402      	adds	r4, #2
 8012ea6:	3301      	adds	r3, #1
 8012ea8:	9300      	str	r3, [sp, #0]
 8012eaa:	e7de      	b.n	8012e6a <_ZN8touchgfx19LCD16bppSerialFlash19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc6>
 8012eac:	68f8      	ldr	r0, [r7, #12]
 8012eae:	9a01      	ldr	r2, [sp, #4]
 8012eb0:	6803      	ldr	r3, [r0, #0]
 8012eb2:	9900      	ldr	r1, [sp, #0]
 8012eb4:	691b      	ldr	r3, [r3, #16]
 8012eb6:	4798      	blx	r3
 8012eb8:	9b01      	ldr	r3, [sp, #4]
 8012eba:	005b      	lsls	r3, r3, #1
 8012ebc:	9307      	str	r3, [sp, #28]
 8012ebe:	9b04      	ldr	r3, [sp, #16]
 8012ec0:	429c      	cmp	r4, r3
 8012ec2:	d300      	bcc.n	8012ec6 <_ZN8touchgfx19LCD16bppSerialFlash19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x122>
 8012ec4:	e0e8      	b.n	8013098 <_ZN8touchgfx19LCD16bppSerialFlash19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x2f4>
 8012ec6:	68f8      	ldr	r0, [r7, #12]
 8012ec8:	6803      	ldr	r3, [r0, #0]
 8012eca:	695b      	ldr	r3, [r3, #20]
 8012ecc:	4798      	blx	r3
 8012ece:	4b77      	ldr	r3, [pc, #476]	; (80130ac <_ZN8touchgfx19LCD16bppSerialFlash19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x308>)
 8012ed0:	9a04      	ldr	r2, [sp, #16]
 8012ed2:	881b      	ldrh	r3, [r3, #0]
 8012ed4:	9003      	str	r0, [sp, #12]
 8012ed6:	005b      	lsls	r3, r3, #1
 8012ed8:	18e3      	adds	r3, r4, r3
 8012eda:	429a      	cmp	r2, r3
 8012edc:	d90b      	bls.n	8012ef6 <_ZN8touchgfx19LCD16bppSerialFlash19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x152>
 8012ede:	ab0a      	add	r3, sp, #40	; 0x28
 8012ee0:	2204      	movs	r2, #4
 8012ee2:	5e9b      	ldrsh	r3, [r3, r2]
 8012ee4:	9a00      	ldr	r2, [sp, #0]
 8012ee6:	68f8      	ldr	r0, [r7, #12]
 8012ee8:	18d3      	adds	r3, r2, r3
 8012eea:	9300      	str	r3, [sp, #0]
 8012eec:	6803      	ldr	r3, [r0, #0]
 8012eee:	9a01      	ldr	r2, [sp, #4]
 8012ef0:	691b      	ldr	r3, [r3, #16]
 8012ef2:	9900      	ldr	r1, [sp, #0]
 8012ef4:	4798      	blx	r3
 8012ef6:	9b07      	ldr	r3, [sp, #28]
 8012ef8:	18e3      	adds	r3, r4, r3
 8012efa:	9308      	str	r3, [sp, #32]
 8012efc:	9b08      	ldr	r3, [sp, #32]
 8012efe:	429c      	cmp	r4, r3
 8012f00:	d300      	bcc.n	8012f04 <_ZN8touchgfx19LCD16bppSerialFlash19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x160>
 8012f02:	e0c2      	b.n	801308a <_ZN8touchgfx19LCD16bppSerialFlash19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x2e6>
 8012f04:	9b03      	ldr	r3, [sp, #12]
 8012f06:	9a05      	ldr	r2, [sp, #20]
 8012f08:	781b      	ldrb	r3, [r3, #0]
 8012f0a:	009b      	lsls	r3, r3, #2
 8012f0c:	589b      	ldr	r3, [r3, r2]
 8012f0e:	0e1a      	lsrs	r2, r3, #24
 8012f10:	d011      	beq.n	8012f36 <_ZN8touchgfx19LCD16bppSerialFlash19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 8012f12:	0a19      	lsrs	r1, r3, #8
 8012f14:	9109      	str	r1, [sp, #36]	; 0x24
 8012f16:	2aff      	cmp	r2, #255	; 0xff
 8012f18:	d16a      	bne.n	8012ff0 <_ZN8touchgfx19LCD16bppSerialFlash19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x24c>
 8012f1a:	9902      	ldr	r1, [sp, #8]
 8012f1c:	29ff      	cmp	r1, #255	; 0xff
 8012f1e:	d167      	bne.n	8012ff0 <_ZN8touchgfx19LCD16bppSerialFlash19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x24c>
 8012f20:	22fc      	movs	r2, #252	; 0xfc
 8012f22:	0959      	lsrs	r1, r3, #5
 8012f24:	00d2      	lsls	r2, r2, #3
 8012f26:	4011      	ands	r1, r2
 8012f28:	0cda      	lsrs	r2, r3, #19
 8012f2a:	02d2      	lsls	r2, r2, #11
 8012f2c:	061b      	lsls	r3, r3, #24
 8012f2e:	430a      	orrs	r2, r1
 8012f30:	0edb      	lsrs	r3, r3, #27
 8012f32:	431a      	orrs	r2, r3
 8012f34:	8022      	strh	r2, [r4, #0]
 8012f36:	9b03      	ldr	r3, [sp, #12]
 8012f38:	3402      	adds	r4, #2
 8012f3a:	3301      	adds	r3, #1
 8012f3c:	9303      	str	r3, [sp, #12]
 8012f3e:	e7dd      	b.n	8012efc <_ZN8touchgfx19LCD16bppSerialFlash19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x158>
 8012f40:	2007      	movs	r0, #7
 8012f42:	8825      	ldrh	r5, [r4, #0]
 8012f44:	b2ff      	uxtb	r7, r7
 8012f46:	1229      	asrs	r1, r5, #8
 8012f48:	4381      	bics	r1, r0
 8012f4a:	10ee      	asrs	r6, r5, #3
 8012f4c:	3804      	subs	r0, #4
 8012f4e:	4386      	bics	r6, r0
 8012f50:	4085      	lsls	r5, r0
 8012f52:	9802      	ldr	r0, [sp, #8]
 8012f54:	b2f6      	uxtb	r6, r6
 8012f56:	4342      	muls	r2, r0
 8012f58:	1c50      	adds	r0, r2, #1
 8012f5a:	1212      	asrs	r2, r2, #8
 8012f5c:	1880      	adds	r0, r0, r2
 8012f5e:	1200      	asrs	r0, r0, #8
 8012f60:	b282      	uxth	r2, r0
 8012f62:	43c0      	mvns	r0, r0
 8012f64:	4694      	mov	ip, r2
 8012f66:	114a      	asrs	r2, r1, #5
 8012f68:	b2c0      	uxtb	r0, r0
 8012f6a:	4311      	orrs	r1, r2
 8012f6c:	4341      	muls	r1, r0
 8012f6e:	9107      	str	r1, [sp, #28]
 8012f70:	4661      	mov	r1, ip
 8012f72:	0c1a      	lsrs	r2, r3, #16
 8012f74:	b2d2      	uxtb	r2, r2
 8012f76:	434a      	muls	r2, r1
 8012f78:	9907      	ldr	r1, [sp, #28]
 8012f7a:	b2ed      	uxtb	r5, r5
 8012f7c:	1889      	adds	r1, r1, r2
 8012f7e:	11b2      	asrs	r2, r6, #6
 8012f80:	4332      	orrs	r2, r6
 8012f82:	4666      	mov	r6, ip
 8012f84:	4342      	muls	r2, r0
 8012f86:	4377      	muls	r7, r6
 8012f88:	19d2      	adds	r2, r2, r7
 8012f8a:	116f      	asrs	r7, r5, #5
 8012f8c:	433d      	orrs	r5, r7
 8012f8e:	b2db      	uxtb	r3, r3
 8012f90:	4373      	muls	r3, r6
 8012f92:	4345      	muls	r5, r0
 8012f94:	b289      	uxth	r1, r1
 8012f96:	18ed      	adds	r5, r5, r3
 8012f98:	1c4b      	adds	r3, r1, #1
 8012f9a:	1209      	asrs	r1, r1, #8
 8012f9c:	1859      	adds	r1, r3, r1
 8012f9e:	23ff      	movs	r3, #255	; 0xff
 8012fa0:	b292      	uxth	r2, r2
 8012fa2:	021b      	lsls	r3, r3, #8
 8012fa4:	b2ad      	uxth	r5, r5
 8012fa6:	4019      	ands	r1, r3
 8012fa8:	1c53      	adds	r3, r2, #1
 8012faa:	1212      	asrs	r2, r2, #8
 8012fac:	1c6e      	adds	r6, r5, #1
 8012fae:	189a      	adds	r2, r3, r2
 8012fb0:	122d      	asrs	r5, r5, #8
 8012fb2:	23ff      	movs	r3, #255	; 0xff
 8012fb4:	1976      	adds	r6, r6, r5
 8012fb6:	25fc      	movs	r5, #252	; 0xfc
 8012fb8:	0436      	lsls	r6, r6, #16
 8012fba:	0ac9      	lsrs	r1, r1, #11
 8012fbc:	0952      	lsrs	r2, r2, #5
 8012fbe:	00db      	lsls	r3, r3, #3
 8012fc0:	0ef6      	lsrs	r6, r6, #27
 8012fc2:	02c9      	lsls	r1, r1, #11
 8012fc4:	401a      	ands	r2, r3
 8012fc6:	00ed      	lsls	r5, r5, #3
 8012fc8:	430e      	orrs	r6, r1
 8012fca:	402a      	ands	r2, r5
 8012fcc:	4316      	orrs	r6, r2
 8012fce:	8026      	strh	r6, [r4, #0]
 8012fd0:	e767      	b.n	8012ea2 <_ZN8touchgfx19LCD16bppSerialFlash19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 8012fd2:	4b36      	ldr	r3, [pc, #216]	; (80130ac <_ZN8touchgfx19LCD16bppSerialFlash19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x308>)
 8012fd4:	9a01      	ldr	r2, [sp, #4]
 8012fd6:	881b      	ldrh	r3, [r3, #0]
 8012fd8:	1a9b      	subs	r3, r3, r2
 8012fda:	005b      	lsls	r3, r3, #1
 8012fdc:	18e4      	adds	r4, r4, r3
 8012fde:	ab0a      	add	r3, sp, #40	; 0x28
 8012fe0:	2204      	movs	r2, #4
 8012fe2:	5e9b      	ldrsh	r3, [r3, r2]
 8012fe4:	9a01      	ldr	r2, [sp, #4]
 8012fe6:	1a9b      	subs	r3, r3, r2
 8012fe8:	9a00      	ldr	r2, [sp, #0]
 8012fea:	18d3      	adds	r3, r2, r3
 8012fec:	9300      	str	r3, [sp, #0]
 8012fee:	e735      	b.n	8012e5c <_ZN8touchgfx19LCD16bppSerialFlash19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb8>
 8012ff0:	2007      	movs	r0, #7
 8012ff2:	8825      	ldrh	r5, [r4, #0]
 8012ff4:	1229      	asrs	r1, r5, #8
 8012ff6:	4381      	bics	r1, r0
 8012ff8:	3804      	subs	r0, #4
 8012ffa:	10ee      	asrs	r6, r5, #3
 8012ffc:	4085      	lsls	r5, r0
 8012ffe:	4386      	bics	r6, r0
 8013000:	b2e8      	uxtb	r0, r5
 8013002:	9006      	str	r0, [sp, #24]
 8013004:	9802      	ldr	r0, [sp, #8]
 8013006:	b2f6      	uxtb	r6, r6
 8013008:	4342      	muls	r2, r0
 801300a:	1c50      	adds	r0, r2, #1
 801300c:	1212      	asrs	r2, r2, #8
 801300e:	1880      	adds	r0, r0, r2
 8013010:	1200      	asrs	r0, r0, #8
 8013012:	b282      	uxth	r2, r0
 8013014:	4694      	mov	ip, r2
 8013016:	43c0      	mvns	r0, r0
 8013018:	4665      	mov	r5, ip
 801301a:	114a      	asrs	r2, r1, #5
 801301c:	4311      	orrs	r1, r2
 801301e:	0c1a      	lsrs	r2, r3, #16
 8013020:	b2c0      	uxtb	r0, r0
 8013022:	b2d2      	uxtb	r2, r2
 8013024:	436a      	muls	r2, r5
 8013026:	4341      	muls	r1, r0
 8013028:	1889      	adds	r1, r1, r2
 801302a:	11b2      	asrs	r2, r6, #6
 801302c:	4332      	orrs	r2, r6
 801302e:	466d      	mov	r5, sp
 8013030:	2624      	movs	r6, #36	; 0x24
 8013032:	19ad      	adds	r5, r5, r6
 8013034:	782e      	ldrb	r6, [r5, #0]
 8013036:	4665      	mov	r5, ip
 8013038:	4342      	muls	r2, r0
 801303a:	436e      	muls	r6, r5
 801303c:	9d06      	ldr	r5, [sp, #24]
 801303e:	1992      	adds	r2, r2, r6
 8013040:	116e      	asrs	r6, r5, #5
 8013042:	4335      	orrs	r5, r6
 8013044:	4345      	muls	r5, r0
 8013046:	4660      	mov	r0, ip
 8013048:	b2db      	uxtb	r3, r3
 801304a:	4343      	muls	r3, r0
 801304c:	18ed      	adds	r5, r5, r3
 801304e:	23ff      	movs	r3, #255	; 0xff
 8013050:	b289      	uxth	r1, r1
 8013052:	b2ad      	uxth	r5, r5
 8013054:	1c4e      	adds	r6, r1, #1
 8013056:	1209      	asrs	r1, r1, #8
 8013058:	1876      	adds	r6, r6, r1
 801305a:	021b      	lsls	r3, r3, #8
 801305c:	1c69      	adds	r1, r5, #1
 801305e:	122d      	asrs	r5, r5, #8
 8013060:	b292      	uxth	r2, r2
 8013062:	401e      	ands	r6, r3
 8013064:	194d      	adds	r5, r1, r5
 8013066:	1c53      	adds	r3, r2, #1
 8013068:	0af6      	lsrs	r6, r6, #11
 801306a:	042d      	lsls	r5, r5, #16
 801306c:	1212      	asrs	r2, r2, #8
 801306e:	0eed      	lsrs	r5, r5, #27
 8013070:	189a      	adds	r2, r3, r2
 8013072:	02f6      	lsls	r6, r6, #11
 8013074:	23ff      	movs	r3, #255	; 0xff
 8013076:	432e      	orrs	r6, r5
 8013078:	25fc      	movs	r5, #252	; 0xfc
 801307a:	0952      	lsrs	r2, r2, #5
 801307c:	00db      	lsls	r3, r3, #3
 801307e:	401a      	ands	r2, r3
 8013080:	00ed      	lsls	r5, r5, #3
 8013082:	402a      	ands	r2, r5
 8013084:	4316      	orrs	r6, r2
 8013086:	8026      	strh	r6, [r4, #0]
 8013088:	e755      	b.n	8012f36 <_ZN8touchgfx19LCD16bppSerialFlash19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801308a:	4b08      	ldr	r3, [pc, #32]	; (80130ac <_ZN8touchgfx19LCD16bppSerialFlash19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x308>)
 801308c:	9a01      	ldr	r2, [sp, #4]
 801308e:	881b      	ldrh	r3, [r3, #0]
 8013090:	1a9b      	subs	r3, r3, r2
 8013092:	005b      	lsls	r3, r3, #1
 8013094:	18e4      	adds	r4, r4, r3
 8013096:	e712      	b.n	8012ebe <_ZN8touchgfx19LCD16bppSerialFlash19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x11a>
 8013098:	4b03      	ldr	r3, [pc, #12]	; (80130a8 <_ZN8touchgfx19LCD16bppSerialFlash19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x304>)
 801309a:	6818      	ldr	r0, [r3, #0]
 801309c:	6803      	ldr	r3, [r0, #0]
 801309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130a0:	4798      	blx	r3
 80130a2:	b00f      	add	sp, #60	; 0x3c
 80130a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130a6:	46c0      	nop			; (mov r8, r8)
 80130a8:	200026c8 	.word	0x200026c8
 80130ac:	200026c2 	.word	0x200026c2

080130b0 <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80130b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130b2:	b091      	sub	sp, #68	; 0x44
 80130b4:	001d      	movs	r5, r3
 80130b6:	ab16      	add	r3, sp, #88	; 0x58
 80130b8:	9205      	str	r2, [sp, #20]
 80130ba:	cb04      	ldmia	r3!, {r2}
 80130bc:	0006      	movs	r6, r0
 80130be:	781b      	ldrb	r3, [r3, #0]
 80130c0:	9101      	str	r1, [sp, #4]
 80130c2:	9202      	str	r2, [sp, #8]
 80130c4:	9303      	str	r3, [sp, #12]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d100      	bne.n	80130cc <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1c>
 80130ca:	e194      	b.n	80133f6 <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x346>
 80130cc:	af0c      	add	r7, sp, #48	; 0x30
 80130ce:	ac0e      	add	r4, sp, #56	; 0x38
 80130d0:	0029      	movs	r1, r5
 80130d2:	2208      	movs	r2, #8
 80130d4:	0038      	movs	r0, r7
 80130d6:	f001 f96a 	bl	80143ae <memcpy>
 80130da:	2208      	movs	r2, #8
 80130dc:	9902      	ldr	r1, [sp, #8]
 80130de:	0020      	movs	r0, r4
 80130e0:	f001 f965 	bl	80143ae <memcpy>
 80130e4:	0038      	movs	r0, r7
 80130e6:	f7fb fc8f 	bl	800ea08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80130ea:	0020      	movs	r0, r4
 80130ec:	0029      	movs	r1, r5
 80130ee:	f7fb fcb3 	bl	800ea58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80130f2:	2302      	movs	r3, #2
 80130f4:	5ee2      	ldrsh	r2, [r4, r3]
 80130f6:	2300      	movs	r3, #0
 80130f8:	5ee1      	ldrsh	r1, [r4, r3]
 80130fa:	2004      	movs	r0, #4
 80130fc:	5e3b      	ldrsh	r3, [r7, r0]
 80130fe:	9801      	ldr	r0, [sp, #4]
 8013100:	4353      	muls	r3, r2
 8013102:	185b      	adds	r3, r3, r1
 8013104:	18c3      	adds	r3, r0, r3
 8013106:	9301      	str	r3, [sp, #4]
 8013108:	883b      	ldrh	r3, [r7, #0]
 801310a:	185b      	adds	r3, r3, r1
 801310c:	8023      	strh	r3, [r4, #0]
 801310e:	887b      	ldrh	r3, [r7, #2]
 8013110:	189b      	adds	r3, r3, r2
 8013112:	8063      	strh	r3, [r4, #2]
 8013114:	2204      	movs	r2, #4
 8013116:	5ea3      	ldrsh	r3, [r4, r2]
 8013118:	9302      	str	r3, [sp, #8]
 801311a:	2306      	movs	r3, #6
 801311c:	5ee5      	ldrsh	r5, [r4, r3]
 801311e:	4bb7      	ldr	r3, [pc, #732]	; (80133fc <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x34c>)
 8013120:	6818      	ldr	r0, [r3, #0]
 8013122:	6803      	ldr	r3, [r0, #0]
 8013124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013126:	4798      	blx	r3
 8013128:	4bb5      	ldr	r3, [pc, #724]	; (8013400 <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x350>)
 801312a:	881a      	ldrh	r2, [r3, #0]
 801312c:	2102      	movs	r1, #2
 801312e:	5e63      	ldrsh	r3, [r4, r1]
 8013130:	4355      	muls	r5, r2
 8013132:	4353      	muls	r3, r2
 8013134:	2100      	movs	r1, #0
 8013136:	5e64      	ldrsh	r4, [r4, r1]
 8013138:	006d      	lsls	r5, r5, #1
 801313a:	191c      	adds	r4, r3, r4
 801313c:	0064      	lsls	r4, r4, #1
 801313e:	1904      	adds	r4, r0, r4
 8013140:	1963      	adds	r3, r4, r5
 8013142:	9304      	str	r3, [sp, #16]
 8013144:	9b05      	ldr	r3, [sp, #20]
 8013146:	68f0      	ldr	r0, [r6, #12]
 8013148:	3304      	adds	r3, #4
 801314a:	9305      	str	r3, [sp, #20]
 801314c:	6803      	ldr	r3, [r0, #0]
 801314e:	9901      	ldr	r1, [sp, #4]
 8013150:	689b      	ldr	r3, [r3, #8]
 8013152:	4798      	blx	r3
 8013154:	2800      	cmp	r0, #0
 8013156:	d075      	beq.n	8013244 <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>
 8013158:	68f0      	ldr	r0, [r6, #12]
 801315a:	9905      	ldr	r1, [sp, #20]
 801315c:	6803      	ldr	r3, [r0, #0]
 801315e:	689b      	ldr	r3, [r3, #8]
 8013160:	4798      	blx	r3
 8013162:	2800      	cmp	r0, #0
 8013164:	d06e      	beq.n	8013244 <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>
 8013166:	9b02      	ldr	r3, [sp, #8]
 8013168:	005b      	lsls	r3, r3, #1
 801316a:	9306      	str	r3, [sp, #24]
 801316c:	9b03      	ldr	r3, [sp, #12]
 801316e:	43db      	mvns	r3, r3
 8013170:	b2db      	uxtb	r3, r3
 8013172:	9307      	str	r3, [sp, #28]
 8013174:	9b03      	ldr	r3, [sp, #12]
 8013176:	2bff      	cmp	r3, #255	; 0xff
 8013178:	d052      	beq.n	8013220 <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x170>
 801317a:	2303      	movs	r3, #3
 801317c:	469c      	mov	ip, r3
 801317e:	9b04      	ldr	r3, [sp, #16]
 8013180:	42a3      	cmp	r3, r4
 8013182:	d800      	bhi.n	8013186 <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xd6>
 8013184:	e132      	b.n	80133ec <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x33c>
 8013186:	9b06      	ldr	r3, [sp, #24]
 8013188:	18e3      	adds	r3, r4, r3
 801318a:	9308      	str	r3, [sp, #32]
 801318c:	9b08      	ldr	r3, [sp, #32]
 801318e:	42a3      	cmp	r3, r4
 8013190:	d800      	bhi.n	8013194 <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xe4>
 8013192:	e08c      	b.n	80132ae <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1fe>
 8013194:	9b01      	ldr	r3, [sp, #4]
 8013196:	9a05      	ldr	r2, [sp, #20]
 8013198:	781b      	ldrb	r3, [r3, #0]
 801319a:	2607      	movs	r6, #7
 801319c:	005b      	lsls	r3, r3, #1
 801319e:	5a9b      	ldrh	r3, [r3, r2]
 80131a0:	466a      	mov	r2, sp
 80131a2:	8825      	ldrh	r5, [r4, #0]
 80131a4:	8997      	ldrh	r7, [r2, #12]
 80131a6:	8b90      	ldrh	r0, [r2, #28]
 80131a8:	1219      	asrs	r1, r3, #8
 80131aa:	122a      	asrs	r2, r5, #8
 80131ac:	43b1      	bics	r1, r6
 80131ae:	43b2      	bics	r2, r6
 80131b0:	4666      	mov	r6, ip
 80131b2:	4342      	muls	r2, r0
 80131b4:	4379      	muls	r1, r7
 80131b6:	1889      	adds	r1, r1, r2
 80131b8:	10da      	asrs	r2, r3, #3
 80131ba:	43b2      	bics	r2, r6
 80131bc:	b2d2      	uxtb	r2, r2
 80131be:	437a      	muls	r2, r7
 80131c0:	9209      	str	r2, [sp, #36]	; 0x24
 80131c2:	4662      	mov	r2, ip
 80131c4:	10ee      	asrs	r6, r5, #3
 80131c6:	4396      	bics	r6, r2
 80131c8:	00db      	lsls	r3, r3, #3
 80131ca:	00ed      	lsls	r5, r5, #3
 80131cc:	b2f6      	uxtb	r6, r6
 80131ce:	b2db      	uxtb	r3, r3
 80131d0:	b2ed      	uxtb	r5, r5
 80131d2:	4346      	muls	r6, r0
 80131d4:	437b      	muls	r3, r7
 80131d6:	4368      	muls	r0, r5
 80131d8:	b289      	uxth	r1, r1
 80131da:	181b      	adds	r3, r3, r0
 80131dc:	1c48      	adds	r0, r1, #1
 80131de:	1209      	asrs	r1, r1, #8
 80131e0:	1841      	adds	r1, r0, r1
 80131e2:	20ff      	movs	r0, #255	; 0xff
 80131e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80131e6:	b29b      	uxth	r3, r3
 80131e8:	1992      	adds	r2, r2, r6
 80131ea:	0200      	lsls	r0, r0, #8
 80131ec:	1c5e      	adds	r6, r3, #1
 80131ee:	121b      	asrs	r3, r3, #8
 80131f0:	4001      	ands	r1, r0
 80131f2:	18f3      	adds	r3, r6, r3
 80131f4:	0ac9      	lsrs	r1, r1, #11
 80131f6:	041b      	lsls	r3, r3, #16
 80131f8:	b292      	uxth	r2, r2
 80131fa:	0edb      	lsrs	r3, r3, #27
 80131fc:	02c9      	lsls	r1, r1, #11
 80131fe:	4319      	orrs	r1, r3
 8013200:	1c53      	adds	r3, r2, #1
 8013202:	1212      	asrs	r2, r2, #8
 8013204:	189a      	adds	r2, r3, r2
 8013206:	23ff      	movs	r3, #255	; 0xff
 8013208:	0952      	lsrs	r2, r2, #5
 801320a:	00db      	lsls	r3, r3, #3
 801320c:	401a      	ands	r2, r3
 801320e:	3b18      	subs	r3, #24
 8013210:	401a      	ands	r2, r3
 8013212:	9b01      	ldr	r3, [sp, #4]
 8013214:	4311      	orrs	r1, r2
 8013216:	3301      	adds	r3, #1
 8013218:	8021      	strh	r1, [r4, #0]
 801321a:	9301      	str	r3, [sp, #4]
 801321c:	3402      	adds	r4, #2
 801321e:	e7b5      	b.n	801318c <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xdc>
 8013220:	003b      	movs	r3, r7
 8013222:	9a04      	ldr	r2, [sp, #16]
 8013224:	42a2      	cmp	r2, r4
 8013226:	d800      	bhi.n	801322a <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17a>
 8013228:	e0e0      	b.n	80133ec <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x33c>
 801322a:	9a06      	ldr	r2, [sp, #24]
 801322c:	9e01      	ldr	r6, [sp, #4]
 801322e:	18a2      	adds	r2, r4, r2
 8013230:	42a2      	cmp	r2, r4
 8013232:	d94b      	bls.n	80132cc <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x21c>
 8013234:	7831      	ldrb	r1, [r6, #0]
 8013236:	9805      	ldr	r0, [sp, #20]
 8013238:	0049      	lsls	r1, r1, #1
 801323a:	5a09      	ldrh	r1, [r1, r0]
 801323c:	3601      	adds	r6, #1
 801323e:	8021      	strh	r1, [r4, #0]
 8013240:	3402      	adds	r4, #2
 8013242:	e7f5      	b.n	8013230 <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x180>
 8013244:	9b02      	ldr	r3, [sp, #8]
 8013246:	68f0      	ldr	r0, [r6, #12]
 8013248:	005b      	lsls	r3, r3, #1
 801324a:	9308      	str	r3, [sp, #32]
 801324c:	9a03      	ldr	r2, [sp, #12]
 801324e:	6803      	ldr	r3, [r0, #0]
 8013250:	691b      	ldr	r3, [r3, #16]
 8013252:	2aff      	cmp	r2, #255	; 0xff
 8013254:	d147      	bne.n	80132e6 <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x236>
 8013256:	9a02      	ldr	r2, [sp, #8]
 8013258:	9901      	ldr	r1, [sp, #4]
 801325a:	4798      	blx	r3
 801325c:	9b04      	ldr	r3, [sp, #16]
 801325e:	42a3      	cmp	r3, r4
 8013260:	d800      	bhi.n	8013264 <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b4>
 8013262:	e0c3      	b.n	80133ec <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x33c>
 8013264:	68f0      	ldr	r0, [r6, #12]
 8013266:	6803      	ldr	r3, [r0, #0]
 8013268:	695b      	ldr	r3, [r3, #20]
 801326a:	4798      	blx	r3
 801326c:	4b64      	ldr	r3, [pc, #400]	; (8013400 <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x350>)
 801326e:	9a04      	ldr	r2, [sp, #16]
 8013270:	881b      	ldrh	r3, [r3, #0]
 8013272:	0005      	movs	r5, r0
 8013274:	005b      	lsls	r3, r3, #1
 8013276:	18e3      	adds	r3, r4, r3
 8013278:	429a      	cmp	r2, r3
 801327a:	d90b      	bls.n	8013294 <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e4>
 801327c:	ab0c      	add	r3, sp, #48	; 0x30
 801327e:	2204      	movs	r2, #4
 8013280:	5e9b      	ldrsh	r3, [r3, r2]
 8013282:	9a01      	ldr	r2, [sp, #4]
 8013284:	68f0      	ldr	r0, [r6, #12]
 8013286:	18d3      	adds	r3, r2, r3
 8013288:	9301      	str	r3, [sp, #4]
 801328a:	6803      	ldr	r3, [r0, #0]
 801328c:	9a02      	ldr	r2, [sp, #8]
 801328e:	691b      	ldr	r3, [r3, #16]
 8013290:	9901      	ldr	r1, [sp, #4]
 8013292:	4798      	blx	r3
 8013294:	9b08      	ldr	r3, [sp, #32]
 8013296:	18e2      	adds	r2, r4, r3
 8013298:	42a2      	cmp	r2, r4
 801329a:	d800      	bhi.n	801329e <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ee>
 801329c:	e09f      	b.n	80133de <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x32e>
 801329e:	782b      	ldrb	r3, [r5, #0]
 80132a0:	9905      	ldr	r1, [sp, #20]
 80132a2:	005b      	lsls	r3, r3, #1
 80132a4:	5a5b      	ldrh	r3, [r3, r1]
 80132a6:	3501      	adds	r5, #1
 80132a8:	8023      	strh	r3, [r4, #0]
 80132aa:	3402      	adds	r4, #2
 80132ac:	e7f4      	b.n	8013298 <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e8>
 80132ae:	4b54      	ldr	r3, [pc, #336]	; (8013400 <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x350>)
 80132b0:	8818      	ldrh	r0, [r3, #0]
 80132b2:	9b02      	ldr	r3, [sp, #8]
 80132b4:	1ac0      	subs	r0, r0, r3
 80132b6:	ab0c      	add	r3, sp, #48	; 0x30
 80132b8:	2204      	movs	r2, #4
 80132ba:	5e9b      	ldrsh	r3, [r3, r2]
 80132bc:	9a02      	ldr	r2, [sp, #8]
 80132be:	0040      	lsls	r0, r0, #1
 80132c0:	1a9b      	subs	r3, r3, r2
 80132c2:	9a01      	ldr	r2, [sp, #4]
 80132c4:	1824      	adds	r4, r4, r0
 80132c6:	18d3      	adds	r3, r2, r3
 80132c8:	9301      	str	r3, [sp, #4]
 80132ca:	e758      	b.n	801317e <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xce>
 80132cc:	4a4c      	ldr	r2, [pc, #304]	; (8013400 <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x350>)
 80132ce:	8810      	ldrh	r0, [r2, #0]
 80132d0:	9a02      	ldr	r2, [sp, #8]
 80132d2:	1a80      	subs	r0, r0, r2
 80132d4:	2104      	movs	r1, #4
 80132d6:	5e5a      	ldrsh	r2, [r3, r1]
 80132d8:	9902      	ldr	r1, [sp, #8]
 80132da:	0040      	lsls	r0, r0, #1
 80132dc:	1a52      	subs	r2, r2, r1
 80132de:	18b2      	adds	r2, r6, r2
 80132e0:	1824      	adds	r4, r4, r0
 80132e2:	9201      	str	r2, [sp, #4]
 80132e4:	e79d      	b.n	8013222 <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x172>
 80132e6:	9a02      	ldr	r2, [sp, #8]
 80132e8:	9901      	ldr	r1, [sp, #4]
 80132ea:	4798      	blx	r3
 80132ec:	9b03      	ldr	r3, [sp, #12]
 80132ee:	43db      	mvns	r3, r3
 80132f0:	b2db      	uxtb	r3, r3
 80132f2:	9309      	str	r3, [sp, #36]	; 0x24
 80132f4:	9b04      	ldr	r3, [sp, #16]
 80132f6:	42a3      	cmp	r3, r4
 80132f8:	d978      	bls.n	80133ec <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x33c>
 80132fa:	68f0      	ldr	r0, [r6, #12]
 80132fc:	6803      	ldr	r3, [r0, #0]
 80132fe:	695b      	ldr	r3, [r3, #20]
 8013300:	4798      	blx	r3
 8013302:	4b3f      	ldr	r3, [pc, #252]	; (8013400 <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x350>)
 8013304:	9a04      	ldr	r2, [sp, #16]
 8013306:	881b      	ldrh	r3, [r3, #0]
 8013308:	9006      	str	r0, [sp, #24]
 801330a:	005b      	lsls	r3, r3, #1
 801330c:	18e3      	adds	r3, r4, r3
 801330e:	429a      	cmp	r2, r3
 8013310:	d90b      	bls.n	801332a <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x27a>
 8013312:	ab0c      	add	r3, sp, #48	; 0x30
 8013314:	2204      	movs	r2, #4
 8013316:	5e9b      	ldrsh	r3, [r3, r2]
 8013318:	9a01      	ldr	r2, [sp, #4]
 801331a:	68f0      	ldr	r0, [r6, #12]
 801331c:	18d3      	adds	r3, r2, r3
 801331e:	9301      	str	r3, [sp, #4]
 8013320:	6803      	ldr	r3, [r0, #0]
 8013322:	9a02      	ldr	r2, [sp, #8]
 8013324:	691b      	ldr	r3, [r3, #16]
 8013326:	9901      	ldr	r1, [sp, #4]
 8013328:	4798      	blx	r3
 801332a:	9b08      	ldr	r3, [sp, #32]
 801332c:	18e3      	adds	r3, r4, r3
 801332e:	930a      	str	r3, [sp, #40]	; 0x28
 8013330:	23ff      	movs	r3, #255	; 0xff
 8013332:	00db      	lsls	r3, r3, #3
 8013334:	469c      	mov	ip, r3
 8013336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013338:	42a3      	cmp	r3, r4
 801333a:	d949      	bls.n	80133d0 <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x320>
 801333c:	9b06      	ldr	r3, [sp, #24]
 801333e:	9a05      	ldr	r2, [sp, #20]
 8013340:	781b      	ldrb	r3, [r3, #0]
 8013342:	8825      	ldrh	r5, [r4, #0]
 8013344:	005b      	lsls	r3, r3, #1
 8013346:	5a9b      	ldrh	r3, [r3, r2]
 8013348:	2207      	movs	r2, #7
 801334a:	9307      	str	r3, [sp, #28]
 801334c:	466b      	mov	r3, sp
 801334e:	899f      	ldrh	r7, [r3, #12]
 8013350:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 8013352:	9b07      	ldr	r3, [sp, #28]
 8013354:	1219      	asrs	r1, r3, #8
 8013356:	0013      	movs	r3, r2
 8013358:	4391      	bics	r1, r2
 801335a:	122a      	asrs	r2, r5, #8
 801335c:	439a      	bics	r2, r3
 801335e:	4342      	muls	r2, r0
 8013360:	4379      	muls	r1, r7
 8013362:	9b07      	ldr	r3, [sp, #28]
 8013364:	1889      	adds	r1, r1, r2
 8013366:	10da      	asrs	r2, r3, #3
 8013368:	2303      	movs	r3, #3
 801336a:	439a      	bics	r2, r3
 801336c:	b2d2      	uxtb	r2, r2
 801336e:	437a      	muls	r2, r7
 8013370:	920b      	str	r2, [sp, #44]	; 0x2c
 8013372:	10ea      	asrs	r2, r5, #3
 8013374:	439a      	bics	r2, r3
 8013376:	b2d3      	uxtb	r3, r2
 8013378:	4343      	muls	r3, r0
 801337a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801337c:	00ed      	lsls	r5, r5, #3
 801337e:	18d2      	adds	r2, r2, r3
 8013380:	9b07      	ldr	r3, [sp, #28]
 8013382:	b2ed      	uxtb	r5, r5
 8013384:	00db      	lsls	r3, r3, #3
 8013386:	b2db      	uxtb	r3, r3
 8013388:	4368      	muls	r0, r5
 801338a:	437b      	muls	r3, r7
 801338c:	b289      	uxth	r1, r1
 801338e:	181b      	adds	r3, r3, r0
 8013390:	1c48      	adds	r0, r1, #1
 8013392:	1209      	asrs	r1, r1, #8
 8013394:	1841      	adds	r1, r0, r1
 8013396:	20ff      	movs	r0, #255	; 0xff
 8013398:	b29b      	uxth	r3, r3
 801339a:	0200      	lsls	r0, r0, #8
 801339c:	4001      	ands	r1, r0
 801339e:	1c58      	adds	r0, r3, #1
 80133a0:	121b      	asrs	r3, r3, #8
 80133a2:	18c3      	adds	r3, r0, r3
 80133a4:	0ac9      	lsrs	r1, r1, #11
 80133a6:	041b      	lsls	r3, r3, #16
 80133a8:	b292      	uxth	r2, r2
 80133aa:	0edb      	lsrs	r3, r3, #27
 80133ac:	02c9      	lsls	r1, r1, #11
 80133ae:	4319      	orrs	r1, r3
 80133b0:	1c53      	adds	r3, r2, #1
 80133b2:	1212      	asrs	r2, r2, #8
 80133b4:	189a      	adds	r2, r3, r2
 80133b6:	4663      	mov	r3, ip
 80133b8:	0952      	lsrs	r2, r2, #5
 80133ba:	401a      	ands	r2, r3
 80133bc:	23fc      	movs	r3, #252	; 0xfc
 80133be:	00db      	lsls	r3, r3, #3
 80133c0:	401a      	ands	r2, r3
 80133c2:	9b06      	ldr	r3, [sp, #24]
 80133c4:	4311      	orrs	r1, r2
 80133c6:	3301      	adds	r3, #1
 80133c8:	8021      	strh	r1, [r4, #0]
 80133ca:	9306      	str	r3, [sp, #24]
 80133cc:	3402      	adds	r4, #2
 80133ce:	e7b2      	b.n	8013336 <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x286>
 80133d0:	4b0b      	ldr	r3, [pc, #44]	; (8013400 <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x350>)
 80133d2:	8818      	ldrh	r0, [r3, #0]
 80133d4:	9b02      	ldr	r3, [sp, #8]
 80133d6:	1ac0      	subs	r0, r0, r3
 80133d8:	0040      	lsls	r0, r0, #1
 80133da:	1824      	adds	r4, r4, r0
 80133dc:	e78a      	b.n	80132f4 <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x244>
 80133de:	4b08      	ldr	r3, [pc, #32]	; (8013400 <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x350>)
 80133e0:	9a02      	ldr	r2, [sp, #8]
 80133e2:	881b      	ldrh	r3, [r3, #0]
 80133e4:	1a9b      	subs	r3, r3, r2
 80133e6:	005b      	lsls	r3, r3, #1
 80133e8:	18e4      	adds	r4, r4, r3
 80133ea:	e737      	b.n	801325c <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ac>
 80133ec:	4b03      	ldr	r3, [pc, #12]	; (80133fc <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x34c>)
 80133ee:	6818      	ldr	r0, [r3, #0]
 80133f0:	6803      	ldr	r3, [r0, #0]
 80133f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133f4:	4798      	blx	r3
 80133f6:	b011      	add	sp, #68	; 0x44
 80133f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133fa:	46c0      	nop			; (mov r8, r8)
 80133fc:	200026c8 	.word	0x200026c8
 8013400:	200026c2 	.word	0x200026c2

08013404 <_ZN8touchgfx19LCD16bppSerialFlash10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8013404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013406:	0004      	movs	r4, r0
 8013408:	a808      	add	r0, sp, #32
 801340a:	c820      	ldmia	r0!, {r5}
 801340c:	7817      	ldrb	r7, [r2, #0]
 801340e:	7806      	ldrb	r6, [r0, #0]
 8013410:	7850      	ldrb	r0, [r2, #1]
 8013412:	2f00      	cmp	r7, #0
 8013414:	d01c      	beq.n	8013450 <_ZN8touchgfx19LCD16bppSerialFlash10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x4c>
 8013416:	2f02      	cmp	r7, #2
 8013418:	d10a      	bne.n	8013430 <_ZN8touchgfx19LCD16bppSerialFlash10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2c>
 801341a:	2803      	cmp	r0, #3
 801341c:	d808      	bhi.n	8013430 <_ZN8touchgfx19LCD16bppSerialFlash10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2c>
 801341e:	f7ec fe7b 	bl	8000118 <__gnu_thumb1_case_uqi>
 8013422:	0802      	.short	0x0802
 8013424:	1412      	.short	0x1412
 8013426:	9601      	str	r6, [sp, #4]
 8013428:	9500      	str	r5, [sp, #0]
 801342a:	0020      	movs	r0, r4
 801342c:	f7ff fe40 	bl	80130b0 <_ZN8touchgfx19LCD16bppSerialFlash17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8013430:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8013432:	3404      	adds	r4, #4
 8013434:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8013436:	2800      	cmp	r0, #0
 8013438:	d0fa      	beq.n	8013430 <_ZN8touchgfx19LCD16bppSerialFlash10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2c>
 801343a:	6804      	ldr	r4, [r0, #0]
 801343c:	9601      	str	r6, [sp, #4]
 801343e:	9500      	str	r5, [sp, #0]
 8013440:	68a4      	ldr	r4, [r4, #8]
 8013442:	47a0      	blx	r4
 8013444:	e7f4      	b.n	8013430 <_ZN8touchgfx19LCD16bppSerialFlash10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2c>
 8013446:	3408      	adds	r4, #8
 8013448:	e7f4      	b.n	8013434 <_ZN8touchgfx19LCD16bppSerialFlash10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x30>
 801344a:	3488      	adds	r4, #136	; 0x88
 801344c:	6820      	ldr	r0, [r4, #0]
 801344e:	e7f2      	b.n	8013436 <_ZN8touchgfx19LCD16bppSerialFlash10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 8013450:	2803      	cmp	r0, #3
 8013452:	d8ed      	bhi.n	8013430 <_ZN8touchgfx19LCD16bppSerialFlash10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2c>
 8013454:	f7ec fe60 	bl	8000118 <__gnu_thumb1_case_uqi>
 8013458:	13110802 	.word	0x13110802
 801345c:	9601      	str	r6, [sp, #4]
 801345e:	9500      	str	r5, [sp, #0]
 8013460:	0020      	movs	r0, r4
 8013462:	f7ff fc9f 	bl	8012da4 <_ZN8touchgfx19LCD16bppSerialFlash19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8013466:	e7e3      	b.n	8013430 <_ZN8touchgfx19LCD16bppSerialFlash10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2c>
 8013468:	3404      	adds	r4, #4
 801346a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 801346c:	2800      	cmp	r0, #0
 801346e:	d0df      	beq.n	8013430 <_ZN8touchgfx19LCD16bppSerialFlash10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2c>
 8013470:	6804      	ldr	r4, [r0, #0]
 8013472:	9601      	str	r6, [sp, #4]
 8013474:	9500      	str	r5, [sp, #0]
 8013476:	68e4      	ldr	r4, [r4, #12]
 8013478:	e7e3      	b.n	8013442 <_ZN8touchgfx19LCD16bppSerialFlash10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3e>
 801347a:	3408      	adds	r4, #8
 801347c:	e7f5      	b.n	801346a <_ZN8touchgfx19LCD16bppSerialFlash10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x66>
 801347e:	3488      	adds	r4, #136	; 0x88
 8013480:	6820      	ldr	r0, [r4, #0]
 8013482:	e7f3      	b.n	801346c <_ZN8touchgfx19LCD16bppSerialFlash10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x68>

08013484 <_ZN8touchgfx19LCD16bppSerialFlash17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8013484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013486:	b08d      	sub	sp, #52	; 0x34
 8013488:	9305      	str	r3, [sp, #20]
 801348a:	ab12      	add	r3, sp, #72	; 0x48
 801348c:	cb10      	ldmia	r3!, {r4}
 801348e:	0005      	movs	r5, r0
 8013490:	781b      	ldrb	r3, [r3, #0]
 8013492:	000f      	movs	r7, r1
 8013494:	9203      	str	r2, [sp, #12]
 8013496:	9304      	str	r3, [sp, #16]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d034      	beq.n	8013506 <_ZN8touchgfx19LCD16bppSerialFlash17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801349c:	0008      	movs	r0, r1
 801349e:	f7fe fa21 	bl	80118e4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80134a2:	0006      	movs	r6, r0
 80134a4:	0038      	movs	r0, r7
 80134a6:	f7fe fa55 	bl	8011954 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80134aa:	9a03      	ldr	r2, [sp, #12]
 80134ac:	ab04      	add	r3, sp, #16
 80134ae:	811a      	strh	r2, [r3, #8]
 80134b0:	9a05      	ldr	r2, [sp, #20]
 80134b2:	81d8      	strh	r0, [r3, #14]
 80134b4:	0038      	movs	r0, r7
 80134b6:	815a      	strh	r2, [r3, #10]
 80134b8:	819e      	strh	r6, [r3, #12]
 80134ba:	f7fe fb09 	bl	8011ad0 <_ZNK8touchgfx6Bitmap7getDataEv>
 80134be:	9003      	str	r0, [sp, #12]
 80134c0:	0038      	movs	r0, r7
 80134c2:	f7fe fb8d 	bl	8011be0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80134c6:	280b      	cmp	r0, #11
 80134c8:	d81d      	bhi.n	8013506 <_ZN8touchgfx19LCD16bppSerialFlash17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80134ca:	f7ec fe25 	bl	8000118 <__gnu_thumb1_case_uqi>
 80134ce:	a4ad      	.short	0xa4ad
 80134d0:	1c1c1c06 	.word	0x1c1c1c06
 80134d4:	1c1c1c1c 	.word	0x1c1c1c1c
 80134d8:	b91c      	.short	0xb91c
 80134da:	9b04      	ldr	r3, [sp, #16]
 80134dc:	2bff      	cmp	r3, #255	; 0xff
 80134de:	d007      	beq.n	80134f0 <_ZN8touchgfx19LCD16bppSerialFlash17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x6c>
 80134e0:	9300      	str	r3, [sp, #0]
 80134e2:	0023      	movs	r3, r4
 80134e4:	aa06      	add	r2, sp, #24
 80134e6:	9903      	ldr	r1, [sp, #12]
 80134e8:	0028      	movs	r0, r5
 80134ea:	f7ff f87f 	bl	80125ec <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80134ee:	e00a      	b.n	8013506 <_ZN8touchgfx19LCD16bppSerialFlash17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80134f0:	0038      	movs	r0, r7
 80134f2:	f7fe fab5 	bl	8011a60 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80134f6:	2800      	cmp	r0, #0
 80134f8:	d107      	bne.n	801350a <_ZN8touchgfx19LCD16bppSerialFlash17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 80134fa:	0023      	movs	r3, r4
 80134fc:	aa06      	add	r2, sp, #24
 80134fe:	9903      	ldr	r1, [sp, #12]
 8013500:	0028      	movs	r0, r5
 8013502:	f7ff f9eb 	bl	80128dc <_ZN8touchgfx19LCD16bppSerialFlash21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8013506:	b00d      	add	sp, #52	; 0x34
 8013508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801350a:	ae0a      	add	r6, sp, #40	; 0x28
 801350c:	0039      	movs	r1, r7
 801350e:	0030      	movs	r0, r6
 8013510:	af08      	add	r7, sp, #32
 8013512:	f7fe fa57 	bl	80119c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8013516:	2208      	movs	r2, #8
 8013518:	0031      	movs	r1, r6
 801351a:	0038      	movs	r0, r7
 801351c:	f000 ff47 	bl	80143ae <memcpy>
 8013520:	0038      	movs	r0, r7
 8013522:	0021      	movs	r1, r4
 8013524:	f7f9 f82c 	bl	800c580 <_ZN8touchgfx4RectaNERKS0_>
 8013528:	0038      	movs	r0, r7
 801352a:	f7f9 f879 	bl	800c620 <_ZNK8touchgfx4Rect7isEmptyEv>
 801352e:	2800      	cmp	r0, #0
 8013530:	d001      	beq.n	8013536 <_ZN8touchgfx19LCD16bppSerialFlash17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 8013532:	9b04      	ldr	r3, [sp, #16]
 8013534:	e7d4      	b.n	80134e0 <_ZN8touchgfx19LCD16bppSerialFlash17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8013536:	2202      	movs	r2, #2
 8013538:	5ebb      	ldrsh	r3, [r7, r2]
 801353a:	2102      	movs	r1, #2
 801353c:	5e62      	ldrsh	r2, [r4, r1]
 801353e:	4293      	cmp	r3, r2
 8013540:	dd10      	ble.n	8013564 <_ZN8touchgfx19LCD16bppSerialFlash17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe0>
 8013542:	1a9b      	subs	r3, r3, r2
 8013544:	2100      	movs	r1, #0
 8013546:	5e60      	ldrsh	r0, [r4, r1]
 8013548:	2704      	movs	r7, #4
 801354a:	5fe1      	ldrsh	r1, [r4, r7]
 801354c:	80f3      	strh	r3, [r6, #6]
 801354e:	9b04      	ldr	r3, [sp, #16]
 8013550:	8030      	strh	r0, [r6, #0]
 8013552:	8072      	strh	r2, [r6, #2]
 8013554:	80b1      	strh	r1, [r6, #4]
 8013556:	aa06      	add	r2, sp, #24
 8013558:	9300      	str	r3, [sp, #0]
 801355a:	9903      	ldr	r1, [sp, #12]
 801355c:	0033      	movs	r3, r6
 801355e:	0028      	movs	r0, r5
 8013560:	f7ff f844 	bl	80125ec <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8013564:	a908      	add	r1, sp, #32
 8013566:	2200      	movs	r2, #0
 8013568:	5e8b      	ldrsh	r3, [r1, r2]
 801356a:	2000      	movs	r0, #0
 801356c:	5e22      	ldrsh	r2, [r4, r0]
 801356e:	4293      	cmp	r3, r2
 8013570:	dd10      	ble.n	8013594 <_ZN8touchgfx19LCD16bppSerialFlash17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x110>
 8013572:	1a9b      	subs	r3, r3, r2
 8013574:	2702      	movs	r7, #2
 8013576:	5fc8      	ldrsh	r0, [r1, r7]
 8013578:	2706      	movs	r7, #6
 801357a:	5fc9      	ldrsh	r1, [r1, r7]
 801357c:	80b3      	strh	r3, [r6, #4]
 801357e:	23ff      	movs	r3, #255	; 0xff
 8013580:	8032      	strh	r2, [r6, #0]
 8013582:	8070      	strh	r0, [r6, #2]
 8013584:	80f1      	strh	r1, [r6, #6]
 8013586:	aa06      	add	r2, sp, #24
 8013588:	9300      	str	r3, [sp, #0]
 801358a:	9903      	ldr	r1, [sp, #12]
 801358c:	0033      	movs	r3, r6
 801358e:	0028      	movs	r0, r5
 8013590:	f7ff f82c 	bl	80125ec <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8013594:	af08      	add	r7, sp, #32
 8013596:	003b      	movs	r3, r7
 8013598:	aa06      	add	r2, sp, #24
 801359a:	9903      	ldr	r1, [sp, #12]
 801359c:	0028      	movs	r0, r5
 801359e:	f7ff f99d 	bl	80128dc <_ZN8touchgfx19LCD16bppSerialFlash21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 80135a2:	88a3      	ldrh	r3, [r4, #4]
 80135a4:	8822      	ldrh	r2, [r4, #0]
 80135a6:	8839      	ldrh	r1, [r7, #0]
 80135a8:	18d2      	adds	r2, r2, r3
 80135aa:	88bb      	ldrh	r3, [r7, #4]
 80135ac:	b292      	uxth	r2, r2
 80135ae:	18c9      	adds	r1, r1, r3
 80135b0:	b289      	uxth	r1, r1
 80135b2:	b208      	sxth	r0, r1
 80135b4:	b213      	sxth	r3, r2
 80135b6:	4283      	cmp	r3, r0
 80135b8:	dd12      	ble.n	80135e0 <_ZN8touchgfx19LCD16bppSerialFlash17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x15c>
 80135ba:	2602      	movs	r6, #2
 80135bc:	5fbb      	ldrsh	r3, [r7, r6]
 80135be:	1a52      	subs	r2, r2, r1
 80135c0:	469c      	mov	ip, r3
 80135c2:	2306      	movs	r3, #6
 80135c4:	5eff      	ldrsh	r7, [r7, r3]
 80135c6:	ab0a      	add	r3, sp, #40	; 0x28
 80135c8:	8018      	strh	r0, [r3, #0]
 80135ca:	809a      	strh	r2, [r3, #4]
 80135cc:	4660      	mov	r0, ip
 80135ce:	22ff      	movs	r2, #255	; 0xff
 80135d0:	8058      	strh	r0, [r3, #2]
 80135d2:	80df      	strh	r7, [r3, #6]
 80135d4:	9903      	ldr	r1, [sp, #12]
 80135d6:	9200      	str	r2, [sp, #0]
 80135d8:	0028      	movs	r0, r5
 80135da:	aa06      	add	r2, sp, #24
 80135dc:	f7ff f806 	bl	80125ec <_ZN8touchgfx19LCD16bppSerialFlash16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80135e0:	88e3      	ldrh	r3, [r4, #6]
 80135e2:	8862      	ldrh	r2, [r4, #2]
 80135e4:	18d2      	adds	r2, r2, r3
 80135e6:	ab08      	add	r3, sp, #32
 80135e8:	8859      	ldrh	r1, [r3, #2]
 80135ea:	88db      	ldrh	r3, [r3, #6]
 80135ec:	b292      	uxth	r2, r2
 80135ee:	18c9      	adds	r1, r1, r3
 80135f0:	b289      	uxth	r1, r1
 80135f2:	b208      	sxth	r0, r1
 80135f4:	b213      	sxth	r3, r2
 80135f6:	4283      	cmp	r3, r0
 80135f8:	dc00      	bgt.n	80135fc <_ZN8touchgfx19LCD16bppSerialFlash17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x178>
 80135fa:	e784      	b.n	8013506 <_ZN8touchgfx19LCD16bppSerialFlash17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80135fc:	2300      	movs	r3, #0
 80135fe:	5ee7      	ldrsh	r7, [r4, r3]
 8013600:	1a52      	subs	r2, r2, r1
 8013602:	2304      	movs	r3, #4
 8013604:	5ee4      	ldrsh	r4, [r4, r3]
 8013606:	ab0a      	add	r3, sp, #40	; 0x28
 8013608:	80da      	strh	r2, [r3, #6]
 801360a:	22ff      	movs	r2, #255	; 0xff
 801360c:	801f      	strh	r7, [r3, #0]
 801360e:	8058      	strh	r0, [r3, #2]
 8013610:	809c      	strh	r4, [r3, #4]
 8013612:	9200      	str	r2, [sp, #0]
 8013614:	e766      	b.n	80134e4 <_ZN8touchgfx19LCD16bppSerialFlash17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x60>
 8013616:	9b04      	ldr	r3, [sp, #16]
 8013618:	aa06      	add	r2, sp, #24
 801361a:	9300      	str	r3, [sp, #0]
 801361c:	9903      	ldr	r1, [sp, #12]
 801361e:	0023      	movs	r3, r4
 8013620:	0028      	movs	r0, r5
 8013622:	f7ff fa19 	bl	8012a58 <_ZN8touchgfx19LCD16bppSerialFlash14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8013626:	e76e      	b.n	8013506 <_ZN8touchgfx19LCD16bppSerialFlash17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8013628:	2200      	movs	r2, #0
 801362a:	9201      	str	r2, [sp, #4]
 801362c:	9a04      	ldr	r2, [sp, #16]
 801362e:	682b      	ldr	r3, [r5, #0]
 8013630:	9200      	str	r2, [sp, #0]
 8013632:	68df      	ldr	r7, [r3, #12]
 8013634:	aa06      	add	r2, sp, #24
 8013636:	0023      	movs	r3, r4
 8013638:	9903      	ldr	r1, [sp, #12]
 801363a:	0028      	movs	r0, r5
 801363c:	47b8      	blx	r7
 801363e:	e762      	b.n	8013506 <_ZN8touchgfx19LCD16bppSerialFlash17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8013640:	0038      	movs	r0, r7
 8013642:	f7fe fa77 	bl	8011b34 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8013646:	9b04      	ldr	r3, [sp, #16]
 8013648:	0002      	movs	r2, r0
 801364a:	9301      	str	r3, [sp, #4]
 801364c:	9400      	str	r4, [sp, #0]
 801364e:	ab06      	add	r3, sp, #24
 8013650:	9903      	ldr	r1, [sp, #12]
 8013652:	0028      	movs	r0, r5
 8013654:	f7ff fed6 	bl	8013404 <_ZN8touchgfx19LCD16bppSerialFlash10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8013658:	e755      	b.n	8013506 <_ZN8touchgfx19LCD16bppSerialFlash17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
	...

0801365c <_ZN8touchgfx19LCD16bppSerialFlash9nextPixelEbNS_12TextRotationE>:
 801365c:	0003      	movs	r3, r0
 801365e:	b500      	push	{lr}
 8013660:	0008      	movs	r0, r1
 8013662:	2b00      	cmp	r3, #0
 8013664:	d012      	beq.n	801368c <_ZN8touchgfx19LCD16bppSerialFlash9nextPixelEbNS_12TextRotationE+0x30>
 8013666:	2300      	movs	r3, #0
 8013668:	2903      	cmp	r1, #3
 801366a:	d80d      	bhi.n	8013688 <_ZN8touchgfx19LCD16bppSerialFlash9nextPixelEbNS_12TextRotationE+0x2c>
 801366c:	f7ec fd54 	bl	8000118 <__gnu_thumb1_case_uqi>
 8013670:	16081402 	.word	0x16081402
 8013674:	4b0a      	ldr	r3, [pc, #40]	; (80136a0 <_ZN8touchgfx19LCD16bppSerialFlash9nextPixelEbNS_12TextRotationE+0x44>)
 8013676:	881b      	ldrh	r3, [r3, #0]
 8013678:	045b      	lsls	r3, r3, #17
 801367a:	0c5b      	lsrs	r3, r3, #17
 801367c:	425b      	negs	r3, r3
 801367e:	e003      	b.n	8013688 <_ZN8touchgfx19LCD16bppSerialFlash9nextPixelEbNS_12TextRotationE+0x2c>
 8013680:	4b07      	ldr	r3, [pc, #28]	; (80136a0 <_ZN8touchgfx19LCD16bppSerialFlash9nextPixelEbNS_12TextRotationE+0x44>)
 8013682:	881b      	ldrh	r3, [r3, #0]
 8013684:	045b      	lsls	r3, r3, #17
 8013686:	0c5b      	lsrs	r3, r3, #17
 8013688:	0018      	movs	r0, r3
 801368a:	bd00      	pop	{pc}
 801368c:	2903      	cmp	r1, #3
 801368e:	d8fb      	bhi.n	8013688 <_ZN8touchgfx19LCD16bppSerialFlash9nextPixelEbNS_12TextRotationE+0x2c>
 8013690:	f7ec fd38 	bl	8000104 <__gnu_thumb1_case_sqi>
 8013694:	f004f602 	.word	0xf004f602
 8013698:	2301      	movs	r3, #1
 801369a:	e7f5      	b.n	8013688 <_ZN8touchgfx19LCD16bppSerialFlash9nextPixelEbNS_12TextRotationE+0x2c>
 801369c:	2301      	movs	r3, #1
 801369e:	e7ed      	b.n	801367c <_ZN8touchgfx19LCD16bppSerialFlash9nextPixelEbNS_12TextRotationE+0x20>
 80136a0:	200026c2 	.word	0x200026c2

080136a4 <_ZN8touchgfx19LCD16bppSerialFlash8nextLineEbNS_12TextRotationE>:
 80136a4:	0003      	movs	r3, r0
 80136a6:	b500      	push	{lr}
 80136a8:	0008      	movs	r0, r1
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d012      	beq.n	80136d4 <_ZN8touchgfx19LCD16bppSerialFlash8nextLineEbNS_12TextRotationE+0x30>
 80136ae:	2300      	movs	r3, #0
 80136b0:	2903      	cmp	r1, #3
 80136b2:	d807      	bhi.n	80136c4 <_ZN8touchgfx19LCD16bppSerialFlash8nextLineEbNS_12TextRotationE+0x20>
 80136b4:	f7ec fd30 	bl	8000118 <__gnu_thumb1_case_uqi>
 80136b8:	08160214 	.word	0x08160214
 80136bc:	4b0a      	ldr	r3, [pc, #40]	; (80136e8 <_ZN8touchgfx19LCD16bppSerialFlash8nextLineEbNS_12TextRotationE+0x44>)
 80136be:	881b      	ldrh	r3, [r3, #0]
 80136c0:	045b      	lsls	r3, r3, #17
 80136c2:	0c5b      	lsrs	r3, r3, #17
 80136c4:	0018      	movs	r0, r3
 80136c6:	bd00      	pop	{pc}
 80136c8:	4b07      	ldr	r3, [pc, #28]	; (80136e8 <_ZN8touchgfx19LCD16bppSerialFlash8nextLineEbNS_12TextRotationE+0x44>)
 80136ca:	881b      	ldrh	r3, [r3, #0]
 80136cc:	045b      	lsls	r3, r3, #17
 80136ce:	0c5b      	lsrs	r3, r3, #17
 80136d0:	425b      	negs	r3, r3
 80136d2:	e7f7      	b.n	80136c4 <_ZN8touchgfx19LCD16bppSerialFlash8nextLineEbNS_12TextRotationE+0x20>
 80136d4:	2903      	cmp	r1, #3
 80136d6:	d8f5      	bhi.n	80136c4 <_ZN8touchgfx19LCD16bppSerialFlash8nextLineEbNS_12TextRotationE+0x20>
 80136d8:	f7ec fd14 	bl	8000104 <__gnu_thumb1_case_sqi>
 80136dc:	02f604f0 	.word	0x02f604f0
 80136e0:	2301      	movs	r3, #1
 80136e2:	e7ef      	b.n	80136c4 <_ZN8touchgfx19LCD16bppSerialFlash8nextLineEbNS_12TextRotationE+0x20>
 80136e4:	2301      	movs	r3, #1
 80136e6:	e7f3      	b.n	80136d0 <_ZN8touchgfx19LCD16bppSerialFlash8nextLineEbNS_12TextRotationE+0x2c>
 80136e8:	200026c2 	.word	0x200026c2

080136ec <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80136ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136ee:	b099      	sub	sp, #100	; 0x64
 80136f0:	9315      	str	r3, [sp, #84]	; 0x54
 80136f2:	ab1e      	add	r3, sp, #120	; 0x78
 80136f4:	2600      	movs	r6, #0
 80136f6:	5f9e      	ldrsh	r6, [r3, r6]
 80136f8:	ab1f      	add	r3, sp, #124	; 0x7c
 80136fa:	9214      	str	r2, [sp, #80]	; 0x50
 80136fc:	2200      	movs	r2, #0
 80136fe:	5e9b      	ldrsh	r3, [r3, r2]
 8013700:	aa14      	add	r2, sp, #80	; 0x50
 8013702:	9300      	str	r3, [sp, #0]
 8013704:	ab20      	add	r3, sp, #128	; 0x80
 8013706:	881c      	ldrh	r4, [r3, #0]
 8013708:	ab21      	add	r3, sp, #132	; 0x84
 801370a:	881b      	ldrh	r3, [r3, #0]
 801370c:	9007      	str	r0, [sp, #28]
 801370e:	9305      	str	r3, [sp, #20]
 8013710:	ab25      	add	r3, sp, #148	; 0x94
 8013712:	781b      	ldrb	r3, [r3, #0]
 8013714:	910b      	str	r1, [sp, #44]	; 0x2c
 8013716:	9309      	str	r3, [sp, #36]	; 0x24
 8013718:	232d      	movs	r3, #45	; 0x2d
 801371a:	189b      	adds	r3, r3, r2
 801371c:	7fdb      	ldrb	r3, [r3, #31]
 801371e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013720:	9301      	str	r3, [sp, #4]
 8013722:	ab28      	add	r3, sp, #160	; 0xa0
 8013724:	781b      	ldrb	r3, [r3, #0]
 8013726:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8013728:	9308      	str	r3, [sp, #32]
 801372a:	ab29      	add	r3, sp, #164	; 0xa4
 801372c:	781b      	ldrb	r3, [r3, #0]
 801372e:	9304      	str	r3, [sp, #16]
 8013730:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013732:	8852      	ldrh	r2, [r2, #2]
 8013734:	2000      	movs	r0, #0
 8013736:	5e18      	ldrsh	r0, [r3, r0]
 8013738:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801373a:	7b7d      	ldrb	r5, [r7, #13]
 801373c:	88db      	ldrh	r3, [r3, #6]
 801373e:	b281      	uxth	r1, r0
 8013740:	189b      	adds	r3, r3, r2
 8013742:	b21b      	sxth	r3, r3
 8013744:	469c      	mov	ip, r3
 8013746:	2380      	movs	r3, #128	; 0x80
 8013748:	012a      	lsls	r2, r5, #4
 801374a:	005b      	lsls	r3, r3, #1
 801374c:	4013      	ands	r3, r2
 801374e:	79fa      	ldrb	r2, [r7, #7]
 8013750:	431a      	orrs	r2, r3
 8013752:	9b05      	ldr	r3, [sp, #20]
 8013754:	1ad2      	subs	r2, r2, r3
 8013756:	2309      	movs	r3, #9
 8013758:	56fb      	ldrsb	r3, [r7, r3]
 801375a:	b292      	uxth	r2, r2
 801375c:	b29b      	uxth	r3, r3
 801375e:	2c00      	cmp	r4, #0
 8013760:	d100      	bne.n	8013764 <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x78>
 8013762:	e130      	b.n	80139c6 <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2da>
 8013764:	1ae3      	subs	r3, r4, r3
 8013766:	b29c      	uxth	r4, r3
 8013768:	041b      	lsls	r3, r3, #16
 801376a:	d502      	bpl.n	8013772 <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x86>
 801376c:	1b36      	subs	r6, r6, r4
 801376e:	2400      	movs	r4, #0
 8013770:	b236      	sxth	r6, r6
 8013772:	4286      	cmp	r6, r0
 8013774:	da03      	bge.n	801377e <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x92>
 8013776:	1864      	adds	r4, r4, r1
 8013778:	1ba4      	subs	r4, r4, r6
 801377a:	0006      	movs	r6, r0
 801377c:	b2a4      	uxth	r4, r4
 801377e:	4663      	mov	r3, ip
 8013780:	9800      	ldr	r0, [sp, #0]
 8013782:	1a1b      	subs	r3, r3, r0
 8013784:	9302      	str	r3, [sp, #8]
 8013786:	4293      	cmp	r3, r2
 8013788:	dd00      	ble.n	801378c <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xa0>
 801378a:	9202      	str	r2, [sp, #8]
 801378c:	9b02      	ldr	r3, [sp, #8]
 801378e:	2b00      	cmp	r3, #0
 8013790:	dc00      	bgt.n	8013794 <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xa8>
 8013792:	e1f1      	b.n	8013b78 <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x48c>
 8013794:	2080      	movs	r0, #128	; 0x80
 8013796:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013798:	0040      	lsls	r0, r0, #1
 801379a:	889b      	ldrh	r3, [r3, #4]
 801379c:	016d      	lsls	r5, r5, #5
 801379e:	4005      	ands	r5, r0
 80137a0:	18cb      	adds	r3, r1, r3
 80137a2:	79b8      	ldrb	r0, [r7, #6]
 80137a4:	b21b      	sxth	r3, r3
 80137a6:	1b32      	subs	r2, r6, r4
 80137a8:	4305      	orrs	r5, r0
 80137aa:	1a9b      	subs	r3, r3, r2
 80137ac:	42ab      	cmp	r3, r5
 80137ae:	dd00      	ble.n	80137b2 <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xc6>
 80137b0:	002b      	movs	r3, r5
 80137b2:	1b1b      	subs	r3, r3, r4
 80137b4:	9303      	str	r3, [sp, #12]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	dc00      	bgt.n	80137bc <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xd0>
 80137ba:	e1dd      	b.n	8013b78 <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x48c>
 80137bc:	4be1      	ldr	r3, [pc, #900]	; (8013b44 <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x458>)
 80137be:	0031      	movs	r1, r6
 80137c0:	781b      	ldrb	r3, [r3, #0]
 80137c2:	a814      	add	r0, sp, #80	; 0x50
 80137c4:	3b01      	subs	r3, #1
 80137c6:	425a      	negs	r2, r3
 80137c8:	4153      	adcs	r3, r2
 80137ca:	b2db      	uxtb	r3, r3
 80137cc:	9306      	str	r3, [sp, #24]
 80137ce:	9a00      	ldr	r2, [sp, #0]
 80137d0:	9b04      	ldr	r3, [sp, #16]
 80137d2:	f7fa ff85 	bl	800e6e0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80137d6:	af17      	add	r7, sp, #92	; 0x5c
 80137d8:	9a00      	ldr	r2, [sp, #0]
 80137da:	8038      	strh	r0, [r7, #0]
 80137dc:	9b04      	ldr	r3, [sp, #16]
 80137de:	0031      	movs	r1, r6
 80137e0:	a814      	add	r0, sp, #80	; 0x50
 80137e2:	f7fa ff9d 	bl	800e720 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80137e6:	210e      	movs	r1, #14
 80137e8:	ab14      	add	r3, sp, #80	; 0x50
 80137ea:	18c9      	adds	r1, r1, r3
 80137ec:	8008      	strh	r0, [r1, #0]
 80137ee:	0038      	movs	r0, r7
 80137f0:	f7fb f8c8 	bl	800e984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80137f4:	2301      	movs	r3, #1
 80137f6:	9a01      	ldr	r2, [sp, #4]
 80137f8:	20ff      	movs	r0, #255	; 0xff
 80137fa:	4093      	lsls	r3, r2
 80137fc:	3b01      	subs	r3, #1
 80137fe:	b2db      	uxtb	r3, r3
 8013800:	0019      	movs	r1, r3
 8013802:	930a      	str	r3, [sp, #40]	; 0x28
 8013804:	f7ec fd26 	bl	8000254 <__divsi3>
 8013808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801380a:	900c      	str	r0, [sp, #48]	; 0x30
 801380c:	2b00      	cmp	r3, #0
 801380e:	d000      	beq.n	8013812 <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x126>
 8013810:	e0dc      	b.n	80139cc <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e0>
 8013812:	b2ad      	uxth	r5, r5
 8013814:	9e05      	ldr	r6, [sp, #20]
 8013816:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013818:	4326      	orrs	r6, r4
 801381a:	9300      	str	r3, [sp, #0]
 801381c:	d00a      	beq.n	8013834 <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x148>
 801381e:	2607      	movs	r6, #7
 8013820:	9b05      	ldr	r3, [sp, #20]
 8013822:	436b      	muls	r3, r5
 8013824:	191c      	adds	r4, r3, r4
 8013826:	9b01      	ldr	r3, [sp, #4]
 8013828:	435c      	muls	r4, r3
 801382a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801382c:	4026      	ands	r6, r4
 801382e:	08e4      	lsrs	r4, r4, #3
 8013830:	191b      	adds	r3, r3, r4
 8013832:	9300      	str	r3, [sp, #0]
 8013834:	9904      	ldr	r1, [sp, #16]
 8013836:	9806      	ldr	r0, [sp, #24]
 8013838:	f7ff ff10 	bl	801365c <_ZN8touchgfx19LCD16bppSerialFlash9nextPixelEbNS_12TextRotationE>
 801383c:	9904      	ldr	r1, [sp, #16]
 801383e:	0004      	movs	r4, r0
 8013840:	9806      	ldr	r0, [sp, #24]
 8013842:	f7ff ff2f 	bl	80136a4 <_ZN8touchgfx19LCD16bppSerialFlash8nextLineEbNS_12TextRotationE>
 8013846:	9b03      	ldr	r3, [sp, #12]
 8013848:	9a01      	ldr	r2, [sp, #4]
 801384a:	1aeb      	subs	r3, r5, r3
 801384c:	435a      	muls	r2, r3
 801384e:	0007      	movs	r7, r0
 8013850:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013852:	9205      	str	r2, [sp, #20]
 8013854:	2800      	cmp	r0, #0
 8013856:	d104      	bne.n	8013862 <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x176>
 8013858:	4bbb      	ldr	r3, [pc, #748]	; (8013b48 <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x45c>)
 801385a:	6818      	ldr	r0, [r3, #0]
 801385c:	6803      	ldr	r3, [r0, #0]
 801385e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013860:	4798      	blx	r3
 8013862:	230e      	movs	r3, #14
 8013864:	aa14      	add	r2, sp, #80	; 0x50
 8013866:	189b      	adds	r3, r3, r2
 8013868:	2200      	movs	r2, #0
 801386a:	5e9a      	ldrsh	r2, [r3, r2]
 801386c:	4bb7      	ldr	r3, [pc, #732]	; (8013b4c <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x460>)
 801386e:	881b      	ldrh	r3, [r3, #0]
 8013870:	4353      	muls	r3, r2
 8013872:	aa17      	add	r2, sp, #92	; 0x5c
 8013874:	2100      	movs	r1, #0
 8013876:	5e52      	ldrsh	r2, [r2, r1]
 8013878:	9924      	ldr	r1, [sp, #144]	; 0x90
 801387a:	189b      	adds	r3, r3, r2
 801387c:	22fc      	movs	r2, #252	; 0xfc
 801387e:	005b      	lsls	r3, r3, #1
 8013880:	18c3      	adds	r3, r0, r3
 8013882:	9304      	str	r3, [sp, #16]
 8013884:	9b03      	ldr	r3, [sp, #12]
 8013886:	00d2      	lsls	r2, r2, #3
 8013888:	4363      	muls	r3, r4
 801388a:	1aff      	subs	r7, r7, r3
 801388c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801388e:	007f      	lsls	r7, r7, #1
 8013890:	0c1b      	lsrs	r3, r3, #16
 8013892:	b2db      	uxtb	r3, r3
 8013894:	9311      	str	r3, [sp, #68]	; 0x44
 8013896:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013898:	0a1b      	lsrs	r3, r3, #8
 801389a:	b2db      	uxtb	r3, r3
 801389c:	9310      	str	r3, [sp, #64]	; 0x40
 801389e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80138a0:	b2db      	uxtb	r3, r3
 80138a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80138a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80138a6:	095b      	lsrs	r3, r3, #5
 80138a8:	4013      	ands	r3, r2
 80138aa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80138ac:	0cd2      	lsrs	r2, r2, #19
 80138ae:	02d2      	lsls	r2, r2, #11
 80138b0:	431a      	orrs	r2, r3
 80138b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80138b4:	061b      	lsls	r3, r3, #24
 80138b6:	0edb      	lsrs	r3, r3, #27
 80138b8:	4313      	orrs	r3, r2
 80138ba:	b29b      	uxth	r3, r3
 80138bc:	930e      	str	r3, [sp, #56]	; 0x38
 80138be:	9b07      	ldr	r3, [sp, #28]
 80138c0:	68d8      	ldr	r0, [r3, #12]
 80138c2:	6803      	ldr	r3, [r0, #0]
 80138c4:	689b      	ldr	r3, [r3, #8]
 80138c6:	4798      	blx	r3
 80138c8:	0063      	lsls	r3, r4, #1
 80138ca:	9306      	str	r3, [sp, #24]
 80138cc:	2800      	cmp	r0, #0
 80138ce:	d100      	bne.n	80138d2 <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e6>
 80138d0:	e09e      	b.n	8013a10 <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x324>
 80138d2:	9b00      	ldr	r3, [sp, #0]
 80138d4:	9a06      	ldr	r2, [sp, #24]
 80138d6:	781b      	ldrb	r3, [r3, #0]
 80138d8:	9903      	ldr	r1, [sp, #12]
 80138da:	4133      	asrs	r3, r6
 80138dc:	434a      	muls	r2, r1
 80138de:	19d2      	adds	r2, r2, r7
 80138e0:	b2db      	uxtb	r3, r3
 80138e2:	920d      	str	r2, [sp, #52]	; 0x34
 80138e4:	9a02      	ldr	r2, [sp, #8]
 80138e6:	1e51      	subs	r1, r2, #1
 80138e8:	9102      	str	r1, [sp, #8]
 80138ea:	d200      	bcs.n	80138ee <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x202>
 80138ec:	e13c      	b.n	8013b68 <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x47c>
 80138ee:	9a03      	ldr	r2, [sp, #12]
 80138f0:	9f04      	ldr	r7, [sp, #16]
 80138f2:	9207      	str	r2, [sp, #28]
 80138f4:	9a07      	ldr	r2, [sp, #28]
 80138f6:	1e51      	subs	r1, r2, #1
 80138f8:	9107      	str	r1, [sp, #28]
 80138fa:	d374      	bcc.n	80139e6 <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2fa>
 80138fc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80138fe:	401d      	ands	r5, r3
 8013900:	d051      	beq.n	80139a6 <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ba>
 8013902:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013904:	4355      	muls	r5, r2
 8013906:	2dfe      	cmp	r5, #254	; 0xfe
 8013908:	dd03      	ble.n	8013912 <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x226>
 801390a:	9908      	ldr	r1, [sp, #32]
 801390c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801390e:	29ff      	cmp	r1, #255	; 0xff
 8013910:	d048      	beq.n	80139a4 <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2b8>
 8013912:	9a08      	ldr	r2, [sp, #32]
 8013914:	2007      	movs	r0, #7
 8013916:	4355      	muls	r5, r2
 8013918:	b2a9      	uxth	r1, r5
 801391a:	2503      	movs	r5, #3
 801391c:	883c      	ldrh	r4, [r7, #0]
 801391e:	1c4a      	adds	r2, r1, #1
 8013920:	1209      	asrs	r1, r1, #8
 8013922:	1852      	adds	r2, r2, r1
 8013924:	1212      	asrs	r2, r2, #8
 8013926:	1221      	asrs	r1, r4, #8
 8013928:	4381      	bics	r1, r0
 801392a:	b2d2      	uxtb	r2, r2
 801392c:	10e0      	asrs	r0, r4, #3
 801392e:	43a8      	bics	r0, r5
 8013930:	40ac      	lsls	r4, r5
 8013932:	b295      	uxth	r5, r2
 8013934:	43d2      	mvns	r2, r2
 8013936:	b2c0      	uxtb	r0, r0
 8013938:	4684      	mov	ip, r0
 801393a:	1148      	asrs	r0, r1, #5
 801393c:	4308      	orrs	r0, r1
 801393e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013940:	b2d2      	uxtb	r2, r2
 8013942:	4369      	muls	r1, r5
 8013944:	4350      	muls	r0, r2
 8013946:	1840      	adds	r0, r0, r1
 8013948:	b281      	uxth	r1, r0
 801394a:	9109      	str	r1, [sp, #36]	; 0x24
 801394c:	4661      	mov	r1, ip
 801394e:	4660      	mov	r0, ip
 8013950:	1189      	asrs	r1, r1, #6
 8013952:	4301      	orrs	r1, r0
 8013954:	9810      	ldr	r0, [sp, #64]	; 0x40
 8013956:	b2e4      	uxtb	r4, r4
 8013958:	4368      	muls	r0, r5
 801395a:	4684      	mov	ip, r0
 801395c:	1160      	asrs	r0, r4, #5
 801395e:	4304      	orrs	r4, r0
 8013960:	4351      	muls	r1, r2
 8013962:	4354      	muls	r4, r2
 8013964:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013966:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013968:	4355      	muls	r5, r2
 801396a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801396c:	1200      	asrs	r0, r0, #8
 801396e:	3201      	adds	r2, #1
 8013970:	1812      	adds	r2, r2, r0
 8013972:	20ff      	movs	r0, #255	; 0xff
 8013974:	1964      	adds	r4, r4, r5
 8013976:	b2a4      	uxth	r4, r4
 8013978:	0200      	lsls	r0, r0, #8
 801397a:	4461      	add	r1, ip
 801397c:	b289      	uxth	r1, r1
 801397e:	4002      	ands	r2, r0
 8013980:	1c60      	adds	r0, r4, #1
 8013982:	1224      	asrs	r4, r4, #8
 8013984:	1904      	adds	r4, r0, r4
 8013986:	1c48      	adds	r0, r1, #1
 8013988:	1209      	asrs	r1, r1, #8
 801398a:	1841      	adds	r1, r0, r1
 801398c:	20ff      	movs	r0, #255	; 0xff
 801398e:	0ad2      	lsrs	r2, r2, #11
 8013990:	00c0      	lsls	r0, r0, #3
 8013992:	0424      	lsls	r4, r4, #16
 8013994:	0949      	lsrs	r1, r1, #5
 8013996:	4001      	ands	r1, r0
 8013998:	02d2      	lsls	r2, r2, #11
 801399a:	0ee4      	lsrs	r4, r4, #27
 801399c:	3818      	subs	r0, #24
 801399e:	4322      	orrs	r2, r4
 80139a0:	4001      	ands	r1, r0
 80139a2:	430a      	orrs	r2, r1
 80139a4:	803a      	strh	r2, [r7, #0]
 80139a6:	9a01      	ldr	r2, [sp, #4]
 80139a8:	4113      	asrs	r3, r2
 80139aa:	18b6      	adds	r6, r6, r2
 80139ac:	b2b6      	uxth	r6, r6
 80139ae:	b2db      	uxtb	r3, r3
 80139b0:	2e07      	cmp	r6, #7
 80139b2:	d905      	bls.n	80139c0 <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d4>
 80139b4:	2600      	movs	r6, #0
 80139b6:	9b00      	ldr	r3, [sp, #0]
 80139b8:	9a00      	ldr	r2, [sp, #0]
 80139ba:	785b      	ldrb	r3, [r3, #1]
 80139bc:	3201      	adds	r2, #1
 80139be:	9200      	str	r2, [sp, #0]
 80139c0:	9a06      	ldr	r2, [sp, #24]
 80139c2:	18bf      	adds	r7, r7, r2
 80139c4:	e796      	b.n	80138f4 <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 80139c6:	199e      	adds	r6, r3, r6
 80139c8:	b236      	sxth	r6, r6
 80139ca:	e6d2      	b.n	8013772 <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x86>
 80139cc:	9901      	ldr	r1, [sp, #4]
 80139ce:	2008      	movs	r0, #8
 80139d0:	f7ec fc40 	bl	8000254 <__divsi3>
 80139d4:	0006      	movs	r6, r0
 80139d6:	3801      	subs	r0, #1
 80139d8:	1940      	adds	r0, r0, r5
 80139da:	0031      	movs	r1, r6
 80139dc:	f7ec fc3a 	bl	8000254 <__divsi3>
 80139e0:	4346      	muls	r6, r0
 80139e2:	b2b5      	uxth	r5, r6
 80139e4:	e716      	b.n	8013814 <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x128>
 80139e6:	9a05      	ldr	r2, [sp, #20]
 80139e8:	2a00      	cmp	r2, #0
 80139ea:	d00b      	beq.n	8013a04 <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 80139ec:	18b6      	adds	r6, r6, r2
 80139ee:	b2b6      	uxth	r6, r6
 80139f0:	9a00      	ldr	r2, [sp, #0]
 80139f2:	08f3      	lsrs	r3, r6, #3
 80139f4:	18d3      	adds	r3, r2, r3
 80139f6:	9300      	str	r3, [sp, #0]
 80139f8:	2307      	movs	r3, #7
 80139fa:	401e      	ands	r6, r3
 80139fc:	9b00      	ldr	r3, [sp, #0]
 80139fe:	781b      	ldrb	r3, [r3, #0]
 8013a00:	4133      	asrs	r3, r6
 8013a02:	b2db      	uxtb	r3, r3
 8013a04:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013a06:	9a04      	ldr	r2, [sp, #16]
 8013a08:	468c      	mov	ip, r1
 8013a0a:	4462      	add	r2, ip
 8013a0c:	9204      	str	r2, [sp, #16]
 8013a0e:	e769      	b.n	80138e4 <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 8013a10:	9a01      	ldr	r2, [sp, #4]
 8013a12:	9b03      	ldr	r3, [sp, #12]
 8013a14:	9900      	ldr	r1, [sp, #0]
 8013a16:	4353      	muls	r3, r2
 8013a18:	930d      	str	r3, [sp, #52]	; 0x34
 8013a1a:	9b07      	ldr	r3, [sp, #28]
 8013a1c:	68d8      	ldr	r0, [r3, #12]
 8013a1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013a20:	199a      	adds	r2, r3, r6
 8013a22:	6803      	ldr	r3, [r0, #0]
 8013a24:	3207      	adds	r2, #7
 8013a26:	10d2      	asrs	r2, r2, #3
 8013a28:	691b      	ldr	r3, [r3, #16]
 8013a2a:	4798      	blx	r3
 8013a2c:	9b01      	ldr	r3, [sp, #4]
 8013a2e:	9a03      	ldr	r2, [sp, #12]
 8013a30:	436b      	muls	r3, r5
 8013a32:	9312      	str	r3, [sp, #72]	; 0x48
 8013a34:	9b06      	ldr	r3, [sp, #24]
 8013a36:	4353      	muls	r3, r2
 8013a38:	19db      	adds	r3, r3, r7
 8013a3a:	9313      	str	r3, [sp, #76]	; 0x4c
 8013a3c:	9b02      	ldr	r3, [sp, #8]
 8013a3e:	1e5a      	subs	r2, r3, #1
 8013a40:	9202      	str	r2, [sp, #8]
 8013a42:	d200      	bcs.n	8013a46 <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35a>
 8013a44:	e090      	b.n	8013b68 <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x47c>
 8013a46:	9b07      	ldr	r3, [sp, #28]
 8013a48:	68d8      	ldr	r0, [r3, #12]
 8013a4a:	6803      	ldr	r3, [r0, #0]
 8013a4c:	695b      	ldr	r3, [r3, #20]
 8013a4e:	4798      	blx	r3
 8013a50:	9b02      	ldr	r3, [sp, #8]
 8013a52:	9009      	str	r0, [sp, #36]	; 0x24
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d011      	beq.n	8013a7c <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8013a58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013a5a:	9900      	ldr	r1, [sp, #0]
 8013a5c:	18f2      	adds	r2, r6, r3
 8013a5e:	10d3      	asrs	r3, r2, #3
 8013a60:	18cb      	adds	r3, r1, r3
 8013a62:	9300      	str	r3, [sp, #0]
 8013a64:	9b07      	ldr	r3, [sp, #28]
 8013a66:	9900      	ldr	r1, [sp, #0]
 8013a68:	68d8      	ldr	r0, [r3, #12]
 8013a6a:	2307      	movs	r3, #7
 8013a6c:	401a      	ands	r2, r3
 8013a6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013a70:	18d2      	adds	r2, r2, r3
 8013a72:	6803      	ldr	r3, [r0, #0]
 8013a74:	3207      	adds	r2, #7
 8013a76:	10d2      	asrs	r2, r2, #3
 8013a78:	691b      	ldr	r3, [r3, #16]
 8013a7a:	4798      	blx	r3
 8013a7c:	9b03      	ldr	r3, [sp, #12]
 8013a7e:	9d04      	ldr	r5, [sp, #16]
 8013a80:	469c      	mov	ip, r3
 8013a82:	4663      	mov	r3, ip
 8013a84:	3b01      	subs	r3, #1
 8013a86:	469c      	mov	ip, r3
 8013a88:	d362      	bcc.n	8013b50 <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x464>
 8013a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a8c:	781c      	ldrb	r4, [r3, #0]
 8013a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a90:	4134      	asrs	r4, r6
 8013a92:	401c      	ands	r4, r3
 8013a94:	d04a      	beq.n	8013b2c <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x440>
 8013a96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a98:	435c      	muls	r4, r3
 8013a9a:	2cfe      	cmp	r4, #254	; 0xfe
 8013a9c:	dd03      	ble.n	8013aa6 <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ba>
 8013a9e:	9b08      	ldr	r3, [sp, #32]
 8013aa0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8013aa2:	2bff      	cmp	r3, #255	; 0xff
 8013aa4:	d041      	beq.n	8013b2a <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x43e>
 8013aa6:	2107      	movs	r1, #7
 8013aa8:	9b08      	ldr	r3, [sp, #32]
 8013aaa:	8828      	ldrh	r0, [r5, #0]
 8013aac:	435c      	muls	r4, r3
 8013aae:	b2a2      	uxth	r2, r4
 8013ab0:	1c53      	adds	r3, r2, #1
 8013ab2:	1212      	asrs	r2, r2, #8
 8013ab4:	189b      	adds	r3, r3, r2
 8013ab6:	121b      	asrs	r3, r3, #8
 8013ab8:	b2db      	uxtb	r3, r3
 8013aba:	b29c      	uxth	r4, r3
 8013abc:	43db      	mvns	r3, r3
 8013abe:	1202      	asrs	r2, r0, #8
 8013ac0:	438a      	bics	r2, r1
 8013ac2:	3904      	subs	r1, #4
 8013ac4:	10c7      	asrs	r7, r0, #3
 8013ac6:	4088      	lsls	r0, r1
 8013ac8:	438f      	bics	r7, r1
 8013aca:	1151      	asrs	r1, r2, #5
 8013acc:	4311      	orrs	r1, r2
 8013ace:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013ad0:	b2db      	uxtb	r3, r3
 8013ad2:	4362      	muls	r2, r4
 8013ad4:	4359      	muls	r1, r3
 8013ad6:	b2ff      	uxtb	r7, r7
 8013ad8:	1889      	adds	r1, r1, r2
 8013ada:	11ba      	asrs	r2, r7, #6
 8013adc:	433a      	orrs	r2, r7
 8013ade:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8013ae0:	435a      	muls	r2, r3
 8013ae2:	4367      	muls	r7, r4
 8013ae4:	b2c0      	uxtb	r0, r0
 8013ae6:	19d2      	adds	r2, r2, r7
 8013ae8:	1147      	asrs	r7, r0, #5
 8013aea:	4338      	orrs	r0, r7
 8013aec:	4358      	muls	r0, r3
 8013aee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013af0:	b289      	uxth	r1, r1
 8013af2:	435c      	muls	r4, r3
 8013af4:	23ff      	movs	r3, #255	; 0xff
 8013af6:	1c4f      	adds	r7, r1, #1
 8013af8:	1209      	asrs	r1, r1, #8
 8013afa:	b292      	uxth	r2, r2
 8013afc:	187f      	adds	r7, r7, r1
 8013afe:	021b      	lsls	r3, r3, #8
 8013b00:	401f      	ands	r7, r3
 8013b02:	1c53      	adds	r3, r2, #1
 8013b04:	1212      	asrs	r2, r2, #8
 8013b06:	189a      	adds	r2, r3, r2
 8013b08:	23ff      	movs	r3, #255	; 0xff
 8013b0a:	1900      	adds	r0, r0, r4
 8013b0c:	b280      	uxth	r0, r0
 8013b0e:	1c41      	adds	r1, r0, #1
 8013b10:	1200      	asrs	r0, r0, #8
 8013b12:	1808      	adds	r0, r1, r0
 8013b14:	00db      	lsls	r3, r3, #3
 8013b16:	0aff      	lsrs	r7, r7, #11
 8013b18:	0400      	lsls	r0, r0, #16
 8013b1a:	0952      	lsrs	r2, r2, #5
 8013b1c:	401a      	ands	r2, r3
 8013b1e:	02ff      	lsls	r7, r7, #11
 8013b20:	0ec0      	lsrs	r0, r0, #27
 8013b22:	3b18      	subs	r3, #24
 8013b24:	4307      	orrs	r7, r0
 8013b26:	401a      	ands	r2, r3
 8013b28:	4317      	orrs	r7, r2
 8013b2a:	802f      	strh	r7, [r5, #0]
 8013b2c:	9b01      	ldr	r3, [sp, #4]
 8013b2e:	18f6      	adds	r6, r6, r3
 8013b30:	b2b6      	uxth	r6, r6
 8013b32:	2e07      	cmp	r6, #7
 8013b34:	d903      	bls.n	8013b3e <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x452>
 8013b36:	2600      	movs	r6, #0
 8013b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b3a:	3301      	adds	r3, #1
 8013b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8013b3e:	9b06      	ldr	r3, [sp, #24]
 8013b40:	18ed      	adds	r5, r5, r3
 8013b42:	e79e      	b.n	8013a82 <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8013b44:	200026c0 	.word	0x200026c0
 8013b48:	200026c8 	.word	0x200026c8
 8013b4c:	200026c2 	.word	0x200026c2
 8013b50:	9b05      	ldr	r3, [sp, #20]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d002      	beq.n	8013b5c <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x470>
 8013b56:	18f6      	adds	r6, r6, r3
 8013b58:	2307      	movs	r3, #7
 8013b5a:	401e      	ands	r6, r3
 8013b5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013b5e:	9b04      	ldr	r3, [sp, #16]
 8013b60:	4694      	mov	ip, r2
 8013b62:	4463      	add	r3, ip
 8013b64:	9304      	str	r3, [sp, #16]
 8013b66:	e769      	b.n	8013a3c <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 8013b68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d104      	bne.n	8013b78 <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x48c>
 8013b6e:	4b03      	ldr	r3, [pc, #12]	; (8013b7c <_ZN8touchgfx19LCD16bppSerialFlash9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x490>)
 8013b70:	6818      	ldr	r0, [r3, #0]
 8013b72:	6803      	ldr	r3, [r0, #0]
 8013b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b76:	4798      	blx	r3
 8013b78:	b019      	add	sp, #100	; 0x64
 8013b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b7c:	200026c8 	.word	0x200026c8

08013b80 <CRC_Lock>:
 8013b80:	b530      	push	{r4, r5, lr}
 8013b82:	2401      	movs	r4, #1
 8013b84:	4a1e      	ldr	r2, [pc, #120]	; (8013c00 <CRC_Lock+0x80>)
 8013b86:	4d1f      	ldr	r5, [pc, #124]	; (8013c04 <CRC_Lock+0x84>)
 8013b88:	6813      	ldr	r3, [r2, #0]
 8013b8a:	43a3      	bics	r3, r4
 8013b8c:	6013      	str	r3, [r2, #0]
 8013b8e:	4b1e      	ldr	r3, [pc, #120]	; (8013c08 <CRC_Lock+0x88>)
 8013b90:	4c1e      	ldr	r4, [pc, #120]	; (8013c0c <CRC_Lock+0x8c>)
 8013b92:	681a      	ldr	r2, [r3, #0]
 8013b94:	4022      	ands	r2, r4
 8013b96:	42aa      	cmp	r2, r5
 8013b98:	d004      	beq.n	8013ba4 <CRC_Lock+0x24>
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	4a1c      	ldr	r2, [pc, #112]	; (8013c10 <CRC_Lock+0x90>)
 8013b9e:	4023      	ands	r3, r4
 8013ba0:	4293      	cmp	r3, r2
 8013ba2:	d124      	bne.n	8013bee <CRC_Lock+0x6e>
 8013ba4:	4b1b      	ldr	r3, [pc, #108]	; (8013c14 <CRC_Lock+0x94>)
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d120      	bne.n	8013bee <CRC_Lock+0x6e>
 8013bac:	248a      	movs	r4, #138	; 0x8a
 8013bae:	4a1a      	ldr	r2, [pc, #104]	; (8013c18 <CRC_Lock+0x98>)
 8013bb0:	00e4      	lsls	r4, r4, #3
 8013bb2:	6813      	ldr	r3, [r2, #0]
 8013bb4:	051b      	lsls	r3, r3, #20
 8013bb6:	0d1b      	lsrs	r3, r3, #20
 8013bb8:	42a3      	cmp	r3, r4
 8013bba:	d00b      	beq.n	8013bd4 <CRC_Lock+0x54>
 8013bbc:	6813      	ldr	r3, [r2, #0]
 8013bbe:	4c17      	ldr	r4, [pc, #92]	; (8013c1c <CRC_Lock+0x9c>)
 8013bc0:	051b      	lsls	r3, r3, #20
 8013bc2:	0d1b      	lsrs	r3, r3, #20
 8013bc4:	42a3      	cmp	r3, r4
 8013bc6:	d005      	beq.n	8013bd4 <CRC_Lock+0x54>
 8013bc8:	6813      	ldr	r3, [r2, #0]
 8013bca:	4a15      	ldr	r2, [pc, #84]	; (8013c20 <CRC_Lock+0xa0>)
 8013bcc:	051b      	lsls	r3, r3, #20
 8013bce:	0d1b      	lsrs	r3, r3, #20
 8013bd0:	4293      	cmp	r3, r2
 8013bd2:	d10c      	bne.n	8013bee <CRC_Lock+0x6e>
 8013bd4:	2201      	movs	r2, #1
 8013bd6:	4b13      	ldr	r3, [pc, #76]	; (8013c24 <CRC_Lock+0xa4>)
 8013bd8:	601a      	str	r2, [r3, #0]
 8013bda:	681a      	ldr	r2, [r3, #0]
 8013bdc:	2a00      	cmp	r2, #0
 8013bde:	d1fc      	bne.n	8013bda <CRC_Lock+0x5a>
 8013be0:	4b11      	ldr	r3, [pc, #68]	; (8013c28 <CRC_Lock+0xa8>)
 8013be2:	6018      	str	r0, [r3, #0]
 8013be4:	6818      	ldr	r0, [r3, #0]
 8013be6:	1a40      	subs	r0, r0, r1
 8013be8:	4241      	negs	r1, r0
 8013bea:	4148      	adcs	r0, r1
 8013bec:	bd30      	pop	{r4, r5, pc}
 8013bee:	2201      	movs	r2, #1
 8013bf0:	4b0e      	ldr	r3, [pc, #56]	; (8013c2c <CRC_Lock+0xac>)
 8013bf2:	601a      	str	r2, [r3, #0]
 8013bf4:	681a      	ldr	r2, [r3, #0]
 8013bf6:	2a00      	cmp	r2, #0
 8013bf8:	d1fc      	bne.n	8013bf4 <CRC_Lock+0x74>
 8013bfa:	4b0d      	ldr	r3, [pc, #52]	; (8013c30 <CRC_Lock+0xb0>)
 8013bfc:	e7f1      	b.n	8013be2 <CRC_Lock+0x62>
 8013bfe:	46c0      	nop			; (mov r8, r8)
 8013c00:	e0002000 	.word	0xe0002000
 8013c04:	0000c240 	.word	0x0000c240
 8013c08:	e000ed00 	.word	0xe000ed00
 8013c0c:	0000fff0 	.word	0x0000fff0
 8013c10:	0000c270 	.word	0x0000c270
 8013c14:	e0042000 	.word	0xe0042000
 8013c18:	5c001000 	.word	0x5c001000
 8013c1c:	00000483 	.word	0x00000483
 8013c20:	00000485 	.word	0x00000485
 8013c24:	58024c08 	.word	0x58024c08
 8013c28:	58024c00 	.word	0x58024c00
 8013c2c:	40023008 	.word	0x40023008
 8013c30:	40023000 	.word	0x40023000

08013c34 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8013c34:	6101      	str	r1, [r0, #16]
 8013c36:	4770      	bx	lr

08013c38 <_ZN8touchgfx8Gestures4tickEv>:
 8013c38:	7b83      	ldrb	r3, [r0, #14]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d009      	beq.n	8013c52 <_ZN8touchgfx8Gestures4tickEv+0x1a>
 8013c3e:	8903      	ldrh	r3, [r0, #8]
 8013c40:	3301      	adds	r3, #1
 8013c42:	b29b      	uxth	r3, r3
 8013c44:	8103      	strh	r3, [r0, #8]
 8013c46:	2b07      	cmp	r3, #7
 8013c48:	d903      	bls.n	8013c52 <_ZN8touchgfx8Gestures4tickEv+0x1a>
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	8143      	strh	r3, [r0, #10]
 8013c4e:	8183      	strh	r3, [r0, #12]
 8013c50:	7383      	strb	r3, [r0, #14]
 8013c52:	4770      	bx	lr

08013c54 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8013c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c56:	b087      	sub	sp, #28
 8013c58:	9201      	str	r2, [sp, #4]
 8013c5a:	4a1b      	ldr	r2, [pc, #108]	; (8013cc8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>)
 8013c5c:	001e      	movs	r6, r3
 8013c5e:	ab0c      	add	r3, sp, #48	; 0x30
 8013c60:	881d      	ldrh	r5, [r3, #0]
 8013c62:	000f      	movs	r7, r1
 8013c64:	88c3      	ldrh	r3, [r0, #6]
 8013c66:	8881      	ldrh	r1, [r0, #4]
 8013c68:	9202      	str	r2, [sp, #8]
 8013c6a:	2200      	movs	r2, #0
 8013c6c:	4694      	mov	ip, r2
 8013c6e:	0004      	movs	r4, r0
 8013c70:	4660      	mov	r0, ip
 8013c72:	aa02      	add	r2, sp, #8
 8013c74:	80d1      	strh	r1, [r2, #6]
 8013c76:	1a71      	subs	r1, r6, r1
 8013c78:	b209      	sxth	r1, r1
 8013c7a:	7110      	strb	r0, [r2, #4]
 8013c7c:	17c8      	asrs	r0, r1, #31
 8013c7e:	8113      	strh	r3, [r2, #8]
 8013c80:	8156      	strh	r6, [r2, #10]
 8013c82:	8195      	strh	r5, [r2, #12]
 8013c84:	1809      	adds	r1, r1, r0
 8013c86:	4041      	eors	r1, r0
 8013c88:	8aa2      	ldrh	r2, [r4, #20]
 8013c8a:	b209      	sxth	r1, r1
 8013c8c:	4291      	cmp	r1, r2
 8013c8e:	dc08      	bgt.n	8013ca2 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x4e>
 8013c90:	1aeb      	subs	r3, r5, r3
 8013c92:	b21b      	sxth	r3, r3
 8013c94:	17d9      	asrs	r1, r3, #31
 8013c96:	185b      	adds	r3, r3, r1
 8013c98:	404b      	eors	r3, r1
 8013c9a:	b21b      	sxth	r3, r3
 8013c9c:	4660      	mov	r0, ip
 8013c9e:	429a      	cmp	r2, r3
 8013ca0:	da0f      	bge.n	8013cc2 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x6e>
 8013ca2:	6920      	ldr	r0, [r4, #16]
 8013ca4:	a902      	add	r1, sp, #8
 8013ca6:	6803      	ldr	r3, [r0, #0]
 8013ca8:	1bf7      	subs	r7, r6, r7
 8013caa:	685b      	ldr	r3, [r3, #4]
 8013cac:	4798      	blx	r3
 8013cae:	2300      	movs	r3, #0
 8013cb0:	2001      	movs	r0, #1
 8013cb2:	8123      	strh	r3, [r4, #8]
 8013cb4:	9b01      	ldr	r3, [sp, #4]
 8013cb6:	8167      	strh	r7, [r4, #10]
 8013cb8:	1aeb      	subs	r3, r5, r3
 8013cba:	81a3      	strh	r3, [r4, #12]
 8013cbc:	80a6      	strh	r6, [r4, #4]
 8013cbe:	80e5      	strh	r5, [r4, #6]
 8013cc0:	73a0      	strb	r0, [r4, #14]
 8013cc2:	b007      	add	sp, #28
 8013cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cc6:	46c0      	nop			; (mov r8, r8)
 8013cc8:	08016d10 	.word	0x08016d10

08013ccc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8013ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cce:	b087      	sub	sp, #28
 8013cd0:	9301      	str	r3, [sp, #4]
 8013cd2:	1e4b      	subs	r3, r1, #1
 8013cd4:	0004      	movs	r4, r0
 8013cd6:	000d      	movs	r5, r1
 8013cd8:	9200      	str	r2, [sp, #0]
 8013cda:	2b01      	cmp	r3, #1
 8013cdc:	d83b      	bhi.n	8013d56 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x8a>
 8013cde:	220a      	movs	r2, #10
 8013ce0:	5e83      	ldrsh	r3, [r0, r2]
 8013ce2:	1cda      	adds	r2, r3, #3
 8013ce4:	b292      	uxth	r2, r2
 8013ce6:	2a06      	cmp	r2, #6
 8013ce8:	d90f      	bls.n	8013d0a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x3e>
 8013cea:	4e20      	ldr	r6, [pc, #128]	; (8013d6c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa0>)
 8013cec:	2204      	movs	r2, #4
 8013cee:	5ea7      	ldrsh	r7, [r4, r2]
 8013cf0:	9603      	str	r6, [sp, #12]
 8013cf2:	2600      	movs	r6, #0
 8013cf4:	2106      	movs	r1, #6
 8013cf6:	5e62      	ldrsh	r2, [r4, r1]
 8013cf8:	6900      	ldr	r0, [r0, #16]
 8013cfa:	a903      	add	r1, sp, #12
 8013cfc:	710e      	strb	r6, [r1, #4]
 8013cfe:	80cb      	strh	r3, [r1, #6]
 8013d00:	810f      	strh	r7, [r1, #8]
 8013d02:	814a      	strh	r2, [r1, #10]
 8013d04:	6803      	ldr	r3, [r0, #0]
 8013d06:	689b      	ldr	r3, [r3, #8]
 8013d08:	4798      	blx	r3
 8013d0a:	220c      	movs	r2, #12
 8013d0c:	5ea3      	ldrsh	r3, [r4, r2]
 8013d0e:	1cda      	adds	r2, r3, #3
 8013d10:	b292      	uxth	r2, r2
 8013d12:	2a06      	cmp	r2, #6
 8013d14:	d90f      	bls.n	8013d36 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x6a>
 8013d16:	4e15      	ldr	r6, [pc, #84]	; (8013d6c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa0>)
 8013d18:	2204      	movs	r2, #4
 8013d1a:	5ea7      	ldrsh	r7, [r4, r2]
 8013d1c:	9603      	str	r6, [sp, #12]
 8013d1e:	2601      	movs	r6, #1
 8013d20:	2106      	movs	r1, #6
 8013d22:	5e62      	ldrsh	r2, [r4, r1]
 8013d24:	6920      	ldr	r0, [r4, #16]
 8013d26:	a903      	add	r1, sp, #12
 8013d28:	710e      	strb	r6, [r1, #4]
 8013d2a:	80cb      	strh	r3, [r1, #6]
 8013d2c:	810f      	strh	r7, [r1, #8]
 8013d2e:	814a      	strh	r2, [r1, #10]
 8013d30:	6803      	ldr	r3, [r0, #0]
 8013d32:	689b      	ldr	r3, [r3, #8]
 8013d34:	4798      	blx	r3
 8013d36:	4b0e      	ldr	r3, [pc, #56]	; (8013d70 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa4>)
 8013d38:	a903      	add	r1, sp, #12
 8013d3a:	9303      	str	r3, [sp, #12]
 8013d3c:	9b00      	ldr	r3, [sp, #0]
 8013d3e:	6920      	ldr	r0, [r4, #16]
 8013d40:	80cb      	strh	r3, [r1, #6]
 8013d42:	9b01      	ldr	r3, [sp, #4]
 8013d44:	710d      	strb	r5, [r1, #4]
 8013d46:	810b      	strh	r3, [r1, #8]
 8013d48:	2300      	movs	r3, #0
 8013d4a:	814b      	strh	r3, [r1, #10]
 8013d4c:	6803      	ldr	r3, [r0, #0]
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	4798      	blx	r3
 8013d52:	b007      	add	sp, #28
 8013d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d56:	2900      	cmp	r1, #0
 8013d58:	d1ed      	bne.n	8013d36 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x6a>
 8013d5a:	9b00      	ldr	r3, [sp, #0]
 8013d5c:	8083      	strh	r3, [r0, #4]
 8013d5e:	9b01      	ldr	r3, [sp, #4]
 8013d60:	80c3      	strh	r3, [r0, #6]
 8013d62:	60a1      	str	r1, [r4, #8]
 8013d64:	81a1      	strh	r1, [r4, #12]
 8013d66:	73a1      	strb	r1, [r4, #14]
 8013d68:	e7e5      	b.n	8013d36 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x6a>
 8013d6a:	46c0      	nop			; (mov r8, r8)
 8013d6c:	08016d24 	.word	0x08016d24
 8013d70:	08016cfc 	.word	0x08016cfc

08013d74 <_ZdlPvj>:
 8013d74:	b510      	push	{r4, lr}
 8013d76:	f000 f814 	bl	8013da2 <_ZdlPv>
 8013d7a:	bd10      	pop	{r4, pc}

08013d7c <__cxa_guard_acquire>:
 8013d7c:	2301      	movs	r3, #1
 8013d7e:	6802      	ldr	r2, [r0, #0]
 8013d80:	421a      	tst	r2, r3
 8013d82:	d106      	bne.n	8013d92 <__cxa_guard_acquire+0x16>
 8013d84:	7842      	ldrb	r2, [r0, #1]
 8013d86:	2a00      	cmp	r2, #0
 8013d88:	d000      	beq.n	8013d8c <__cxa_guard_acquire+0x10>
 8013d8a:	deff      	udf	#255	; 0xff
 8013d8c:	7043      	strb	r3, [r0, #1]
 8013d8e:	0018      	movs	r0, r3
 8013d90:	4770      	bx	lr
 8013d92:	2000      	movs	r0, #0
 8013d94:	e7fc      	b.n	8013d90 <__cxa_guard_acquire+0x14>

08013d96 <__cxa_guard_release>:
 8013d96:	2301      	movs	r3, #1
 8013d98:	6003      	str	r3, [r0, #0]
 8013d9a:	4770      	bx	lr

08013d9c <__cxa_pure_virtual>:
 8013d9c:	b510      	push	{r4, lr}
 8013d9e:	f000 f809 	bl	8013db4 <_ZSt9terminatev>

08013da2 <_ZdlPv>:
 8013da2:	b510      	push	{r4, lr}
 8013da4:	f000 f846 	bl	8013e34 <free>
 8013da8:	bd10      	pop	{r4, pc}

08013daa <_ZN10__cxxabiv111__terminateEPFvvE>:
 8013daa:	b510      	push	{r4, lr}
 8013dac:	4780      	blx	r0
 8013dae:	f000 f809 	bl	8013dc4 <abort>
	...

08013db4 <_ZSt9terminatev>:
 8013db4:	4b02      	ldr	r3, [pc, #8]	; (8013dc0 <_ZSt9terminatev+0xc>)
 8013db6:	b510      	push	{r4, lr}
 8013db8:	6818      	ldr	r0, [r3, #0]
 8013dba:	f7ff fff6 	bl	8013daa <_ZN10__cxxabiv111__terminateEPFvvE>
 8013dbe:	46c0      	nop			; (mov r8, r8)
 8013dc0:	20000024 	.word	0x20000024

08013dc4 <abort>:
 8013dc4:	2006      	movs	r0, #6
 8013dc6:	b510      	push	{r4, lr}
 8013dc8:	f000 fa44 	bl	8014254 <raise>
 8013dcc:	2001      	movs	r0, #1
 8013dce:	f7ef f931 	bl	8003034 <_exit>
	...

08013dd4 <__assert_func>:
 8013dd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8013dd6:	0014      	movs	r4, r2
 8013dd8:	001a      	movs	r2, r3
 8013dda:	4b09      	ldr	r3, [pc, #36]	; (8013e00 <__assert_func+0x2c>)
 8013ddc:	0005      	movs	r5, r0
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	000e      	movs	r6, r1
 8013de2:	68d8      	ldr	r0, [r3, #12]
 8013de4:	4b07      	ldr	r3, [pc, #28]	; (8013e04 <__assert_func+0x30>)
 8013de6:	2c00      	cmp	r4, #0
 8013de8:	d101      	bne.n	8013dee <__assert_func+0x1a>
 8013dea:	4b07      	ldr	r3, [pc, #28]	; (8013e08 <__assert_func+0x34>)
 8013dec:	001c      	movs	r4, r3
 8013dee:	4907      	ldr	r1, [pc, #28]	; (8013e0c <__assert_func+0x38>)
 8013df0:	9301      	str	r3, [sp, #4]
 8013df2:	9402      	str	r4, [sp, #8]
 8013df4:	002b      	movs	r3, r5
 8013df6:	9600      	str	r6, [sp, #0]
 8013df8:	f000 f982 	bl	8014100 <fiprintf>
 8013dfc:	f7ff ffe2 	bl	8013dc4 <abort>
 8013e00:	20000080 	.word	0x20000080
 8013e04:	08016dbc 	.word	0x08016dbc
 8013e08:	08016df7 	.word	0x08016df7
 8013e0c:	08016dc9 	.word	0x08016dc9

08013e10 <atexit>:
 8013e10:	2300      	movs	r3, #0
 8013e12:	b510      	push	{r4, lr}
 8013e14:	0001      	movs	r1, r0
 8013e16:	001a      	movs	r2, r3
 8013e18:	0018      	movs	r0, r3
 8013e1a:	f000 fad1 	bl	80143c0 <__register_exitproc>
 8013e1e:	bd10      	pop	{r4, pc}

08013e20 <malloc>:
 8013e20:	b510      	push	{r4, lr}
 8013e22:	4b03      	ldr	r3, [pc, #12]	; (8013e30 <malloc+0x10>)
 8013e24:	0001      	movs	r1, r0
 8013e26:	6818      	ldr	r0, [r3, #0]
 8013e28:	f000 f830 	bl	8013e8c <_malloc_r>
 8013e2c:	bd10      	pop	{r4, pc}
 8013e2e:	46c0      	nop			; (mov r8, r8)
 8013e30:	20000080 	.word	0x20000080

08013e34 <free>:
 8013e34:	b510      	push	{r4, lr}
 8013e36:	4b03      	ldr	r3, [pc, #12]	; (8013e44 <free+0x10>)
 8013e38:	0001      	movs	r1, r0
 8013e3a:	6818      	ldr	r0, [r3, #0]
 8013e3c:	f000 fb20 	bl	8014480 <_free_r>
 8013e40:	bd10      	pop	{r4, pc}
 8013e42:	46c0      	nop			; (mov r8, r8)
 8013e44:	20000080 	.word	0x20000080

08013e48 <sbrk_aligned>:
 8013e48:	b570      	push	{r4, r5, r6, lr}
 8013e4a:	4e0f      	ldr	r6, [pc, #60]	; (8013e88 <sbrk_aligned+0x40>)
 8013e4c:	000d      	movs	r5, r1
 8013e4e:	6831      	ldr	r1, [r6, #0]
 8013e50:	0004      	movs	r4, r0
 8013e52:	2900      	cmp	r1, #0
 8013e54:	d102      	bne.n	8013e5c <sbrk_aligned+0x14>
 8013e56:	f000 fa57 	bl	8014308 <_sbrk_r>
 8013e5a:	6030      	str	r0, [r6, #0]
 8013e5c:	0029      	movs	r1, r5
 8013e5e:	0020      	movs	r0, r4
 8013e60:	f000 fa52 	bl	8014308 <_sbrk_r>
 8013e64:	1c43      	adds	r3, r0, #1
 8013e66:	d00a      	beq.n	8013e7e <sbrk_aligned+0x36>
 8013e68:	2303      	movs	r3, #3
 8013e6a:	1cc5      	adds	r5, r0, #3
 8013e6c:	439d      	bics	r5, r3
 8013e6e:	42a8      	cmp	r0, r5
 8013e70:	d007      	beq.n	8013e82 <sbrk_aligned+0x3a>
 8013e72:	1a29      	subs	r1, r5, r0
 8013e74:	0020      	movs	r0, r4
 8013e76:	f000 fa47 	bl	8014308 <_sbrk_r>
 8013e7a:	3001      	adds	r0, #1
 8013e7c:	d101      	bne.n	8013e82 <sbrk_aligned+0x3a>
 8013e7e:	2501      	movs	r5, #1
 8013e80:	426d      	negs	r5, r5
 8013e82:	0028      	movs	r0, r5
 8013e84:	bd70      	pop	{r4, r5, r6, pc}
 8013e86:	46c0      	nop			; (mov r8, r8)
 8013e88:	20002758 	.word	0x20002758

08013e8c <_malloc_r>:
 8013e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013e8e:	2203      	movs	r2, #3
 8013e90:	1ccb      	adds	r3, r1, #3
 8013e92:	4393      	bics	r3, r2
 8013e94:	3308      	adds	r3, #8
 8013e96:	0006      	movs	r6, r0
 8013e98:	001f      	movs	r7, r3
 8013e9a:	2b0c      	cmp	r3, #12
 8013e9c:	d238      	bcs.n	8013f10 <_malloc_r+0x84>
 8013e9e:	270c      	movs	r7, #12
 8013ea0:	42b9      	cmp	r1, r7
 8013ea2:	d837      	bhi.n	8013f14 <_malloc_r+0x88>
 8013ea4:	0030      	movs	r0, r6
 8013ea6:	f000 f873 	bl	8013f90 <__malloc_lock>
 8013eaa:	4b38      	ldr	r3, [pc, #224]	; (8013f8c <_malloc_r+0x100>)
 8013eac:	9300      	str	r3, [sp, #0]
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	001c      	movs	r4, r3
 8013eb2:	2c00      	cmp	r4, #0
 8013eb4:	d133      	bne.n	8013f1e <_malloc_r+0x92>
 8013eb6:	0039      	movs	r1, r7
 8013eb8:	0030      	movs	r0, r6
 8013eba:	f7ff ffc5 	bl	8013e48 <sbrk_aligned>
 8013ebe:	0004      	movs	r4, r0
 8013ec0:	1c43      	adds	r3, r0, #1
 8013ec2:	d15e      	bne.n	8013f82 <_malloc_r+0xf6>
 8013ec4:	9b00      	ldr	r3, [sp, #0]
 8013ec6:	681c      	ldr	r4, [r3, #0]
 8013ec8:	0025      	movs	r5, r4
 8013eca:	2d00      	cmp	r5, #0
 8013ecc:	d14e      	bne.n	8013f6c <_malloc_r+0xe0>
 8013ece:	2c00      	cmp	r4, #0
 8013ed0:	d051      	beq.n	8013f76 <_malloc_r+0xea>
 8013ed2:	6823      	ldr	r3, [r4, #0]
 8013ed4:	0029      	movs	r1, r5
 8013ed6:	18e3      	adds	r3, r4, r3
 8013ed8:	0030      	movs	r0, r6
 8013eda:	9301      	str	r3, [sp, #4]
 8013edc:	f000 fa14 	bl	8014308 <_sbrk_r>
 8013ee0:	9b01      	ldr	r3, [sp, #4]
 8013ee2:	4283      	cmp	r3, r0
 8013ee4:	d147      	bne.n	8013f76 <_malloc_r+0xea>
 8013ee6:	6823      	ldr	r3, [r4, #0]
 8013ee8:	0030      	movs	r0, r6
 8013eea:	1aff      	subs	r7, r7, r3
 8013eec:	0039      	movs	r1, r7
 8013eee:	f7ff ffab 	bl	8013e48 <sbrk_aligned>
 8013ef2:	3001      	adds	r0, #1
 8013ef4:	d03f      	beq.n	8013f76 <_malloc_r+0xea>
 8013ef6:	6823      	ldr	r3, [r4, #0]
 8013ef8:	19db      	adds	r3, r3, r7
 8013efa:	6023      	str	r3, [r4, #0]
 8013efc:	9b00      	ldr	r3, [sp, #0]
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d040      	beq.n	8013f86 <_malloc_r+0xfa>
 8013f04:	685a      	ldr	r2, [r3, #4]
 8013f06:	42a2      	cmp	r2, r4
 8013f08:	d133      	bne.n	8013f72 <_malloc_r+0xe6>
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	605a      	str	r2, [r3, #4]
 8013f0e:	e014      	b.n	8013f3a <_malloc_r+0xae>
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	dac5      	bge.n	8013ea0 <_malloc_r+0x14>
 8013f14:	230c      	movs	r3, #12
 8013f16:	2500      	movs	r5, #0
 8013f18:	6033      	str	r3, [r6, #0]
 8013f1a:	0028      	movs	r0, r5
 8013f1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013f1e:	6821      	ldr	r1, [r4, #0]
 8013f20:	1bc9      	subs	r1, r1, r7
 8013f22:	d420      	bmi.n	8013f66 <_malloc_r+0xda>
 8013f24:	290b      	cmp	r1, #11
 8013f26:	d918      	bls.n	8013f5a <_malloc_r+0xce>
 8013f28:	19e2      	adds	r2, r4, r7
 8013f2a:	6027      	str	r7, [r4, #0]
 8013f2c:	42a3      	cmp	r3, r4
 8013f2e:	d112      	bne.n	8013f56 <_malloc_r+0xca>
 8013f30:	9b00      	ldr	r3, [sp, #0]
 8013f32:	601a      	str	r2, [r3, #0]
 8013f34:	6863      	ldr	r3, [r4, #4]
 8013f36:	6011      	str	r1, [r2, #0]
 8013f38:	6053      	str	r3, [r2, #4]
 8013f3a:	0030      	movs	r0, r6
 8013f3c:	0025      	movs	r5, r4
 8013f3e:	f000 f82f 	bl	8013fa0 <__malloc_unlock>
 8013f42:	2207      	movs	r2, #7
 8013f44:	350b      	adds	r5, #11
 8013f46:	1d23      	adds	r3, r4, #4
 8013f48:	4395      	bics	r5, r2
 8013f4a:	1aea      	subs	r2, r5, r3
 8013f4c:	429d      	cmp	r5, r3
 8013f4e:	d0e4      	beq.n	8013f1a <_malloc_r+0x8e>
 8013f50:	1b5b      	subs	r3, r3, r5
 8013f52:	50a3      	str	r3, [r4, r2]
 8013f54:	e7e1      	b.n	8013f1a <_malloc_r+0x8e>
 8013f56:	605a      	str	r2, [r3, #4]
 8013f58:	e7ec      	b.n	8013f34 <_malloc_r+0xa8>
 8013f5a:	6862      	ldr	r2, [r4, #4]
 8013f5c:	42a3      	cmp	r3, r4
 8013f5e:	d1d5      	bne.n	8013f0c <_malloc_r+0x80>
 8013f60:	9b00      	ldr	r3, [sp, #0]
 8013f62:	601a      	str	r2, [r3, #0]
 8013f64:	e7e9      	b.n	8013f3a <_malloc_r+0xae>
 8013f66:	0023      	movs	r3, r4
 8013f68:	6864      	ldr	r4, [r4, #4]
 8013f6a:	e7a2      	b.n	8013eb2 <_malloc_r+0x26>
 8013f6c:	002c      	movs	r4, r5
 8013f6e:	686d      	ldr	r5, [r5, #4]
 8013f70:	e7ab      	b.n	8013eca <_malloc_r+0x3e>
 8013f72:	0013      	movs	r3, r2
 8013f74:	e7c4      	b.n	8013f00 <_malloc_r+0x74>
 8013f76:	230c      	movs	r3, #12
 8013f78:	0030      	movs	r0, r6
 8013f7a:	6033      	str	r3, [r6, #0]
 8013f7c:	f000 f810 	bl	8013fa0 <__malloc_unlock>
 8013f80:	e7cb      	b.n	8013f1a <_malloc_r+0x8e>
 8013f82:	6027      	str	r7, [r4, #0]
 8013f84:	e7d9      	b.n	8013f3a <_malloc_r+0xae>
 8013f86:	605b      	str	r3, [r3, #4]
 8013f88:	deff      	udf	#255	; 0xff
 8013f8a:	46c0      	nop			; (mov r8, r8)
 8013f8c:	20002754 	.word	0x20002754

08013f90 <__malloc_lock>:
 8013f90:	b510      	push	{r4, lr}
 8013f92:	4802      	ldr	r0, [pc, #8]	; (8013f9c <__malloc_lock+0xc>)
 8013f94:	f000 fa09 	bl	80143aa <__retarget_lock_acquire_recursive>
 8013f98:	bd10      	pop	{r4, pc}
 8013f9a:	46c0      	nop			; (mov r8, r8)
 8013f9c:	2000289d 	.word	0x2000289d

08013fa0 <__malloc_unlock>:
 8013fa0:	b510      	push	{r4, lr}
 8013fa2:	4802      	ldr	r0, [pc, #8]	; (8013fac <__malloc_unlock+0xc>)
 8013fa4:	f000 fa02 	bl	80143ac <__retarget_lock_release_recursive>
 8013fa8:	bd10      	pop	{r4, pc}
 8013faa:	46c0      	nop			; (mov r8, r8)
 8013fac:	2000289d 	.word	0x2000289d

08013fb0 <std>:
 8013fb0:	2300      	movs	r3, #0
 8013fb2:	b510      	push	{r4, lr}
 8013fb4:	0004      	movs	r4, r0
 8013fb6:	6003      	str	r3, [r0, #0]
 8013fb8:	6043      	str	r3, [r0, #4]
 8013fba:	6083      	str	r3, [r0, #8]
 8013fbc:	8181      	strh	r1, [r0, #12]
 8013fbe:	6643      	str	r3, [r0, #100]	; 0x64
 8013fc0:	81c2      	strh	r2, [r0, #14]
 8013fc2:	6103      	str	r3, [r0, #16]
 8013fc4:	6143      	str	r3, [r0, #20]
 8013fc6:	6183      	str	r3, [r0, #24]
 8013fc8:	0019      	movs	r1, r3
 8013fca:	2208      	movs	r2, #8
 8013fcc:	305c      	adds	r0, #92	; 0x5c
 8013fce:	f000 f90f 	bl	80141f0 <memset>
 8013fd2:	4b0b      	ldr	r3, [pc, #44]	; (8014000 <std+0x50>)
 8013fd4:	6224      	str	r4, [r4, #32]
 8013fd6:	6263      	str	r3, [r4, #36]	; 0x24
 8013fd8:	4b0a      	ldr	r3, [pc, #40]	; (8014004 <std+0x54>)
 8013fda:	62a3      	str	r3, [r4, #40]	; 0x28
 8013fdc:	4b0a      	ldr	r3, [pc, #40]	; (8014008 <std+0x58>)
 8013fde:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013fe0:	4b0a      	ldr	r3, [pc, #40]	; (801400c <std+0x5c>)
 8013fe2:	6323      	str	r3, [r4, #48]	; 0x30
 8013fe4:	4b0a      	ldr	r3, [pc, #40]	; (8014010 <std+0x60>)
 8013fe6:	429c      	cmp	r4, r3
 8013fe8:	d005      	beq.n	8013ff6 <std+0x46>
 8013fea:	4b0a      	ldr	r3, [pc, #40]	; (8014014 <std+0x64>)
 8013fec:	429c      	cmp	r4, r3
 8013fee:	d002      	beq.n	8013ff6 <std+0x46>
 8013ff0:	4b09      	ldr	r3, [pc, #36]	; (8014018 <std+0x68>)
 8013ff2:	429c      	cmp	r4, r3
 8013ff4:	d103      	bne.n	8013ffe <std+0x4e>
 8013ff6:	0020      	movs	r0, r4
 8013ff8:	3058      	adds	r0, #88	; 0x58
 8013ffa:	f000 f9d5 	bl	80143a8 <__retarget_lock_init_recursive>
 8013ffe:	bd10      	pop	{r4, pc}
 8014000:	08014159 	.word	0x08014159
 8014004:	08014181 	.word	0x08014181
 8014008:	080141b9 	.word	0x080141b9
 801400c:	080141e5 	.word	0x080141e5
 8014010:	2000275c 	.word	0x2000275c
 8014014:	200027c4 	.word	0x200027c4
 8014018:	2000282c 	.word	0x2000282c

0801401c <stdio_exit_handler>:
 801401c:	b510      	push	{r4, lr}
 801401e:	4a03      	ldr	r2, [pc, #12]	; (801402c <stdio_exit_handler+0x10>)
 8014020:	4903      	ldr	r1, [pc, #12]	; (8014030 <stdio_exit_handler+0x14>)
 8014022:	4804      	ldr	r0, [pc, #16]	; (8014034 <stdio_exit_handler+0x18>)
 8014024:	f000 f87c 	bl	8014120 <_fwalk_sglue>
 8014028:	bd10      	pop	{r4, pc}
 801402a:	46c0      	nop			; (mov r8, r8)
 801402c:	20000028 	.word	0x20000028
 8014030:	08014bb1 	.word	0x08014bb1
 8014034:	20000034 	.word	0x20000034

08014038 <cleanup_stdio>:
 8014038:	6841      	ldr	r1, [r0, #4]
 801403a:	4b0b      	ldr	r3, [pc, #44]	; (8014068 <cleanup_stdio+0x30>)
 801403c:	b510      	push	{r4, lr}
 801403e:	0004      	movs	r4, r0
 8014040:	4299      	cmp	r1, r3
 8014042:	d001      	beq.n	8014048 <cleanup_stdio+0x10>
 8014044:	f000 fdb4 	bl	8014bb0 <_fflush_r>
 8014048:	68a1      	ldr	r1, [r4, #8]
 801404a:	4b08      	ldr	r3, [pc, #32]	; (801406c <cleanup_stdio+0x34>)
 801404c:	4299      	cmp	r1, r3
 801404e:	d002      	beq.n	8014056 <cleanup_stdio+0x1e>
 8014050:	0020      	movs	r0, r4
 8014052:	f000 fdad 	bl	8014bb0 <_fflush_r>
 8014056:	68e1      	ldr	r1, [r4, #12]
 8014058:	4b05      	ldr	r3, [pc, #20]	; (8014070 <cleanup_stdio+0x38>)
 801405a:	4299      	cmp	r1, r3
 801405c:	d002      	beq.n	8014064 <cleanup_stdio+0x2c>
 801405e:	0020      	movs	r0, r4
 8014060:	f000 fda6 	bl	8014bb0 <_fflush_r>
 8014064:	bd10      	pop	{r4, pc}
 8014066:	46c0      	nop			; (mov r8, r8)
 8014068:	2000275c 	.word	0x2000275c
 801406c:	200027c4 	.word	0x200027c4
 8014070:	2000282c 	.word	0x2000282c

08014074 <global_stdio_init.part.0>:
 8014074:	b510      	push	{r4, lr}
 8014076:	4b09      	ldr	r3, [pc, #36]	; (801409c <global_stdio_init.part.0+0x28>)
 8014078:	4a09      	ldr	r2, [pc, #36]	; (80140a0 <global_stdio_init.part.0+0x2c>)
 801407a:	2104      	movs	r1, #4
 801407c:	601a      	str	r2, [r3, #0]
 801407e:	4809      	ldr	r0, [pc, #36]	; (80140a4 <global_stdio_init.part.0+0x30>)
 8014080:	2200      	movs	r2, #0
 8014082:	f7ff ff95 	bl	8013fb0 <std>
 8014086:	2201      	movs	r2, #1
 8014088:	2109      	movs	r1, #9
 801408a:	4807      	ldr	r0, [pc, #28]	; (80140a8 <global_stdio_init.part.0+0x34>)
 801408c:	f7ff ff90 	bl	8013fb0 <std>
 8014090:	2202      	movs	r2, #2
 8014092:	2112      	movs	r1, #18
 8014094:	4805      	ldr	r0, [pc, #20]	; (80140ac <global_stdio_init.part.0+0x38>)
 8014096:	f7ff ff8b 	bl	8013fb0 <std>
 801409a:	bd10      	pop	{r4, pc}
 801409c:	20002894 	.word	0x20002894
 80140a0:	0801401d 	.word	0x0801401d
 80140a4:	2000275c 	.word	0x2000275c
 80140a8:	200027c4 	.word	0x200027c4
 80140ac:	2000282c 	.word	0x2000282c

080140b0 <__sfp_lock_acquire>:
 80140b0:	b510      	push	{r4, lr}
 80140b2:	4802      	ldr	r0, [pc, #8]	; (80140bc <__sfp_lock_acquire+0xc>)
 80140b4:	f000 f979 	bl	80143aa <__retarget_lock_acquire_recursive>
 80140b8:	bd10      	pop	{r4, pc}
 80140ba:	46c0      	nop			; (mov r8, r8)
 80140bc:	2000289e 	.word	0x2000289e

080140c0 <__sfp_lock_release>:
 80140c0:	b510      	push	{r4, lr}
 80140c2:	4802      	ldr	r0, [pc, #8]	; (80140cc <__sfp_lock_release+0xc>)
 80140c4:	f000 f972 	bl	80143ac <__retarget_lock_release_recursive>
 80140c8:	bd10      	pop	{r4, pc}
 80140ca:	46c0      	nop			; (mov r8, r8)
 80140cc:	2000289e 	.word	0x2000289e

080140d0 <__sinit>:
 80140d0:	b510      	push	{r4, lr}
 80140d2:	0004      	movs	r4, r0
 80140d4:	f7ff ffec 	bl	80140b0 <__sfp_lock_acquire>
 80140d8:	6a23      	ldr	r3, [r4, #32]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d002      	beq.n	80140e4 <__sinit+0x14>
 80140de:	f7ff ffef 	bl	80140c0 <__sfp_lock_release>
 80140e2:	bd10      	pop	{r4, pc}
 80140e4:	4b04      	ldr	r3, [pc, #16]	; (80140f8 <__sinit+0x28>)
 80140e6:	6223      	str	r3, [r4, #32]
 80140e8:	4b04      	ldr	r3, [pc, #16]	; (80140fc <__sinit+0x2c>)
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d1f6      	bne.n	80140de <__sinit+0xe>
 80140f0:	f7ff ffc0 	bl	8014074 <global_stdio_init.part.0>
 80140f4:	e7f3      	b.n	80140de <__sinit+0xe>
 80140f6:	46c0      	nop			; (mov r8, r8)
 80140f8:	08014039 	.word	0x08014039
 80140fc:	20002894 	.word	0x20002894

08014100 <fiprintf>:
 8014100:	b40e      	push	{r1, r2, r3}
 8014102:	b517      	push	{r0, r1, r2, r4, lr}
 8014104:	4c05      	ldr	r4, [pc, #20]	; (801411c <fiprintf+0x1c>)
 8014106:	ab05      	add	r3, sp, #20
 8014108:	cb04      	ldmia	r3!, {r2}
 801410a:	0001      	movs	r1, r0
 801410c:	6820      	ldr	r0, [r4, #0]
 801410e:	9301      	str	r3, [sp, #4]
 8014110:	f000 fa28 	bl	8014564 <_vfiprintf_r>
 8014114:	bc1e      	pop	{r1, r2, r3, r4}
 8014116:	bc08      	pop	{r3}
 8014118:	b003      	add	sp, #12
 801411a:	4718      	bx	r3
 801411c:	20000080 	.word	0x20000080

08014120 <_fwalk_sglue>:
 8014120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014122:	0014      	movs	r4, r2
 8014124:	2600      	movs	r6, #0
 8014126:	9000      	str	r0, [sp, #0]
 8014128:	9101      	str	r1, [sp, #4]
 801412a:	68a5      	ldr	r5, [r4, #8]
 801412c:	6867      	ldr	r7, [r4, #4]
 801412e:	3f01      	subs	r7, #1
 8014130:	d504      	bpl.n	801413c <_fwalk_sglue+0x1c>
 8014132:	6824      	ldr	r4, [r4, #0]
 8014134:	2c00      	cmp	r4, #0
 8014136:	d1f8      	bne.n	801412a <_fwalk_sglue+0xa>
 8014138:	0030      	movs	r0, r6
 801413a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801413c:	89ab      	ldrh	r3, [r5, #12]
 801413e:	2b01      	cmp	r3, #1
 8014140:	d908      	bls.n	8014154 <_fwalk_sglue+0x34>
 8014142:	220e      	movs	r2, #14
 8014144:	5eab      	ldrsh	r3, [r5, r2]
 8014146:	3301      	adds	r3, #1
 8014148:	d004      	beq.n	8014154 <_fwalk_sglue+0x34>
 801414a:	0029      	movs	r1, r5
 801414c:	9800      	ldr	r0, [sp, #0]
 801414e:	9b01      	ldr	r3, [sp, #4]
 8014150:	4798      	blx	r3
 8014152:	4306      	orrs	r6, r0
 8014154:	3568      	adds	r5, #104	; 0x68
 8014156:	e7ea      	b.n	801412e <_fwalk_sglue+0xe>

08014158 <__sread>:
 8014158:	b570      	push	{r4, r5, r6, lr}
 801415a:	000c      	movs	r4, r1
 801415c:	250e      	movs	r5, #14
 801415e:	5f49      	ldrsh	r1, [r1, r5]
 8014160:	f000 f8a8 	bl	80142b4 <_read_r>
 8014164:	2800      	cmp	r0, #0
 8014166:	db03      	blt.n	8014170 <__sread+0x18>
 8014168:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801416a:	181b      	adds	r3, r3, r0
 801416c:	6563      	str	r3, [r4, #84]	; 0x54
 801416e:	bd70      	pop	{r4, r5, r6, pc}
 8014170:	89a3      	ldrh	r3, [r4, #12]
 8014172:	4a02      	ldr	r2, [pc, #8]	; (801417c <__sread+0x24>)
 8014174:	4013      	ands	r3, r2
 8014176:	81a3      	strh	r3, [r4, #12]
 8014178:	e7f9      	b.n	801416e <__sread+0x16>
 801417a:	46c0      	nop			; (mov r8, r8)
 801417c:	ffffefff 	.word	0xffffefff

08014180 <__swrite>:
 8014180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014182:	001f      	movs	r7, r3
 8014184:	898b      	ldrh	r3, [r1, #12]
 8014186:	0005      	movs	r5, r0
 8014188:	000c      	movs	r4, r1
 801418a:	0016      	movs	r6, r2
 801418c:	05db      	lsls	r3, r3, #23
 801418e:	d505      	bpl.n	801419c <__swrite+0x1c>
 8014190:	230e      	movs	r3, #14
 8014192:	5ec9      	ldrsh	r1, [r1, r3]
 8014194:	2200      	movs	r2, #0
 8014196:	2302      	movs	r3, #2
 8014198:	f000 f878 	bl	801428c <_lseek_r>
 801419c:	89a3      	ldrh	r3, [r4, #12]
 801419e:	4a05      	ldr	r2, [pc, #20]	; (80141b4 <__swrite+0x34>)
 80141a0:	0028      	movs	r0, r5
 80141a2:	4013      	ands	r3, r2
 80141a4:	81a3      	strh	r3, [r4, #12]
 80141a6:	0032      	movs	r2, r6
 80141a8:	230e      	movs	r3, #14
 80141aa:	5ee1      	ldrsh	r1, [r4, r3]
 80141ac:	003b      	movs	r3, r7
 80141ae:	f000 f8bd 	bl	801432c <_write_r>
 80141b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141b4:	ffffefff 	.word	0xffffefff

080141b8 <__sseek>:
 80141b8:	b570      	push	{r4, r5, r6, lr}
 80141ba:	000c      	movs	r4, r1
 80141bc:	250e      	movs	r5, #14
 80141be:	5f49      	ldrsh	r1, [r1, r5]
 80141c0:	f000 f864 	bl	801428c <_lseek_r>
 80141c4:	89a3      	ldrh	r3, [r4, #12]
 80141c6:	1c42      	adds	r2, r0, #1
 80141c8:	d103      	bne.n	80141d2 <__sseek+0x1a>
 80141ca:	4a05      	ldr	r2, [pc, #20]	; (80141e0 <__sseek+0x28>)
 80141cc:	4013      	ands	r3, r2
 80141ce:	81a3      	strh	r3, [r4, #12]
 80141d0:	bd70      	pop	{r4, r5, r6, pc}
 80141d2:	2280      	movs	r2, #128	; 0x80
 80141d4:	0152      	lsls	r2, r2, #5
 80141d6:	4313      	orrs	r3, r2
 80141d8:	81a3      	strh	r3, [r4, #12]
 80141da:	6560      	str	r0, [r4, #84]	; 0x54
 80141dc:	e7f8      	b.n	80141d0 <__sseek+0x18>
 80141de:	46c0      	nop			; (mov r8, r8)
 80141e0:	ffffefff 	.word	0xffffefff

080141e4 <__sclose>:
 80141e4:	b510      	push	{r4, lr}
 80141e6:	230e      	movs	r3, #14
 80141e8:	5ec9      	ldrsh	r1, [r1, r3]
 80141ea:	f000 f83d 	bl	8014268 <_close_r>
 80141ee:	bd10      	pop	{r4, pc}

080141f0 <memset>:
 80141f0:	0003      	movs	r3, r0
 80141f2:	1882      	adds	r2, r0, r2
 80141f4:	4293      	cmp	r3, r2
 80141f6:	d100      	bne.n	80141fa <memset+0xa>
 80141f8:	4770      	bx	lr
 80141fa:	7019      	strb	r1, [r3, #0]
 80141fc:	3301      	adds	r3, #1
 80141fe:	e7f9      	b.n	80141f4 <memset+0x4>

08014200 <_raise_r>:
 8014200:	b570      	push	{r4, r5, r6, lr}
 8014202:	0004      	movs	r4, r0
 8014204:	000d      	movs	r5, r1
 8014206:	291f      	cmp	r1, #31
 8014208:	d904      	bls.n	8014214 <_raise_r+0x14>
 801420a:	2316      	movs	r3, #22
 801420c:	6003      	str	r3, [r0, #0]
 801420e:	2001      	movs	r0, #1
 8014210:	4240      	negs	r0, r0
 8014212:	bd70      	pop	{r4, r5, r6, pc}
 8014214:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8014216:	2b00      	cmp	r3, #0
 8014218:	d004      	beq.n	8014224 <_raise_r+0x24>
 801421a:	008a      	lsls	r2, r1, #2
 801421c:	189b      	adds	r3, r3, r2
 801421e:	681a      	ldr	r2, [r3, #0]
 8014220:	2a00      	cmp	r2, #0
 8014222:	d108      	bne.n	8014236 <_raise_r+0x36>
 8014224:	0020      	movs	r0, r4
 8014226:	f000 f86b 	bl	8014300 <_getpid_r>
 801422a:	002a      	movs	r2, r5
 801422c:	0001      	movs	r1, r0
 801422e:	0020      	movs	r0, r4
 8014230:	f000 f854 	bl	80142dc <_kill_r>
 8014234:	e7ed      	b.n	8014212 <_raise_r+0x12>
 8014236:	2000      	movs	r0, #0
 8014238:	2a01      	cmp	r2, #1
 801423a:	d0ea      	beq.n	8014212 <_raise_r+0x12>
 801423c:	1c51      	adds	r1, r2, #1
 801423e:	d103      	bne.n	8014248 <_raise_r+0x48>
 8014240:	2316      	movs	r3, #22
 8014242:	3001      	adds	r0, #1
 8014244:	6023      	str	r3, [r4, #0]
 8014246:	e7e4      	b.n	8014212 <_raise_r+0x12>
 8014248:	2400      	movs	r4, #0
 801424a:	0028      	movs	r0, r5
 801424c:	601c      	str	r4, [r3, #0]
 801424e:	4790      	blx	r2
 8014250:	0020      	movs	r0, r4
 8014252:	e7de      	b.n	8014212 <_raise_r+0x12>

08014254 <raise>:
 8014254:	b510      	push	{r4, lr}
 8014256:	4b03      	ldr	r3, [pc, #12]	; (8014264 <raise+0x10>)
 8014258:	0001      	movs	r1, r0
 801425a:	6818      	ldr	r0, [r3, #0]
 801425c:	f7ff ffd0 	bl	8014200 <_raise_r>
 8014260:	bd10      	pop	{r4, pc}
 8014262:	46c0      	nop			; (mov r8, r8)
 8014264:	20000080 	.word	0x20000080

08014268 <_close_r>:
 8014268:	2300      	movs	r3, #0
 801426a:	b570      	push	{r4, r5, r6, lr}
 801426c:	4d06      	ldr	r5, [pc, #24]	; (8014288 <_close_r+0x20>)
 801426e:	0004      	movs	r4, r0
 8014270:	0008      	movs	r0, r1
 8014272:	602b      	str	r3, [r5, #0]
 8014274:	f7ee ff23 	bl	80030be <_close>
 8014278:	1c43      	adds	r3, r0, #1
 801427a:	d103      	bne.n	8014284 <_close_r+0x1c>
 801427c:	682b      	ldr	r3, [r5, #0]
 801427e:	2b00      	cmp	r3, #0
 8014280:	d000      	beq.n	8014284 <_close_r+0x1c>
 8014282:	6023      	str	r3, [r4, #0]
 8014284:	bd70      	pop	{r4, r5, r6, pc}
 8014286:	46c0      	nop			; (mov r8, r8)
 8014288:	20002898 	.word	0x20002898

0801428c <_lseek_r>:
 801428c:	b570      	push	{r4, r5, r6, lr}
 801428e:	0004      	movs	r4, r0
 8014290:	0008      	movs	r0, r1
 8014292:	0011      	movs	r1, r2
 8014294:	001a      	movs	r2, r3
 8014296:	2300      	movs	r3, #0
 8014298:	4d05      	ldr	r5, [pc, #20]	; (80142b0 <_lseek_r+0x24>)
 801429a:	602b      	str	r3, [r5, #0]
 801429c:	f7ee ff30 	bl	8003100 <_lseek>
 80142a0:	1c43      	adds	r3, r0, #1
 80142a2:	d103      	bne.n	80142ac <_lseek_r+0x20>
 80142a4:	682b      	ldr	r3, [r5, #0]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d000      	beq.n	80142ac <_lseek_r+0x20>
 80142aa:	6023      	str	r3, [r4, #0]
 80142ac:	bd70      	pop	{r4, r5, r6, pc}
 80142ae:	46c0      	nop			; (mov r8, r8)
 80142b0:	20002898 	.word	0x20002898

080142b4 <_read_r>:
 80142b4:	b570      	push	{r4, r5, r6, lr}
 80142b6:	0004      	movs	r4, r0
 80142b8:	0008      	movs	r0, r1
 80142ba:	0011      	movs	r1, r2
 80142bc:	001a      	movs	r2, r3
 80142be:	2300      	movs	r3, #0
 80142c0:	4d05      	ldr	r5, [pc, #20]	; (80142d8 <_read_r+0x24>)
 80142c2:	602b      	str	r3, [r5, #0]
 80142c4:	f7ee fec2 	bl	800304c <_read>
 80142c8:	1c43      	adds	r3, r0, #1
 80142ca:	d103      	bne.n	80142d4 <_read_r+0x20>
 80142cc:	682b      	ldr	r3, [r5, #0]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d000      	beq.n	80142d4 <_read_r+0x20>
 80142d2:	6023      	str	r3, [r4, #0]
 80142d4:	bd70      	pop	{r4, r5, r6, pc}
 80142d6:	46c0      	nop			; (mov r8, r8)
 80142d8:	20002898 	.word	0x20002898

080142dc <_kill_r>:
 80142dc:	2300      	movs	r3, #0
 80142de:	b570      	push	{r4, r5, r6, lr}
 80142e0:	4d06      	ldr	r5, [pc, #24]	; (80142fc <_kill_r+0x20>)
 80142e2:	0004      	movs	r4, r0
 80142e4:	0008      	movs	r0, r1
 80142e6:	0011      	movs	r1, r2
 80142e8:	602b      	str	r3, [r5, #0]
 80142ea:	f7ee fe93 	bl	8003014 <_kill>
 80142ee:	1c43      	adds	r3, r0, #1
 80142f0:	d103      	bne.n	80142fa <_kill_r+0x1e>
 80142f2:	682b      	ldr	r3, [r5, #0]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d000      	beq.n	80142fa <_kill_r+0x1e>
 80142f8:	6023      	str	r3, [r4, #0]
 80142fa:	bd70      	pop	{r4, r5, r6, pc}
 80142fc:	20002898 	.word	0x20002898

08014300 <_getpid_r>:
 8014300:	b510      	push	{r4, lr}
 8014302:	f7ee fe81 	bl	8003008 <_getpid>
 8014306:	bd10      	pop	{r4, pc}

08014308 <_sbrk_r>:
 8014308:	2300      	movs	r3, #0
 801430a:	b570      	push	{r4, r5, r6, lr}
 801430c:	4d06      	ldr	r5, [pc, #24]	; (8014328 <_sbrk_r+0x20>)
 801430e:	0004      	movs	r4, r0
 8014310:	0008      	movs	r0, r1
 8014312:	602b      	str	r3, [r5, #0]
 8014314:	f7ee ff00 	bl	8003118 <_sbrk>
 8014318:	1c43      	adds	r3, r0, #1
 801431a:	d103      	bne.n	8014324 <_sbrk_r+0x1c>
 801431c:	682b      	ldr	r3, [r5, #0]
 801431e:	2b00      	cmp	r3, #0
 8014320:	d000      	beq.n	8014324 <_sbrk_r+0x1c>
 8014322:	6023      	str	r3, [r4, #0]
 8014324:	bd70      	pop	{r4, r5, r6, pc}
 8014326:	46c0      	nop			; (mov r8, r8)
 8014328:	20002898 	.word	0x20002898

0801432c <_write_r>:
 801432c:	b570      	push	{r4, r5, r6, lr}
 801432e:	0004      	movs	r4, r0
 8014330:	0008      	movs	r0, r1
 8014332:	0011      	movs	r1, r2
 8014334:	001a      	movs	r2, r3
 8014336:	2300      	movs	r3, #0
 8014338:	4d05      	ldr	r5, [pc, #20]	; (8014350 <_write_r+0x24>)
 801433a:	602b      	str	r3, [r5, #0]
 801433c:	f7ee fea3 	bl	8003086 <_write>
 8014340:	1c43      	adds	r3, r0, #1
 8014342:	d103      	bne.n	801434c <_write_r+0x20>
 8014344:	682b      	ldr	r3, [r5, #0]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d000      	beq.n	801434c <_write_r+0x20>
 801434a:	6023      	str	r3, [r4, #0]
 801434c:	bd70      	pop	{r4, r5, r6, pc}
 801434e:	46c0      	nop			; (mov r8, r8)
 8014350:	20002898 	.word	0x20002898

08014354 <__errno>:
 8014354:	4b01      	ldr	r3, [pc, #4]	; (801435c <__errno+0x8>)
 8014356:	6818      	ldr	r0, [r3, #0]
 8014358:	4770      	bx	lr
 801435a:	46c0      	nop			; (mov r8, r8)
 801435c:	20000080 	.word	0x20000080

08014360 <__libc_init_array>:
 8014360:	b570      	push	{r4, r5, r6, lr}
 8014362:	2600      	movs	r6, #0
 8014364:	4c0c      	ldr	r4, [pc, #48]	; (8014398 <__libc_init_array+0x38>)
 8014366:	4d0d      	ldr	r5, [pc, #52]	; (801439c <__libc_init_array+0x3c>)
 8014368:	1b64      	subs	r4, r4, r5
 801436a:	10a4      	asrs	r4, r4, #2
 801436c:	42a6      	cmp	r6, r4
 801436e:	d109      	bne.n	8014384 <__libc_init_array+0x24>
 8014370:	2600      	movs	r6, #0
 8014372:	f000 fd85 	bl	8014e80 <_init>
 8014376:	4c0a      	ldr	r4, [pc, #40]	; (80143a0 <__libc_init_array+0x40>)
 8014378:	4d0a      	ldr	r5, [pc, #40]	; (80143a4 <__libc_init_array+0x44>)
 801437a:	1b64      	subs	r4, r4, r5
 801437c:	10a4      	asrs	r4, r4, #2
 801437e:	42a6      	cmp	r6, r4
 8014380:	d105      	bne.n	801438e <__libc_init_array+0x2e>
 8014382:	bd70      	pop	{r4, r5, r6, pc}
 8014384:	00b3      	lsls	r3, r6, #2
 8014386:	58eb      	ldr	r3, [r5, r3]
 8014388:	4798      	blx	r3
 801438a:	3601      	adds	r6, #1
 801438c:	e7ee      	b.n	801436c <__libc_init_array+0xc>
 801438e:	00b3      	lsls	r3, r6, #2
 8014390:	58eb      	ldr	r3, [r5, r3]
 8014392:	4798      	blx	r3
 8014394:	3601      	adds	r6, #1
 8014396:	e7f2      	b.n	801437e <__libc_init_array+0x1e>
 8014398:	08017008 	.word	0x08017008
 801439c:	08017008 	.word	0x08017008
 80143a0:	08017024 	.word	0x08017024
 80143a4:	08017008 	.word	0x08017008

080143a8 <__retarget_lock_init_recursive>:
 80143a8:	4770      	bx	lr

080143aa <__retarget_lock_acquire_recursive>:
 80143aa:	4770      	bx	lr

080143ac <__retarget_lock_release_recursive>:
 80143ac:	4770      	bx	lr

080143ae <memcpy>:
 80143ae:	2300      	movs	r3, #0
 80143b0:	b510      	push	{r4, lr}
 80143b2:	429a      	cmp	r2, r3
 80143b4:	d100      	bne.n	80143b8 <memcpy+0xa>
 80143b6:	bd10      	pop	{r4, pc}
 80143b8:	5ccc      	ldrb	r4, [r1, r3]
 80143ba:	54c4      	strb	r4, [r0, r3]
 80143bc:	3301      	adds	r3, #1
 80143be:	e7f8      	b.n	80143b2 <memcpy+0x4>

080143c0 <__register_exitproc>:
 80143c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143c2:	4d2a      	ldr	r5, [pc, #168]	; (801446c <__register_exitproc+0xac>)
 80143c4:	b085      	sub	sp, #20
 80143c6:	0006      	movs	r6, r0
 80143c8:	6828      	ldr	r0, [r5, #0]
 80143ca:	9303      	str	r3, [sp, #12]
 80143cc:	9101      	str	r1, [sp, #4]
 80143ce:	9202      	str	r2, [sp, #8]
 80143d0:	f7ff ffeb 	bl	80143aa <__retarget_lock_acquire_recursive>
 80143d4:	4b26      	ldr	r3, [pc, #152]	; (8014470 <__register_exitproc+0xb0>)
 80143d6:	681c      	ldr	r4, [r3, #0]
 80143d8:	2c00      	cmp	r4, #0
 80143da:	d108      	bne.n	80143ee <__register_exitproc+0x2e>
 80143dc:	4c25      	ldr	r4, [pc, #148]	; (8014474 <__register_exitproc+0xb4>)
 80143de:	601c      	str	r4, [r3, #0]
 80143e0:	4b25      	ldr	r3, [pc, #148]	; (8014478 <__register_exitproc+0xb8>)
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d003      	beq.n	80143ee <__register_exitproc+0x2e>
 80143e6:	0022      	movs	r2, r4
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	3288      	adds	r2, #136	; 0x88
 80143ec:	6013      	str	r3, [r2, #0]
 80143ee:	6863      	ldr	r3, [r4, #4]
 80143f0:	2b1f      	cmp	r3, #31
 80143f2:	dd06      	ble.n	8014402 <__register_exitproc+0x42>
 80143f4:	6828      	ldr	r0, [r5, #0]
 80143f6:	f7ff ffd9 	bl	80143ac <__retarget_lock_release_recursive>
 80143fa:	2001      	movs	r0, #1
 80143fc:	4240      	negs	r0, r0
 80143fe:	b005      	add	sp, #20
 8014400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014402:	2e00      	cmp	r6, #0
 8014404:	d025      	beq.n	8014452 <__register_exitproc+0x92>
 8014406:	0027      	movs	r7, r4
 8014408:	3788      	adds	r7, #136	; 0x88
 801440a:	6838      	ldr	r0, [r7, #0]
 801440c:	2800      	cmp	r0, #0
 801440e:	d10e      	bne.n	801442e <__register_exitproc+0x6e>
 8014410:	4b1a      	ldr	r3, [pc, #104]	; (801447c <__register_exitproc+0xbc>)
 8014412:	2b00      	cmp	r3, #0
 8014414:	d0ee      	beq.n	80143f4 <__register_exitproc+0x34>
 8014416:	2084      	movs	r0, #132	; 0x84
 8014418:	0040      	lsls	r0, r0, #1
 801441a:	f7ff fd01 	bl	8013e20 <malloc>
 801441e:	2800      	cmp	r0, #0
 8014420:	d0e8      	beq.n	80143f4 <__register_exitproc+0x34>
 8014422:	0003      	movs	r3, r0
 8014424:	2200      	movs	r2, #0
 8014426:	33fc      	adds	r3, #252	; 0xfc
 8014428:	605a      	str	r2, [r3, #4]
 801442a:	609a      	str	r2, [r3, #8]
 801442c:	6038      	str	r0, [r7, #0]
 801442e:	6861      	ldr	r1, [r4, #4]
 8014430:	9a02      	ldr	r2, [sp, #8]
 8014432:	008b      	lsls	r3, r1, #2
 8014434:	18c3      	adds	r3, r0, r3
 8014436:	c304      	stmia	r3!, {r2}
 8014438:	2201      	movs	r2, #1
 801443a:	408a      	lsls	r2, r1
 801443c:	30fc      	adds	r0, #252	; 0xfc
 801443e:	6841      	ldr	r1, [r0, #4]
 8014440:	4311      	orrs	r1, r2
 8014442:	6041      	str	r1, [r0, #4]
 8014444:	9903      	ldr	r1, [sp, #12]
 8014446:	67d9      	str	r1, [r3, #124]	; 0x7c
 8014448:	2e02      	cmp	r6, #2
 801444a:	d102      	bne.n	8014452 <__register_exitproc+0x92>
 801444c:	6883      	ldr	r3, [r0, #8]
 801444e:	4313      	orrs	r3, r2
 8014450:	6083      	str	r3, [r0, #8]
 8014452:	6863      	ldr	r3, [r4, #4]
 8014454:	6828      	ldr	r0, [r5, #0]
 8014456:	1c5a      	adds	r2, r3, #1
 8014458:	6062      	str	r2, [r4, #4]
 801445a:	3302      	adds	r3, #2
 801445c:	9a01      	ldr	r2, [sp, #4]
 801445e:	009b      	lsls	r3, r3, #2
 8014460:	511a      	str	r2, [r3, r4]
 8014462:	f7ff ffa3 	bl	80143ac <__retarget_lock_release_recursive>
 8014466:	2000      	movs	r0, #0
 8014468:	e7c9      	b.n	80143fe <__register_exitproc+0x3e>
 801446a:	46c0      	nop			; (mov r8, r8)
 801446c:	20000084 	.word	0x20000084
 8014470:	2000292c 	.word	0x2000292c
 8014474:	200028a0 	.word	0x200028a0
 8014478:	08016df8 	.word	0x08016df8
 801447c:	08013e21 	.word	0x08013e21

08014480 <_free_r>:
 8014480:	b570      	push	{r4, r5, r6, lr}
 8014482:	0005      	movs	r5, r0
 8014484:	2900      	cmp	r1, #0
 8014486:	d010      	beq.n	80144aa <_free_r+0x2a>
 8014488:	1f0c      	subs	r4, r1, #4
 801448a:	6823      	ldr	r3, [r4, #0]
 801448c:	2b00      	cmp	r3, #0
 801448e:	da00      	bge.n	8014492 <_free_r+0x12>
 8014490:	18e4      	adds	r4, r4, r3
 8014492:	0028      	movs	r0, r5
 8014494:	f7ff fd7c 	bl	8013f90 <__malloc_lock>
 8014498:	4a1d      	ldr	r2, [pc, #116]	; (8014510 <_free_r+0x90>)
 801449a:	6813      	ldr	r3, [r2, #0]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d105      	bne.n	80144ac <_free_r+0x2c>
 80144a0:	6063      	str	r3, [r4, #4]
 80144a2:	6014      	str	r4, [r2, #0]
 80144a4:	0028      	movs	r0, r5
 80144a6:	f7ff fd7b 	bl	8013fa0 <__malloc_unlock>
 80144aa:	bd70      	pop	{r4, r5, r6, pc}
 80144ac:	42a3      	cmp	r3, r4
 80144ae:	d908      	bls.n	80144c2 <_free_r+0x42>
 80144b0:	6820      	ldr	r0, [r4, #0]
 80144b2:	1821      	adds	r1, r4, r0
 80144b4:	428b      	cmp	r3, r1
 80144b6:	d1f3      	bne.n	80144a0 <_free_r+0x20>
 80144b8:	6819      	ldr	r1, [r3, #0]
 80144ba:	685b      	ldr	r3, [r3, #4]
 80144bc:	1809      	adds	r1, r1, r0
 80144be:	6021      	str	r1, [r4, #0]
 80144c0:	e7ee      	b.n	80144a0 <_free_r+0x20>
 80144c2:	001a      	movs	r2, r3
 80144c4:	685b      	ldr	r3, [r3, #4]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d001      	beq.n	80144ce <_free_r+0x4e>
 80144ca:	42a3      	cmp	r3, r4
 80144cc:	d9f9      	bls.n	80144c2 <_free_r+0x42>
 80144ce:	6811      	ldr	r1, [r2, #0]
 80144d0:	1850      	adds	r0, r2, r1
 80144d2:	42a0      	cmp	r0, r4
 80144d4:	d10b      	bne.n	80144ee <_free_r+0x6e>
 80144d6:	6820      	ldr	r0, [r4, #0]
 80144d8:	1809      	adds	r1, r1, r0
 80144da:	1850      	adds	r0, r2, r1
 80144dc:	6011      	str	r1, [r2, #0]
 80144de:	4283      	cmp	r3, r0
 80144e0:	d1e0      	bne.n	80144a4 <_free_r+0x24>
 80144e2:	6818      	ldr	r0, [r3, #0]
 80144e4:	685b      	ldr	r3, [r3, #4]
 80144e6:	1841      	adds	r1, r0, r1
 80144e8:	6011      	str	r1, [r2, #0]
 80144ea:	6053      	str	r3, [r2, #4]
 80144ec:	e7da      	b.n	80144a4 <_free_r+0x24>
 80144ee:	42a0      	cmp	r0, r4
 80144f0:	d902      	bls.n	80144f8 <_free_r+0x78>
 80144f2:	230c      	movs	r3, #12
 80144f4:	602b      	str	r3, [r5, #0]
 80144f6:	e7d5      	b.n	80144a4 <_free_r+0x24>
 80144f8:	6820      	ldr	r0, [r4, #0]
 80144fa:	1821      	adds	r1, r4, r0
 80144fc:	428b      	cmp	r3, r1
 80144fe:	d103      	bne.n	8014508 <_free_r+0x88>
 8014500:	6819      	ldr	r1, [r3, #0]
 8014502:	685b      	ldr	r3, [r3, #4]
 8014504:	1809      	adds	r1, r1, r0
 8014506:	6021      	str	r1, [r4, #0]
 8014508:	6063      	str	r3, [r4, #4]
 801450a:	6054      	str	r4, [r2, #4]
 801450c:	e7ca      	b.n	80144a4 <_free_r+0x24>
 801450e:	46c0      	nop			; (mov r8, r8)
 8014510:	20002754 	.word	0x20002754

08014514 <__sfputc_r>:
 8014514:	6893      	ldr	r3, [r2, #8]
 8014516:	b510      	push	{r4, lr}
 8014518:	3b01      	subs	r3, #1
 801451a:	6093      	str	r3, [r2, #8]
 801451c:	2b00      	cmp	r3, #0
 801451e:	da04      	bge.n	801452a <__sfputc_r+0x16>
 8014520:	6994      	ldr	r4, [r2, #24]
 8014522:	42a3      	cmp	r3, r4
 8014524:	db07      	blt.n	8014536 <__sfputc_r+0x22>
 8014526:	290a      	cmp	r1, #10
 8014528:	d005      	beq.n	8014536 <__sfputc_r+0x22>
 801452a:	6813      	ldr	r3, [r2, #0]
 801452c:	1c58      	adds	r0, r3, #1
 801452e:	6010      	str	r0, [r2, #0]
 8014530:	7019      	strb	r1, [r3, #0]
 8014532:	0008      	movs	r0, r1
 8014534:	bd10      	pop	{r4, pc}
 8014536:	f000 fb66 	bl	8014c06 <__swbuf_r>
 801453a:	0001      	movs	r1, r0
 801453c:	e7f9      	b.n	8014532 <__sfputc_r+0x1e>

0801453e <__sfputs_r>:
 801453e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014540:	0006      	movs	r6, r0
 8014542:	000f      	movs	r7, r1
 8014544:	0014      	movs	r4, r2
 8014546:	18d5      	adds	r5, r2, r3
 8014548:	42ac      	cmp	r4, r5
 801454a:	d101      	bne.n	8014550 <__sfputs_r+0x12>
 801454c:	2000      	movs	r0, #0
 801454e:	e007      	b.n	8014560 <__sfputs_r+0x22>
 8014550:	7821      	ldrb	r1, [r4, #0]
 8014552:	003a      	movs	r2, r7
 8014554:	0030      	movs	r0, r6
 8014556:	f7ff ffdd 	bl	8014514 <__sfputc_r>
 801455a:	3401      	adds	r4, #1
 801455c:	1c43      	adds	r3, r0, #1
 801455e:	d1f3      	bne.n	8014548 <__sfputs_r+0xa>
 8014560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014564 <_vfiprintf_r>:
 8014564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014566:	b0a1      	sub	sp, #132	; 0x84
 8014568:	000f      	movs	r7, r1
 801456a:	0015      	movs	r5, r2
 801456c:	001e      	movs	r6, r3
 801456e:	9003      	str	r0, [sp, #12]
 8014570:	2800      	cmp	r0, #0
 8014572:	d004      	beq.n	801457e <_vfiprintf_r+0x1a>
 8014574:	6a03      	ldr	r3, [r0, #32]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d101      	bne.n	801457e <_vfiprintf_r+0x1a>
 801457a:	f7ff fda9 	bl	80140d0 <__sinit>
 801457e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014580:	07db      	lsls	r3, r3, #31
 8014582:	d405      	bmi.n	8014590 <_vfiprintf_r+0x2c>
 8014584:	89bb      	ldrh	r3, [r7, #12]
 8014586:	059b      	lsls	r3, r3, #22
 8014588:	d402      	bmi.n	8014590 <_vfiprintf_r+0x2c>
 801458a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801458c:	f7ff ff0d 	bl	80143aa <__retarget_lock_acquire_recursive>
 8014590:	89bb      	ldrh	r3, [r7, #12]
 8014592:	071b      	lsls	r3, r3, #28
 8014594:	d502      	bpl.n	801459c <_vfiprintf_r+0x38>
 8014596:	693b      	ldr	r3, [r7, #16]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d113      	bne.n	80145c4 <_vfiprintf_r+0x60>
 801459c:	0039      	movs	r1, r7
 801459e:	9803      	ldr	r0, [sp, #12]
 80145a0:	f000 fb74 	bl	8014c8c <__swsetup_r>
 80145a4:	2800      	cmp	r0, #0
 80145a6:	d00d      	beq.n	80145c4 <_vfiprintf_r+0x60>
 80145a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80145aa:	07db      	lsls	r3, r3, #31
 80145ac:	d503      	bpl.n	80145b6 <_vfiprintf_r+0x52>
 80145ae:	2001      	movs	r0, #1
 80145b0:	4240      	negs	r0, r0
 80145b2:	b021      	add	sp, #132	; 0x84
 80145b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145b6:	89bb      	ldrh	r3, [r7, #12]
 80145b8:	059b      	lsls	r3, r3, #22
 80145ba:	d4f8      	bmi.n	80145ae <_vfiprintf_r+0x4a>
 80145bc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80145be:	f7ff fef5 	bl	80143ac <__retarget_lock_release_recursive>
 80145c2:	e7f4      	b.n	80145ae <_vfiprintf_r+0x4a>
 80145c4:	2300      	movs	r3, #0
 80145c6:	ac08      	add	r4, sp, #32
 80145c8:	6163      	str	r3, [r4, #20]
 80145ca:	3320      	adds	r3, #32
 80145cc:	7663      	strb	r3, [r4, #25]
 80145ce:	3310      	adds	r3, #16
 80145d0:	76a3      	strb	r3, [r4, #26]
 80145d2:	9607      	str	r6, [sp, #28]
 80145d4:	002e      	movs	r6, r5
 80145d6:	7833      	ldrb	r3, [r6, #0]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d001      	beq.n	80145e0 <_vfiprintf_r+0x7c>
 80145dc:	2b25      	cmp	r3, #37	; 0x25
 80145de:	d148      	bne.n	8014672 <_vfiprintf_r+0x10e>
 80145e0:	1b73      	subs	r3, r6, r5
 80145e2:	9305      	str	r3, [sp, #20]
 80145e4:	42ae      	cmp	r6, r5
 80145e6:	d00b      	beq.n	8014600 <_vfiprintf_r+0x9c>
 80145e8:	002a      	movs	r2, r5
 80145ea:	0039      	movs	r1, r7
 80145ec:	9803      	ldr	r0, [sp, #12]
 80145ee:	f7ff ffa6 	bl	801453e <__sfputs_r>
 80145f2:	3001      	adds	r0, #1
 80145f4:	d100      	bne.n	80145f8 <_vfiprintf_r+0x94>
 80145f6:	e0af      	b.n	8014758 <_vfiprintf_r+0x1f4>
 80145f8:	6963      	ldr	r3, [r4, #20]
 80145fa:	9a05      	ldr	r2, [sp, #20]
 80145fc:	189b      	adds	r3, r3, r2
 80145fe:	6163      	str	r3, [r4, #20]
 8014600:	7833      	ldrb	r3, [r6, #0]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d100      	bne.n	8014608 <_vfiprintf_r+0xa4>
 8014606:	e0a7      	b.n	8014758 <_vfiprintf_r+0x1f4>
 8014608:	2201      	movs	r2, #1
 801460a:	2300      	movs	r3, #0
 801460c:	4252      	negs	r2, r2
 801460e:	6062      	str	r2, [r4, #4]
 8014610:	a904      	add	r1, sp, #16
 8014612:	3254      	adds	r2, #84	; 0x54
 8014614:	1852      	adds	r2, r2, r1
 8014616:	1c75      	adds	r5, r6, #1
 8014618:	6023      	str	r3, [r4, #0]
 801461a:	60e3      	str	r3, [r4, #12]
 801461c:	60a3      	str	r3, [r4, #8]
 801461e:	7013      	strb	r3, [r2, #0]
 8014620:	65a3      	str	r3, [r4, #88]	; 0x58
 8014622:	4b59      	ldr	r3, [pc, #356]	; (8014788 <_vfiprintf_r+0x224>)
 8014624:	2205      	movs	r2, #5
 8014626:	0018      	movs	r0, r3
 8014628:	7829      	ldrb	r1, [r5, #0]
 801462a:	9305      	str	r3, [sp, #20]
 801462c:	f000 fb92 	bl	8014d54 <memchr>
 8014630:	1c6e      	adds	r6, r5, #1
 8014632:	2800      	cmp	r0, #0
 8014634:	d11f      	bne.n	8014676 <_vfiprintf_r+0x112>
 8014636:	6822      	ldr	r2, [r4, #0]
 8014638:	06d3      	lsls	r3, r2, #27
 801463a:	d504      	bpl.n	8014646 <_vfiprintf_r+0xe2>
 801463c:	2353      	movs	r3, #83	; 0x53
 801463e:	a904      	add	r1, sp, #16
 8014640:	185b      	adds	r3, r3, r1
 8014642:	2120      	movs	r1, #32
 8014644:	7019      	strb	r1, [r3, #0]
 8014646:	0713      	lsls	r3, r2, #28
 8014648:	d504      	bpl.n	8014654 <_vfiprintf_r+0xf0>
 801464a:	2353      	movs	r3, #83	; 0x53
 801464c:	a904      	add	r1, sp, #16
 801464e:	185b      	adds	r3, r3, r1
 8014650:	212b      	movs	r1, #43	; 0x2b
 8014652:	7019      	strb	r1, [r3, #0]
 8014654:	782b      	ldrb	r3, [r5, #0]
 8014656:	2b2a      	cmp	r3, #42	; 0x2a
 8014658:	d016      	beq.n	8014688 <_vfiprintf_r+0x124>
 801465a:	002e      	movs	r6, r5
 801465c:	2100      	movs	r1, #0
 801465e:	200a      	movs	r0, #10
 8014660:	68e3      	ldr	r3, [r4, #12]
 8014662:	7832      	ldrb	r2, [r6, #0]
 8014664:	1c75      	adds	r5, r6, #1
 8014666:	3a30      	subs	r2, #48	; 0x30
 8014668:	2a09      	cmp	r2, #9
 801466a:	d94e      	bls.n	801470a <_vfiprintf_r+0x1a6>
 801466c:	2900      	cmp	r1, #0
 801466e:	d111      	bne.n	8014694 <_vfiprintf_r+0x130>
 8014670:	e017      	b.n	80146a2 <_vfiprintf_r+0x13e>
 8014672:	3601      	adds	r6, #1
 8014674:	e7af      	b.n	80145d6 <_vfiprintf_r+0x72>
 8014676:	9b05      	ldr	r3, [sp, #20]
 8014678:	6822      	ldr	r2, [r4, #0]
 801467a:	1ac0      	subs	r0, r0, r3
 801467c:	2301      	movs	r3, #1
 801467e:	4083      	lsls	r3, r0
 8014680:	4313      	orrs	r3, r2
 8014682:	0035      	movs	r5, r6
 8014684:	6023      	str	r3, [r4, #0]
 8014686:	e7cc      	b.n	8014622 <_vfiprintf_r+0xbe>
 8014688:	9b07      	ldr	r3, [sp, #28]
 801468a:	1d19      	adds	r1, r3, #4
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	9107      	str	r1, [sp, #28]
 8014690:	2b00      	cmp	r3, #0
 8014692:	db01      	blt.n	8014698 <_vfiprintf_r+0x134>
 8014694:	930b      	str	r3, [sp, #44]	; 0x2c
 8014696:	e004      	b.n	80146a2 <_vfiprintf_r+0x13e>
 8014698:	425b      	negs	r3, r3
 801469a:	60e3      	str	r3, [r4, #12]
 801469c:	2302      	movs	r3, #2
 801469e:	4313      	orrs	r3, r2
 80146a0:	6023      	str	r3, [r4, #0]
 80146a2:	7833      	ldrb	r3, [r6, #0]
 80146a4:	2b2e      	cmp	r3, #46	; 0x2e
 80146a6:	d10a      	bne.n	80146be <_vfiprintf_r+0x15a>
 80146a8:	7873      	ldrb	r3, [r6, #1]
 80146aa:	2b2a      	cmp	r3, #42	; 0x2a
 80146ac:	d135      	bne.n	801471a <_vfiprintf_r+0x1b6>
 80146ae:	9b07      	ldr	r3, [sp, #28]
 80146b0:	3602      	adds	r6, #2
 80146b2:	1d1a      	adds	r2, r3, #4
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	9207      	str	r2, [sp, #28]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	db2b      	blt.n	8014714 <_vfiprintf_r+0x1b0>
 80146bc:	9309      	str	r3, [sp, #36]	; 0x24
 80146be:	4d33      	ldr	r5, [pc, #204]	; (801478c <_vfiprintf_r+0x228>)
 80146c0:	2203      	movs	r2, #3
 80146c2:	0028      	movs	r0, r5
 80146c4:	7831      	ldrb	r1, [r6, #0]
 80146c6:	f000 fb45 	bl	8014d54 <memchr>
 80146ca:	2800      	cmp	r0, #0
 80146cc:	d006      	beq.n	80146dc <_vfiprintf_r+0x178>
 80146ce:	2340      	movs	r3, #64	; 0x40
 80146d0:	1b40      	subs	r0, r0, r5
 80146d2:	4083      	lsls	r3, r0
 80146d4:	6822      	ldr	r2, [r4, #0]
 80146d6:	3601      	adds	r6, #1
 80146d8:	4313      	orrs	r3, r2
 80146da:	6023      	str	r3, [r4, #0]
 80146dc:	7831      	ldrb	r1, [r6, #0]
 80146de:	2206      	movs	r2, #6
 80146e0:	482b      	ldr	r0, [pc, #172]	; (8014790 <_vfiprintf_r+0x22c>)
 80146e2:	1c75      	adds	r5, r6, #1
 80146e4:	7621      	strb	r1, [r4, #24]
 80146e6:	f000 fb35 	bl	8014d54 <memchr>
 80146ea:	2800      	cmp	r0, #0
 80146ec:	d043      	beq.n	8014776 <_vfiprintf_r+0x212>
 80146ee:	4b29      	ldr	r3, [pc, #164]	; (8014794 <_vfiprintf_r+0x230>)
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d125      	bne.n	8014740 <_vfiprintf_r+0x1dc>
 80146f4:	2207      	movs	r2, #7
 80146f6:	9b07      	ldr	r3, [sp, #28]
 80146f8:	3307      	adds	r3, #7
 80146fa:	4393      	bics	r3, r2
 80146fc:	3308      	adds	r3, #8
 80146fe:	9307      	str	r3, [sp, #28]
 8014700:	6963      	ldr	r3, [r4, #20]
 8014702:	9a04      	ldr	r2, [sp, #16]
 8014704:	189b      	adds	r3, r3, r2
 8014706:	6163      	str	r3, [r4, #20]
 8014708:	e764      	b.n	80145d4 <_vfiprintf_r+0x70>
 801470a:	4343      	muls	r3, r0
 801470c:	002e      	movs	r6, r5
 801470e:	2101      	movs	r1, #1
 8014710:	189b      	adds	r3, r3, r2
 8014712:	e7a6      	b.n	8014662 <_vfiprintf_r+0xfe>
 8014714:	2301      	movs	r3, #1
 8014716:	425b      	negs	r3, r3
 8014718:	e7d0      	b.n	80146bc <_vfiprintf_r+0x158>
 801471a:	2300      	movs	r3, #0
 801471c:	200a      	movs	r0, #10
 801471e:	001a      	movs	r2, r3
 8014720:	3601      	adds	r6, #1
 8014722:	6063      	str	r3, [r4, #4]
 8014724:	7831      	ldrb	r1, [r6, #0]
 8014726:	1c75      	adds	r5, r6, #1
 8014728:	3930      	subs	r1, #48	; 0x30
 801472a:	2909      	cmp	r1, #9
 801472c:	d903      	bls.n	8014736 <_vfiprintf_r+0x1d2>
 801472e:	2b00      	cmp	r3, #0
 8014730:	d0c5      	beq.n	80146be <_vfiprintf_r+0x15a>
 8014732:	9209      	str	r2, [sp, #36]	; 0x24
 8014734:	e7c3      	b.n	80146be <_vfiprintf_r+0x15a>
 8014736:	4342      	muls	r2, r0
 8014738:	002e      	movs	r6, r5
 801473a:	2301      	movs	r3, #1
 801473c:	1852      	adds	r2, r2, r1
 801473e:	e7f1      	b.n	8014724 <_vfiprintf_r+0x1c0>
 8014740:	aa07      	add	r2, sp, #28
 8014742:	9200      	str	r2, [sp, #0]
 8014744:	0021      	movs	r1, r4
 8014746:	003a      	movs	r2, r7
 8014748:	4b13      	ldr	r3, [pc, #76]	; (8014798 <_vfiprintf_r+0x234>)
 801474a:	9803      	ldr	r0, [sp, #12]
 801474c:	e000      	b.n	8014750 <_vfiprintf_r+0x1ec>
 801474e:	bf00      	nop
 8014750:	9004      	str	r0, [sp, #16]
 8014752:	9b04      	ldr	r3, [sp, #16]
 8014754:	3301      	adds	r3, #1
 8014756:	d1d3      	bne.n	8014700 <_vfiprintf_r+0x19c>
 8014758:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801475a:	07db      	lsls	r3, r3, #31
 801475c:	d405      	bmi.n	801476a <_vfiprintf_r+0x206>
 801475e:	89bb      	ldrh	r3, [r7, #12]
 8014760:	059b      	lsls	r3, r3, #22
 8014762:	d402      	bmi.n	801476a <_vfiprintf_r+0x206>
 8014764:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8014766:	f7ff fe21 	bl	80143ac <__retarget_lock_release_recursive>
 801476a:	89bb      	ldrh	r3, [r7, #12]
 801476c:	065b      	lsls	r3, r3, #25
 801476e:	d500      	bpl.n	8014772 <_vfiprintf_r+0x20e>
 8014770:	e71d      	b.n	80145ae <_vfiprintf_r+0x4a>
 8014772:	980d      	ldr	r0, [sp, #52]	; 0x34
 8014774:	e71d      	b.n	80145b2 <_vfiprintf_r+0x4e>
 8014776:	aa07      	add	r2, sp, #28
 8014778:	9200      	str	r2, [sp, #0]
 801477a:	0021      	movs	r1, r4
 801477c:	003a      	movs	r2, r7
 801477e:	4b06      	ldr	r3, [pc, #24]	; (8014798 <_vfiprintf_r+0x234>)
 8014780:	9803      	ldr	r0, [sp, #12]
 8014782:	f000 f87b 	bl	801487c <_printf_i>
 8014786:	e7e3      	b.n	8014750 <_vfiprintf_r+0x1ec>
 8014788:	08016dfc 	.word	0x08016dfc
 801478c:	08016e02 	.word	0x08016e02
 8014790:	08016e06 	.word	0x08016e06
 8014794:	00000000 	.word	0x00000000
 8014798:	0801453f 	.word	0x0801453f

0801479c <_printf_common>:
 801479c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801479e:	0016      	movs	r6, r2
 80147a0:	9301      	str	r3, [sp, #4]
 80147a2:	688a      	ldr	r2, [r1, #8]
 80147a4:	690b      	ldr	r3, [r1, #16]
 80147a6:	000c      	movs	r4, r1
 80147a8:	9000      	str	r0, [sp, #0]
 80147aa:	4293      	cmp	r3, r2
 80147ac:	da00      	bge.n	80147b0 <_printf_common+0x14>
 80147ae:	0013      	movs	r3, r2
 80147b0:	0022      	movs	r2, r4
 80147b2:	6033      	str	r3, [r6, #0]
 80147b4:	3243      	adds	r2, #67	; 0x43
 80147b6:	7812      	ldrb	r2, [r2, #0]
 80147b8:	2a00      	cmp	r2, #0
 80147ba:	d001      	beq.n	80147c0 <_printf_common+0x24>
 80147bc:	3301      	adds	r3, #1
 80147be:	6033      	str	r3, [r6, #0]
 80147c0:	6823      	ldr	r3, [r4, #0]
 80147c2:	069b      	lsls	r3, r3, #26
 80147c4:	d502      	bpl.n	80147cc <_printf_common+0x30>
 80147c6:	6833      	ldr	r3, [r6, #0]
 80147c8:	3302      	adds	r3, #2
 80147ca:	6033      	str	r3, [r6, #0]
 80147cc:	6822      	ldr	r2, [r4, #0]
 80147ce:	2306      	movs	r3, #6
 80147d0:	0015      	movs	r5, r2
 80147d2:	401d      	ands	r5, r3
 80147d4:	421a      	tst	r2, r3
 80147d6:	d027      	beq.n	8014828 <_printf_common+0x8c>
 80147d8:	0023      	movs	r3, r4
 80147da:	3343      	adds	r3, #67	; 0x43
 80147dc:	781b      	ldrb	r3, [r3, #0]
 80147de:	1e5a      	subs	r2, r3, #1
 80147e0:	4193      	sbcs	r3, r2
 80147e2:	6822      	ldr	r2, [r4, #0]
 80147e4:	0692      	lsls	r2, r2, #26
 80147e6:	d430      	bmi.n	801484a <_printf_common+0xae>
 80147e8:	0022      	movs	r2, r4
 80147ea:	9901      	ldr	r1, [sp, #4]
 80147ec:	9800      	ldr	r0, [sp, #0]
 80147ee:	9d08      	ldr	r5, [sp, #32]
 80147f0:	3243      	adds	r2, #67	; 0x43
 80147f2:	47a8      	blx	r5
 80147f4:	3001      	adds	r0, #1
 80147f6:	d025      	beq.n	8014844 <_printf_common+0xa8>
 80147f8:	2206      	movs	r2, #6
 80147fa:	6823      	ldr	r3, [r4, #0]
 80147fc:	2500      	movs	r5, #0
 80147fe:	4013      	ands	r3, r2
 8014800:	2b04      	cmp	r3, #4
 8014802:	d105      	bne.n	8014810 <_printf_common+0x74>
 8014804:	6833      	ldr	r3, [r6, #0]
 8014806:	68e5      	ldr	r5, [r4, #12]
 8014808:	1aed      	subs	r5, r5, r3
 801480a:	43eb      	mvns	r3, r5
 801480c:	17db      	asrs	r3, r3, #31
 801480e:	401d      	ands	r5, r3
 8014810:	68a3      	ldr	r3, [r4, #8]
 8014812:	6922      	ldr	r2, [r4, #16]
 8014814:	4293      	cmp	r3, r2
 8014816:	dd01      	ble.n	801481c <_printf_common+0x80>
 8014818:	1a9b      	subs	r3, r3, r2
 801481a:	18ed      	adds	r5, r5, r3
 801481c:	2600      	movs	r6, #0
 801481e:	42b5      	cmp	r5, r6
 8014820:	d120      	bne.n	8014864 <_printf_common+0xc8>
 8014822:	2000      	movs	r0, #0
 8014824:	e010      	b.n	8014848 <_printf_common+0xac>
 8014826:	3501      	adds	r5, #1
 8014828:	68e3      	ldr	r3, [r4, #12]
 801482a:	6832      	ldr	r2, [r6, #0]
 801482c:	1a9b      	subs	r3, r3, r2
 801482e:	42ab      	cmp	r3, r5
 8014830:	ddd2      	ble.n	80147d8 <_printf_common+0x3c>
 8014832:	0022      	movs	r2, r4
 8014834:	2301      	movs	r3, #1
 8014836:	9901      	ldr	r1, [sp, #4]
 8014838:	9800      	ldr	r0, [sp, #0]
 801483a:	9f08      	ldr	r7, [sp, #32]
 801483c:	3219      	adds	r2, #25
 801483e:	47b8      	blx	r7
 8014840:	3001      	adds	r0, #1
 8014842:	d1f0      	bne.n	8014826 <_printf_common+0x8a>
 8014844:	2001      	movs	r0, #1
 8014846:	4240      	negs	r0, r0
 8014848:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801484a:	2030      	movs	r0, #48	; 0x30
 801484c:	18e1      	adds	r1, r4, r3
 801484e:	3143      	adds	r1, #67	; 0x43
 8014850:	7008      	strb	r0, [r1, #0]
 8014852:	0021      	movs	r1, r4
 8014854:	1c5a      	adds	r2, r3, #1
 8014856:	3145      	adds	r1, #69	; 0x45
 8014858:	7809      	ldrb	r1, [r1, #0]
 801485a:	18a2      	adds	r2, r4, r2
 801485c:	3243      	adds	r2, #67	; 0x43
 801485e:	3302      	adds	r3, #2
 8014860:	7011      	strb	r1, [r2, #0]
 8014862:	e7c1      	b.n	80147e8 <_printf_common+0x4c>
 8014864:	0022      	movs	r2, r4
 8014866:	2301      	movs	r3, #1
 8014868:	9901      	ldr	r1, [sp, #4]
 801486a:	9800      	ldr	r0, [sp, #0]
 801486c:	9f08      	ldr	r7, [sp, #32]
 801486e:	321a      	adds	r2, #26
 8014870:	47b8      	blx	r7
 8014872:	3001      	adds	r0, #1
 8014874:	d0e6      	beq.n	8014844 <_printf_common+0xa8>
 8014876:	3601      	adds	r6, #1
 8014878:	e7d1      	b.n	801481e <_printf_common+0x82>
	...

0801487c <_printf_i>:
 801487c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801487e:	b08b      	sub	sp, #44	; 0x2c
 8014880:	9206      	str	r2, [sp, #24]
 8014882:	000a      	movs	r2, r1
 8014884:	3243      	adds	r2, #67	; 0x43
 8014886:	9307      	str	r3, [sp, #28]
 8014888:	9005      	str	r0, [sp, #20]
 801488a:	9204      	str	r2, [sp, #16]
 801488c:	7e0a      	ldrb	r2, [r1, #24]
 801488e:	000c      	movs	r4, r1
 8014890:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014892:	2a78      	cmp	r2, #120	; 0x78
 8014894:	d809      	bhi.n	80148aa <_printf_i+0x2e>
 8014896:	2a62      	cmp	r2, #98	; 0x62
 8014898:	d80b      	bhi.n	80148b2 <_printf_i+0x36>
 801489a:	2a00      	cmp	r2, #0
 801489c:	d100      	bne.n	80148a0 <_printf_i+0x24>
 801489e:	e0be      	b.n	8014a1e <_printf_i+0x1a2>
 80148a0:	497c      	ldr	r1, [pc, #496]	; (8014a94 <_printf_i+0x218>)
 80148a2:	9103      	str	r1, [sp, #12]
 80148a4:	2a58      	cmp	r2, #88	; 0x58
 80148a6:	d100      	bne.n	80148aa <_printf_i+0x2e>
 80148a8:	e093      	b.n	80149d2 <_printf_i+0x156>
 80148aa:	0026      	movs	r6, r4
 80148ac:	3642      	adds	r6, #66	; 0x42
 80148ae:	7032      	strb	r2, [r6, #0]
 80148b0:	e022      	b.n	80148f8 <_printf_i+0x7c>
 80148b2:	0010      	movs	r0, r2
 80148b4:	3863      	subs	r0, #99	; 0x63
 80148b6:	2815      	cmp	r0, #21
 80148b8:	d8f7      	bhi.n	80148aa <_printf_i+0x2e>
 80148ba:	f7eb fc37 	bl	800012c <__gnu_thumb1_case_shi>
 80148be:	0016      	.short	0x0016
 80148c0:	fff6001f 	.word	0xfff6001f
 80148c4:	fff6fff6 	.word	0xfff6fff6
 80148c8:	001ffff6 	.word	0x001ffff6
 80148cc:	fff6fff6 	.word	0xfff6fff6
 80148d0:	fff6fff6 	.word	0xfff6fff6
 80148d4:	003600a3 	.word	0x003600a3
 80148d8:	fff60083 	.word	0xfff60083
 80148dc:	00b4fff6 	.word	0x00b4fff6
 80148e0:	0036fff6 	.word	0x0036fff6
 80148e4:	fff6fff6 	.word	0xfff6fff6
 80148e8:	0087      	.short	0x0087
 80148ea:	0026      	movs	r6, r4
 80148ec:	681a      	ldr	r2, [r3, #0]
 80148ee:	3642      	adds	r6, #66	; 0x42
 80148f0:	1d11      	adds	r1, r2, #4
 80148f2:	6019      	str	r1, [r3, #0]
 80148f4:	6813      	ldr	r3, [r2, #0]
 80148f6:	7033      	strb	r3, [r6, #0]
 80148f8:	2301      	movs	r3, #1
 80148fa:	e0a2      	b.n	8014a42 <_printf_i+0x1c6>
 80148fc:	6818      	ldr	r0, [r3, #0]
 80148fe:	6809      	ldr	r1, [r1, #0]
 8014900:	1d02      	adds	r2, r0, #4
 8014902:	060d      	lsls	r5, r1, #24
 8014904:	d50b      	bpl.n	801491e <_printf_i+0xa2>
 8014906:	6805      	ldr	r5, [r0, #0]
 8014908:	601a      	str	r2, [r3, #0]
 801490a:	2d00      	cmp	r5, #0
 801490c:	da03      	bge.n	8014916 <_printf_i+0x9a>
 801490e:	232d      	movs	r3, #45	; 0x2d
 8014910:	9a04      	ldr	r2, [sp, #16]
 8014912:	426d      	negs	r5, r5
 8014914:	7013      	strb	r3, [r2, #0]
 8014916:	4b5f      	ldr	r3, [pc, #380]	; (8014a94 <_printf_i+0x218>)
 8014918:	270a      	movs	r7, #10
 801491a:	9303      	str	r3, [sp, #12]
 801491c:	e01b      	b.n	8014956 <_printf_i+0xda>
 801491e:	6805      	ldr	r5, [r0, #0]
 8014920:	601a      	str	r2, [r3, #0]
 8014922:	0649      	lsls	r1, r1, #25
 8014924:	d5f1      	bpl.n	801490a <_printf_i+0x8e>
 8014926:	b22d      	sxth	r5, r5
 8014928:	e7ef      	b.n	801490a <_printf_i+0x8e>
 801492a:	680d      	ldr	r5, [r1, #0]
 801492c:	6819      	ldr	r1, [r3, #0]
 801492e:	1d08      	adds	r0, r1, #4
 8014930:	6018      	str	r0, [r3, #0]
 8014932:	062e      	lsls	r6, r5, #24
 8014934:	d501      	bpl.n	801493a <_printf_i+0xbe>
 8014936:	680d      	ldr	r5, [r1, #0]
 8014938:	e003      	b.n	8014942 <_printf_i+0xc6>
 801493a:	066d      	lsls	r5, r5, #25
 801493c:	d5fb      	bpl.n	8014936 <_printf_i+0xba>
 801493e:	680d      	ldr	r5, [r1, #0]
 8014940:	b2ad      	uxth	r5, r5
 8014942:	4b54      	ldr	r3, [pc, #336]	; (8014a94 <_printf_i+0x218>)
 8014944:	2708      	movs	r7, #8
 8014946:	9303      	str	r3, [sp, #12]
 8014948:	2a6f      	cmp	r2, #111	; 0x6f
 801494a:	d000      	beq.n	801494e <_printf_i+0xd2>
 801494c:	3702      	adds	r7, #2
 801494e:	0023      	movs	r3, r4
 8014950:	2200      	movs	r2, #0
 8014952:	3343      	adds	r3, #67	; 0x43
 8014954:	701a      	strb	r2, [r3, #0]
 8014956:	6863      	ldr	r3, [r4, #4]
 8014958:	60a3      	str	r3, [r4, #8]
 801495a:	2b00      	cmp	r3, #0
 801495c:	db03      	blt.n	8014966 <_printf_i+0xea>
 801495e:	2104      	movs	r1, #4
 8014960:	6822      	ldr	r2, [r4, #0]
 8014962:	438a      	bics	r2, r1
 8014964:	6022      	str	r2, [r4, #0]
 8014966:	2d00      	cmp	r5, #0
 8014968:	d102      	bne.n	8014970 <_printf_i+0xf4>
 801496a:	9e04      	ldr	r6, [sp, #16]
 801496c:	2b00      	cmp	r3, #0
 801496e:	d00c      	beq.n	801498a <_printf_i+0x10e>
 8014970:	9e04      	ldr	r6, [sp, #16]
 8014972:	0028      	movs	r0, r5
 8014974:	0039      	movs	r1, r7
 8014976:	f7eb fc69 	bl	800024c <__aeabi_uidivmod>
 801497a:	9b03      	ldr	r3, [sp, #12]
 801497c:	3e01      	subs	r6, #1
 801497e:	5c5b      	ldrb	r3, [r3, r1]
 8014980:	7033      	strb	r3, [r6, #0]
 8014982:	002b      	movs	r3, r5
 8014984:	0005      	movs	r5, r0
 8014986:	429f      	cmp	r7, r3
 8014988:	d9f3      	bls.n	8014972 <_printf_i+0xf6>
 801498a:	2f08      	cmp	r7, #8
 801498c:	d109      	bne.n	80149a2 <_printf_i+0x126>
 801498e:	6823      	ldr	r3, [r4, #0]
 8014990:	07db      	lsls	r3, r3, #31
 8014992:	d506      	bpl.n	80149a2 <_printf_i+0x126>
 8014994:	6862      	ldr	r2, [r4, #4]
 8014996:	6923      	ldr	r3, [r4, #16]
 8014998:	429a      	cmp	r2, r3
 801499a:	dc02      	bgt.n	80149a2 <_printf_i+0x126>
 801499c:	2330      	movs	r3, #48	; 0x30
 801499e:	3e01      	subs	r6, #1
 80149a0:	7033      	strb	r3, [r6, #0]
 80149a2:	9b04      	ldr	r3, [sp, #16]
 80149a4:	1b9b      	subs	r3, r3, r6
 80149a6:	6123      	str	r3, [r4, #16]
 80149a8:	9b07      	ldr	r3, [sp, #28]
 80149aa:	0021      	movs	r1, r4
 80149ac:	9300      	str	r3, [sp, #0]
 80149ae:	9805      	ldr	r0, [sp, #20]
 80149b0:	9b06      	ldr	r3, [sp, #24]
 80149b2:	aa09      	add	r2, sp, #36	; 0x24
 80149b4:	f7ff fef2 	bl	801479c <_printf_common>
 80149b8:	3001      	adds	r0, #1
 80149ba:	d147      	bne.n	8014a4c <_printf_i+0x1d0>
 80149bc:	2001      	movs	r0, #1
 80149be:	4240      	negs	r0, r0
 80149c0:	b00b      	add	sp, #44	; 0x2c
 80149c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149c4:	2220      	movs	r2, #32
 80149c6:	6809      	ldr	r1, [r1, #0]
 80149c8:	430a      	orrs	r2, r1
 80149ca:	6022      	str	r2, [r4, #0]
 80149cc:	2278      	movs	r2, #120	; 0x78
 80149ce:	4932      	ldr	r1, [pc, #200]	; (8014a98 <_printf_i+0x21c>)
 80149d0:	9103      	str	r1, [sp, #12]
 80149d2:	0021      	movs	r1, r4
 80149d4:	3145      	adds	r1, #69	; 0x45
 80149d6:	700a      	strb	r2, [r1, #0]
 80149d8:	6819      	ldr	r1, [r3, #0]
 80149da:	6822      	ldr	r2, [r4, #0]
 80149dc:	c920      	ldmia	r1!, {r5}
 80149de:	0610      	lsls	r0, r2, #24
 80149e0:	d402      	bmi.n	80149e8 <_printf_i+0x16c>
 80149e2:	0650      	lsls	r0, r2, #25
 80149e4:	d500      	bpl.n	80149e8 <_printf_i+0x16c>
 80149e6:	b2ad      	uxth	r5, r5
 80149e8:	6019      	str	r1, [r3, #0]
 80149ea:	07d3      	lsls	r3, r2, #31
 80149ec:	d502      	bpl.n	80149f4 <_printf_i+0x178>
 80149ee:	2320      	movs	r3, #32
 80149f0:	4313      	orrs	r3, r2
 80149f2:	6023      	str	r3, [r4, #0]
 80149f4:	2710      	movs	r7, #16
 80149f6:	2d00      	cmp	r5, #0
 80149f8:	d1a9      	bne.n	801494e <_printf_i+0xd2>
 80149fa:	2220      	movs	r2, #32
 80149fc:	6823      	ldr	r3, [r4, #0]
 80149fe:	4393      	bics	r3, r2
 8014a00:	6023      	str	r3, [r4, #0]
 8014a02:	e7a4      	b.n	801494e <_printf_i+0xd2>
 8014a04:	681a      	ldr	r2, [r3, #0]
 8014a06:	680d      	ldr	r5, [r1, #0]
 8014a08:	1d10      	adds	r0, r2, #4
 8014a0a:	6949      	ldr	r1, [r1, #20]
 8014a0c:	6018      	str	r0, [r3, #0]
 8014a0e:	6813      	ldr	r3, [r2, #0]
 8014a10:	062e      	lsls	r6, r5, #24
 8014a12:	d501      	bpl.n	8014a18 <_printf_i+0x19c>
 8014a14:	6019      	str	r1, [r3, #0]
 8014a16:	e002      	b.n	8014a1e <_printf_i+0x1a2>
 8014a18:	066d      	lsls	r5, r5, #25
 8014a1a:	d5fb      	bpl.n	8014a14 <_printf_i+0x198>
 8014a1c:	8019      	strh	r1, [r3, #0]
 8014a1e:	2300      	movs	r3, #0
 8014a20:	9e04      	ldr	r6, [sp, #16]
 8014a22:	6123      	str	r3, [r4, #16]
 8014a24:	e7c0      	b.n	80149a8 <_printf_i+0x12c>
 8014a26:	681a      	ldr	r2, [r3, #0]
 8014a28:	1d11      	adds	r1, r2, #4
 8014a2a:	6019      	str	r1, [r3, #0]
 8014a2c:	6816      	ldr	r6, [r2, #0]
 8014a2e:	2100      	movs	r1, #0
 8014a30:	0030      	movs	r0, r6
 8014a32:	6862      	ldr	r2, [r4, #4]
 8014a34:	f000 f98e 	bl	8014d54 <memchr>
 8014a38:	2800      	cmp	r0, #0
 8014a3a:	d001      	beq.n	8014a40 <_printf_i+0x1c4>
 8014a3c:	1b80      	subs	r0, r0, r6
 8014a3e:	6060      	str	r0, [r4, #4]
 8014a40:	6863      	ldr	r3, [r4, #4]
 8014a42:	6123      	str	r3, [r4, #16]
 8014a44:	2300      	movs	r3, #0
 8014a46:	9a04      	ldr	r2, [sp, #16]
 8014a48:	7013      	strb	r3, [r2, #0]
 8014a4a:	e7ad      	b.n	80149a8 <_printf_i+0x12c>
 8014a4c:	0032      	movs	r2, r6
 8014a4e:	6923      	ldr	r3, [r4, #16]
 8014a50:	9906      	ldr	r1, [sp, #24]
 8014a52:	9805      	ldr	r0, [sp, #20]
 8014a54:	9d07      	ldr	r5, [sp, #28]
 8014a56:	47a8      	blx	r5
 8014a58:	3001      	adds	r0, #1
 8014a5a:	d0af      	beq.n	80149bc <_printf_i+0x140>
 8014a5c:	6823      	ldr	r3, [r4, #0]
 8014a5e:	079b      	lsls	r3, r3, #30
 8014a60:	d415      	bmi.n	8014a8e <_printf_i+0x212>
 8014a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a64:	68e0      	ldr	r0, [r4, #12]
 8014a66:	4298      	cmp	r0, r3
 8014a68:	daaa      	bge.n	80149c0 <_printf_i+0x144>
 8014a6a:	0018      	movs	r0, r3
 8014a6c:	e7a8      	b.n	80149c0 <_printf_i+0x144>
 8014a6e:	0022      	movs	r2, r4
 8014a70:	2301      	movs	r3, #1
 8014a72:	9906      	ldr	r1, [sp, #24]
 8014a74:	9805      	ldr	r0, [sp, #20]
 8014a76:	9e07      	ldr	r6, [sp, #28]
 8014a78:	3219      	adds	r2, #25
 8014a7a:	47b0      	blx	r6
 8014a7c:	3001      	adds	r0, #1
 8014a7e:	d09d      	beq.n	80149bc <_printf_i+0x140>
 8014a80:	3501      	adds	r5, #1
 8014a82:	68e3      	ldr	r3, [r4, #12]
 8014a84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014a86:	1a9b      	subs	r3, r3, r2
 8014a88:	42ab      	cmp	r3, r5
 8014a8a:	dcf0      	bgt.n	8014a6e <_printf_i+0x1f2>
 8014a8c:	e7e9      	b.n	8014a62 <_printf_i+0x1e6>
 8014a8e:	2500      	movs	r5, #0
 8014a90:	e7f7      	b.n	8014a82 <_printf_i+0x206>
 8014a92:	46c0      	nop			; (mov r8, r8)
 8014a94:	08016e0d 	.word	0x08016e0d
 8014a98:	08016e1e 	.word	0x08016e1e

08014a9c <__sflush_r>:
 8014a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014a9e:	898b      	ldrh	r3, [r1, #12]
 8014aa0:	0005      	movs	r5, r0
 8014aa2:	000c      	movs	r4, r1
 8014aa4:	071a      	lsls	r2, r3, #28
 8014aa6:	d45c      	bmi.n	8014b62 <__sflush_r+0xc6>
 8014aa8:	684a      	ldr	r2, [r1, #4]
 8014aaa:	2a00      	cmp	r2, #0
 8014aac:	dc04      	bgt.n	8014ab8 <__sflush_r+0x1c>
 8014aae:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8014ab0:	2a00      	cmp	r2, #0
 8014ab2:	dc01      	bgt.n	8014ab8 <__sflush_r+0x1c>
 8014ab4:	2000      	movs	r0, #0
 8014ab6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014ab8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8014aba:	2f00      	cmp	r7, #0
 8014abc:	d0fa      	beq.n	8014ab4 <__sflush_r+0x18>
 8014abe:	2200      	movs	r2, #0
 8014ac0:	2080      	movs	r0, #128	; 0x80
 8014ac2:	682e      	ldr	r6, [r5, #0]
 8014ac4:	602a      	str	r2, [r5, #0]
 8014ac6:	001a      	movs	r2, r3
 8014ac8:	0140      	lsls	r0, r0, #5
 8014aca:	6a21      	ldr	r1, [r4, #32]
 8014acc:	4002      	ands	r2, r0
 8014ace:	4203      	tst	r3, r0
 8014ad0:	d034      	beq.n	8014b3c <__sflush_r+0xa0>
 8014ad2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014ad4:	89a3      	ldrh	r3, [r4, #12]
 8014ad6:	075b      	lsls	r3, r3, #29
 8014ad8:	d506      	bpl.n	8014ae8 <__sflush_r+0x4c>
 8014ada:	6863      	ldr	r3, [r4, #4]
 8014adc:	1ac0      	subs	r0, r0, r3
 8014ade:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d001      	beq.n	8014ae8 <__sflush_r+0x4c>
 8014ae4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014ae6:	1ac0      	subs	r0, r0, r3
 8014ae8:	0002      	movs	r2, r0
 8014aea:	2300      	movs	r3, #0
 8014aec:	0028      	movs	r0, r5
 8014aee:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8014af0:	6a21      	ldr	r1, [r4, #32]
 8014af2:	47b8      	blx	r7
 8014af4:	89a2      	ldrh	r2, [r4, #12]
 8014af6:	1c43      	adds	r3, r0, #1
 8014af8:	d106      	bne.n	8014b08 <__sflush_r+0x6c>
 8014afa:	6829      	ldr	r1, [r5, #0]
 8014afc:	291d      	cmp	r1, #29
 8014afe:	d82c      	bhi.n	8014b5a <__sflush_r+0xbe>
 8014b00:	4b2a      	ldr	r3, [pc, #168]	; (8014bac <__sflush_r+0x110>)
 8014b02:	410b      	asrs	r3, r1
 8014b04:	07db      	lsls	r3, r3, #31
 8014b06:	d428      	bmi.n	8014b5a <__sflush_r+0xbe>
 8014b08:	2300      	movs	r3, #0
 8014b0a:	6063      	str	r3, [r4, #4]
 8014b0c:	6923      	ldr	r3, [r4, #16]
 8014b0e:	6023      	str	r3, [r4, #0]
 8014b10:	04d2      	lsls	r2, r2, #19
 8014b12:	d505      	bpl.n	8014b20 <__sflush_r+0x84>
 8014b14:	1c43      	adds	r3, r0, #1
 8014b16:	d102      	bne.n	8014b1e <__sflush_r+0x82>
 8014b18:	682b      	ldr	r3, [r5, #0]
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d100      	bne.n	8014b20 <__sflush_r+0x84>
 8014b1e:	6560      	str	r0, [r4, #84]	; 0x54
 8014b20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014b22:	602e      	str	r6, [r5, #0]
 8014b24:	2900      	cmp	r1, #0
 8014b26:	d0c5      	beq.n	8014ab4 <__sflush_r+0x18>
 8014b28:	0023      	movs	r3, r4
 8014b2a:	3344      	adds	r3, #68	; 0x44
 8014b2c:	4299      	cmp	r1, r3
 8014b2e:	d002      	beq.n	8014b36 <__sflush_r+0x9a>
 8014b30:	0028      	movs	r0, r5
 8014b32:	f7ff fca5 	bl	8014480 <_free_r>
 8014b36:	2000      	movs	r0, #0
 8014b38:	6360      	str	r0, [r4, #52]	; 0x34
 8014b3a:	e7bc      	b.n	8014ab6 <__sflush_r+0x1a>
 8014b3c:	2301      	movs	r3, #1
 8014b3e:	0028      	movs	r0, r5
 8014b40:	47b8      	blx	r7
 8014b42:	1c43      	adds	r3, r0, #1
 8014b44:	d1c6      	bne.n	8014ad4 <__sflush_r+0x38>
 8014b46:	682b      	ldr	r3, [r5, #0]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d0c3      	beq.n	8014ad4 <__sflush_r+0x38>
 8014b4c:	2b1d      	cmp	r3, #29
 8014b4e:	d001      	beq.n	8014b54 <__sflush_r+0xb8>
 8014b50:	2b16      	cmp	r3, #22
 8014b52:	d101      	bne.n	8014b58 <__sflush_r+0xbc>
 8014b54:	602e      	str	r6, [r5, #0]
 8014b56:	e7ad      	b.n	8014ab4 <__sflush_r+0x18>
 8014b58:	89a2      	ldrh	r2, [r4, #12]
 8014b5a:	2340      	movs	r3, #64	; 0x40
 8014b5c:	4313      	orrs	r3, r2
 8014b5e:	81a3      	strh	r3, [r4, #12]
 8014b60:	e7a9      	b.n	8014ab6 <__sflush_r+0x1a>
 8014b62:	690e      	ldr	r6, [r1, #16]
 8014b64:	2e00      	cmp	r6, #0
 8014b66:	d0a5      	beq.n	8014ab4 <__sflush_r+0x18>
 8014b68:	680f      	ldr	r7, [r1, #0]
 8014b6a:	600e      	str	r6, [r1, #0]
 8014b6c:	1bba      	subs	r2, r7, r6
 8014b6e:	9201      	str	r2, [sp, #4]
 8014b70:	2200      	movs	r2, #0
 8014b72:	079b      	lsls	r3, r3, #30
 8014b74:	d100      	bne.n	8014b78 <__sflush_r+0xdc>
 8014b76:	694a      	ldr	r2, [r1, #20]
 8014b78:	60a2      	str	r2, [r4, #8]
 8014b7a:	9b01      	ldr	r3, [sp, #4]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	dd99      	ble.n	8014ab4 <__sflush_r+0x18>
 8014b80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014b82:	0032      	movs	r2, r6
 8014b84:	001f      	movs	r7, r3
 8014b86:	0028      	movs	r0, r5
 8014b88:	9b01      	ldr	r3, [sp, #4]
 8014b8a:	6a21      	ldr	r1, [r4, #32]
 8014b8c:	47b8      	blx	r7
 8014b8e:	2800      	cmp	r0, #0
 8014b90:	dc06      	bgt.n	8014ba0 <__sflush_r+0x104>
 8014b92:	2340      	movs	r3, #64	; 0x40
 8014b94:	2001      	movs	r0, #1
 8014b96:	89a2      	ldrh	r2, [r4, #12]
 8014b98:	4240      	negs	r0, r0
 8014b9a:	4313      	orrs	r3, r2
 8014b9c:	81a3      	strh	r3, [r4, #12]
 8014b9e:	e78a      	b.n	8014ab6 <__sflush_r+0x1a>
 8014ba0:	9b01      	ldr	r3, [sp, #4]
 8014ba2:	1836      	adds	r6, r6, r0
 8014ba4:	1a1b      	subs	r3, r3, r0
 8014ba6:	9301      	str	r3, [sp, #4]
 8014ba8:	e7e7      	b.n	8014b7a <__sflush_r+0xde>
 8014baa:	46c0      	nop			; (mov r8, r8)
 8014bac:	dfbffffe 	.word	0xdfbffffe

08014bb0 <_fflush_r>:
 8014bb0:	690b      	ldr	r3, [r1, #16]
 8014bb2:	b570      	push	{r4, r5, r6, lr}
 8014bb4:	0005      	movs	r5, r0
 8014bb6:	000c      	movs	r4, r1
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d102      	bne.n	8014bc2 <_fflush_r+0x12>
 8014bbc:	2500      	movs	r5, #0
 8014bbe:	0028      	movs	r0, r5
 8014bc0:	bd70      	pop	{r4, r5, r6, pc}
 8014bc2:	2800      	cmp	r0, #0
 8014bc4:	d004      	beq.n	8014bd0 <_fflush_r+0x20>
 8014bc6:	6a03      	ldr	r3, [r0, #32]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d101      	bne.n	8014bd0 <_fflush_r+0x20>
 8014bcc:	f7ff fa80 	bl	80140d0 <__sinit>
 8014bd0:	220c      	movs	r2, #12
 8014bd2:	5ea3      	ldrsh	r3, [r4, r2]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d0f1      	beq.n	8014bbc <_fflush_r+0xc>
 8014bd8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014bda:	07d2      	lsls	r2, r2, #31
 8014bdc:	d404      	bmi.n	8014be8 <_fflush_r+0x38>
 8014bde:	059b      	lsls	r3, r3, #22
 8014be0:	d402      	bmi.n	8014be8 <_fflush_r+0x38>
 8014be2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014be4:	f7ff fbe1 	bl	80143aa <__retarget_lock_acquire_recursive>
 8014be8:	0028      	movs	r0, r5
 8014bea:	0021      	movs	r1, r4
 8014bec:	f7ff ff56 	bl	8014a9c <__sflush_r>
 8014bf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014bf2:	0005      	movs	r5, r0
 8014bf4:	07db      	lsls	r3, r3, #31
 8014bf6:	d4e2      	bmi.n	8014bbe <_fflush_r+0xe>
 8014bf8:	89a3      	ldrh	r3, [r4, #12]
 8014bfa:	059b      	lsls	r3, r3, #22
 8014bfc:	d4df      	bmi.n	8014bbe <_fflush_r+0xe>
 8014bfe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014c00:	f7ff fbd4 	bl	80143ac <__retarget_lock_release_recursive>
 8014c04:	e7db      	b.n	8014bbe <_fflush_r+0xe>

08014c06 <__swbuf_r>:
 8014c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c08:	0006      	movs	r6, r0
 8014c0a:	000d      	movs	r5, r1
 8014c0c:	0014      	movs	r4, r2
 8014c0e:	2800      	cmp	r0, #0
 8014c10:	d004      	beq.n	8014c1c <__swbuf_r+0x16>
 8014c12:	6a03      	ldr	r3, [r0, #32]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d101      	bne.n	8014c1c <__swbuf_r+0x16>
 8014c18:	f7ff fa5a 	bl	80140d0 <__sinit>
 8014c1c:	69a3      	ldr	r3, [r4, #24]
 8014c1e:	60a3      	str	r3, [r4, #8]
 8014c20:	89a3      	ldrh	r3, [r4, #12]
 8014c22:	071b      	lsls	r3, r3, #28
 8014c24:	d528      	bpl.n	8014c78 <__swbuf_r+0x72>
 8014c26:	6923      	ldr	r3, [r4, #16]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d025      	beq.n	8014c78 <__swbuf_r+0x72>
 8014c2c:	6923      	ldr	r3, [r4, #16]
 8014c2e:	6820      	ldr	r0, [r4, #0]
 8014c30:	b2ef      	uxtb	r7, r5
 8014c32:	1ac0      	subs	r0, r0, r3
 8014c34:	6963      	ldr	r3, [r4, #20]
 8014c36:	b2ed      	uxtb	r5, r5
 8014c38:	4283      	cmp	r3, r0
 8014c3a:	dc05      	bgt.n	8014c48 <__swbuf_r+0x42>
 8014c3c:	0021      	movs	r1, r4
 8014c3e:	0030      	movs	r0, r6
 8014c40:	f7ff ffb6 	bl	8014bb0 <_fflush_r>
 8014c44:	2800      	cmp	r0, #0
 8014c46:	d11d      	bne.n	8014c84 <__swbuf_r+0x7e>
 8014c48:	68a3      	ldr	r3, [r4, #8]
 8014c4a:	3001      	adds	r0, #1
 8014c4c:	3b01      	subs	r3, #1
 8014c4e:	60a3      	str	r3, [r4, #8]
 8014c50:	6823      	ldr	r3, [r4, #0]
 8014c52:	1c5a      	adds	r2, r3, #1
 8014c54:	6022      	str	r2, [r4, #0]
 8014c56:	701f      	strb	r7, [r3, #0]
 8014c58:	6963      	ldr	r3, [r4, #20]
 8014c5a:	4283      	cmp	r3, r0
 8014c5c:	d004      	beq.n	8014c68 <__swbuf_r+0x62>
 8014c5e:	89a3      	ldrh	r3, [r4, #12]
 8014c60:	07db      	lsls	r3, r3, #31
 8014c62:	d507      	bpl.n	8014c74 <__swbuf_r+0x6e>
 8014c64:	2d0a      	cmp	r5, #10
 8014c66:	d105      	bne.n	8014c74 <__swbuf_r+0x6e>
 8014c68:	0021      	movs	r1, r4
 8014c6a:	0030      	movs	r0, r6
 8014c6c:	f7ff ffa0 	bl	8014bb0 <_fflush_r>
 8014c70:	2800      	cmp	r0, #0
 8014c72:	d107      	bne.n	8014c84 <__swbuf_r+0x7e>
 8014c74:	0028      	movs	r0, r5
 8014c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c78:	0021      	movs	r1, r4
 8014c7a:	0030      	movs	r0, r6
 8014c7c:	f000 f806 	bl	8014c8c <__swsetup_r>
 8014c80:	2800      	cmp	r0, #0
 8014c82:	d0d3      	beq.n	8014c2c <__swbuf_r+0x26>
 8014c84:	2501      	movs	r5, #1
 8014c86:	426d      	negs	r5, r5
 8014c88:	e7f4      	b.n	8014c74 <__swbuf_r+0x6e>
	...

08014c8c <__swsetup_r>:
 8014c8c:	4b30      	ldr	r3, [pc, #192]	; (8014d50 <__swsetup_r+0xc4>)
 8014c8e:	b570      	push	{r4, r5, r6, lr}
 8014c90:	0005      	movs	r5, r0
 8014c92:	6818      	ldr	r0, [r3, #0]
 8014c94:	000c      	movs	r4, r1
 8014c96:	2800      	cmp	r0, #0
 8014c98:	d004      	beq.n	8014ca4 <__swsetup_r+0x18>
 8014c9a:	6a03      	ldr	r3, [r0, #32]
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d101      	bne.n	8014ca4 <__swsetup_r+0x18>
 8014ca0:	f7ff fa16 	bl	80140d0 <__sinit>
 8014ca4:	230c      	movs	r3, #12
 8014ca6:	5ee2      	ldrsh	r2, [r4, r3]
 8014ca8:	b293      	uxth	r3, r2
 8014caa:	0711      	lsls	r1, r2, #28
 8014cac:	d423      	bmi.n	8014cf6 <__swsetup_r+0x6a>
 8014cae:	06d9      	lsls	r1, r3, #27
 8014cb0:	d407      	bmi.n	8014cc2 <__swsetup_r+0x36>
 8014cb2:	2309      	movs	r3, #9
 8014cb4:	2001      	movs	r0, #1
 8014cb6:	602b      	str	r3, [r5, #0]
 8014cb8:	3337      	adds	r3, #55	; 0x37
 8014cba:	4313      	orrs	r3, r2
 8014cbc:	81a3      	strh	r3, [r4, #12]
 8014cbe:	4240      	negs	r0, r0
 8014cc0:	bd70      	pop	{r4, r5, r6, pc}
 8014cc2:	075b      	lsls	r3, r3, #29
 8014cc4:	d513      	bpl.n	8014cee <__swsetup_r+0x62>
 8014cc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014cc8:	2900      	cmp	r1, #0
 8014cca:	d008      	beq.n	8014cde <__swsetup_r+0x52>
 8014ccc:	0023      	movs	r3, r4
 8014cce:	3344      	adds	r3, #68	; 0x44
 8014cd0:	4299      	cmp	r1, r3
 8014cd2:	d002      	beq.n	8014cda <__swsetup_r+0x4e>
 8014cd4:	0028      	movs	r0, r5
 8014cd6:	f7ff fbd3 	bl	8014480 <_free_r>
 8014cda:	2300      	movs	r3, #0
 8014cdc:	6363      	str	r3, [r4, #52]	; 0x34
 8014cde:	2224      	movs	r2, #36	; 0x24
 8014ce0:	89a3      	ldrh	r3, [r4, #12]
 8014ce2:	4393      	bics	r3, r2
 8014ce4:	81a3      	strh	r3, [r4, #12]
 8014ce6:	2300      	movs	r3, #0
 8014ce8:	6063      	str	r3, [r4, #4]
 8014cea:	6923      	ldr	r3, [r4, #16]
 8014cec:	6023      	str	r3, [r4, #0]
 8014cee:	2308      	movs	r3, #8
 8014cf0:	89a2      	ldrh	r2, [r4, #12]
 8014cf2:	4313      	orrs	r3, r2
 8014cf4:	81a3      	strh	r3, [r4, #12]
 8014cf6:	6923      	ldr	r3, [r4, #16]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d10b      	bne.n	8014d14 <__swsetup_r+0x88>
 8014cfc:	21a0      	movs	r1, #160	; 0xa0
 8014cfe:	2280      	movs	r2, #128	; 0x80
 8014d00:	89a3      	ldrh	r3, [r4, #12]
 8014d02:	0089      	lsls	r1, r1, #2
 8014d04:	0092      	lsls	r2, r2, #2
 8014d06:	400b      	ands	r3, r1
 8014d08:	4293      	cmp	r3, r2
 8014d0a:	d003      	beq.n	8014d14 <__swsetup_r+0x88>
 8014d0c:	0021      	movs	r1, r4
 8014d0e:	0028      	movs	r0, r5
 8014d10:	f000 f854 	bl	8014dbc <__smakebuf_r>
 8014d14:	220c      	movs	r2, #12
 8014d16:	5ea3      	ldrsh	r3, [r4, r2]
 8014d18:	2001      	movs	r0, #1
 8014d1a:	001a      	movs	r2, r3
 8014d1c:	b299      	uxth	r1, r3
 8014d1e:	4002      	ands	r2, r0
 8014d20:	4203      	tst	r3, r0
 8014d22:	d00f      	beq.n	8014d44 <__swsetup_r+0xb8>
 8014d24:	2200      	movs	r2, #0
 8014d26:	60a2      	str	r2, [r4, #8]
 8014d28:	6962      	ldr	r2, [r4, #20]
 8014d2a:	4252      	negs	r2, r2
 8014d2c:	61a2      	str	r2, [r4, #24]
 8014d2e:	2000      	movs	r0, #0
 8014d30:	6922      	ldr	r2, [r4, #16]
 8014d32:	4282      	cmp	r2, r0
 8014d34:	d1c4      	bne.n	8014cc0 <__swsetup_r+0x34>
 8014d36:	0609      	lsls	r1, r1, #24
 8014d38:	d5c2      	bpl.n	8014cc0 <__swsetup_r+0x34>
 8014d3a:	2240      	movs	r2, #64	; 0x40
 8014d3c:	4313      	orrs	r3, r2
 8014d3e:	81a3      	strh	r3, [r4, #12]
 8014d40:	3801      	subs	r0, #1
 8014d42:	e7bd      	b.n	8014cc0 <__swsetup_r+0x34>
 8014d44:	0788      	lsls	r0, r1, #30
 8014d46:	d400      	bmi.n	8014d4a <__swsetup_r+0xbe>
 8014d48:	6962      	ldr	r2, [r4, #20]
 8014d4a:	60a2      	str	r2, [r4, #8]
 8014d4c:	e7ef      	b.n	8014d2e <__swsetup_r+0xa2>
 8014d4e:	46c0      	nop			; (mov r8, r8)
 8014d50:	20000080 	.word	0x20000080

08014d54 <memchr>:
 8014d54:	b2c9      	uxtb	r1, r1
 8014d56:	1882      	adds	r2, r0, r2
 8014d58:	4290      	cmp	r0, r2
 8014d5a:	d101      	bne.n	8014d60 <memchr+0xc>
 8014d5c:	2000      	movs	r0, #0
 8014d5e:	4770      	bx	lr
 8014d60:	7803      	ldrb	r3, [r0, #0]
 8014d62:	428b      	cmp	r3, r1
 8014d64:	d0fb      	beq.n	8014d5e <memchr+0xa>
 8014d66:	3001      	adds	r0, #1
 8014d68:	e7f6      	b.n	8014d58 <memchr+0x4>
	...

08014d6c <__swhatbuf_r>:
 8014d6c:	b570      	push	{r4, r5, r6, lr}
 8014d6e:	000e      	movs	r6, r1
 8014d70:	001d      	movs	r5, r3
 8014d72:	230e      	movs	r3, #14
 8014d74:	5ec9      	ldrsh	r1, [r1, r3]
 8014d76:	0014      	movs	r4, r2
 8014d78:	b096      	sub	sp, #88	; 0x58
 8014d7a:	2900      	cmp	r1, #0
 8014d7c:	da0c      	bge.n	8014d98 <__swhatbuf_r+0x2c>
 8014d7e:	89b2      	ldrh	r2, [r6, #12]
 8014d80:	2380      	movs	r3, #128	; 0x80
 8014d82:	0011      	movs	r1, r2
 8014d84:	4019      	ands	r1, r3
 8014d86:	421a      	tst	r2, r3
 8014d88:	d013      	beq.n	8014db2 <__swhatbuf_r+0x46>
 8014d8a:	2100      	movs	r1, #0
 8014d8c:	3b40      	subs	r3, #64	; 0x40
 8014d8e:	2000      	movs	r0, #0
 8014d90:	6029      	str	r1, [r5, #0]
 8014d92:	6023      	str	r3, [r4, #0]
 8014d94:	b016      	add	sp, #88	; 0x58
 8014d96:	bd70      	pop	{r4, r5, r6, pc}
 8014d98:	466a      	mov	r2, sp
 8014d9a:	f000 f84d 	bl	8014e38 <_fstat_r>
 8014d9e:	2800      	cmp	r0, #0
 8014da0:	dbed      	blt.n	8014d7e <__swhatbuf_r+0x12>
 8014da2:	23f0      	movs	r3, #240	; 0xf0
 8014da4:	9901      	ldr	r1, [sp, #4]
 8014da6:	021b      	lsls	r3, r3, #8
 8014da8:	4019      	ands	r1, r3
 8014daa:	4b03      	ldr	r3, [pc, #12]	; (8014db8 <__swhatbuf_r+0x4c>)
 8014dac:	18c9      	adds	r1, r1, r3
 8014dae:	424b      	negs	r3, r1
 8014db0:	4159      	adcs	r1, r3
 8014db2:	2380      	movs	r3, #128	; 0x80
 8014db4:	00db      	lsls	r3, r3, #3
 8014db6:	e7ea      	b.n	8014d8e <__swhatbuf_r+0x22>
 8014db8:	ffffe000 	.word	0xffffe000

08014dbc <__smakebuf_r>:
 8014dbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014dbe:	2602      	movs	r6, #2
 8014dc0:	898b      	ldrh	r3, [r1, #12]
 8014dc2:	0005      	movs	r5, r0
 8014dc4:	000c      	movs	r4, r1
 8014dc6:	4233      	tst	r3, r6
 8014dc8:	d006      	beq.n	8014dd8 <__smakebuf_r+0x1c>
 8014dca:	0023      	movs	r3, r4
 8014dcc:	3347      	adds	r3, #71	; 0x47
 8014dce:	6023      	str	r3, [r4, #0]
 8014dd0:	6123      	str	r3, [r4, #16]
 8014dd2:	2301      	movs	r3, #1
 8014dd4:	6163      	str	r3, [r4, #20]
 8014dd6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8014dd8:	466a      	mov	r2, sp
 8014dda:	ab01      	add	r3, sp, #4
 8014ddc:	f7ff ffc6 	bl	8014d6c <__swhatbuf_r>
 8014de0:	9900      	ldr	r1, [sp, #0]
 8014de2:	0007      	movs	r7, r0
 8014de4:	0028      	movs	r0, r5
 8014de6:	f7ff f851 	bl	8013e8c <_malloc_r>
 8014dea:	2800      	cmp	r0, #0
 8014dec:	d108      	bne.n	8014e00 <__smakebuf_r+0x44>
 8014dee:	220c      	movs	r2, #12
 8014df0:	5ea3      	ldrsh	r3, [r4, r2]
 8014df2:	059a      	lsls	r2, r3, #22
 8014df4:	d4ef      	bmi.n	8014dd6 <__smakebuf_r+0x1a>
 8014df6:	2203      	movs	r2, #3
 8014df8:	4393      	bics	r3, r2
 8014dfa:	431e      	orrs	r6, r3
 8014dfc:	81a6      	strh	r6, [r4, #12]
 8014dfe:	e7e4      	b.n	8014dca <__smakebuf_r+0xe>
 8014e00:	2380      	movs	r3, #128	; 0x80
 8014e02:	89a2      	ldrh	r2, [r4, #12]
 8014e04:	6020      	str	r0, [r4, #0]
 8014e06:	4313      	orrs	r3, r2
 8014e08:	81a3      	strh	r3, [r4, #12]
 8014e0a:	9b00      	ldr	r3, [sp, #0]
 8014e0c:	6120      	str	r0, [r4, #16]
 8014e0e:	6163      	str	r3, [r4, #20]
 8014e10:	9b01      	ldr	r3, [sp, #4]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d00c      	beq.n	8014e30 <__smakebuf_r+0x74>
 8014e16:	0028      	movs	r0, r5
 8014e18:	230e      	movs	r3, #14
 8014e1a:	5ee1      	ldrsh	r1, [r4, r3]
 8014e1c:	f000 f81e 	bl	8014e5c <_isatty_r>
 8014e20:	2800      	cmp	r0, #0
 8014e22:	d005      	beq.n	8014e30 <__smakebuf_r+0x74>
 8014e24:	2303      	movs	r3, #3
 8014e26:	89a2      	ldrh	r2, [r4, #12]
 8014e28:	439a      	bics	r2, r3
 8014e2a:	3b02      	subs	r3, #2
 8014e2c:	4313      	orrs	r3, r2
 8014e2e:	81a3      	strh	r3, [r4, #12]
 8014e30:	89a3      	ldrh	r3, [r4, #12]
 8014e32:	433b      	orrs	r3, r7
 8014e34:	81a3      	strh	r3, [r4, #12]
 8014e36:	e7ce      	b.n	8014dd6 <__smakebuf_r+0x1a>

08014e38 <_fstat_r>:
 8014e38:	2300      	movs	r3, #0
 8014e3a:	b570      	push	{r4, r5, r6, lr}
 8014e3c:	4d06      	ldr	r5, [pc, #24]	; (8014e58 <_fstat_r+0x20>)
 8014e3e:	0004      	movs	r4, r0
 8014e40:	0008      	movs	r0, r1
 8014e42:	0011      	movs	r1, r2
 8014e44:	602b      	str	r3, [r5, #0]
 8014e46:	f7ee f944 	bl	80030d2 <_fstat>
 8014e4a:	1c43      	adds	r3, r0, #1
 8014e4c:	d103      	bne.n	8014e56 <_fstat_r+0x1e>
 8014e4e:	682b      	ldr	r3, [r5, #0]
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d000      	beq.n	8014e56 <_fstat_r+0x1e>
 8014e54:	6023      	str	r3, [r4, #0]
 8014e56:	bd70      	pop	{r4, r5, r6, pc}
 8014e58:	20002898 	.word	0x20002898

08014e5c <_isatty_r>:
 8014e5c:	2300      	movs	r3, #0
 8014e5e:	b570      	push	{r4, r5, r6, lr}
 8014e60:	4d06      	ldr	r5, [pc, #24]	; (8014e7c <_isatty_r+0x20>)
 8014e62:	0004      	movs	r4, r0
 8014e64:	0008      	movs	r0, r1
 8014e66:	602b      	str	r3, [r5, #0]
 8014e68:	f7ee f941 	bl	80030ee <_isatty>
 8014e6c:	1c43      	adds	r3, r0, #1
 8014e6e:	d103      	bne.n	8014e78 <_isatty_r+0x1c>
 8014e70:	682b      	ldr	r3, [r5, #0]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d000      	beq.n	8014e78 <_isatty_r+0x1c>
 8014e76:	6023      	str	r3, [r4, #0]
 8014e78:	bd70      	pop	{r4, r5, r6, pc}
 8014e7a:	46c0      	nop			; (mov r8, r8)
 8014e7c:	20002898 	.word	0x20002898

08014e80 <_init>:
 8014e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e82:	46c0      	nop			; (mov r8, r8)
 8014e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014e86:	bc08      	pop	{r3}
 8014e88:	469e      	mov	lr, r3
 8014e8a:	4770      	bx	lr

08014e8c <_fini>:
 8014e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e8e:	46c0      	nop			; (mov r8, r8)
 8014e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014e92:	bc08      	pop	{r3}
 8014e94:	469e      	mov	lr, r3
 8014e96:	4770      	bx	lr
